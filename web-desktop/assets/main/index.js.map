{"version":3,"sources":["assets/script/extend/audio/AudioManager.ts","assets/script/scenes/match/grid/availableSwapInfo/AvailableSwapInfo.ts","assets/script/extend/identify/behaviourIdentify/BehaviourDefines.ts","assets/script/config/CFGTripleLevelGrass.ts","assets/script/config/CFGTripleLevelOrder.ts","assets/script/config/CFGTripleLevelPath.ts","assets/script/config/CFGTripleLevelPopsicles.ts","assets/script/config/CFGTripleLevel.ts","assets/script/config/CFGTripleMapTileset.ts","assets/script/config/CFGTripleMap.ts","assets/script/scenes/match/entity/cell/CellBase.ts","assets/script/scenes/match/entity/cell/CellConveyer.ts","assets/script/scenes/match/entity/cell/CellFactory.ts","assets/script/scenes/match/entity/cell/CellMovablePlate.ts","assets/script/scenes/match/entity/cell/CellNormal.ts","assets/script/scenes/match/userinterface/CollectedTrainSupplyBar.ts","assets/script/scenes/match/userinterface/CollectedTrainSupplyItem.ts","assets/script/scenes/match/defines/CollectionGroupID.ts","assets/script/scenes/match/defines/CollectionID.ts","assets/script/scenes/match/userinterface/CompleteBanner.ts","assets/script/extend/action/CurveToAction.ts","assets/script/define/EMatchType.ts","assets/script/define/EViewZIndex.ts","assets/script/scenes/match/entity/EntityBase.ts","assets/script/scenes/match/event/EntityEventBase.ts","assets/script/scenes/match/event/EntityEventChanged.ts","assets/script/scenes/match/defines/EntityGroupID.ts","assets/script/scenes/match/defines/EntityID.ts","assets/script/scenes/match/entity/EntityPrefabNodePool.ts","assets/script/scenes/match/entity/state/EntityStateBase.ts","assets/script/scenes/match/entity/state/EntityStateMachine.ts","assets/script/scenes/match/entity/state/concreteState/EntityStateWait.ts","assets/script/scenes/match/entity/fence/FenceBase.ts","assets/script/scenes/match/entity/fence/FenceFactory.ts","assets/script/scenes/match/entity/fence/FencePos.ts","assets/script/scenes/match/entity/fence/FenceVine.ts","assets/script/scenes/match/entity/floor/FloorBase.ts","assets/script/scenes/match/entity/floor/FloorChanger.ts","assets/script/scenes/match/entity/floor/FloorDoubler.ts","assets/script/scenes/match/entity/floor/FloorFactory.ts","assets/script/scenes/match/entity/floor/FloorGrass.ts","assets/script/scenes/match/entity/floor/FloorIce.ts","assets/script/scenes/match/entity/floor/FloorRoad.ts","assets/script/scenes/match/entity/flyer/FlyerAnimation.ts","assets/script/scenes/match/entity/flyer/FlyerBase.ts","assets/script/scenes/match/entity/flyer/FlyerBomb.ts","assets/script/scenes/match/entity/flyer/FlyerBullet.ts","assets/script/scenes/match/entity/flyer/FlyerCannon.ts","assets/script/scenes/match/entity/flyer/FlyerChargeEntity.ts","assets/script/scenes/match/entity/flyer/FlyerCollectedEntity.ts","assets/script/scenes/match/entity/flyer/FlyerCollectedSupply.ts","assets/script/scenes/match/entity/flyer/FlyerComboWord.ts","assets/script/scenes/match/entity/flyer/FlyerFireworksMissile.ts","assets/script/scenes/match/entity/flyer/FlyerHammer.ts","assets/script/scenes/match/entity/flyer/FlyerLaser.ts","assets/script/scenes/match/entity/flyer/FlyerMissile.ts","assets/script/scenes/match/entity/flyer/FlyerMoreStep.ts","assets/script/scenes/match/entity/flyer/FlyerMower.ts","assets/script/scenes/match/entity/flyer/FlyerNuclear.ts","assets/script/scenes/match/entity/flyer/FlyerPopsicleBomb.ts","assets/script/scenes/match/entity/flyer/FlyerPopsicleLine.ts","assets/script/scenes/match/entity/flyer/FlyerScoreLabel.ts","assets/script/scenes/match/entity/flyer/FlyerScore.ts","assets/script/scenes/match/entity/frame/FrameBase.ts","assets/script/scenes/match/entity/frame/FrameNormal.ts","assets/script/define/GameConfig.ts","assets/script/scenes/match/userinterface/GameResultPanel/GameCongratulationPanel.ts","assets/script/define/GameCurrencyType.ts","assets/script/scenes/match/userinterface/GameResultPanel/GameEndItem.ts","assets/script/extend/utils/GameMath.ts","assets/script/scenes/match/userinterface/GameNoMoreStepPanel.ts","assets/script/scenes/match/userinterface/GameResultPanel/GameOverPanel.ts","assets/script/scenes/match/userinterface/GameResultPanel/GameResultBasePanel.ts","assets/script/scenes/match/GameSceneBase.ts","assets/script/scenes/match/userinterface/GameStalematePanel.ts","assets/script/scenes/match/statistics/GameStatistics.ts","assets/script/scenes/match/statistics/GameTarget/GameTargetBase.ts","assets/script/scenes/match/statistics/GameTarget/GameTargetSingle.ts","assets/script/scenes/match/userinterface/GearBar.ts","assets/script/define/GearID.ts","assets/script/scenes/match/userinterface/GearItem.ts","assets/script/scenes/match/grid/GridBase.ts","assets/script/scenes/match/commond/GridCommandPair.ts","assets/script/scenes/match/commond/GridCommand.ts","assets/script/scenes/match/grid/state/concreteState/GridStateAppear.ts","assets/script/scenes/match/grid/state/concreteState/GridStateAutoActivateBomb.ts","assets/script/scenes/match/grid/state/GridStateBase.ts","assets/script/scenes/match/grid/state/concreteState/GridStateBousTime.ts","assets/script/scenes/match/grid/state/concreteState/GridStateChanger.ts","assets/script/scenes/match/grid/state/concreteState/GridStateCollection.ts","assets/script/scenes/match/grid/state/concreteState/GridStateComboWord.ts","assets/script/scenes/match/grid/state/concreteState/GridStateCompleteBanner.ts","assets/script/scenes/match/grid/state/concreteState/GridStateComplete.ts","assets/script/scenes/match/grid/state/concreteState/GridStateCongratulation.ts","assets/script/scenes/match/grid/state/concreteState/GridStateConveyer.ts","assets/script/scenes/match/grid/state/concreteState/GridStateCreate.ts","assets/script/scenes/match/grid/state/concreteState/GridStateCrossBomb.ts","assets/script/scenes/match/grid/state/concreteState/GridStateDisappear.ts","assets/script/scenes/match/grid/state/concreteState/GridStateDrop.ts","assets/script/scenes/match/grid/state/concreteState/GridStateFailSummary.ts","assets/script/scenes/match/grid/state/concreteState/GridStateFail.ts","assets/script/scenes/match/grid/state/concreteState/GridStateForceClean.ts","assets/script/scenes/match/grid/state/concreteState/GridStateForceSwap.ts","assets/script/scenes/match/grid/state/concreteState/GridStateHoney.ts","assets/script/scenes/match/grid/state/concreteState/GridStateLaunchGears.ts","assets/script/scenes/match/grid/state/concreteState/GridStateLaunchResidentGear.ts","assets/script/scenes/match/grid/state/GridStateMachine.ts","assets/script/scenes/match/grid/state/concreteState/GridStateMagicCrystal.ts","assets/script/scenes/match/grid/state/concreteState/GridStateMatch.ts","assets/script/scenes/match/grid/state/concreteState/GridStateNoMoreStep.ts","assets/script/scenes/match/grid/state/concreteState/GridStateNull.ts","assets/script/scenes/match/grid/state/concreteState/GridStatePrepare.ts","assets/script/scenes/match/grid/state/concreteState/GridStateShuffle.ts","assets/script/scenes/match/grid/state/concreteState/GridStateStalemate.ts","assets/script/scenes/match/grid/state/concreteState/GridStateSwapNeighbour.ts","assets/script/scenes/match/commond/Heap.ts","assets/script/base/IGame.ts","assets/script/scenes/match/defines/IdentifierManager.ts","assets/script/extend/identify/nodeIdentify/IdentifyNodeManager.ts","assets/script/scenes/match/entity/item/special/ItemBalloon.ts","assets/script/scenes/match/entity/item/ItemBase.ts","assets/script/scenes/match/entity/item/special/ItemBlock.ts","assets/script/scenes/match/entity/item/color/bomb/ItemBombBase.ts","assets/script/scenes/match/entity/item/color/bomb/ItemBombButterfly.ts","assets/script/scenes/match/entity/item/color/bomb/ItemBombColumn.ts","assets/script/scenes/match/entity/item/color/bomb/ItemBombCross.ts","assets/script/scenes/match/entity/item/color/bomb/ItemBombRainbow.ts","assets/script/scenes/match/entity/item/color/bomb/ItemBombRange.ts","assets/script/scenes/match/entity/item/color/bomb/ItemBombRow.ts","assets/script/scenes/match/entity/item/special/ItemBone.ts","assets/script/scenes/match/entity/item/special/ItemChestnut.ts","assets/script/scenes/match/entity/item/special/ItemDogHouse.ts","assets/script/scenes/match/entity/item/color/ItemDogPaw.ts","assets/script/scenes/match/entity/item/special/ItemDoughnut.ts","assets/script/scenes/match/entity/item/ItemFactory.ts","assets/script/scenes/match/entity/item/special/ItemFireWormBottle.ts","assets/script/scenes/match/entity/item/special/ItemFireworks.ts","assets/script/scenes/match/entity/item/special/ItemFruitCake.ts","assets/script/scenes/match/entity/item/special/ItemHoneyComb.ts","assets/script/scenes/match/defines/ItemInfoManager.ts","assets/script/scenes/match/defines/ItemInfo.ts","assets/script/scenes/match/entity/item/special/ItemJamBottle.ts","assets/script/scenes/match/entity/item/special/ItemMagicCrystal.ts","assets/script/scenes/match/entity/item/special/ItemMower.ts","assets/script/scenes/match/entity/item/color/ItemNormal.ts","assets/script/scenes/match/entity/item/special/ItemPuppy.ts","assets/script/scenes/match/entity/item/state/ItemStateChangeColor.ts","assets/script/scenes/match/entity/item/state/ItemStateDrop.ts","assets/script/scenes/match/entity/item/state/ItemStateGenerate.ts","assets/script/scenes/match/entity/item/state/ItemStateReplace.ts","assets/script/scenes/match/entity/item/state/ItemStateShuffle.ts","assets/script/scenes/match/entity/item/state/ItemStateSwap.ts","assets/script/scenes/match/entity/item/special/ItemStatue.ts","assets/script/scenes/match/entity/item/special/ItemWatermelon.ts","assets/script/scenes/match/defines/KindID.ts","assets/script/scenes/match/userinterface/LevelSelectorPanel.ts","assets/script/loading_scene/LoadingScene.ts","assets/script/scenes/match/entity/marker/MarkerBase.ts","assets/script/scenes/match/entity/marker/MarkerNormal.ts","assets/script/scenes/match/MatchScene.ts","assets/script/extend/utils/MathUtils.ts","assets/script/scenes/match/userinterface/NoMoreStepBasePanel/NoMoreStepBasePanel.ts","assets/script/extend/action/OrbitTrack.ts","assets/script/base/Pair.ts","assets/script/scenes/match/entity/parasite/ParasiteBase.ts","assets/script/scenes/match/entity/parasite/ParasiteFactory.ts","assets/script/scenes/match/entity/parasite/ParasiteGiftBox.ts","assets/script/scenes/match/entity/parasite/ParasiteHoney.ts","assets/script/scenes/match/entity/parasite/ParasiteIceCube.ts","assets/script/scenes/match/entity/parasite/ParasiteShackle.ts","assets/script/scenes/match/entity/popsicle/PopsicleBase.ts","assets/script/scenes/match/entity/popsicle/PopsicleFactory.ts","assets/script/scenes/match/entity/popsicle/PopsicleLine.ts","assets/script/scenes/match/entity/popsicle/PopsicleNormal.ts","assets/script/scenes/match/entity/popsicle/PopsicleRange.ts","assets/script/scenes/match/defines/PowerID.ts","assets/script/scenes/match/userinterface/PowerupItem.ts","assets/script/component/RectangleClipper.ts","assets/script/scenes/match/entity/rug/RugBase.ts","assets/script/scenes/match/entity/rug/RugFactory.ts","assets/script/scenes/match/entity/rug/RugJam.ts","assets/script/scenes/match/userinterface/ScoreBar.ts","assets/script/scenes/match/userinterface/ShinningStar.ts","assets/script/scenes/match/userinterface/GameResultPanel/StarAndScoreFrame.ts","assets/script/scenes/match/fsm/StateMachineBase.ts","assets/script/scenes/match/userinterface/StepBar.ts","assets/script/extend/utils/StringUtil.ts","assets/script/scenes/match/defines/TMXConfigInfoKeys.ts","assets/script/extend/utils/TMXJsonPhraser.ts","assets/script/scenes/match/userinterface/TargetBanner.ts","assets/script/scenes/match/userinterface/TargetBar.ts","assets/script/scenes/match/userinterface/TargetItem.ts","assets/script/component/UIButtonExt.ts","assets/script/component/UINodeIdentifier.ts","assets/script/component/UISceneBase.ts","assets/script/component/UISpriteExt.ts","assets/migration/use_v2.1-2.2.1_cc.Toggle_event.js"],"names":["AudioInfo","this","MusicId","Music","Volume","Loop","exports","AudioManager","_AudioBGM","_AUdioRunTime","prototype","play","loop","bgm","succFunc","Mid","MusicUrl","cc","loader","getRes","_playAudio","loadRes","err","res","bind","musicUrl","volume","_shopBGM","audioEngine","_checkPlay","stopBGM","stop","resumeBGM","resume","setLoop","setVolume","stopAll","Date","getTime","getInstance","instance","default","Pair_1","require","GameMath_1","AvailableSwapBaseValue","AvailableSwapInfo","swapPair","Pair","INVALID_LOGICAL_POSITION","linkedPositions","value","create","BehaviourEvent","_super","__extends","_this","call","BehaviourEventName","behaviourName","event","Event","EventCustom","BehaviourID","GuideTapAnyWhere","GuideFinish","EnterMainSceneBegin","EnterMainSceneEnd","PetHouseOpenBegin","PetHouseOpenEnd","PetHouseCloseBegin","PetHouseCloseEnd","PrepareGameBegin","PrepareGameEnd","SelectedBeignLine","SelectedBeginRange","SelectedBeginRainbow","StartGameBegin","StartGameEnd","EnterFeedSceneBegin","EnterFeedSceneEnd","QuitFeedScene","EnterBathSceneBegin","EnterBathSceneEnd","QuitBathScene","EnterSleepSceneBegin","EnterSleepSceneEnd","QuitSleepScene","EnterDigGoldSceneBegin","EnterDigGoldSceneEnd","DigGoldSelectDogBegin","DigGoldSelectDogEnd","DigGoldBegin","DigGoldEnd","DigGoldRewardPanelOpenBegin","DigGoldRewardPanelOpenEnd","DigGoldRewardPanelCloseBegin","DigGoldRewardPanelCloseEnd","QuitDigGoldScene","UpgradePanelOpenBegin","UpgradePanelOpenEnd","UpgradePanelCloseBegin","UpgradePanelCloseEnd","GameSwapItemsBegin","GameSwapItemsEnd","GameUseHammerBegin","GameUseHammerEnd","GameUseBombBegin","GameUseBombEnd","GameUseSwapBegin","GameUseSwapSelectFirst","GameUseSwapEnd","CFGTripleLevelGrass","cfgPath","cfgObj","JsonAsset","json","getCongfigByLevelID","levelID","cfgList","_i","cfgList_1","length","obj","CFGTripleLevelOrder","CFGTripleLevelPath","CFGTripleLevelPopsicles","CFGTripleLevel","getCongfigByLevelNum","levelNum","CFGTripleMapTileset","getTilesetByName","tilesetName","_a","tmpObj","TilesetName","CFGTripleMap","getMapDataByMapId","mapId","mapStr","MapData","GridCommand_1","EntityGroupID_1","EntityID_1","IdentifierManager_1","TMXConfigInfoKeys_1","EntityBase_1","CellType","GenerateType","_decorator","ccclass","property","CellBase","apply","arguments","_cellType","None","_crystalAttackPriority","_isBoneCollector","_needGrass","_generateType","_generateCount","_dropEntityMap","_dropList","_dropIndex","_isWormholeEntrance","_wormholeDestination","Vec2","ZERO","_isWormholeExit","_wormholeSource","getCellType","getCrystalAttackPriority","setCrystalAttackPriority","priority","getIsBoneCollector","setIsBoneCollector","isBoneCollector","getNeedGrass","setNeedGrass","needGrass","getGenerateType","setGenerateType","generateType","getGenerateCount","setGenerateCount","generateCount","canGenerateItem","Default","Probabilistic","List","nextItemID","result","EntityID","getGrid","getGlobalRandomEntityID","grid","getRandomEntityID","getLimitedEntityMap","getLimitedGroupMap","name","entityID","getEntityIDFromString","groupID","getEntityGroupIDFromString","EntityGroupID","globalDropEntityMap","getDropEntityMap","basicEntityIDs","getEntityIDsFromEntityGroupID","ItemNormal","totalProbability","basicEntityIDs_1","entityID_1","dropValue","availableEntityIDs","randomValue","randomInt","sum","availableEntityIDs_1","entityID_2","basicEntityID","getCorrespondingNormlaEntityID","setDropEntityMap","dropEntityMap","getDropList","setDropList","dropList","getDropIndex","setDropIndex","dropIndex","getIsWormholeEntrance","setIsWormholeEntrance","isWormholeEntrance","getWormholeDestination","setWormholeDestination","wormholeDestination","getIsWormholeExit","setIsWormholeExit","isWormholeExit","getWormholeSource","setWormholeSource","wormholeSource","canHoldItem","canPassThrough","initDropEntityMap","keys","values","valuePair","phraseKeyValuePairs","Number","basicColorEntityIDs","basicColorEntityIDs_1","entityIDs","entityIDs_1","globalValue","dealWithConfigMap","config","crystalAttackPriority","CFG_MATIC_CRYSTAL_ATK_POINT","dropTypeString","CFG_DROP_KEY_TYPE","CFG_DROP_VALUE_TYPE_DEFAULT","CFG_DROP_VALUE_TYPE_NOT","CFG_DROP_VALUE_TYPE_PROB","types","CFG_DROP_KEY_BOX","CFG_DROP_KEY_PROB","CFG_DROP_KEY_NUM","isEmptyObject","CFG_DROP_VALUE_TYPE_LIST","clearArray","typesString","phraseTokens","types_1","typeName","push","isTop","CFG_DROP_KEY_IS_TOP","isBoneCollectorString","CFG_MARK_BONE_COLLECTOR_KEY_TYPE","CFG_MARK_BONE_COLLECTOR_VALUE_DEFAULT","wormHoleString","CFG_WORMHOLE_KEY_TYPE","CFG_WORMHOLE_VALUE_ENTRANCE","postalString","CFG_WORMHOLE_POSTAL_KEY_TYPE","postalPos","getVec2FromConfigString","CFG_WORMHOLE_VALUE_EXIT","CFG_WORMHOLE_VALUE_NONE","onConvey","canExcuteCommand","command","type","GridCommandType","LayoutGrass","canLayoutGrass","BombClean","canCleanByBomb","cleanColor","excuteCommand","cleanOption","EntityCleanOption","EntityCleanType","cleanRoot","createBombType","hitNeighbour","hitFloor","layoutGrass","onClean","_onClean","setImmuneDamage","getImmuneDamage","_canCleanByBomb","_canLayoutGrass","initCell","cellType","initEntity","EntityType","Cell","start","onDestroy","__decorate","CollectionID_1","EntityPrefabNodePool_1","CellBase_1","CellNormal_1","CellConveyerDirection","CellConveyer","_inDirection","_outDirection","_postalPos","clone","getCollectionID","CollectionID","getEntityID","Left","Right","CellConveyerL2R","Up","CellConveyerL2U","Down","CellConveyerL2D","CellConveyerR2L","CellConveyerR2U","CellConveyerR2D","CellConveyerU2L","CellConveyerU2R","CellConveyerU2D","CellConveyerD2L","CellConveyerD2R","CellConveyerD2U","getInDirection","setInDirection","direction","getOutDirection","setOutDirection","getPostalPos","setPostalPos","postal","configMap","conveyerString","CFG_CONVEYER_POSTAL_KEY_TYPE","CFG_CONVEYER_POSTAL_VALUE_KEY","getInLogicalPos","getLogicalPos","equals","cell","getCellAtLogicalPos","Conveyer","conveyer","add","v2","getOutLogicalPos","addSelf","getDoppelgangerInLogicalPos","getDoppelgangerOutLogicalPos","conveyerEntity","inPos","outPos","logicalPos","entity","getEntity","removeFromGrid","layer","getConveyerLayer","addChild","node","setPosition","getPixelPos","addObstructs","targetPos","action","sequence","moveTo","callFunc","setEntity","removeObstructs","runAction","conveyerDoppelganger","doppelganger_1","zIndex","getTopZOrder","destroy","conveyerTypes","Popsicle","Floor","Rug","Item","Parasite","doppelgangerInPos","doppelgangerOutPos","needDoppelganger","conveyerTypes_1","initConveyer","inDirection","outDirection","updatePuppet","createConveyer","className","prefabFileName","pool","component","getPrefabNodeWithFileNameAndClassName","CellConveyer_1","CellMovablePlate_1","CellFactory","generateCellWithEntityID","CellNormal","CellMovablePlate","generateCellWithKindID","kindID","getEntityIDFromKindID","_movePath","_moveInterval","_moveSteps","_hasFirstMove","_firstMoveSteps","_firstMoveInterval","_currentInterval","_currentPathIndex","init","MovablePlate","keyPoints","path","CFG_MOVABLE_PLATE_PATH_KEY_TYPE","count","key","index","pos","i","end","offset","sub","step","x","Math","abs","y","j","mul","pop","moveSteps","CFG_MOVABLE_PLATE_PATH_MOVE_TYPE","moveInterval","CFG_MOVABLE_PLATE_PATH_STEP_TYPE","firstMoveSteps","CFG_MOVABLE_PLATE_PATH_FIRST_MOVE_TYPE","firstMoveInterval","CFG_MOVABLE_PLATE_PATH_FIRST_STEP_TYPE","moveStep","movePath","pathCount","moveEntity","entityType","fristPos","removeFromGridAndAddToEffect","steps","callback","FloorGrass_1","Normal","item","getItemAtLogicalPos","parasite","getParasiteAtLogicalPos","hostCanDrop","getButterflyPriority","color","isGrassFloorAtLogicalPos","grass","setFloorAtLogicalPos","grow","onCollected","CollectedTrainSupplyItem_1","GameCurrencyType_1","GameSceneBase_1","CollectedTrainSupplyBar","itemNodes","_gameScene","_supplyItems","setSupplyData","data","amount","itemID","getItemWithSupplyItemID","setAmount","supplyItem","getItemID","getWorldPosWithSupplyItemID","parent","convertToWorldSpaceAR","getPosition","onLoad","canvas","find","getComponent","supplyItemIDs","GameCurrencyType","TrainFood","TrainSoap","TrainEyepatch","TrainHoe","GoldCoin","itemNode","setItemID","Node","Component","UISpriteExt_1","CollectedTrainSupplyItem","icon","amountLabel","_itemID","NoneType","_amount","frameName","src","getAmount","oldAmount","string","toString","stopActionByTag","scale","amountAction","scaleTo","easing","easeIn","easeOut","setTag","iconAction","Prefab","instantiate","Sprite","Label","CollectionGroupID","CollectionGroupIDManager","String_To_CollectionGroupID_Map","CollectionGroupID_To_CollectionIDs_Map","CollectionGroupID_To_FrameName_Map","initString_To_CollectionGroupID_Map","initCollectionGroupID_To_CollectionIDs_Map","initCollectionGroupID_To_FrameName_Map","ItemBombButterfly","ItemBombRow","ItemBombColumn","ItemBombCross","ItemBombRange","ItemPaw","ItemBombButterflyRed","ItemBombButterflyGreen","ItemBombButterflyBlue","ItemBombButterflyYellow","ItemBombButterflyOrange","ItemBombButterflyPurple","ItemBombRowRed","ItemBombRowGreen","ItemBombRowBlue","ItemBombRowYellow","ItemBombRowOrange","ItemBombRowPurple","ItemBombColumnRed","ItemBombColumnGreen","ItemBombColumnBlue","ItemBombColumnYellow","ItemBombColumnOrange","ItemBombColumnPurple","ItemBombCrossRed","ItemBombCrossGreen","ItemBombCrossBlue","ItemBombCrossYellow","ItemBombCrossOrange","ItemBombCrossPurple","ItemBombRangeRed","ItemBombRangeGreen","ItemBombRangeBlue","ItemBombRangeYellow","ItemBombRangeOrange","ItemBombRangePurple","ItemPawRed","ItemPawGreen","ItemPawBlue","ItemPawYellow","ItemPawOrange","ItemPawPurple","getCollectionGroupIDFromString","getFrameNameFromCollectionGroupID","rootPath","getCollectionIDsFromCollectionGroupID","getCollectionGroupIDFromCollectionID","collectionID","tempMap","hasOwnProperty","id","CollectionIDManager","String_To_CollectID_Map","CollectionID_To_FrameName_Map","initString_To_CollectID_Map","initCollectionID_To_FrameName_Map","PopsicleNormal","PopsicleBoom","PopsicleLine","FloorGrass","RugJam","ItemNormalRed","ItemNormalGreen","ItemNormalBlue","ItemNormalYellow","ItemNormalOrange","ItemNormalPurple","ItemPawChromatic","ItemBombRainbow","ItemBlock","ItemDoughnut","ItemWatermelon","ItemFruitCake","ItemBone","ItemChestnut","ItemPuppy","ItemStatue","ParasiteIceCube","ParasiteHoney","FlyerFireWorm","getCollectionIDFromString","getCollectionNameFromID","tmpMap","getFrameNameFromCollectionID","IGame_1","CompleteBanner","maskView","title","_completeCallback","_displayDuraion","CompleteBanner_1","level","completeCallback","hideLevel","gameScene","reportStepComplete","anim","Animation","playAudio","getMatchAudioFilePath","didAppear","on","onTouchStart","update","dt","director","getScheduler","getTimeScale","didDisappear","evt","CurveToAction","duration","starPoint","endPoint","dis","angleDes","atan2","PI","offsetR","floor","random","r","getDistance","rangle","x1","cos","y1","sin","bezier","bezierTo","createNotRandom","GameType","GameConfigModelType","EViewZIndex","PowerID_1","EntityStateWait_1","EntityStateMachine_1","EntityBase","_puppet","_stateMachine","_occupyArea","rect","_tileSize","size","_visible","_grid","_entityType","_entityColor","EntityColor","_fireWorksAttackedPriority","DEFAULT_FIREWORKS_ATTACKED_PRIORITY","_missileAttackedPriority","DEFAULT_MISSILE_PRIORITY","_immuneDamage","_prefabFileName","_path","getEntitySpriteFarme","spriteFrame","SpriteFrame","getPuppet","setPuppetSpriteFrameName","sprite","getFrameNameFromEntityID","getVisible","setVisible","visible","opacity","playAnimation","pauseAnimation","getAnimationState","pause","setCurrentAnimationTime","time","setCurrentTime","getCurrentAnimationClipName","clip","currentClip","getContentSize","setContentSize","getEntityComponent","getEntityType","collectFactor","getFloorAtLogicalPos","FloorDouble","chargeFlyer","createCollectedEntityFlyer","collectEntity","isTargetCollection","isTargetCollectionID","removeEntity","setPixelPos","shiftToEffectLayer","shiftEntityToEffectLayer","getEntityColor","setEntityColor","getFireWorksAttackedPriority","setFireWorksAttackedPriority","getMissileAttackedPriority","setMissileAttackedPriority","immuneDamage","getCurrentStateType","state","getCurrentState","getType","setCurrentState","fireworkAttackedPriority","CFG_FIREWORK_ATTACKED_PRIORITY","missileAttackedPriority","CFG_MISSILE_ATTACKED_PRIORITY","getPrefabFileName","setPrefabFileName","fileName","getProducedTrainSupplyMaps","getPowerID","PowerID","getScore","willLayoutGrass","getDefaultButterflyPriorityFromEntityID","origin","setLogicalPos","getBottomZOrder","contentSize","width","height","pixePos","getPixelPosFromLogicalPos","getTopZOrderForEnity","getBottomZOrderForEnity","getLogicalSize","getOccupyArea","getPath","addStepToPath","clearPath","getChildByName","getCellSize","setAnchorPoint","destoryWithRecycle","recycle","resetForRecycle","removeFromParent","putPrefabNode","angle","selfDestory","delayTime","selfHurt","EntityEventType","EntityEventBase","ENTITY_EVENT_KEY","_type","getEventType","EntityEventBase_1","EntityEventChanged","EntityChanged","_entity","EntityGroupIDManager","String_To_EntityGroupID_Map","EntityGroupID_To_EntityIDs_Map","EntityGroupID_To_FrameName_Map","initString_To_EntityGroupID_Map","initEntityGroupID_To_EntityIDs_Map","initEntityGroupID_To_FrameName_Map","ParasiteGiftBox","ParasiteGiftBoxRed","ParasiteGiftBoxGreen","ParasiteGiftBoxBlue","ParasiteGiftBoxYellow","ParasiteGiftBoxOrange","ParasiteGiftBoxPurple","getFrameNameFromEntityGroupID","getEntityGroupIDFromEntityID","ItemBombBase_1","CleanType","CleanRoot","CleanColor","CreateBombType","HitNeighbour","HitFloor","cleanType","ItemBombType","EntityChangeOption","TargetID","CollectOld","targetID","collectOld","EntityChargeOption","ChargeID","ChargeAmount","chargeID","chargeAmount","EntityDropStepType","EntityDropStep","Type","LogicalPos","HurtAnimationInfo","FileName","EntityIDManager","String_To_EntityID_Map","EntityID_To_FrameName_Map","EntityID_To_ButterflyPriority_Map","EntityID_To_NormalEntityID_Map","EntityID_To_EntityColor_Map","EntityID_To_DieAnimationPath_Map","initString_To_EntityID_Map","initEntityID_To_FrameName_Map","initEntityID_To_ButterflyPriority_Map","initEntityID_To_NormalEntityID_Map","initEntityID_To_EntityColor_Map","initEntityID_To_DieAnimationPath_Map","FloorIceHp1","FloorIceHp2","FloorIceHp3","FloorIceHp4","FloorChangerRed","FloorChangerGreen","FloorChangerBlue","FloorChangerYellow","FloorChangerOrange","FloorChangerPurple","ItemBlockHp1","ItemBlockHp2","ItemBlockHp3","ItemBlockHp4","ItemBlockHp5","ItemBlockHp6","ItemDoughnutHp1","ItemDoughnutHp2","ItemDoughnutHp3","ItemMagicCrystal","ItemMowerUp","ItemHoneyComb","ItemJamBottle","ItemStatueHp1","ItemStatueHp2","ItemStatueHp3","ParasiteIceCubeHp1","ParasiteIceCubeHp2","ParasiteIceCubeHp3","ParasiteIceCubeHp4","ParasiteIceCubeHp5","ParasiteIceCubeHp6","ParasiteShackleHp1","ParasiteShackleHp2","ParasiteShackleHp3","ParasiteHoneyHp1","ParasiteHoneyHp2","ItemFireworksHp1","ItemFireworksHp2","ItemFireworksHp3","ItemFireworksHp4","PopsicleNormal_1x1","PopsicleNormal_1x2","PopsicleNormal_2x2","PopsicleNormal_2x3","PopsicleNormal_3x3","PopsicleNormal_3x4","PopsicleBoom_2x2","PopsicleBoom_1x1","FloorRoadLineVU","FloorRoadLineHR","FloorRoadLineVD","FloorRoadLineHL","FloorRoadTurnLdD","FloorRoadTurnLuL","FloorRoadTurnRuU","FloorRoadTurnRdR","FloorRoadTurnRdD","FloorRoadTurnRuR","FloorRoadTurnLuU","FloorRoadTurnLdL","FloorRoadStartPoint","ItemFireWormBottle","ItemMowerRight","ItemMowerDown","ItemMowerLeft","ItemBalloon","ItemDogHouse","MarkBoneCollector","MarkWormholeEntrance","MarkWormholeExit","FenceVineVertical","FenceVineHorizontal","MarkDropMachine","FlyerMissileRed","FlyerMissileGreen","FlyerMissileBlue","FlyerMissileYellow","FlyerMissileOrange","FlyerMissilePurple","FlyerCannonRed","FlyerCannonGreen","FlyerCannonBlue","FlyerCannonYellow","FlyerCannonOrange","FlyerCannonPurple","FlyerMower","Red","Green","Blue","Yellow","Orange","Purple","root","FlyerAnimationFloorIceDie","FlyerAnimationRugJamDie","FlyerAnimationItemNormalRedDie","FlyerAnimationItemNormalGreenDie","FlyerAnimationItemNormalBlueDie","FlyerAnimationItemNormalYellowDie","FlyerAnimationItemNormalOrangeDie","FlyerAnimationItemNormalPurpleDie","FlyerAnimationItemBlockDie","FlyerAnimationItemDoughnutDie","FlyerAnimationItemWatermelonDie","FlyerAnimationItemFruitCakeDie","FlyerAnimationItemFirewormBottleDie","FlyerAnimationItemChestnutDie","FlyerAnimationItemJamBottleDie","FlyerAnimationItemStatueDie","FlyerAnimationParasiteIceCubeDie","FlyerAnimationParasiteShackleDie","FlyerAnimationParasiteHoneyDie","FlyerAnimationParasiteGiftBoxRedDie","FlyerAnimationParasiteGiftBoxGreenDie","FlyerAnimationParasiteGiftBoxBlueDie","FlyerAnimationParasiteGiftBoxYellowDie","FlyerAnimationParasiteGiftBoxOrangeDie","FlyerAnimationParasiteGiftBoxPurpleDie","getHurtAnimationInfoFromEntityID","getEntityColorWithEntityID","EntityPrefabNodePool","_prefabNodePools","nodePool","get","addComponent","NodePool","put","clear","clearObject","EntityStateType","EntityStateBase","enter","delta","exit","StateMachineBase_1","EntityStateMachine","EntityStateBase_1","EntityStateWait","Wait","FencePos_1","FenceType","FenceBase","_fenceType","_fencePos","getFenceType","getFencePos","setFencePos","fencePos","pixelPosA","posA","pixelPosB","posB","center","initFence","fenceType","Fences","FenceVine_1","FenceFactory","generateItemWithEntityID","fence","generateItemWithKindID","FencePosType","FencePos","PosA","PosB","vec2Less","getFencePosType","Horizontal","Vertical","FenceBase_1","FenceVine","Vine","FloorType","FloorBase","getFloorType","initFloor","FloorClean","canBeFloorClean","TerminateClean","canCleanByTerminate","Bomb","Terminate","_canCleanByTerminate","_canBeFloorClean","removeFloorAtLogicalPos","FloorBase_1","FloorChanger","FloorChanger_1","entityColor","Changer","FloorDoubler","FloorDoubler_1","Double","FloorRoad_1","FloorIce_1","FloorFactory","generateFloorWithEntityID","FloorRoadDirection","Begin","End","generateFloorWithKindID","updateTargetBarUIWithDelta","gainScoreWithEntity","Grass","FlyerAnimation_1","FloorIce","_healthPoint","healthPoint","getHealthPoint","popsicle","getPopsicleAtLogicalPos","coverItem","rate","setHealthPoint","flyer","createDieAnimation","setFlyerAtLogicalPos","dispatchCommand","PopsicleClean","Ice","val","FloorRoad","_isStartPoint","inDircetion","Road","getIsStartPoint","setIsStartPoint","FlyerBase_1","FlyerAnimationType","FlyerAnimation","_autoRemoveOnFinish","_entityID","getAutoRemoveOnFinish","setAutoRemoveOnFinish","auto","launch","autoRemove","initFlyer","FlyerType","filePatth","info","getHurtAnimationInfoPathFromEntityID","createAnimationWithType","Bomb1x1","FlyerAnimationBomb1x1","CommonHurt","FlyerAnimationCommonHurt","FocusFrame","FlyerAnimationFocusFrame","HighlightedCell","FlyerAnimationHighlightedCell","ItemMarked","FlyerAnimationItemMarked","BombCross","FlyerAnimationBombCross","FlyerBase","_flyerType","getFlyerType","flyerType","Flyer","getAttackPos","targetPriority","entityTypes","cellsMap","getCellsMap","checkPositions","attackedPositions","getAttackedPosition","checkPos","indexOf","shuffleArray","checkPositions_1","minPriority","canAttackTop","entityTypes_1","butterflyPriority","getGridSize","FlyerBomb","FLYER_BOMB_DURATION","_launched","_bombDuration","_lastBombRingIndex","_origin","_radius","getCanLayoutGrass","setCanLayoutGrass","getOrigin","setOrigin","getRadius","setRadius","radius","FlyerBombWhite","FlyerBombRed","FlyerBombGreen","FlyerBombBlue","FlyerBombYellow","FlyerBombOrange","FlyerBombPurple","willAttackPositions","enumerateRingPos","willAttackPositions_1","recordAttackedPosition","currentRingIndex","min","positions","positions_1","highlightedCell","raidus","filePath","ItemFactory_1","FlyerBullet","_duration","_startPos","_targetPos","_bombType","FlyerLaserBullet","startPos","move","spawn","easeInOut","canUpgradeByRainbow","bombType","Row","Column","item_1","generateEffectBombItem","Change","LasetBullet","FlyerCannon","_hitOrigin","_aliveArea","_speed","_lastCellPostion","_startFly","_layoutGrass","_direction","FlyerCannon_1","FlyerCannonWhite","getLayoutGrass","setLayourGrass","getDirection","setDirection","rotation","getAngle","willAttackPos","validLogicalRect","rectContainsPoint","FLYER_CANNON_START_SPEED","clamp","FLYER_CANNON_ACCELERATION","FLYER_CANNON_MIN_SPEED","FLYER_CANNON_MAX_SPEED","newPosition","normalize","newCellPos","getLogicalPosFromPixelPos","mag","blocked","canBlockBombRay","canMatch","canSwap","hitOrigin","Cannon","FLYER_CANNON_TAIL_FADE_DURATION","CurveToAction_1","FlyerChargeEntity","_collectionID","Charger","setTargetPos","getTargetPos","target","distance","speed","Charge","FlyerCollectedEntity","_delta","CollectedEntity","targetWorldPos","getWorldPosForTarget","convertToNodeSpaceAR","FlyerCollectedSupply","_delay","_itemAmount","itemAmount","delay","CollectedSupply","getWorldPosForSupply","targetScale","endScale","addFlyerObstructs","setScale","acitons","minRadius","round","maxRadius","radian","jumpTargetPos","easeBackOut","updateSupplyBarUIWithDelta","removeFlyerObstructs","FlyerComboWord","_comboCount","_needObstruct","combo","needObstruct","filePathRoot","FlyerFireworksMissile","_currentMaxCentrifugalForce","_targetLogicalPos","_velocity","FlyerFireworksMissile_1","setVelocity","velocity","FireworksMissile","FlyerFireworks","offsets","offsets_1","attackPos","maxSpeed","startCentrifugalForce","maxCentrifugalForce","cellSize","offsets_2","offset_1","bombCell","desireVelocity","desireForce","accelerateShadow","accelerateForce","centrifugalForce","force","maxForce","acceleration","newVelocity","FlyerHammer","Hammer","worldPos","getWorldPosForGear","AidHammer","nodePos","targetPixelPos","action_1","onHitted","GridBase_1","FlyerBullet_1","FlyerLaserState","FlyerLaser","_marks","_targetPositions","_findTargetInterval","_state","_laserColor","_laserBombType","_laserLayoutGrass","_lastLaserDuration","_rainbowItem","_shootOneLaser","effectPostions","itemsMap","getItemsMap","bullet","mark","showMark","ZORDER_EFFECT","LockTarget","angleDelta","interval","launched","WaitLastLaser","rotateBy","repeatForever","DestroyTarget","SuicideClean","_b","_c","MatchClean","rainbow","Laser","OrbitTrack_1","FlyerBomb_1","FlyerMissileType","FlyerMissile","_missileType","missileType","Missile","actions","createWithSpeed","scaleAction","getDuration","attackCallBack","gridSize","Dot","rayDirections_4","rayDirections_1","raydirection","first","rayDirections_5","ray","cannon","second","rayDirections_6","rayDirections_2","rayDirections_7","Cross","rayDirections_8","rayDirections_3","rayDirections_9","Range","bomb","destoryCallBack","FlyerMoreStep","_extraStep","stepAmout","MoreStep","getWorldPosForStep","jumpOut","updateStepBarUIWithDelta","FlyerMowerDirection","_hadPlayMoveAction","FlyerMower_1","Mower","stepDirection","getStepDirection","FLYER_MOWER_START_SPEED","FLYER_MOWER_ACCELERATION","FLYER_MOWER_MIN_SPEED","FLYER_MOWER_MAX_SPEED","FlyerNuclear","FLYER_NUCLEAR_BOMB_DURATION","_shouldLayoutGrass","getShouldLayoutGrass","setShouldLayoutGrass","shouldLayoutGrass","NuclearBomb","MAX_GRID_HEIGHT","MAX_GRID_WIDTH","conners","maxDistanceSquared","originPixel","conners_1","conner","connerPixel","distanceSquared","getDistanceSQ","sqrt","FlyerPopsicleBomb","_bombPositions","FlyerPopsicelBomb","bombPos","cleanPos","bombPostions","FlyerPopsicleLine","FlyerPopsicelLine","FlyerScoreLabel","_score","_pixelPos","pixelPos","score","Score","label","FlyerScore","scoreWorldPos","getWorldPosForScore","fadeTo","updateScoreBarUIWithDelta","FrameBase","getPositionCode","bitOffsets","code","bitValue","bitOffsets_1","cell_1","initFrame","Frame","FrameBase_1","FrameNormal","DebugMatchType","GameConfig","Object","defineProperty","window","IsDebug","IsPublishForPlanners","GameVer","IsVerify","EnableAutoPilot","LANGUAGE","LoginModel","ConfigDir","OnStage","DigRedPacket","Platform","1","HttpSerever","UserFrom","PlatformId","Channel","ConfigUrl","LoginVersion","2","shareImgDomain","giftImgDomain","PayEnv","OfferId","ZoneId","GameResultBasePanel_1","GameConfig_1","GameCongratulationPanel","rewardButtonLabel","cancelButtonLable","giveUpButton","terminateButton","_rewardType","MatchGameEndRewardType","sendMarkID","reportStepCongratulation","playSoundEffect","getExtraRewardType","extraRewardType","GameEndExtraRewardType","uiData","getEndUIData","succeedRewardType","initSupplyItem","ShareForReward","initButtons","onCancelButtonClicked","onTerminateButtonClicked","active","getLevel","rewardButton","onConfirmButtonClicked","reportResult","MatchGameEndType","Complete","onReportResultRespone","console","log","onRewardFlyToBackpackComplete","Doubled","rewardFlyToBackpack","GameEndItem","nameLabel","numLabel","ico","GameMath","getMergePos","positionList","baseStepList","tmpPos","sort","infoA","infoB","minStepPosIndex","minStepCount","maxLinkedPosCount","rootPos","stepCount","linkedPosSet","horizontalOffsets","horizontalLinkedPos","rootPos_1","horizontalOffsets_1","hasCheckPos","positions_2","horizontalLinkedPos_1","hLinkPos","verticalOffsets","verticalLinkedPos","rootPos_2","_d","verticalOffsets_1","_e","positions_3","_f","verticalLinkedPos_1","vLinkPos","linkedPosCount","isMin","getCreateBombType","left","right","bottom","top","positions_4","solidWidth","solidHeight","column","solidCount","row","Rainbow","fullSideCount","bottomIsFull","topIsFull","leftIsFull","rightIsFull","Butterfly","isValidMatchPos","sameColorNeighbourCount","neighbourOffsets","neighbourOffsets_1","horizontalConnectCount","horizontalOffsets_2","verticalConnectCount","verticalOffsets_2","filterInvalidMathPositions","linkedPos","invalidIndex","splice","enumerateCirclePos","innerRadius","outerRadius","rowDelta","columnDelta","enumerateCannonPos","len","getContactPoint","outPoint","isClockwise","cosRadin","newOffset","a","acos","originOffset","beginPos","endPos","zeroAngleVector","lengthA","lengthB","cosValue","crossMulty","magSqr","rectIntersectsRect","rect1","rect2","intersects","point","contains","insertAsSet","array","compare","valArr","startIndex","tmpVal","max","differentWithLast","lastNumber","minOffset","maxOffset","minValue","maxValue","getStringFromVec2","hashValue","getVec2FromString","stringValue","dataString","replace","numbers","split","getConfigStringFromVec2","getStringFromFencePos","stringA","stringB","getFencePosFromString","postions","fencePosLess","fencePosA","fencePosB","getScaleFromViewSize","viewSize","designSize","minSacle","maxScal","getScaleViewSizeFromRealSize","realSize","deviceViewSize","minWidth","ratio","viewRatio","getDeviceViewSizeFromViewSize","winSize","deviceSize","ratioWidth","ratioHeight","getAdBannerSize","NoMoreStepBasePanel_1","GameNoMoreStepPanel","giveUp","gameOver","GameOverPanel","failedRewardType","recordBestScore","setFriendView","GameOver","ItemInfoManager_1","GameEndItem_1","StarAndScoreFrame_1","GameEndPanelData","createWithData","object","GameResultBasePanel","starFrame","rewardItemsFrame","rewardItems","goldSprite","goldDoubleIco","goldLabel","lifeSprite","lifeDoubleIco","lifeLabel","backpack","cancelButton","rankNode","friendSprite","_report","_achievementReward","_timeLimitAward","_activeNextResidentGearType","_updateSubDomainFixFrameRate","showAdBanner","closeAdBanner","popUpRearAchievementPanel","IT","itemInfo","getItemInfoFromItemID","localization","itemNum","goldNum","LifeAddOnePoint","lifeNum","popUpGiftBox","onShareSuccess","onShareFail","onWatchVideoSuccess","onWatchVideoFail","endType","rewardType","hasExtraReward","setRankView","updateSubDomainCanvas","onOpen","param","report","onAnimationDone","starCount","highscore","setStarCount","setScore","setHighscore","appear","onClose","position","defTime","aniDisappearFun","dTime","aniBackpackFun","removeSelf","startWorldPos","_loop_1","this_1","children","child","UISceneBase_1","FlyerCollectedEntity_1","ItemBombButterfly_1","ItemBombColumn_1","ItemBombCross_1","ItemBombRainbow_1","ItemBombRange_1","ItemBombRow_1","ItemNormal_1","GameStatistics_1","CollectedTrainSupplyBar_1","GearBar_1","ScoreBar_1","StepBar_1","TargetBanner_1","TargetBar_1","GameSceneBase","bgTop","cancelGearLayer","backgroundMask","swallowTouchLayer","gridFrame","levelLabel","targetBar","supplyBar","stepBar","scoreBar","gearBar","pauseButton","_mode","GridMode","_hasShowCompleteBanner","_statistics","canGenerateBomb","canGenerateTrainSupply","canPauseGame","canGetBonusFromLeftStep","canTriggerGuide","canCountScore","initGameScene","playAudioBGM","onPauseTabbed","clearGameScene","destroyGrid","destroyStatistics","clearTargets","createStatistics","phrasePrewarData","preloadResources","entityPool","entities","entities_1","createGrid","mapData","getCurrentMapJson","setGridMode","reportStepCreateGrid","runGame","getWorldAreas","getWorldAreaWithLogicalPos","getGridMode","mode","tryEnableMode","ForceClean","CrossBomb","AidBomb","ForceSwap","AidSwap","focusItemWithGearID","selectGear","updateGears","getUserData","updateUserInterface","hasShowCompleteBanner","hadOperated","getTickTime","getTick","getPuppyLeftSteps","getShareTimes","getShareForMoreStepTimes","setShareTimes","times","setShareForMoreStepTimes","getStatisticsReport","getPowerAmount","UsedSwap","AvailableSwap","getMatchGameConfig","getCompleteWithLastStep","getTotalScore","getCompleteScore","getHistoryHighscore","getStarsCount","targetMap","getTargetMap","collectionId","getCollectedEntityAmount","getRemainingTargets","gearMap","getUsedGearMap","gear","collectedSupplyMap","getCollectedSupplyMap","disappearUI","appearUI","resetDropConfig","getTargetAmount","setCollectedEntityAmount","getCollectedSupplyAmount","setCollectedSupplyAmount","powerID","setPowerAmount","gainPowerAmount","lossPowerAmount","getLaunchGearMap","clearLaunchGears","getPrewarGearAmount","setPrewarGearAmount","getAvailableGearItemAmount","getUsedGearAmount","setUsedGearAmount","getLimitedGearMap","setLimitedGearAmount","getLimitedGearAmount","setCompleteWithLastStep","setTotalScore","gainTotalScore","lossTotalScore","getHistoryHighScore","setHistoryHighscore","setHistoryHighScore","getStarScores","setCompleteScore","updateScore","getCompleteReward","getBonusStepCount","setBonusStepCount","setEndUIData","getEventTargets","setEventTargets","targets","getShouldShowAdBanner","GearBarType","Drawer","isCompleted","finishAllTarget","isFailed","available","updateLevelBar","levle","getWorldPosWithCollectionID","getItemWithCollectionID","updateTargetBar","setTargetData","hideAll","updateSupplyBar","isPlayingHistoryLevel","getWorldPos","updateStepBar","getWorldPosForStar","getGearIconWorldPos","updateGearBar","showTargetBanner","targetBanner","showCompleteBanner","completeBanner","onCompleteBannerDisappear","congratulation","noMoreStep","stalemate","showReplayPrepareUI","cheatGameWithLevel","endGameWithReplay","replay","clearForReplay","backToMainScene","clearGameForReplay","getStepMark","reportStepMark","reportStepInit","reportStepSwap","reportStepNextGame","nextGame","quitGame","replayGame","showGameFail","onNoMoreStep","stalemateGame","prepareNext","beforePlayerOperated","onPlayerOperated","onRecevieGiftBox","onCancleGiftBox","hideAdBanner","setType","getRequestUseGearParam","parram","requestUseGear","allbackFunc","callbackObj","requestBuyMoreStep","currencyID","price","getReportResultParam","callbackFunc","cancelGear","view","getVisibleSize","Canvas","fitHeight","fitWidth","designResolution","boundBox","getBoundingBox","anchorY","getCurrentPetAnimationName","tick","GameStalematePanel","onCloseBtnClick","CFGTripleLevel_1","CFGTripleLevelGrass_1","CFGTripleLevelOrder_1","CFGTripleLevelPath_1","CFGTripleLevelPopsicles_1","CFGTripleMap_1","TMXJsonPhraser_1","KindID_1","GameMode","EventCollectTargets","_collections","setTargets","targets_1","getTargets","GameStatistics","_cfgObj","_mapDatas","_mapIndex","_targetMap","_collectedEntityMap","_collectedSupplyMap","_recordedSupplyMap","_collectedEnergyMap","_limitEntityMap","_limitGroupMap","_prewarGear","_usedGear","_limitedGear","_totalTime","_shareForMoreStepTimes","_endUIData","_level","_completeWithLastStep","_totalScore","_historyHighscore","_completeScore","_bonusStepCount","_eventTargets","_startScores","_completeReward","_availableGear","_puppyStepCount","tmpCfg","getMatchCfgByLevel","Order","initOrderTestConfig","initGrassTestConfig","initPopsicleTestConfig","Path","initPathTestConfig","levelType","initMapJsonsWithMapNames","initCompleteReward","initDropEntities","initTargetEntities","initLimitEntities","initStarScores","initTargetGrass","initTargetPopsicle","initTargetPath","getLevelTypeByLevel","cfgTripleLevelObj","LevelType","retObj","configObj","LevelID","nextMapJson","targetAmount","collectedAmount","leftAmount","finish","currentAmount","setTargetAmount","getCollectedEntityMap","getRecordedSupplyInfo","energyID","getPuppyTotalStepCount","PuppyMovedStep","reslut","setAvailableGearItemAmount","resetTick","isEmpty","nameString","mapIds","mapIds_1","tripleMap","JSON","parse","phraseTargetEntities","phraseDropEntities","phraseLimitEntities","phraseLimitGroup","scores","scores_1","phraseCompleteReward","mapDatas","totalGrassCount","mapDatas_1","tmxPhraser","tiles","getTileLayerWithName","CELLS_LAYER_KEY","mapSize","getMapSize","gid","valueMap","getPropertieFromGID","needLayoutGrassFromKindID","CONVEYERS_LAYER_KEY","FLOORS_LAYER_KEY","KindID","mapDatas_2","layerKey","POPSICLES_LAYER_KEY","objects","getObjectLayerWithName","objects_1","typeString","CFG_POPSICLE_VALUE_NORMAL","properties","CFG_POPSICLE_KEY_TYPE","CFG_POPSICLE_VALUE_LINE","CFG_POPSICLE_VALUE_BOOM","totalRoadCount","mapDatas_3","floorTiles","itemTiles","ITEMS_LAYER_KEY","targetEntityMap","keysArr","valuesArr","keyLen","valLen","basicColors","basicColors_1","limitEntityMap","limitGroupMap","completeRewardMap","getItemIDFromName","GameTargetType","GameTargetBase","initWithType","getCollectionIDs","getIconFrameName","GameTargetBase_1","GameTargetSingle","Single","GearItem_1","GearBarState","GearBarData","GearBar","itemsNode","instroductionLabelDown","drawUpButton","drawUpButtonFrame","instroductionLabelUp","fallDownButton","fallDownLayer","GearBarRoot","pullUpCover","_gearItems","_lastFocusID","_pullUpHeight","AdBannerDefaultHeight","_fallDownHeight","_lastLeftStepCount","_hasShownAdBanner","getAvailableAmount","drawUp","animated","playAlertGeatItemsAnimation","fallDown","gearItem","playAlertAnimation","getState","setState","oldState","widget","Widget","GearBarDefaultHeight","setData","gearName","instrodution","onItemTabbed","updataAmount","setLimitedAmount","setUsedAmount","currentLeftStepCount","getItemWithGearID","hasAvailableItem","getIsAvailable","onDrawUpButtonTabbed","onFallDownButtonTabbed","itemIds","setGearBar","schedule","GearID","UINodeIdentifier_1","IdentifyNodeManager_1","GearItemState","GearItem","amountFramePos1","amountFramePos2","itemRoot","normalAmountRoot","normalAmountFrame","normalAmountLabel","buyButton","timeLimitedAmountRoot","timeLimitedAmountFrame","timeLimitedAmountLabel","timeLimitedCountDownLabel","lockButton","lockIcon","identifyComponent","_isLocked","_normalItemID","_usedAmount","_limitedAmount","_gearBar","getIsLocked","setIsLocked","isLocked","setIdentifier","NodeID","MatchScene_HammerButton","MatchScene_BombButton","MatchScene_SwapButton","getUsedAmount","updateGearState","getLimitedAmount","Disable","onIconTabbed","onBuyTabbed","getGearBar","RectangleClipper_1","GridCommandPair_1","Heap_1","FlyerChargeEntity_1","FlyerCollectedSupply_1","FlyerMoreStep_1","FlyerScore_1","FlyerScoreLabel_1","ItemBase_1","ItemStateGenerate_1","ItemStateReplace_1","ParasiteBase_1","GridStateAppear_1","GridStateCreate_1","GridStateCrossBomb_1","GridStateDisappear_1","GridStateForceClean_1","GridStateForceSwap_1","GridStateLaunchGears_1","GridStateNull_1","GridStateSwapNeighbour_1","GridStateMachine_1","GridBase","_frameLayer","_cellLayer","_popsicleLayer","_floorLayer","_rugLayer","_itemLayer","_parasiteLayer","_fenceLayer","_markerLayer","_puppyLayer","_flyerLayer","_effectLayer","_usePriorityCommandQueue","_priorityCommandQueue","conveyerLayer","_gridSize","Size","_cellSize","_framesMap","_cellsMap","_popsiclesMap","_floorsMap","_rugsMap","_itemsMap","_parasitesMap","_fencesMap","_markersMap","_obstructs","_flyerObstructs","_attackePositions","_commandPairs","_nextCommandIndex","_insertNewCommand","_lastTouchLogicalPos","matchScene","ZORDER_FRAME_BOTTOM","ZORDER_CELL_BOTTOM","ZORDER_POPSICLES_BOTTOM","ZORDER_FLOOR_BOTTOM","ZORDER_RUG_BOTTOM","ZORDER_ITEM_BOTTOM","ZORDER_PARASITE_BOTTOM","ZORDER_FENCE_BOTTOM","ZORDER_MARKER_BOTTOM","ZORDER_PUPPY_BOTTOM","ZORDER_FLYER_BOTTOM","ZORDER_CONVEYERS_BOTTOM","compareFunc","lhs","rhs","getPriority","equalsFunc","createState","onTouchMove","onTouchEnd","onEvent","setConveyerLayerVisiblePos","cropper","areas","centerPixelPos","setCropRectangles","dropProbabilities","limitEntities","limitGroup","fitMinimum","entityAmounts","entityGroupAmounts","newAmount","dropItemValues","limitAmount","limitGroupAmount","hadCollectedBoneAmount","existentBoneAmount","hadCollectedPuppyAmount","existentPawAmount","entityIDs_2","availablePawIDs","entityIDs_3","availablePawIDs_1","pawID","existentJamAmount","rug","hadCollectedJamAmount","totalValue","totalExsitAmout","totalRateAmount","existAmount","currentRatio","targetRatio","maxGapEntityID","maxGap","gap","currentValue","setGridSize","setCellSize","getMode","setMode","canChangeState","baseZorder","Marker","ZORDER_FRAME_TOP","ZORDER_CELL_TOP","ZORDER_POPSICLES_TOP","ZORDER_FLOOR_TOP","ZORDER_RUG_TOP","ZORDER_ITEM_TOP","ZORDER_PARASITE_TOP","ZORDER_FENCE_TOP","ZORDER_FLYER_TOP","ZORDER_MARKER_TOP","getAvailableColors","getEntityFromMapAtLogicalPos","map","removeEntityFromMapAtLogicalPos","occupyArea","occupyPos","occupyKey","setEntityToMapAtLogicalPos","rootNode","getFrameAtLogicalPos","setFrameAtLogicalPos","frame","removeFrameAtLogicalPos","getFramesMap","setCellAtLogicalPos","removeCellAtLogicalPos","setPopsicleAtLogicalPos","removePopsicleAtLogicalPos","getPopsiclesMap","getFloorsMap","getRugAtLogicalPos","setRugAtLogicalPos","removeRugAtLogicalPos","getRugsMap","setItemAtLogicalPos","rootLayer","getItemType","ItemType","Puppy","removeItemAtLogicalPos","swapItem","logicalPosA","logicalPosB","itemA","itemB","generateBomb","changeOld","setParasiteAtLogicalPos","removeParasiteAtLogicalPos","getParasitesMap","getFenceAtFencePos","setFenceAtFencePos","removeFenceAtFencePos","getFencesMap","getMarkerAtLogicalPos","setMarkerAtLogicalPos","marker","removeMarkerAtLogicalPos","getMarkersMap","isObstructsEmpty","isFlyerObstructsEmpty","clearAttackedPostionRecord","unimmuneAllEntities","insertCommand","isCommandListEmpty","sortCommandList","progressCommand","commandPairs","getElements","commandPairs_1","commandPair","peek","excuteCommandPair","CheckMatch","LaunchResidentGears","LaunchGears","pauseGame","resumeGame","isComplete","chargeItems","canWillCharge","getChargePriority","targetItem","setWillChargeAmount","getWillChargeAmount","gainCollectedEntity","gainPower","gainCollectedSupplyWithEntity","gainStepWithItemID","withFlyer","fromPos","stepNum","lossCollectedEntity","gainCollectedSupply","lossCollectedSupply","gainCollectedSupplyWithLogicalPos","supplyMaps","supplyID","posStrings","posStrings_1","posString","getWorldAreasWithPositions","names","names_1","getWorldAreasWithName","areas_1","area","originWorld","connerWorld","Doughnut","Block","getTopParasite","getParasiteType","ParasiteType","IceCube","Chestnut","DogPaw","EffectBomb","bombItem","getBombType","GiftBox","lossPower","gainScore","lossScore","gainScoreWithPixelPos","floatScore","floatScore_1","gainBonusStepCount","lossBonusStepCount","onUseGearRespone","onRespone","movedSteps","currentState","canPause","getLocation","onTapBegan","onTapMoved","onTapEnded","ZORDER_PUPPY_TOP","ZORDER_CONVEYERS_TOP","GridCommandPair","TargetPos","Command","DelayTime","Index","GridCommand","swapPos","ignoreImmunity","_priority","DoubleTabbed","NeighbourSwap","celanRoot","ActivateClean","NeighborClean","GridStateBase_1","GridStateDrop_1","GridStateAppear","GridState","Appear","checkMatchPos","GridStateCollection_1","GridStateMatch_1","GridStateAutoActivateBomb","AutoActivatedBomb","activeIndex","ActivateBomb","AvailableSwapInfo_1","GridStateBase","canSwapItem","getAvailableSwapInfo","MatchBomb","bombA","bombB","getLinkedPositions","MergerBomb","MatchColor","hasAvailableSwap","itemMap","shuffleGrid","shufflePositions","noMatch","hasSwap","isCreate","sources","sourceKeys","targetKeys","canShuffle","canShuffleWhenCreate","loopCount","noSolution","temp","itemsMap_1","sources_1","pair","disappear","biggerThan1X1Entities","delayDuration","fadeOut","fences","fencesMap","_loop_2","fences_1","minDistanceConner","_loop_3","fadeIn","types_2","_loop_4","fenceRoot","conners_2","checkArrangeInfo","{1, 0}","{-1, 0}","{0, 1}","{0, -1}","GridStateComplete_1","GridStateBousTime","BousTime","_curGrid","_boomItems","_isSendBoomMsg","_delayTime","initAllBoomItem","sendBoomMsg","stepNumberToBoom","onBousTimeDone","items","tmpItem","canCleanByActivate","hasStep","setpItems","stepLen","newItem_1","getOneRandBoom","convertToNodeSpace","rewardSupply","state_1","m_bombType","m_color","newItem","GridStateHoney_1","ItemStateChangeColor_1","GridStateChanger","ChangeColor","_changeItems","setChangerPowerPoints","DyeingItem","getChangerPowerPoints","checkGoToNextState","changeCurrentItemColor","floorMap","floorTemp","itemTemp","canChangeColor","ItemPuppy_1","ItemStateSwap_1","GridStateMagicCrystal_1","GridStateCollection","Collection","_walkedItemPos","setCurDogPawCount","PuppyVitality","getCurDogPawCount","moveToNextItem","GridStateMagicCrystal","CollectionDone","moveToItem","attackPosition","dogItem","getCurDogItem","func","curRoad","temRoad","PuppyDirection","Back","Front","puppy","attack","nextRoad","findNextRoadFloorItem","nextItem_1","nextParasite","hostCanSwap","DogHouse","win","Balloon","flyFloor_1","getCurPostal","fly","clearOneItem","stay","nextRoadPos","dogAction","FlyerComboWord_1","GridStateComboWord","ComobWord","comboCount","MatchCombo","gainComboScore","scoreMap","3","4","5","6","7","8","9","10","GridStateBousTime_1","GridStateCompleteBanner","GridStateCongratulation_1","GridStateComplete","_hadDisappearUI","GridStateCongratulation","Congratulation","GridStateChanger_1","GridStateConveyer","_conveyerPosions","ConveyerMove","cells","cells_1","conveyPos","CellFactory_1","FenceFactory_1","FloorFactory_1","FrameNormal_1","MarkerNormal_1","ParasiteFactory_1","PopsicleFactory_1","RugFactory_1","GridStateCreate","Create","_viewSize","_tmxPhraser","viewFixSize","initCells","initPopsicle","initFloors","initRugs","initItems","initFences","initFrames","markFences","getShufflePositions","someItemCanDrop","initParasites","initMarker","initPath","cellTiles","conveyersTiles","tileSize","getTileSize","foundTopCell","cellGid","conveyerGid","propertie","cellConfigMap","getConfigMap","conveyerConfigMap","markerInfos","MARKS_LAYER_KEY","markerInfos_1","centerLogicalPos","entranceConfigMap","entrance","exitConfigMap","objectInfos","objectInfos_1","ceil","generatePopsicleWithKindID","JAM_LAYER_KEY","generatePolishWithKindID","totalRandomCount","ItemNormalRandom","fenceInfos","fenceInfos_1","PARASITES_LAYER_KEY","generateParasiteWithKindID","needFrame","cropPositions","fenceInfos_2","CFG_WORM_HOLE_ENTRANCE_KEY_TYPE","CFG_WORM_HOLE_ENTRANCE_VALUE_DEFAULT","CFG_WORM_HOLE_EXIT_KEY_TYPE","CFG_WORM_HOLE_EXIT_VALUE_DEFAULT","startPositions","ballon","flyPos","startPositions_1","road","isShuffleKindID","tryDropItem","Stay","tryDiagonalItem","bornPos","layerName","getObjectInfos","objectInfos_2","pos_1","objectInfos_4","objectInfos_3","GridStateCrossBomb","rayDirections","GridStatePrepare_1","GridStateDisappear","Disappear","ItemStateDrop_1","GridStateDrop","checkMatchPositions","gridState","DropItem","_checkMatchPositions","_deadCellsPositions","_livingCellsPositions","_fencesPositions","_dropedItems","_stepCount","_finishDrop","clearDeadAndLivingCellRecord","isDeadCell","canGenerateItemAtPos","availableMoveOffsets","availableMoveOffsets_1","wallOffsets","fencePosType","wallOffsets_1","wallOffset","wallPos","wallOffsets_2","wallOffsets_3","wallOffsets_4","hasFence","toPos","blockByFence","fenceA","fenceB","isCellAvailableForDrop","canDrop","canArrive","targetParasite","Wormhole","currentPos","Drop","dropResult","moveOffsets","moveOffsets_1","checkBlockPos","isBlockPosDead","canNotPassThrough","tryDropPos","canSlide","droped","destinationCell","moveOffsets_2","checkPos_1","affectOffsets","affectOffsets_1","dropAllItemsByStep","someItemMoved","someItemBorned","Hide","Born","runNextStep","caculatePathForItems","runPathForAllItems","tryDropItemsForStep","stateDate","startTime","caculateCount","currentDate","timeDelta","GridStateFailSummary","FailSummary","GridStateFailSummary_1","GridStateFail","Fail","FlyerHammer_1","GridStateForceClean","canUseHammer","hammer","GridStateForceSwap","_itemSwaped","_swapPosA","_swapPosB","_focusFrame","_selectedItem","commandA","commandB","unselected","trySwapItem","canForceSwap","selected","ParasiteHoney_1","GridStateComboWord_1","GridStateHoney","Honey","spreadHoney","SpreadHoney","honeyPositions","canSpreadHoney","HoneyComb","canCoveredByHoney","Source","Target","randomIndex","spreadInfo","spreadSource","spreadTarget","spreadHp","sourceItem","sourceHoney","honeyComb","getSpreadHoneyHp","newHoney","HoneyResist","GridStateAutoActivateBomb_1","GridStateLaunchGears","_availablePositions","gearID","progressGear","BeginLine","InfiniteBeginLine","OneRoundBeginLine","createBomb","BeginRange","InfiniteBeginRange","OneRoundBeginRange","BeginRainbow","InfiniteBeginRainbow","OneRoundBeginRainbow","ExtraStep1","ExtraStep2","ExtraStep3","ExtraStep5","createExtraStep","LuckyWheelRow","LuckyWheelColumn","LuckyWheelCross","LuckyWheelRange","LuckyWheelMissile_Row","LuckyWheelMissile_Column","LuckyWheelMissile_Cross","LuckyWheelMissile_Range","LuckyWheelRow_Cross","LuckyWheelColumn_Cross","LuckyWheelRow_Range","LuckyWheelColumn_Range","LuckyWheelMissile_Row_Column","LuckyWheelMissile_Rainbow","LuckyWheelMissile_Row_Cross","LuckyWheelMissile_Column_Range","GridStateLaunchResidentGear","LaunchResidentGear","GridStateMachine","_currentState","_owner","onwer","_globalState","globalState","GridStateConveyer_1","AtkPointData","beAttacked","MagicCrystal","_magicCrystalVec","_atkPoints","_changeItemPos","_outputIng","getCurGrid","initMagicCryStalItems","initAtkPotins","doOutput","onMagicCrystalDone","eixt","magicItem","isCanOutput","cellMap","ptData","v1","getAttrNum","getOutputEntityId","nextPoint","getNextAtkPoint","removeAttackedPoints","atkPoint","tempItem","canTransformByMagicCrystal","GridStateLaunchResidentGear_1","GridStateMatch","MatchItem","getEventName","changeEvent","checkSize","changedPos","GridStateNoMoreStep","NoMoreStep","GridStateNull","Null","GridStatePrepare","Prepare","GridStateStalemate_1","ItemStateShuffle_1","GridStateShuffle","Shuffle","result_1","GridStateStalemate","Stalemate","GridStateCompleteBanner_1","GridStateNoMoreStep_1","GridStateShuffle_1","GridStateSwapNeighbour","SwapNeighbour","_AIOpratedWaitDuration","_checkPositions","_checkIndex","_availableSwaps","_availableSwapsSorted","_tipSwapIndex","_touchInterval","_tipInterval","statisticsCheckPositions","checkAvailableSwap","answer","statisticsAvailableSwap","checkPosCount","tipSwap","newIndex","MAX_TIP_SWAP_COUNT","unTipSwap","swapInfo","tipSlide","shake","untipSlide","item_2","unshake","canEliminateBySwapAtPos","rootItem","afterSwap","TIP_SWAP_INTERVAL","swapIndex","swapPosA","swapPosB","DOUBLE_CLICK_INTERVAL","Heap","elements","leftChildIndexFromIndex","rightChildIndexFromIndex","parentIndexFormIndex","element","_indexOf","shiftUpFromIndex","shiftDownFormIndex","removeAtIndex","removeElement","fromIndex","leftSearchIndex","rightSearchIndex","parentIndex","candidate","leftChildIndex","rightChildIndex","AudioManager_1","IGame","stopAudio","stopAudioAll","CollectionGroupID_1","IdentifierManager","KindIDManager","getColorWithEntityColor","Color","WHITE","collectionGroupID","keyString","valueString","WholeWindow","Common_CurrencyBar","MainScene_PrepareButton","MainScene_PetTrainBar","MainScene_FeedButton","MainScene_BathButton","MainScene_SleepButton","MainScene_DigGoldButton","MainScene_PetInformationPanel","MainScene_UpgradeButton","MainScene_PetHouseButton","PetListPanel_FeedButton","PetListPanel_BathButton","PetListPanel_SleepButton","PetListPanel_CloseButton","StartGamePanel_StartButton","StartGamePanel_PowerupBeginLine","StartGamePanel_PowerupBeginRange","StartGamePanel_PowerupBeginRainbow","MatchScene_TargetBar","MatchScene_FoodIcon","MatchScene_SoapIcon","MatchScene_EyepatchIcon","MatchScene_HoeIcon","MatchScene_CoinIcon","MatchScene_SoapAndEyepatchIcon","FeedScene_QuitButton","FeedScene_PetInformationPanel","BathScene_QuitButton","BathScene_PetInformationPanel","SleepScene_QuitButton","SleepScene_PetInformationPanel","DigGoldScene_HoeAmountBar","DigGoldScene_GoldListItem1","DigGoldScene_DogListItem1","DigGoldScene_SelectDogCostBar","DigGoldScene_SelectDogDigButton","DigGoldScene_QuitButton","DigGoldScene_ReceiveRewardButton","UpgradePanel_PropertyBar","UpgradePanel_TerminateButton","IdentifyNodeRegistData","retainCount","IdentifyNodeManager","_nodeMap","regist","identifier","oldData","logout","getNode","_curPostal","_nextLevelId","ItemBalloon_1","setCurPostal","setNextLevelId","getNextLevelId","CFG_POSTAL_VEC","CFG_NEXT_MAP_ID","initItem","_canDrop","_canSwap","_canMatch","_canCleanByNeighbour","progressDeathWish","ItemBase","_itemType","_targetCount","_chargeCount","_willChargeCount","_chargePriority","_chargetCollectionID","Bone","yMin","yMax","xMin","xMax","canLink","checkItem","hostCanMatch","_canShuffle","_canShuffleWhenCreate","canChange","_canChange","canCharge","_canCharge","onCharge","option","_onCharge","_canWillCharge","getChargeID","setChargeID","absorbWillChargeAmount","absorbAmount","setChargeAmount","getChargeAmount","willChargetAmount","getChargeTargetAmount","setChargeTargetAmount","haveEnoughEnergy","_canTransformByMagicCrystal","_canUpgradeByRainbow","_canChangeColor","_canCoveredByHoney","_canBlockBombRay","_canCleanByActivate","canCleanByMatch","_canCleanByMatch","canCleanByNeighbour","canCleanBySuicide","_canCleanBySuicide","coverUnderForever","_converUnderForever","canActivatedByDoubleTabbed","_canActivatedByDoubleTabbed","onActivatedByDoubleTabbed","_onActivatedByDoubleTabbed","satisfyMatch","_satisfyMatch","onSatisfyMatch","_onSatisfyMatch","basePriority","totalLinkPos","baseSteps","totalLinkPos_1","mergeRoot","totalLinkPos_2","totalLinkPos_3","canMatchWithNeighbourSwap","_canMatchWithNeighbourSwap","onMatchWithNeighbourSwap","_onMatchWithNeighbourSwap","canMatchWithForceSwap","_canMatchWithForceSwap","onMatchWithForceSwap","_onMatchWithForceSwap","_canHitFloor","_onLayourGrass","_canHitNeighbour","_onHitNeighbour","neighborOffsets","neighborOffsets_1","_onHitFloor","_canImmuneDamageAfterHurt","onChange","changeOption","_onChange","Activate","Match","Neighbor","Suicide","outDuration","backDuration","toDuration","recoverDuration","outAction","backAction","toAction","recoverAction","rotateTo","repeat","sourcePos","bounce","itemType","ItemBlock_1","FlyerMissile_1","ItemBombBase","_isDud","_selfDestructIndex","_isGrassBomb","getIsDud","setIsDud","isDud","getSelfDestructIndex","setSelfDestructIndex","selfDestructIndex","getIsGrassBomb","setIsGrassBomb","isGrassBomb","_canBombCombineWithNeighbour","neighbourItem","_onBombCombineWithNeighbour","anotherBomb","_onBombCombine","typeA","typeB","minType","maxType","matchColor","missile","grid_1","grid_2","lineOffsets","lineOffsets_1","_g","lineOffsets_2","_h","rayDirections1","_j","rayDirections1_1","rayDirections2","_k","rayDirections2_1","rayDirections3","_l","rayDirections3_1","rayDirections4","_m","rayDirections4_1","initBomb","FlyerLaser_1","FlyerNuclear_1","_cleanOption","dispear","getCleanOption","setCleanOption","nuclear","rainbowB","_launchLaser","colors","laser","ItemBone_1","ItemChestnut_1","ItemDogHouse_1","ItemDogPaw","ItemDogPaw_1","removeAction","_flyToDog","targetPos_1","ItemDoughnut_1","ItemMagicCrystal_1","ItemWatermelon_1","ItemFireWormBottle_1","ItemJamBottle_1","ItemFruitCake_1","ItemHoneyComb_1","ItemMower_1","ItemFireworks_1","ItemStatue_1","ItemFactory","hp","dirction","ItemMowerDirection","generateNormalRandomItem","avilabelEntityMap","normalIDs","pawIDs","generateRandomItemWithGroupIDs","groupIDs","groupIDs_1","relevantEntityID","ItemBombButterflyRandom","ItemBombRowRandom","ItemBombColumnRandom","ItemBombCrossRandom","ItemBombRangeRandom","ItemPawRandom","generateGlobalRandomItem","normalItemIDs","normalItemMap","dropMap","entityID_3","generateItemWithName","_fireWorms","bottle","CFG_FIREWORM_BOTTLE_MAX","fireWorm","ItemFireworks","Fireworks","isLayoutGrass","_pieces","hasPiece","pari","FruitCake","availableColors","pieceCount","availableColors_1","createPiece","ratation","piece_1","sizeMode","SizeMode","RAW","trim","_spreadHoneyIDs","entityNameString","CFG_HONEY_COMB_OUTPUT","entityNames","entityNames_1","entityName","ItemInfo_1","ItemInfoManager","ItemID_To_FrameName_Map","Name_To_ItemID_Map","initItemID_To_FrameName_Map","initName_To_ItemID_Map","DiamondCoin","StarCoin","LifeHeart","TimeLimitedAidHammer","TimeLimitedAidBomb","TimeLimitedAidSwap","LifeEverOneHour","LifeEverTwoHour","VirtualCoin","TimeLimitedBeginLine","TimeLimitedBeginRange","TimeLimitedBeginRainbow","AddSpeed","PetKeJi","RedPacket","description","isUnlimited","scaleX","scaleY","getUnlimitedItemIDs","unlimitedItemIDs","ItemInfo","FrameName","Localization","Description","ScaleX","ScaleY","RugJam_1","JamBottle","oldJam","jam","_curAttackCount","_attrOutput","_attrNum","_attrMax","_attrStatus","_itemNode","initMagicItemImg","CFG_MATIC_CRYSTAL_OUTPUT","CFG_MATIC_CRYSTAL_NUM","CFG_MATIC_CRYSTAL_MAX","CFG_MATIC_CRYSTAL_STATUS","updateProgress","tmpGroupId","groupIds","colorItemMap","NormalColorId","tempMap1","tempMap2","output","imgPath","itemIcon","progress","progressNode","ItemMower","_targetIcon","_targetFrame","_targetLabel","CFG_MOWER_CHARGE_TARGET","targetName","CFG_MOWER_CHARGE_COUNT","CFG_MOWER_CHARGE_PRIORITY","updateTargetAmount","targetFramePos","targetFramePositions","0","obstructAction","animationName","ItemStateChangeColor","_targetColor","animate","callBack","ItemStateDrop","_pathIndex","_pathCount","_timeDelta","_stepDuraton","initDropPath","lastTargetIndex","firstStep","MAX_DROP_DRUATION","updatePath","needNextLoop","startScale","scaleDelta","percentage","newDuration","DROP_DRUATION_DECAY_FACTOR","MIN_DROP_DRUATION","EntityEventChanged_1","ItemStateGenerate","Generate","pixelTargetPos","changedEvent","dispatchEvent","ItemStateReplace","supplys","Replace","_gainScore","_supplys","moveTime","gainReward","ItemStateShuffle","_fromPos","_toPos","SHUFFLE_DRUATION","ItemStateSwap","Swap","SWAP_DRUATION","_timePast","stopAllActions","Statue","piecesNode","CFG_WATERMELON_MAX","gridPos","removeObstruct","KindID_To_EntityID_Map","initKindID_To_EntityID_Map","PolishJam","ItemBlock_HP1","ItemBlock_HP2","ItemBlock_HP3","ItemBlock_HP4","ItemBlock_HP5","ItemBlock_HP6","ItemDoughnut_HP1","ItemDoughnut_HP2","ItemDoughnut_HP3","ItemDogPaw_Red","ItemDogPaw_Green","ItemDogPaw_Blue","ItemDogPaw_Yellow","ItemDogPaw_Orange","ItemDogPaw_Purple","needLayoutGrass","LevelSelectorPanel","mask","drawer","previous","next","editBox","updateCfgBtn","speedUpButton","speedEditBox","speedDownButton","_levelConfig","LevelSelectorPanel_1","onPull","onPrevious","onNext","onUpdateCfgBtnClick","inputMode","EditBox","InputMode","NUMERIC","maxLength","placeholder","levelTextDidBegan","levelTextDidEnded","levelTextChanged","onSpeedUp","onSpeedDown","speedTextDidBegan","speedTextDidEnded","speedTextChanged","setTimeScale","frameSize","pullAction","easeBackInOut","onPush","pushAction","off","restartGame","setSpeed","newSpeed","number","LoadingScene","progressBar","progressLabel","loadData","getProgress","setProgress","loadResDir","loadCommon","onLoadCommonProgressChanged","onLoadCommonComplete","completedCount","totalCount","error","resource","urls","loadMatch","onLoadMatchProgressChanged","onLoadMatchComplete","loadScene","ProgressBar","MarkerType","MarkerBase","_markerType","getMarkerType","markerType","MarkerBase_1","MarkerNormal","_boneCollector","_dropMachine","_wormholeEntrance","_wormholeExit","MarkNormal","showEntityString","CFG_DROP_MACHINE_SHOW_KEY_TYPE","sprites","entityNames_2","dropMachineConfig","DropMachineDisplayConfig","spriteInfo","wormholeEntrance","wormholeExit","boneCollector","Position","Scale","GridStateFail_1","MatchScene","_lastStarsCount","initMatchScene","panel","usedSwap","currentStarsCount","completeReward","usedItemIDs","prepareNextInMatchScene","GiveUp","onQuitGameRespone","onReplayGameRespone","MathUtils","f","tmp","pow","temf","shuffle","arr","idx","TargetItem_1","NoMoreStepBasePanel","targetFrame","bottomFrame","closeButton","_unilimitedItems","initPanel","onCloseButtonTabbed","initLeftTarget","initLostUnlimitedItems","usedGears","leftTargets","needAmount","showCollectionID","OrbitTrack","_emitterDirection","_rotateHead","_contactPos","_startAngle","_endAngle","_isClockWise","_arcAngle","_arcLength","_stringLength","originalTarget","createWithDuration","emitterDirection","rotateHead","pRet","initWithDuration","initWithSpeed","startWithTarget","ActionInterval","updateWithPercentage","rotateAngle","minAngle","rotateOffset","strightOffset","totalLength","contactPosPercentage","strightPercentage","offsetLength","offsetNormalize","newPos","getTarget","puppet","rotateRadin","ParasiteBase","_parasiteType","_hostCanDrop","_hostCanSwap","_hostCanMatch","initParasite","parasiteType","ParasiteIceCube_1","ParasiteShackle_1","ParasiteGiftBox_1","ParasiteFactory","generateParasiteWithEntityID","partsNode","CFG_GIFT_BOX_MAX","ParasiteShackle","Shackle","PopsicleType","PopsicleBase","_popsicleType","getPopsicleType","_canBePopsicleClean","_onBePopsicleClean","onDidClean","popsicleType","PopsicleNormal_1","PopsicleLine_1","PopsicleRange_1","PopsicleFactory","generatePopsicleWithEntityID","PopsicleBase_1","FlyerPopsicleLine_1","getEntityInfoWithSize","SizeToEntityInfoMap","updatePopsicle","entityInfo","needRotate","Line","{1, 2}","NeedRotate","{2, 1}","{1, 1}","{2, 2}","{2, 3}","{3, 2}","{3, 3}","{3, 4}","{4, 3}","FlyerPopsicleBomb_1","PopsicleRange","bombPositions","ClearPosition","PowerupItem","unlimitedIcon","PowerupItem_1","RectangleClipper","_clipAreas","_updateGraphics","graphics","_graphics","tmpRect","game","renderType","RENDER_TYPE_CANVAS","stroke","fill","Mask","RugType","RugBase","initRug","RugFactory","generatePolishWithEntityID","RugBase_1","Jam","ScoreBar","pointer","pointerHead","scoreLabel","stars","_currentScore","_starScores","_starProgress","_rotateStart","_rotateEnd","_lastStarCount","_lockScore","getIsLockScore","setIsLockScore","islock","setCurrentScore","startScore","startProgress","targetScore","targetProgress","setStarState","star","isGray","starScores","starScores_1","score_1","rFirstScore","rSecondScore","completeScore","ShinningStar","ShinningStar_1","StarAndScoreFrameData","StarAndScoreFrame","_starCount","_highscore","starsNode","highscoreLabel","getStarCount","getHighscore","shine","StateMachineBase","owner","setGlobalState","getGlobalState","StepBar","alertAction","getActionByTag","alertAction_1","StringUtil","trimSpace","str","adjustFontByLength","temp_str","getStringLength","substring","sliceStringByLength","strArr","s","isChinese","isMW","getStringLength_CH","reg","test","getClassName","cls","re","matches","exec","replaceByPos","rep","retStr","substr","format","args","undefined","contain","srcStr","subStr","char","saleParseJson","e","TMXConfigInfoKeys","CFG_DROP_MACHINE_KEY_TYPE","CFG_DROP_MACHINE_VALUE_DEFAULT","CFGTripleMapTileset_1","TMXJsonObjectInfo","nane","TMXJsonPhraser","jsonObject","_mapSize","_tileLayers","_objectLayers","_tileProperties","initMapInfo","initLayers","initTileProperties","cellRect","layer_1","objectInfo","jsonObj","layers","values_1","key_1","key_2","key_3","genericValue","tileSets","tileSets_1","objItem","firstGID","source","lastSlashIndex","lastIndexOf","lastDotIndex","getTilesetJsonString","tileProperties","getTileProperties","tileCount","tileproperties","gidIndex","tileset","tilesetInfo","Properties","beginGid","keyStr","TargetBanner","_targetItems","onDisappear","tItem","cItemNode","cItem_1","hideIco","hideFrame","barItem_1","endWorldPos","seqAction","moveBy","showIco","TargetBar","getTargetIconWorldPos","TargetItem","checkMark","setCollectionID","spriteFrameName","showFrame","isAni","showFarme","UIButtonExt","btnText","pressedScale","transDuration","touchSound","initScale","isStopBubbleEvent","limitTouchTime","touchEnable","_fontColor","_outLineColor","_touchendCallBackFun","_touchTarget","_lastTouchedTime","setTouchEnable","onTouchDown","enabledInHierarchy","scaleDownAction","stopPropagation","onTouchUp","canTouch","curTouchTime","scaleUpAction","onTouchCancel","setBtnGray","btnSprite","outLine","LabelOutline","fromHEX","enable","targetOff","setTouchCallback","fun","removeTouchCallBack","clearTouchLimitTime","UINodeIdentifier","_identifier","getIdentifier","UISceneBase","UISpriteExt","_imageUrl","_curLoadCount","_spriteSize","setSpriteSize","set","spriteCp","isValid","Toggle","_triggerEventInScript_isChecked"],"mappings":"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YAAA;UAEA;;SACJ,KAAA;UACIA,YAAA;UAEA;;SACJ,KAAA;UACIA,YAAA;UAEA;;SACJ,KAAA;UACIA,YAAA;UAEA;;SACJ,KAAA;UACIA,YAAA;UAEA;;SACJ,KAAA;UACIA,YAAA;UAEA;;SACJ,KAAA;SACA,KAAA;SACA,KAAA;SACA,KAAA;UACIA,YAAA;UAEA;;SACJ,KAAA;SACA,KAAA;SACA,KAAA;SACA,KAAA;UACIA,YAAA;UAEA;;SACJ,KAAA;SACA,KAAA;SACA,KAAA;SACA,KAAA;UACIA,YAAA;UAEA;;SACJ,KAAA;SACA,KAAA;SACA,KAAA;SACA,KAAA;UACIA,YAAA;UAEA;;SACJ,KAAA;SACA,KAAA;SACA,KAAA;SACA,KAAA;UACIA,YAAA;UAEA;;SACJ,KAAA;SACA,KAAA;SACA,KAAA;SACA,KAAA;UACIA,YAAA;UAEA;;SACJ,KAAA;SACA,KAAA;SACA,KAAA;SACA,KAAA;UACIA,YAAA;UAEA;;SACJ,KAAA;SACA,KAAA;SACA,KAAA;SACA,KAAA;UACIA,YAAA;UAEA;;SACJ,KAAA;SACA,KAAA;SACA,KAAA;SACA,KAAA;UACIA,YAAA;UAEA;;SACJ,KAAA;SACA,KAAA;SACA,KAAA;SACA,KAAA;UACIA,YAAA;UAEA;;SACJ,KAAA;SACA,KAAA;SACA,KAAA;SACA,KAAA;UACIA,YAAA;UAEA;;SACJ,KAAA;SACA,KAAA;SACA,KAAA;SACA,KAAA;UACIA,YAAA;UAEA;;SACJ,KAAA;SACA,KAAA;SACA,KAAA;SACA,KAAA;UACIA,YAAA;UAEA;;SACJ,KAAA;SACA,KAAA;SACA,KAAA;SACA,KAAA;UACIA,YAAA;UAEA;;SACJ,KAAA;SACA,KAAA;SACA,KAAA;SACA,KAAA;UACIA,YAAA;UAEA;;SACJ,KAAA;SACA,KAAA;SACA,KAAA;SACA,KAAA;UACIA,YAAA;UAEA;;SACJ,KAAA;SACA,KAAA;SACA,KAAA;SACA,KAAA;SACA,KAAA;SACA,KAAA;SACA,KAAA;SACA,KAAA;UACIA,YAAA;UAEA;;SACJ,KAAA;SACA,KAAA;SACA,KAAA;SACA,KAAA;SACA,KAAA;SACA,KAAA;SACA,KAAA;SACA,KAAA;UACIA,YAAA;UAEA;;SACJ,KAAA;SACA,KAAA;SACA,KAAA;SACA,KAAA;SACA,KAAA;SACA,KAAA;SACA,KAAA;SACA,KAAA;UACIA,YAAA;UAEA;;SACJ,KAAA;SACA,KAAA;SACA,KAAA;SACA,KAAA;SACA,KAAA;SACA,KAAA;SACA,KAAA;SACA,KAAA;UACIA,YAAA;UAEA;;SACJ,KAAA;SACA,KAAA;SACA,KAAA;SACA,KAAA;SACA,KAAA;SACA,KAAA;SACA,KAAA;SACA,KAAA;SACA,KAAA;SACA,KAAA;SACA,KAAA;SACA,KAAA;SACA,KAAA;SACA,KAAA;SACA,KAAA;SACA,KAAA;UACIA,YAAA;UAEA;;SACJ,KAAA;SACA,KAAA;SACA,KAAA;SACA,KAAA;SACA,KAAA;SACA,KAAA;SACA,KAAA;SACA,KAAA;SACA,KAAA;SACA,KAAA;SACA,KAAA;SACA,KAAA;SACA,KAAA;SACA,KAAA;SACA,KAAA;SACA,KAAA;UACIA,YAAA;UAEA;;SACJ,KAAA;SACA,KAAA;SACA,KAAA;SACA,KAAA;SACA,KAAA;SACA,KAAA;SACA,KAAA;SACA,KAAA;UACIA,YAAA;UAEA;;SACJ,KAAA;SACA,KAAA;SACA,KAAA;SACA,KAAA;SACA,KAAA;SACA,KAAA;SACA,KAAA;SACA,KAAA;UACIA,YAAA;UAEA;;SACJ,KAAA;SACA,KAAA;SACA,KAAA;SACA,KAAA;SACA,KAAA;SACA,KAAA;SACA,KAAA;SACA,KAAA;UACIA,YAAA;UAEA;;SACJ,KAAA;SACA,KAAA;SACA,KAAA;SACA,KAAA;SACA,KAAA;SACA,KAAA;SACA,KAAA;SACA,KAAA;UACIA,YAAA;UAEA;;SACJ,KAAA;SACA,KAAA;SACA,KAAA;SACA,KAAA;SACA,KAAA;SACA,KAAA;SACA,KAAA;SACA,KAAA;SACA,KAAA;SACA,KAAA;SACA,KAAA;SACA,KAAA;SACA,KAAA;SACA,KAAA;SACA,KAAA;SACA,KAAA;UACIA,YAAA;UAEA;;SACJ,KAAA;SACA,KAAA;SACA,KAAA;SACA,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","sourcesContent":["export class AudioInfo{\n\n    public MusicId:number = -1;\n    public Music:string = \"\";\n    public Volume:number = 0;\n    public Loop:boolean = false;\n\n}\n\n/**\n * Created by Goku on 2018/7/26.\n * 声音管理类\n */\nexport default class AudioManager {\n\n    //单例对象\n    private static instance:AudioManager = null;\n    \n    private _AudioBGM:AudioInfo = null;    //当前播放的背景音效\n    private _AUdioRunTime:any = {};        //音效播放去重复\n\n    \n\n    /**\n     * @Content:设置音效的声音大小\n     * @Param \n     *      MusicId  :需要停止的ID\n     *      Volume   :设置声音的大小\n     *      loop     :播放次数(true:无限播放)\n     *      bgm      :是否为背景音效\n     *      succFunc :播放成功后回调\n     */\n    public play( Music:string, Volume:number = 1, loop:boolean = false, bgm:boolean = false, succFunc:Function = null){\n\n        let Mid:number = 0;\n        \n        let MusicUrl:string = cc.loader.getRes( Music );    //获取当前需要播放的音效\n        if( !MusicUrl ){\n\n            cc.loader.loadRes( Music, function( err, res ){\n\n                if(!err){\n                    //console.log(\"start\"+err+ \" ||| \"+res);\n                    MusicUrl = cc.loader.getRes( Music );\n                    //cc.log ( \"MusicUrl\"+MusicUrl );\n                    Mid = this._playAudio(MusicUrl, Volume, loop, bgm);\n\n                    if(succFunc){\n                        succFunc(Mid);\n                    }\n                }\n\n            }.bind(this) );\n        }else{\n            Mid = this._playAudio(MusicUrl, Volume, loop, bgm);\n            if(succFunc){\n                succFunc(Mid);\n            }\n        }\n\n    }\n\n    private _playAudio(musicUrl:string, volume:number = 1, loop:boolean = false,bgm:boolean):number{\n\n        let Mid:number = 0;\n\n        if( bgm ){ //关闭原来的背景音\n            // if( this._AudioBGM.Music != Music ){//播放的BGM不一样\n                 this._shopBGM();\n                 Mid = cc.audioEngine.play( musicUrl,loop,volume  );\n                 this._AudioBGM.MusicId = Mid;\n                 this._AudioBGM.Volume = volume;\n                 this._AudioBGM.Music = musicUrl;\n                 this._AudioBGM.Loop = loop;\n             //}\n             \n         }else{ //音效播放\n \n             if( !this._checkPlay( musicUrl ) ) { //判断是否可以播放\n                 //不能播相隔时间太短了f\n                 return Mid;\n             }\n             Mid = cc.audioEngine.play( musicUrl,loop,volume  );\n         }\n\n        return Mid;\n    }\n\n    public stopBGM() {\n        this._shopBGM();\n    }\n\n    /**\n     * @Content:关闭背景音\n     * @Param \n     */\n    private _shopBGM():boolean{\n\n        //cc.log( \"Music:\"+this._AudioBGM.Music+\"    MusicId:\"+this._AudioBGM.MusicId );\n\n        if( this._AudioBGM.MusicId < 0 ){ //背景音效(停止原来播放的背景音)\n            return false;\n        }\n        \n        this.stop(this._AudioBGM.MusicId);\n        this._AudioBGM.MusicId = -1;\n        this._AudioBGM.Music = \"\";\n        this._AudioBGM.Loop = false;\n        this._AudioBGM.Volume = 0;\n        \n        return true;\n\n    }\n    \n    /**\n     * 恢复背景音\n     */\n    public resumeBGM():boolean{\n        if( this._AudioBGM.MusicId < 0 ){\n            return false;\n        }\n\n        cc.audioEngine.resume( this._AudioBGM.MusicId );\n    }\n\n    /**\n     * @Content:设置音效的声音大小\n     * @Param \n     *      MusicId  :需要停止的ID\n     *      Volume   :设置声音的大小\n     */\n    public setLoop( MusicId:number, Loop:boolean ):boolean{\n        \n        cc.audioEngine.setLoop( MusicId, Loop );\n        \n        return true;\n\n    }\n\n\n    /**\n     * @Content:设置音效的声音大小\n     * @Param \n     *      MusicId  :需要停止的ID\n     *      Volume   :设置声音的大小\n     */\n    public setVolume( MusicId:number, Volume:number ):boolean{\n        \n        cc.audioEngine.setVolume( MusicId, Volume );\n\n        return true;\n\n    }\n\n\n    /**\n     * @Content:停止某一段音效报放\n     * @Param \n     *      MusicId  :需要停止的ID\n     */\n    public stop( MusicId:number ):boolean{\n\n        cc.audioEngine.stop( MusicId );  //播放的那个ID处理\n        \n        return true;\n    }\n\n\n    /**\n     * @Content:停止所有的音效报放\n     */\n    public stopAll():boolean{\n\n        cc.audioEngine.stopAll();\n        this._AUdioRunTime = {};\n        return true;\n    }\n\n     \n\n\n    /**\n     * @Content:设置音效的声音大小\n     * @Param \n     */\n    private _checkPlay( Music:string ):boolean{\n        \n        if( this._AUdioRunTime[ Music ] + 100 >= new Date().getTime() ){\n            return false;\n        }\n        this._AUdioRunTime[ Music ] = new Date().getTime();\n        return true;\n    }\n\n\n    public static getInstance():AudioManager{\n        if(this.instance == null){\n            this.instance = new AudioManager();\n            \n        }\n        return this.instance;\n    }\n\n\n    public constructor() {\n        this._AudioBGM = new AudioInfo();\n    }\n\n\n}","import { Pair } from \"../../../../base/Pair\";\nimport GameMath from \"../../../../extend/utils/GameMath\";\n\n\nexport enum AvailableSwapBaseValue{\n    None = 0,\n    MatchColor  = 20000000,\n    MergerBomb  = 30000000,\n    MatchBomb   = 10000000,\n};\n\nexport default class AvailableSwapInfo  {\n    public static create() : AvailableSwapInfo {\n        return new AvailableSwapInfo();\n    }\n    public swapPair:Pair<cc.Vec2, cc.Vec2> = new Pair<cc.Vec2, cc.Vec2>(GameMath.INVALID_LOGICAL_POSITION, GameMath.INVALID_LOGICAL_POSITION);\n    public linkedPositions:cc.Vec2[] = [];\n    public value:number = 0;\n}\n","\nexport class BehaviourEvent extends cc.Event.EventCustom {\n    public static BehaviourEventName = 'BehaviourEventName';\n    \n    public static create(behaviourName:string) : BehaviourEvent {\n        let event =  new BehaviourEvent();\n        event.behaviourName = behaviourName;\n        return event;\n    }\n    public behaviourName:string = '';\n    constructor() {\n        super(BehaviourEvent.BehaviourEventName, true);\n    }\n} \n\nexport default class BehaviourID  {\n\n    // 指引系统点击任意位置\n    public static GuideTapAnyWhere:string       = 'GuideTapAnyWhere';\n    // 指引结束\n    public static GuideFinish:string            = 'GuideFinish';\n\n\n    // 进入主界面开始\n    public static EnterMainSceneBegin:string    = 'EnterMainSceneBegin';\n    // 进入主界面结束\n    public static EnterMainSceneEnd:string      = 'EnterMainSceneEnd';\n\n\n    // 主界面宠物列表面板弹出开始\n    public static PetHouseOpenBegin:string       = 'PetHouseOpenBegin';\n    // 主界面宠物列表面板弹出结束\n    public static PetHouseOpenEnd:string         = 'PetHouseOpenEnd';\n\n    // 主界面宠物列表面板关闭开始\n    public static PetHouseCloseBegin:string       = 'PetHouseCloseBegin';\n    // 主界面宠物列表面板关闭结束\n    public static PetHouseCloseEnd:string         = 'PetHouseCloseEnd';\n    \n    \n\n    // 三消准备面板弹出开始\n    public static PrepareGameBegin:string       = 'PrepareGameBegin';\n    // 三消准备面板弹出结束\n    public static PrepareGameEnd:string         = 'PrepareGameEnd';\n    // 选中增强道具 一横向一竖向\n    public static SelectedBeignLine:string      = 'SelectedBeignLine';\n    // 选中增强道具 一交叉一范围\n    public static SelectedBeginRange:string     = 'SelectedBeginRange';\n    // 选中增强道具 一彩虹\n    public static SelectedBeginRainbow:string   = 'SelectedBeginRainbow';\n    // 三消进入游戏开始\n    public static StartGameBegin:string         = 'StartGameBegin';\n    // 三消进入游戏结束\n    public static StartGameEnd:string           = 'StartGameEnd';\n\n    \n    // 喂食开始\n    public static EnterFeedSceneBegin:string     = 'EnterFeedSceneBegin';\n    // 喂食结束\n    public static EnterFeedSceneEnd:string       = 'EnterFeedSceneEnd';\n    // 退出喂食界面\n    public static QuitFeedScene:string           = 'QuitFeedScene';\n\n\n    // 洗澡开始\n    public static EnterBathSceneBegin:string     = 'EnterBathSceneBegin';\n    // 洗澡结束\n    public static EnterBathSceneEnd:string       = 'EnterBathSceneEnd';\n    // 退出洗澡界面\n    public static QuitBathScene:string          = 'QuitBathScene';\n\n\n    // 睡觉开始\n    public static EnterSleepSceneBegin:string    = 'EnterSleepSceneBegin';\n    // 睡觉结束\n    public static EnterSleepSceneEnd:string      = 'EnterSleepSceneEnd';\n    // 退出睡觉界面\n    public static QuitSleepScene:string        = 'QuitSleepScene';\n\n\n    // 掘金开始\n    public static EnterDigGoldSceneBegin:string  = 'EnterDigGoldSceneBegin';\n    // 掘金结束\n    public static EnterDigGoldSceneEnd:string    = 'EnterDigGoldSceneEnd';\n\n    // 掘金选择宠物开始\n    public static DigGoldSelectDogBegin:string  = 'DigGoldSelectDogBegin';\n    // 掘金选择宠物结束\n    public static DigGoldSelectDogEnd:string    = 'DigGoldSelectDogEnd';\n\n    // 掘金开始\n    public static DigGoldBegin:string  = 'DigGoldBegin';\n    // 掘金结束\n    public static DigGoldEnd:string    = 'DigGoldEnd';\n    // 打开掘金奖励开始\n    public static DigGoldRewardPanelOpenBegin:string    = 'DigGoldRewardPanelOpenBegin';\n    // 打开掘金奖励结束\n    public static DigGoldRewardPanelOpenEnd:string    = 'DigGoldRewardPanelOpenEnd';\n    // 关闭掘金奖励开始\n    public static DigGoldRewardPanelCloseBegin:string    = 'DigGoldRewardPanelCloseBegin';\n    // 关闭掘金奖励结束\n    public static DigGoldRewardPanelCloseEnd:string    = 'DigGoldRewardPanelCloseEnd';\n\n    // 退出掘金界面\n    public static QuitDigGoldScene:string       = 'QuitDigGoldScene';\n\n\n    // 打开升级界面开始\n    public static UpgradePanelOpenBegin:string    = 'UpgradePanelOpenBegin';\n    // 打开升级界面结束\n    public static UpgradePanelOpenEnd:string      = 'UpgradePanelOpenEnd';\n    // 关闭升级界面开始\n    public static UpgradePanelCloseBegin:string    = 'UpgradePanelCloseBegin';\n    // 关闭升级界面结束\n    public static UpgradePanelCloseEnd:string      = 'UpgradePanelCloseEnd';\n\n\n    // 交换单位开始\n    public static GameSwapItemsBegin:string     = 'GameSwapItemsBegin';\n    // 交换单位结束\n    public static GameSwapItemsEnd:string       = 'GameSwapItemsEnd';\n    // 使用锤子道具开始\n    public static GameUseHammerBegin:string     = 'GameUseHammerBegin';\n    // 使用锤子道具结束\n    public static GameUseHammerEnd:string       = 'GameUseHammerEnd';\n    // 使用炸弹道具开始\n    public static GameUseBombBegin:string     = 'GameUseBombBegin';\n    // 使用炸弹道具结束\n    public static GameUseBombEnd:string       = 'GameUseBombEnd';\n\n    // 使用交换道具开始\n    public static GameUseSwapBegin:string     = 'GameUseSwapBegin';\n    // 使用交换道具选择第一个单位\n    public static GameUseSwapSelectFirst:string  = 'GameUseSwapSelectFirst';\n    // 使用交换道具结束\n    public static GameUseSwapEnd:string  = 'GameUseSwapEnd';\n    \n}\n","\n\nexport interface CFGTripleLevelGrassObj {\n    LevelID: number;\n    MapID: number;\n    Step: number;\n    StarScore: string;\n    DropBox: string;\n    DropProb: string;\n}\n\nexport class CFGTripleLevelGrass {\n\n    //配置路径\n    private cfgPath: string = 'CFGTripleLevelGrass';\n    //配置读取的对象\n    private cfgObj: Object[] = [];\n\n    constructor() {\n        let res = cc.loader.getRes('data/' + this.cfgPath, cc.JsonAsset) as cc.JsonAsset;\n        if (res) {\n            this.cfgObj = res.json\n        }\n    }\n\n    public getCongfigByLevelID(levelID: number): CFGTripleLevelGrassObj {\n        let cfgList = this.cfgObj;\n        for (const obj of cfgList) {\n            if (obj['LevelID'] == levelID) {\n                return obj as CFGTripleLevelGrassObj;\n            }\n        }\n\n        return null;\n    }\n}\n","\n//CFGTripleLevelOrder\nexport interface CFGTripleLevelOrderObj {\n    LevelID: number;\n    MapID: number;\n    Step: number;\n    StarScore: string;\n    DropBox: string;\n    DropProb: string;\n    Target: string;\n    TargetNum: string;\n    DropLimit: string;\n    DropLimitNum: string;\n}\n\nexport class CFGTripleLevelOrder {\n\n    //配置路径\n    private cfgPath: string = 'CFGTripleLevelOrder';\n    //配置读取的对象\n    private cfgObj: Object[] = [];\n\n    constructor() {\n\n        let res = cc.loader.getRes('data/' + this.cfgPath, cc.JsonAsset) as cc.JsonAsset;\n        if (res) {\n            this.cfgObj = res.json\n        }\n\n    }\n\n    public getCongfigByLevelID(levelID: number): CFGTripleLevelOrderObj {\n        let cfgList = this.cfgObj;\n        for (const obj of cfgList) {\n            if (obj['LevelID'] == levelID) {\n                return obj as CFGTripleLevelOrderObj;\n            }\n        }\n\n        return null;\n    }\n}\n","\n//CFGTripleLevelPath\nexport interface CFGTripleLevelPathObj {\n    LevelID: number;\n    MapID: number;\n    Step: number;\n    StarScore: string;\n    DropBox: string;\n    DropProb: string;\n    DropLimit: string;\n    DropLimitNum: string;\n}\n\nexport class CFGTripleLevelPath {\n\n    //配置路径\n    private cfgPath: string = 'CFGTripleLevelPath';\n    //配置读取的对象\n    private cfgObj: Object[] = [];\n\n    constructor() {\n\n        let res = cc.loader.getRes('data/' + this.cfgPath, cc.JsonAsset) as cc.JsonAsset;\n        if (res) {\n            this.cfgObj = res.json\n        }\n\n    }\n\n    public getCongfigByLevelID(levelID: number): CFGTripleLevelPathObj {\n        let cfgList = this.cfgObj;\n        for (const obj of cfgList) {\n            if (obj['LevelID'] == levelID) {\n                return obj as CFGTripleLevelPathObj;\n            }\n        }\n\n        return null;\n    }\n}\n","\n\n//CFGTripleLevelPopsicles\nexport interface CFGTripleLevelPopsiclesObj {\n    LevelID: number;\n    MapID: number;\n    Step: number;\n    StarScore: string;\n    DropBox: string;\n    DropProb: string;\n}\n\nexport class CFGTripleLevelPopsicles {\n\n    //配置路径\n    private cfgPath: string = 'CFGTripleLevelPopsicles';\n    //配置读取的对象\n    private cfgObj: Object[] = [];\n\n    constructor() {\n\n        let res = cc.loader.getRes('data/' + this.cfgPath, cc.JsonAsset) as cc.JsonAsset;\n        if (res) {\n            this.cfgObj = res.json\n        }\n\n    }\n\n    public getCongfigByLevelID(levelID: number): CFGTripleLevelPopsiclesObj {\n        let cfgList = this.cfgObj;\n        for (const obj of cfgList) {\n            if (obj['LevelID'] == levelID) {\n                return obj as CFGTripleLevelPopsiclesObj;\n            }\n        }\n\n        return null;\n    }\n}\n","\nexport interface CFGTripleLevelObj {\n    LevelNum: number;\n    LevelID: number;\n    LevelType: number;\n    LevelReward: string;\n    DifficultyTime: number;\n    DifficultyS1: number;\n    DifficultyS2: number;\n    Rank: number;\n}\n\nexport class CFGTripleLevel {\n\n    //配置路径\n    private cfgPath: string = 'CFGTripleLevel';\n    //配置读取的对象\n    private cfgObj: Object[] = [];\n\n    //单例对象\n    private static instance: CFGTripleLevel = null;\n\n    public static getInstance(): CFGTripleLevel {\n        if (this.instance == null) {\n            this.instance = new CFGTripleLevel();\n        }\n        return this.instance;\n    }\n\n    constructor() {\n\n        let res = cc.loader.getRes('data/' + this.cfgPath, cc.JsonAsset) as cc.JsonAsset;\n        if (res) {\n            this.cfgObj = res.json\n        }\n    }\n\n    public getCongfigByLevelNum(levelNum: number): CFGTripleLevelObj {\n        let cfgList = this.cfgObj;\n        for (const obj of cfgList) {\n            if (obj['LevelNum'] == levelNum) {\n                return obj as CFGTripleLevelObj;\n            }\n        }\n\n        return null;\n    }\n}\n","\n//CFGTripleMapTileset\nexport interface CFGTripleMapTilesetObj {\n    TilesetName: string;\n    Properties: string;\n\n}\n\nexport class CFGTripleMapTileset {\n\n    //配置路径\n    private cfgPath: string = 'CFGTripleMapTileset';\n    //配置读取的对象\n    private cfgObj: Object[] = [];\n\n    constructor() {\n\n        let res = cc.loader.getRes('data/' + this.cfgPath, cc.JsonAsset) as cc.JsonAsset;\n        if (res) {\n            this.cfgObj = res.json\n        }\n\n    }\n\n    public getTilesetByName(tilesetName: string): CFGTripleMapTilesetObj {\n\n        for (let obj of this.cfgObj) {\n            let tmpObj: CFGTripleMapTilesetObj = obj as CFGTripleMapTilesetObj;\n            if (tmpObj.TilesetName == tilesetName) {\n                return tmpObj;\n            }\n        }\n\n        return null;\n    }\n\n}","\n\n//CFGTripleMap\nexport interface CFGTripleMapObj {\n    MapId: string;\n    MapData: string;\n}\n\nexport class CFGTripleMap {\n    //配置路径\n    private cfgPath: string = 'CFGTripleMap';\n    constructor() {\n    }\n\n    public getMapDataByMapId(mapId: string): string {\n        //这里改成拆分地图读取\n        let mapStr: string = '';\n\n        let res = cc.loader.getRes('data/' + this.cfgPath + mapId, cc.JsonAsset) as cc.JsonAsset;\n        if (res) {\n            let tmpObj: CFGTripleMapObj = res.json as CFGTripleMapObj;\n            mapStr = tmpObj.MapData;\n        }\n        return mapStr;\n    }\n\n}","import GameMath from \"../../../../extend/utils/GameMath\";\nimport GridCommand, { GridCommandType } from \"../../commond/GridCommand\";\nimport { EntityGroupID } from \"../../defines/EntityGroupID\";\nimport { EntityCleanOption, EntityCleanType, EntityID, EntityType, EntityColor } from \"../../defines/EntityID\";\nimport IdentifierManager from \"../../defines/IdentifierManager\";\nimport TMXConfigInfoKeys from \"../../defines/TMXConfigInfoKeys\";\nimport GridBase from \"../../grid/GridBase\";\nimport EntityBase from \"../EntityBase\";\n\n// Learn TypeScript:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/typescript.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/typescript.html\n// Learn Attribute:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html\n\nexport enum CellType {\n    None,\n    Normal,\n    Conveyer,\n    MovablePlate,\n};\n\nexport enum GenerateType{\n    None,\n    Default,\n    Probabilistic,\n    List,\n};\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class CellBase extends EntityBase {\n\n    private _cellType:CellType = CellType.None;\n    public getCellType() : CellType {\n        return this._cellType;\n    }\n\n    private _crystalAttackPriority:number = 999;\n    public getCrystalAttackPriority() : number {\n        return this._crystalAttackPriority;\n    }\n    public setCrystalAttackPriority(priority:number) : void {\n        this._crystalAttackPriority = priority;\n    }\n\n    private _isBoneCollector:boolean = false;\n    public getIsBoneCollector() : boolean {\n        return this._isBoneCollector;\n    }\n    public setIsBoneCollector(isBoneCollector:boolean) : void {\n        this._isBoneCollector = isBoneCollector;\n    }\n\n    private _needGrass:boolean = false;\n    public getNeedGrass() : boolean {\n        return this._needGrass;\n    }\n    public setNeedGrass(needGrass:boolean) : void{\n        this._needGrass = needGrass;\n    }\n\n    private _generateType:GenerateType = GenerateType.None;\n    public getGenerateType() : GenerateType {\n        return this._generateType;\n    }\n    public setGenerateType(generateType:GenerateType) : void {\n        this._generateType = generateType;\n    }\n\n    private _generateCount:number = 0;\n    public getGenerateCount() : GenerateType {\n        return this._generateCount;\n    }\n    public setGenerateCount(generateCount:number) : void {\n        this._generateCount = generateCount;\n    }\n\n    public canGenerateItem() : boolean {\n        switch (this._generateType) {\n            case GenerateType.Default:\n            case GenerateType.Probabilistic:\n            case GenerateType.List:\n                return true;\n                break;\n                \n            default:\n                break;\n        }\n        return false;\n    }\n    public nextItemID() : EntityID {\n\n        let result:EntityID = EntityID.None; \n        \n        switch (this._generateType) {\n            case GenerateType.Default:{\n                result =  this.getGrid().getGlobalRandomEntityID();\n            }\n                break;\n            case GenerateType.Probabilistic:{\n                let grid = this.getGrid();\n                result = grid.getRandomEntityID(this._dropEntityMap, \n                                                grid.getLimitedEntityMap(), \n                                                grid.getLimitedGroupMap());\n                if (this._generateCount > 0) {\n                    this._generateCount--;\n                    if (this._generateCount <= 0) {\n                        this._generateType = GenerateType.Default;\n                    }\n                }\n            }\n                break;\n            case GenerateType.List:{\n                if (this._dropIndex < this._dropList.length) {\n                    let name = this._dropList[this._dropIndex];\n                    let entityID = IdentifierManager.getInstance().getEntityIDFromString(name);\n                    if (entityID != EntityID.None) {\n                        result = entityID;\n                    }else{\n                        let groupID = IdentifierManager.getInstance().getEntityGroupIDFromString(name);\n                        if (groupID != EntityGroupID.None) {\n                            let globalDropEntityMap = this.getGrid().getDropEntityMap();\n                            let basicEntityIDs = IdentifierManager.getInstance().getEntityIDsFromEntityGroupID(EntityGroupID.ItemNormal);\n                            let totalProbability = 0;\n                            for (const entityID of basicEntityIDs) {\n                                let dropValue = globalDropEntityMap[entityID];\n                                if (dropValue) {\n                                    totalProbability += dropValue;\n                                }\n                            }\n\n                            let availableEntityIDs = IdentifierManager.getInstance().getEntityIDsFromEntityGroupID(groupID);\n                            let randomValue = GameMath.randomInt(0, totalProbability);\n\n                            let sum = 0;\n                            for (const entityID of availableEntityIDs) {\n                                let basicEntityID = IdentifierManager.getInstance().getCorrespondingNormlaEntityID(entityID);\n                                let dropValue = globalDropEntityMap[basicEntityID];\n                                if (dropValue) {\n                                    sum += dropValue;\n                                    if (randomValue <= sum) {\n                                        result = entityID;\n                                        break;\n                                    }\n                                }\n                            }\n                        }\n                    }\n\n                    if (result != EntityID.None) {\n                        this._dropIndex = (this._dropIndex + 1) % this._dropList.length;\n\n                        if (this._generateCount > 0) {\n                            this._generateCount--;\n                            if (this._generateCount <= 0) {\n                                this._generateType = GenerateType.Default;\n                            }\n                        }\n                    }\n                }\n                \n            }\n                break;\n        \n            default:\n                break;\n        }                     \n        return result;\n    }\n    \n    private _dropEntityMap:Object = {};\n    public getDropEntityMap() : Object {\n        return this._dropEntityMap;\n    }\n    public setDropEntityMap(dropEntityMap:Object) : void {\n        this._dropEntityMap = dropEntityMap;\n    }\n\n    private _dropList:string[] = [];\n    public getDropList() : string[] {\n        return this._dropList;\n    }\n    public setDropList(dropList:string[]) : void {\n        this._dropList = dropList;\n    }\n    \n    private _dropIndex:number = 0;\n    public getDropIndex() : number {\n        return this._dropIndex;\n    }\n    public setDropIndex(dropIndex:number) : void {\n        this._dropIndex = dropIndex;\n    }\n  \n    private _isWormholeEntrance:boolean = false;\n    public getIsWormholeEntrance() : boolean {\n        return this._isWormholeEntrance;\n    }\n    public setIsWormholeEntrance(isWormholeEntrance:boolean) : void {\n        this._isWormholeEntrance = isWormholeEntrance;\n    }\n\n    private _wormholeDestination:cc.Vec2 = cc.Vec2.ZERO;\n    public getWormholeDestination() : cc.Vec2 {\n        return this._wormholeDestination;\n    }\n    public setWormholeDestination(wormholeDestination:cc.Vec2) : void {\n        this._wormholeDestination = wormholeDestination;\n    }\n\n    private _isWormholeExit:boolean = false;\n    public getIsWormholeExit() : boolean {\n        return this._isWormholeExit;\n    }\n    public setIsWormholeExit(isWormholeExit:boolean) : void {\n        this._isWormholeExit = isWormholeExit;\n    }\n\n    private _wormholeSource:cc.Vec2 = cc.Vec2.ZERO;\n    public getWormholeSource() : cc.Vec2 {\n        return this._wormholeSource;\n    }\n    public setWormholeSource(wormholeSource:cc.Vec2) : void {\n        this._wormholeSource = wormholeSource;\n    }\n\n    public canHoldItem() : boolean {\n        return true;\n    }\n    public canPassThrough() : boolean {\n        return false;\n    }\n\n    private initDropEntityMap(keys:string, values:string) {\n        this._dropEntityMap = {};\n        let valuePair = IdentifierManager.getInstance().phraseKeyValuePairs(keys, values);\n\n        for (const name in valuePair) {\n            let value = Number(valuePair[name]);\n            let entityID = IdentifierManager.getInstance().getEntityIDFromString(name);\n            if (entityID != EntityID.None) {\n                this._dropEntityMap[entityID] = value * 100;\n            }\n        }\n        \n        let globalDropEntityMap = this.getGrid().getDropEntityMap();\n        let basicColorEntityIDs = IdentifierManager.getInstance().getEntityIDsFromEntityGroupID(EntityGroupID.ItemNormal);\n\n        let totalProbability = 0;\n        for (const entityID of basicColorEntityIDs) {\n            let value = globalDropEntityMap[entityID];\n            if (value) {\n                totalProbability += value;\n            }\n        }\n\n        for (const name in valuePair) {\n            let value = Number(valuePair[name]) * 100;\n            let groupID = IdentifierManager.getInstance().getEntityGroupIDFromString(name);\n            if (groupID != EntityGroupID.None) {\n                let entityIDs = IdentifierManager.getInstance().getEntityIDsFromEntityGroupID(groupID);\n                for (const entityID of entityIDs) {\n                    let basicEntityID = IdentifierManager.getInstance().getCorrespondingNormlaEntityID(entityID);\n                    let globalValue = globalDropEntityMap[basicEntityID];\n                    if (globalValue) {\n                        this._dropEntityMap[entityID] = value * (globalValue / totalProbability);\n                    }\n                }\n            }  \n        }\n    }\n    public dealWithConfigMap(config:Object) : void {\n        super.dealWithConfigMap(config);\n\n        let crystalAttackPriority = config[TMXConfigInfoKeys.CFG_MATIC_CRYSTAL_ATK_POINT];\n        if (crystalAttackPriority) {\n            this.setCrystalAttackPriority(Number(crystalAttackPriority));\n        }\n\n        let dropTypeString = config[TMXConfigInfoKeys.CFG_DROP_KEY_TYPE];\n        if (dropTypeString) {\n            if(dropTypeString == TMXConfigInfoKeys.CFG_DROP_VALUE_TYPE_DEFAULT){\n                this._generateType = GenerateType.Default;\n            }else if(dropTypeString == TMXConfigInfoKeys.CFG_DROP_VALUE_TYPE_NOT){\n                this._generateType = GenerateType.None;\n            }else if(dropTypeString == TMXConfigInfoKeys.CFG_DROP_VALUE_TYPE_PROB){\n                this._generateType = GenerateType.Probabilistic;\n                \n                let types = config[TMXConfigInfoKeys.CFG_DROP_KEY_BOX];\n                let values = config[TMXConfigInfoKeys.CFG_DROP_KEY_PROB];\n                if (types && values) {\n                    this.initDropEntityMap(types, values);\n                }\n                \n                let generateCount = config[TMXConfigInfoKeys.CFG_DROP_KEY_NUM];\n                if (generateCount) {\n                    this._generateCount = Number(generateCount); \n                }\n                \n                if (GameMath.isEmptyObject(this._dropEntityMap)) {\n                    this._generateType = GenerateType.Default;\n                }\n\n            }else if(dropTypeString == TMXConfigInfoKeys.CFG_DROP_VALUE_TYPE_LIST){\n                \n                this._generateType = GenerateType.List;\n                this._dropIndex = 0;\n                GameMath.clearArray(this._dropList);\n\n                let typesString = config[TMXConfigInfoKeys.CFG_DROP_KEY_BOX];\n                if (typesString) {\n                    let types = IdentifierManager.getInstance().phraseTokens(typesString);\n                    for (const typeName of types) {\n                        let entityID = IdentifierManager.getInstance().getEntityIDFromString(typeName);\n                        if (entityID != EntityID.None) {\n                            this._dropList.push(typeName);\n                        }else{\n                            let groupID = IdentifierManager.getInstance().getEntityGroupIDFromString(typeName);\n                            if (groupID != EntityGroupID.None) {\n                                this._dropList.push(typeName);\n                            }\n                        }\n                    }\n\n                    if (GameMath.isEmptyObject(this._dropList)) {\n                        this._generateType = GenerateType.Default;\n                    }\n                    \n                    let generateCount = config[TMXConfigInfoKeys.CFG_DROP_KEY_NUM];\n                    if (generateCount) {\n                        this._generateCount = Number(generateCount); \n                    }\n                }\n            }\n        }else{\n            let isTop = config[TMXConfigInfoKeys.CFG_DROP_KEY_IS_TOP];\n            if (isTop) {\n                this._generateType = GenerateType.Default;\n            }\n        }\n        \n        let isBoneCollectorString = config[TMXConfigInfoKeys.CFG_MARK_BONE_COLLECTOR_KEY_TYPE];\n        if (isBoneCollectorString) {\n            if (isBoneCollectorString == TMXConfigInfoKeys.CFG_MARK_BONE_COLLECTOR_VALUE_DEFAULT) {\n                this.setIsBoneCollector(true);\n            }\n        }\n     \n        let wormHoleString = config[TMXConfigInfoKeys.CFG_WORMHOLE_KEY_TYPE];\n        if (wormHoleString) {\n            if (wormHoleString == TMXConfigInfoKeys.CFG_WORMHOLE_VALUE_ENTRANCE) {\n                let postalString = config[TMXConfigInfoKeys.CFG_WORMHOLE_POSTAL_KEY_TYPE];\n                if (postalString) {\n                    let postalPos = GameMath.getVec2FromConfigString(postalString);\n                    if (postalPos) {\n                        this.setWormholeDestination(postalPos);\n                        this.setIsWormholeEntrance(true);        \n                    }\n                }\n            }else if (wormHoleString == TMXConfigInfoKeys.CFG_WORMHOLE_VALUE_EXIT) {\n                let postalString = config[TMXConfigInfoKeys.CFG_WORMHOLE_POSTAL_KEY_TYPE];\n                if (postalString) {\n                    let postalPos = GameMath.getVec2FromConfigString(postalString);\n                    if (postalPos) {\n                        this.setWormholeSource(postalPos);\n                        this.setIsWormholeExit(true);    \n                        this.setGenerateType(GenerateType.None);    \n                    }\n                }\n            }else if (wormHoleString == TMXConfigInfoKeys.CFG_WORMHOLE_VALUE_NONE) {\n                this.setIsWormholeEntrance(false);\n                this.setWormholeDestination(GameMath.INVALID_LOGICAL_POSITION);\n                this.setIsWormholeExit(false);\n                this.setWormholeSource(GameMath.INVALID_LOGICAL_POSITION);\n            }\n        }\n    }\n\n    public onConvey() : cc.Vec2 {\n        return GameMath.INVALID_LOGICAL_POSITION;\n    }\n\n    public canExcuteCommand(command:GridCommand) : boolean {\n        switch (command.type) {\n            case GridCommandType.LayoutGrass:{\n                return this.canLayoutGrass();\n            }\n                break;\n            case GridCommandType.BombClean:{\n                return this.canCleanByBomb(command.cleanColor);\n            }\n                break;\n            default:\n                break;\n        }\n        return false;\n    }\n    public excuteCommand(command:GridCommand) : void {\n        if (!this.canExcuteCommand(command)) {\n            return;\n        }\n        switch (command.type) {\n            case GridCommandType.LayoutGrass:{\n                let cleanOption = EntityCleanOption.create(EntityCleanType.LayoutGrass,\n                                                           command.cleanRoot,\n                                                           command.cleanColor,\n                                                           command.createBombType,\n                                                           command.hitNeighbour,\n                                                           command.hitFloor,\n                                                           command.layoutGrass);\n                this.onClean(cleanOption);\n            }\n                break;\n            default:\n                break;\n        }\n    } \n\n    public onClean(cleanOption : EntityCleanOption) {\n        this._onClean(cleanOption);\n        this.setImmuneDamage(true);\n    }\n    protected _onClean(cleanOption : EntityCleanOption) {\n\n    }\n    \n    public canCleanByBomb(cleanColor:EntityColor) : boolean { \n        if (!this.getImmuneDamage()) {\n            return this._canCleanByBomb(cleanColor);\n        }\n        return false;\n    }\n    protected _canCleanByBomb(cleanColor:EntityColor) : boolean {\n        return false;\n    }\n\n    public canLayoutGrass() : boolean {\n        if (!this.getImmuneDamage()) {\n            return this._canLayoutGrass();\n        }\n        return false;\n    }\n    protected _canLayoutGrass() : boolean {\n        return false;\n    }\n\n    protected initCell(grid:GridBase, cellType:CellType) : void {\n        super.initEntity(grid, EntityType.Cell);\n        this._cellType = cellType;\n        \n        this._crystalAttackPriority = 999;\n        this._isBoneCollector = false;\n        this._needGrass = false;\n        this._generateType = GenerateType.None;\n        this._generateCount = 0;\n        this._dropEntityMap = {};\n        this._dropList.length = 0;\n        this._dropIndex = 0;\n        this._isWormholeEntrance = false;\n        this._wormholeDestination = cc.Vec2.ZERO;\n        this._isWormholeExit = false;\n        this._wormholeSource = cc.Vec2.ZERO;\n    }\n    \n    // LIFE-CYCLE CALLBACKS:\n\n    // onLoad () {}\n\n    start () {\n\n    }\n\n    // update (dt) {}\n\n    onDestroy() {\n        super.onDestroy();\n        this._dropEntityMap = null;\n        this._dropList = null;\n        this._wormholeDestination = null;\n        this._wormholeSource = null;\n    }\n}\n","import GameMath from \"../../../../extend/utils/GameMath\";\nimport { CollectionID } from \"../../defines/CollectionID\";\nimport { EntityID, EntityType } from \"../../defines/EntityID\";\nimport TMXConfigInfoKeys from \"../../defines/TMXConfigInfoKeys\";\nimport GridBase from \"../../grid/GridBase\";\nimport EntityPrefabNodePool from \"../EntityPrefabNodePool\";\nimport { CellType } from \"./CellBase\";\nimport CellNormal from \"./CellNormal\";\n\n// Learn TypeScript:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/typescript.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/typescript.html\n// Learn Attribute:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html\n\nexport enum  CellConveyerDirection{\n    None,\n    Left,\n    Right,\n    Up,\n    Down,\n};\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class CellConveyer extends CellNormal {\n\n    public getCollectionID():CollectionID{\n        return CollectionID.CellConveyer;\n    }\n\n    public getEntityID() : EntityID {\n        let result = EntityID.None;\n        switch (this._inDirection) {\n            case CellConveyerDirection.Left:{\n                switch (this._outDirection) {\n                    case CellConveyerDirection.Right:{\n                        result = EntityID.CellConveyerL2R;\n                    }\n                        break;\n                    case CellConveyerDirection.Up:{\n                        result = EntityID.CellConveyerL2U;\n                    }\n                        break;\n                    case CellConveyerDirection.Down:{\n                        result = EntityID.CellConveyerL2D;\n                    }\n                        break;\n                        \n                    default:\n                        break;\n                }\n            }\n                break;\n            case CellConveyerDirection.Right:{\n                switch (this._outDirection) {\n                    case CellConveyerDirection.Left:{\n                        result = EntityID.CellConveyerR2L;\n                    }\n                        break;\n                    case CellConveyerDirection.Up:{\n                        result = EntityID.CellConveyerR2U;\n                    }\n                        break;\n                    case CellConveyerDirection.Down:{\n                        result = EntityID.CellConveyerR2D;\n                    }\n                        break;\n                        \n                    default:\n                        break;\n                }\n            }\n                break;\n            case CellConveyerDirection.Up:{\n                switch (this._outDirection) {\n                    case CellConveyerDirection.Left:{\n                        result = EntityID.CellConveyerU2L;\n                    }\n                        break;\n                    case CellConveyerDirection.Right:{\n                        result = EntityID.CellConveyerU2R;\n                    }\n                        break;\n                    case CellConveyerDirection.Down:{\n                        result = EntityID.CellConveyerU2D;\n                    }\n                        break;\n                        \n                    default:\n                        break;\n                }\n            }\n                break;\n            case CellConveyerDirection.Down:{\n                switch (this._outDirection) {\n                    case CellConveyerDirection.Left:{\n                        result = EntityID.CellConveyerD2L;\n                    }\n                        break;\n                    case CellConveyerDirection.Right:{\n                        result = EntityID.CellConveyerD2R;\n                    }\n                        break;\n                    case CellConveyerDirection.Up:{\n                        result = EntityID.CellConveyerD2U;\n                    }\n                        break;\n                        \n                    default:\n                        break;\n                }\n            }\n                break;\n                \n            default:\n                break;\n        }\n        return result;\n    }\n\n    private _inDirection:CellConveyerDirection = CellConveyerDirection.None;\n    public getInDirection() : CellConveyerDirection {\n        return this._inDirection;\n    }\n    public setInDirection(direction:CellConveyerDirection) : void {\n        this._inDirection = direction;\n    }\n\n    private _outDirection:CellConveyerDirection = CellConveyerDirection.None;\n    public getOutDirection() : CellConveyerDirection {\n        return this._outDirection;\n    }\n    public setOutDirection(direction:CellConveyerDirection) : void {\n        this._outDirection = direction;\n    }\n\n    private _postalPos:cc.Vec2 = GameMath.INVALID_LOGICAL_POSITION.clone();\n    public getPostalPos() : cc.Vec2 {\n        return this._postalPos;\n    }\n    public setPostalPos(postal:cc.Vec2) : void {\n        this._postalPos = postal;\n    }\n\n    public dealWithConfigMap(configMap:Object){\n        super.dealWithConfigMap(configMap);\n        let conveyerString = configMap[TMXConfigInfoKeys.CFG_CONVEYER_POSTAL_KEY_TYPE];\n        if (conveyerString) {\n            let postalString = configMap[TMXConfigInfoKeys.CFG_CONVEYER_POSTAL_VALUE_KEY];\n            if (postalString) {\n                this._postalPos = GameMath.getVec2FromConfigString(postalString);\n            }\n        }\n    }\n    \n    protected getInLogicalPos() : cc.Vec2  {\n        let result = this.getLogicalPos();\n        if (!this._postalPos.equals(GameMath.INVALID_LOGICAL_POSITION)) {\n            \n            let cell = this.getGrid().getCellAtLogicalPos(this._postalPos);\n            if (cell && cell.getCellType() == CellType.Conveyer) {\n                let conveyer = cell as CellConveyer;\n                \n                switch (conveyer.getInDirection()) {\n                    case CellConveyerDirection.Left:{\n                        result = this._postalPos.add(cc.v2(-1, 0)) ;\n                    }\n                        break;\n                    case CellConveyerDirection.Right:{\n                        result = this._postalPos.add(cc.v2(1, 0));\n                    }\n                        break;\n                    case CellConveyerDirection.Up:{\n                        result = this._postalPos.add(cc.v2(0, 1));\n                    }\n                        break;\n                    case CellConveyerDirection.Down:{\n                        result = this._postalPos.add(cc.v2(0, -1));\n                    }\n                        break;\n                        \n                    default:\n                        break;\n                }\n            }\n        }\n        return result;\n    }\n    \n    public getOutLogicalPos() : cc.Vec2 {\n    \n        let result = this.getLogicalPos().clone();\n        \n        if (!this._postalPos.equals(GameMath.INVALID_LOGICAL_POSITION)) {\n            result = this._postalPos;\n        }else{\n            switch (this._outDirection) {\n                case CellConveyerDirection.Left:{\n                    result.addSelf(cc.v2(-1, 0));\n                }\n                    break;\n                case CellConveyerDirection.Right:{\n                    result.addSelf(cc.v2(1, 0));\n                }\n                    break;\n                case CellConveyerDirection.Up:{\n                    result.addSelf(cc.v2(0, 1));\n                }\n                    break;\n                case CellConveyerDirection.Down:{\n                    result.addSelf(cc.v2(0, -1));\n                }\n                    break;\n                    \n                default:\n                    break;\n            }\n        }\n        \n        return result;\n    }\n\n    protected getDoppelgangerInLogicalPos() : cc.Vec2 {\n        return this.getLogicalPos();\n    }\n    \n    protected getDoppelgangerOutLogicalPos() : cc.Vec2 {\n        let result = this.getLogicalPos().clone();\n        switch (this._outDirection) {\n            case CellConveyerDirection.Left:{\n                result.addSelf(cc.v2(-1, 0));\n            }\n                break;\n            case CellConveyerDirection.Right:{\n                result.addSelf(cc.v2(1, 0));\n            }\n                break;\n            case CellConveyerDirection.Up:{\n                result.addSelf(cc.v2(0, 1));\n            }\n                break;\n            case CellConveyerDirection.Down:{\n                result.addSelf(cc.v2(0, -1));\n            }\n                break;\n                \n            default:\n                break;\n        }\n        return result;\n    }\n\n\n    protected conveyerEntity(type:EntityType, inPos:cc.Vec2, outPos:cc.Vec2) {\n        let grid = this.getGrid();\n        let logicalPos = this.getLogicalPos();\n        let entity = grid.getEntity(type, logicalPos);\n        if (entity) {\n            entity.removeFromGrid();\n            let layer = grid.getConveyerLayer();\n            layer.addChild(entity.node);\n            entity.node.setPosition(entity.getPixelPos(inPos));\n            grid.addObstructs(entity);\n            \n            let targetPos = entity.getPixelPos(outPos);\n            let action = cc.sequence(cc.moveTo(0.4, targetPos),\n                        cc.callFunc(()=>{\n                            grid.setEntity(entity, outPos);\n                            grid.removeObstructs(entity);\n                        }));\n            entity.runAction(action);\n        }\n    }\n    \n    protected conveyerDoppelganger(type:EntityType, inPos:cc.Vec2, outPos:cc.Vec2){\n        \n        let grid = this.getGrid();\n        let logicalPos = this.getLogicalPos();\n        let entity = grid.getEntity(type, logicalPos);\n        if (entity) {\n            let doppelganger = entity.clone();\n            if (doppelganger) {\n                let layer = grid.getConveyerLayer();\n                layer.addChild(doppelganger.node);\n                \n               \n                doppelganger.node.setPosition(entity.getPixelPos(inPos));\n                doppelganger.node.zIndex = entity.getTopZOrder();\n                \n                let targetPos = entity.getPixelPos(outPos);\n                let action = cc.sequence(cc.moveTo(0.4, targetPos),\n                                         cc.callFunc(()=>{\n                                            doppelganger.node.destroy();\n                                        }));\n                doppelganger.runAction(action);\n            }\n        }\n    }\n    \n    public onConvey() : cc.Vec2 {\n    \n        let conveyerTypes:EntityType[] = [\n            EntityType.Popsicle,\n            EntityType.Floor,\n            EntityType.Rug,\n            EntityType.Item,\n            EntityType.Parasite,\n        ]\n        \n        \n        let inPos = this.getInLogicalPos();\n        let outPos = this.getOutLogicalPos();\n        let doppelgangerInPos = this.getDoppelgangerInLogicalPos();\n        let doppelgangerOutPos = this.getDoppelgangerOutLogicalPos();\n        let needDoppelganger = false;\n        if (!this.getPostalPos().equals(GameMath.INVALID_LOGICAL_POSITION)) {\n            needDoppelganger = true;\n        }\n\n        for (let type of conveyerTypes) {\n            if (needDoppelganger) {\n                this.conveyerDoppelganger(type, doppelgangerInPos, doppelgangerOutPos);\n            }\n            this.conveyerEntity(type, inPos, outPos);\n        }\n        \n        return outPos;\n    }\n\n    protected initConveyer(grid:GridBase, inDirection:CellConveyerDirection, outDirection : CellConveyerDirection){\n        super.initCell(grid, CellType.Conveyer);\n        \n        this._inDirection = inDirection;\n        this._outDirection = outDirection;\n        this._postalPos = GameMath.INVALID_LOGICAL_POSITION.clone();\n        this.updatePuppet();\n    }\n    \n    public static createConveyer(grid:GridBase, inDirection:CellConveyerDirection, outDirection : CellConveyerDirection) : CellConveyer{\n        let className = 'CellConveyer';\n        let prefabFileName = 'match_scene/prefab/entity/cell/CellConveyer';\n        let pool = EntityPrefabNodePool.getInstance();\n        let component = pool.getPrefabNodeWithFileNameAndClassName(prefabFileName, className) as CellConveyer;\n        if (component) {\n            component.initConveyer(grid, inDirection, outDirection);\n            return component;       \n        }\n        return null;\n    }\n\n    // LIFE-CYCLE CALLBACKS:\n\n    // onLoad () {}\n\n    start () {\n\n    }\n\n    // update (dt) {}\n\n    onDestroy() {\n        super.onDestroy();\n        this._postalPos = null;\n    }\n}\n","import { EntityID } from \"../../defines/EntityID\";\nimport IdentifierManager from \"../../defines/IdentifierManager\";\nimport { KindID } from \"../../defines/KindID\";\nimport GridBase from \"../../grid/GridBase\";\nimport CellBase from \"./CellBase\";\nimport CellNormal from \"./CellNormal\";\nimport CellConveyer, { CellConveyerDirection } from \"./CellConveyer\";\nimport CellMovablePlate from \"./CellMovablePlate\";\n\nexport default class CellFactory  {\n\n    public static generateCellWithEntityID(grid:GridBase, entityID:EntityID) : CellBase {\n        let cell:CellBase = null;\n\n        switch (entityID) {\n            case EntityID.CellNormal:{\n                cell = CellNormal.create(grid);\n            }\n                break;\n            case EntityID.CellConveyerL2R:{\n\n                cell = CellConveyer.createConveyer(grid, CellConveyerDirection.Left, CellConveyerDirection.Right);\n            }\n                break;\n            case EntityID.CellConveyerL2U:{\n                cell = CellConveyer.createConveyer(grid, CellConveyerDirection.Left, CellConveyerDirection.Up);\n            }\n                break;\n            case EntityID.CellConveyerL2D:{\n                cell = CellConveyer.createConveyer(grid, CellConveyerDirection.Left, CellConveyerDirection.Down);\n            }\n                break;\n            case EntityID.CellConveyerR2L:{\n                cell = CellConveyer.createConveyer(grid, CellConveyerDirection.Right, CellConveyerDirection.Left);\n            }\n                break;\n            case EntityID.CellConveyerR2U:{\n                cell = CellConveyer.createConveyer(grid, CellConveyerDirection.Right, CellConveyerDirection.Up);\n            }\n                break;\n            case EntityID.CellConveyerR2D:{\n                cell = CellConveyer.createConveyer(grid, CellConveyerDirection.Right, CellConveyerDirection.Down);\n            }\n                break;\n            case EntityID.CellConveyerU2L:{\n                cell = CellConveyer.createConveyer(grid, CellConveyerDirection.Up, CellConveyerDirection.Left);\n            }\n                break;\n            case EntityID.CellConveyerU2R:{\n                cell = CellConveyer.createConveyer(grid, CellConveyerDirection.Up, CellConveyerDirection.Right);\n            }\n                break;\n            case EntityID.CellConveyerU2D:{\n                cell = CellConveyer.createConveyer(grid, CellConveyerDirection.Up, CellConveyerDirection.Down);\n            }\n                break;\n            case EntityID.CellConveyerD2L:{\n                cell = CellConveyer.createConveyer(grid, CellConveyerDirection.Down, CellConveyerDirection.Left);\n            }\n                break;\n            case EntityID.CellConveyerD2R:{\n                cell = CellConveyer.createConveyer(grid, CellConveyerDirection.Down, CellConveyerDirection.Right);\n            }\n                break;\n            case EntityID.CellConveyerD2U:{\n                cell = CellConveyer.createConveyer(grid, CellConveyerDirection.Down, CellConveyerDirection.Up);\n            }\n                break;\n            case EntityID.CellMovablePlate:{\n                cell = CellMovablePlate.create(grid);\n            }\n                break;\n            \n            default:\n                break;\n        }\n        return cell; \n    }\n\n    public static generateCellWithKindID(grid:GridBase, kindID:KindID) : CellBase {\n        let entityID = IdentifierManager.getInstance().getEntityIDFromKindID(kindID);\n        return this.generateCellWithEntityID(grid, entityID);\n    }\n\n\n}","import GameMath from \"../../../../extend/utils/GameMath\";\nimport { CollectionID } from \"../../defines/CollectionID\";\nimport { EntityID, EntityType } from \"../../defines/EntityID\";\nimport TMXConfigInfoKeys from \"../../defines/TMXConfigInfoKeys\";\nimport GridBase from \"../../grid/GridBase\";\nimport EntityPrefabNodePool from \"../EntityPrefabNodePool\";\nimport { CellType } from \"./CellBase\";\nimport CellNormal from \"./CellNormal\";\n\n// Learn TypeScript:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/typescript.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/typescript.html\n// Learn Attribute:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class CellMovablePlate extends CellNormal {\n\n    public static create(grid:GridBase) : CellMovablePlate {\n        let className = 'CellMovablePlate';\n        let prefabFileName = 'match_scene/prefab/entity/cell/CellMovablePlate';\n        let pool = EntityPrefabNodePool.getInstance();\n        let component = pool.getPrefabNodeWithFileNameAndClassName(prefabFileName, className) as CellMovablePlate;\n        if (component) {\n            component.init(grid);\n            return component;       \n        }\n        return null;\n    }\n\n    public init(grid:GridBase) : void {\n        super.initCell(grid, CellType.MovablePlate);\n        this._movePath.length = 0;\n        this._moveInterval = 1;\n        this._moveSteps = 1;\n        this._hasFirstMove = false;\n        this._firstMoveSteps = 0;\n        this._firstMoveInterval = 0;\n        this._currentInterval = 0;\n        this._currentPathIndex = 0;\n    }\n\n    public getCollectionID() : CollectionID {\n        return CollectionID.CellMovablePlate;\n    }\n\n    public getEntityID() : EntityID {\n        return EntityID.CellMovablePlate;\n    }\n\n    public dealWithConfigMap(configMap:Object) : void {\n        super.dealWithConfigMap(configMap);\n        \n        let keyPoints:cc.Vec2[] = [];\n        let path:Object = configMap[TMXConfigInfoKeys.CFG_MOVABLE_PLATE_PATH_KEY_TYPE];\n        if (path) {\n            let count:number = 0;\n            for (let key in path) {\n                count += 1\n            }\n            for (let index = 0; index < count; index++) {\n                let pos = path[index];\n                keyPoints.push(pos);\n            }\n        }\n\n        if (keyPoints.length > 0) {\n            let count = keyPoints.length;\n            \n            this._movePath.push(keyPoints[0]);\n            for (let i = 0; i < count; i++) {\n                if (i + 1 < count) {\n                    let start = keyPoints[i];\n                    let end = keyPoints[i + 1];\n                    let offset = end.sub(start);\n        \n                    let length = 0;\n                    let step = cc.Vec2.ZERO;\n                    if (offset.x == 0) {\n                        length = Math.abs(offset.y);\n                        step = offset.y > 0 ? cc.v2(0, 1) : cc.v2(0, -1);\n                    }else if (offset.y == 0){\n                        length = Math.abs(offset.x);\n                        step = offset.x > 0 ? cc.v2(1, 0) : cc.v2(-1, 0);\n                    }\n                    \n                    for (let j = 1; j <= length; j++) {\n                        let pos = start.add(step.mul(j));\n                        this._movePath.push(pos);\n                    }\n                }\n            }\n            if (this._movePath[this._movePath.length - 1].equals(this._movePath[0])) {\n                this._movePath.pop();\n            }else{\n                for (let index = this._movePath.length - 2; index > 0; index--) {\n                    this._movePath.push(this._movePath[index]);\n                }\n            }\n        }\n        \n        // 每次移动的格子数\n        let moveSteps = configMap[TMXConfigInfoKeys.CFG_MOVABLE_PLATE_PATH_MOVE_TYPE];\n        if (moveSteps) {\n            this._moveSteps = Number(moveSteps); \n        }\n\n        // 每隔多少回合移动一次\n        let moveInterval = configMap[TMXConfigInfoKeys.CFG_MOVABLE_PLATE_PATH_STEP_TYPE];\n        if (moveInterval) {\n            this._moveInterval = Number(moveInterval);\n        }\n        \n        // 首次移动的格子数\n        let firstMoveSteps = configMap[TMXConfigInfoKeys.CFG_MOVABLE_PLATE_PATH_FIRST_MOVE_TYPE];\n        if (firstMoveSteps) {\n            this._firstMoveSteps = Number(firstMoveSteps);\n            this._hasFirstMove = true;\n        }\n\n        // 首次移动回合数\n        let firstMoveInterval = configMap[TMXConfigInfoKeys.CFG_MOVABLE_PLATE_PATH_FIRST_STEP_TYPE];\n        if (firstMoveInterval) {\n            this._firstMoveInterval = Number(firstMoveInterval);\n            this._hasFirstMove = true;\n        }\n    }\n    \n    public onConvey() : cc.Vec2 {\n        this._currentInterval += 1\n        \n        let moveStep = 0;\n        if (this._hasFirstMove) {\n            if (this._currentInterval >= this._firstMoveInterval) {\n                moveStep = this._firstMoveSteps;\n                this._hasFirstMove = false;\n                this._currentInterval = 0;\n            }\n        }else{\n            if (this._currentInterval >= this._moveInterval) {\n                moveStep = this._moveSteps;\n                this._currentInterval = 0;\n            }\n        }\n    \n        if (moveStep > 0) {\n            let movePath:cc.Vec2[] = [];\n            movePath.push(this._movePath[this._currentPathIndex]);\n            let pathCount = this._movePath.length;\n            for (let i = 0; i < moveStep; i++) {\n                this._currentPathIndex = (this._currentPathIndex + 1) % pathCount;\n                movePath.push(this._movePath[this._currentPathIndex]);\n            }\n\n            if (movePath.length > 0) {\n                let conveyerTypes:EntityType[] = [\n                    EntityType.Cell,\n                    EntityType.Popsicle,\n                    EntityType.Floor,\n                    EntityType.Rug,\n                    EntityType.Item,\n                    EntityType.Parasite,\n                ];\n\n                for (let type of conveyerTypes) {\n                    this.moveEntity(type, movePath);\n                }\n                return movePath[movePath.length - 1];\n            }\n        }\n        return GameMath.INVALID_LOGICAL_POSITION;\n    }\n    \n    private _movePath:cc.Vec2[] = [];\n    private _moveInterval:number = 1;\n    private _moveSteps:number = 1;\n    private _hasFirstMove:boolean = false;\n    private _firstMoveSteps:number = 0;\n    private _firstMoveInterval:number = 0;\n    private _currentInterval:number = 0;\n    private _currentPathIndex:number = 0;\n    private moveEntity(entityType:EntityType, path:cc.Vec2[]) : void {\n        let grid = this.getGrid();\n        let fristPos = path[0];\n        let targetPos = path[path.length - 1];\n        \n        let entity = grid.getEntity(entityType, fristPos);\n        if (entity) {\n            \n            entity.removeFromGridAndAddToEffect();\n            grid.addObstructs(entity);\n            let count = path.length;\n\n            let steps:cc.FiniteTimeAction[] = [];\n            for (let i = 0; i < count; i++) {\n                steps.push(cc.moveTo(0.4, entity.getPixelPos(path[i])))\n            }\n\n            let callback = cc.callFunc(()=>{\n                grid.setEntity(entity, targetPos);\n                grid.removeObstructs(entity);\n            });\n\n            steps.push(callback);\n\n            entity.runAction(cc.sequence(steps));\n\n        }\n    }\n    \n    // LIFE-CYCLE CALLBACKS:\n\n    // onLoad () {}\n\n    start () {\n\n    }\n\n    // update (dt) {}\n\n    onDestroy() {\n        super.onDestroy();\n        this._movePath = null;\n    }\n}\n","import GridBase from \"../../grid/GridBase\";\nimport CellBase, { CellType } from \"./CellBase\";\nimport { CollectionID } from \"../../defines/CollectionID\";\nimport { EntityID, EntityColor, EntityCleanOption } from \"../../defines/EntityID\";\nimport FloorGrass from \"../floor/FloorGrass\";\nimport EntityPrefabNodePool from \"../EntityPrefabNodePool\";\nimport GridCommand from \"../../commond/GridCommand\";\n\n// Learn TypeScript:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/typescript.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/typescript.html\n// Learn Attribute:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html\n\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class CellNormal extends CellBase {\n\n    public static create(grid:GridBase) : CellNormal {\n        let className = 'CellNormal';\n        let prefabFileName = 'match_scene/prefab/entity/cell/CellNormal';\n        let pool = EntityPrefabNodePool.getInstance();\n        let component = pool.getPrefabNodeWithFileNameAndClassName(prefabFileName, className) as CellNormal;\n        if (component) {\n            component.init(grid);\n            return component;       \n        }\n        return null;\n    }\n\n\n    protected init(grid:GridBase) : void {\n        super.initCell(grid, CellType.Normal);\n    }\n\n    public canPassThrough() : boolean {\n        if (this.canHoldItem()) {\n            let grid = this.getGrid();\n            if (grid) {\n                let item = grid.getItemAtLogicalPos(this.getLogicalPos());\n                if (item) {\n                    return false;\n                }else{\n                    let parasite = grid.getParasiteAtLogicalPos(this.getLogicalPos())\n                    if (parasite) {\n                        return parasite.hostCanDrop();\n                    }else{\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n\n    public getCollectionID():CollectionID{\n        return CollectionID.CellNormal;\n    }\n\n    public getEntityID():EntityID{\n        return EntityID.CellNormal;\n    }\n\n    public canHoldItem():boolean{\n        return true;\n    }\n\n    public getButterflyPriority(color:EntityColor, layoutGrass:boolean):number{\n        if(layoutGrass && this._canLayoutGrass()){\n            let item = this.getGrid().getItemAtLogicalPos(this.getLogicalPos());\n            if(item && item.canLayoutGrass() && item.canExcuteCommand(GridCommand.BombClean(this.getLogicalPos(), color, layoutGrass))){\n                return 1;\n            }\n        }\n        return super.getButterflyPriority(color, layoutGrass);\n    }\n\n    protected _canCleanByBomb(cleanColor:EntityColor):boolean{\n        return this._canLayoutGrass();\n    }\n\n    protected _canLayoutGrass():boolean{\n        if(this.canHoldItem() && this.getNeedGrass()){\n            return !this.getGrid().isGrassFloorAtLogicalPos(this.getLogicalPos());\n        }\n        return false;\n    }\n\n    protected _onClean(cleanOption:EntityCleanOption):void{\n        if(cleanOption.layoutGrass){\n            let grass = FloorGrass.create(this.getGrid());\n            this.getGrid().setFloorAtLogicalPos(grass, this.getLogicalPos());\n            grass.grow();\n            grass.onCollected();\n        }\n    }\n}\n","import CollectedTrainSupplyItem from \"./CollectedTrainSupplyItem\";\nimport { GameCurrencyType } from \"../../../define/GameCurrencyType\";\nimport GameSceneBase from \"../GameSceneBase\";\n\n// Learn TypeScript:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/typescript.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/typescript.html\n// Learn Attribute:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class CollectedTrainSupplyBar extends cc.Component {\n\n    @property([cc.Node])\n    itemNodes: cc.Node[] = [];\n\n    private _gameScene:GameSceneBase = null;\n    private _supplyItems:CollectedTrainSupplyItem[] = [];\n\n\n    public setSupplyData(data:Object) {\n        for (const key in data) {\n            let amount = data[key]\n            let itemID = Number(key) as GameCurrencyType;\n            if (itemID) {\n                let item = this.getItemWithSupplyItemID(itemID);\n                if (item) {\n                    item.setAmount(amount);\n                }\n            }\n        }\n    }\n\n    public getItemWithSupplyItemID(itemID:GameCurrencyType) : CollectedTrainSupplyItem {\n        let result:CollectedTrainSupplyItem = null;\n        for (let supplyItem of this._supplyItems) {\n            if (supplyItem.getItemID() == itemID) {\n                result = supplyItem;\n                break;\n            }\n        }\n        return result;\n    }\n\n    public getWorldPosWithSupplyItemID(itemID:GameCurrencyType):cc.Vec2 {\n        let result = cc.Vec2.ZERO;\n        let item = this.getItemWithSupplyItemID(itemID);\n        if (item) {\n            result = item.node.parent.convertToWorldSpaceAR(item.node.getPosition());\n        }\n        return result;\n    }\n\n    // LIFE-CYCLE CALLBACKS:\n    onLoad () {\n\n        let canvas = cc.find(\"Canvas\");\n        if (canvas) {\n            this._gameScene = canvas.getComponent(GameSceneBase);\n        }\n        let supplyItemIDs:GameCurrencyType[] = [\n            GameCurrencyType.TrainFood,\n            GameCurrencyType.TrainSoap,\n            GameCurrencyType.TrainEyepatch,\n            GameCurrencyType.TrainHoe,\n            GameCurrencyType.GoldCoin,\n        ];\n\n        for (let index = 0; index < this.itemNodes.length; index++) {\n            let itemNode = this.itemNodes[index];\n            let supplyItem = itemNode.getComponent(CollectedTrainSupplyItem);\n            if (supplyItem) {\n                supplyItem.setItemID(supplyItemIDs[index]);\n                this._supplyItems.push(supplyItem);\n            }\n            \n        }\n    }\n\n    start () {\n        \n    }\n\n    // update (dt) {}\n\n    onDestroy() {\n        this.itemNodes = null;\n        this._gameScene = null;\n        this._supplyItems = null;\n    }\n}\n","import { GameCurrencyType } from \"../../../define/GameCurrencyType\";\nimport IdentifierManager from \"../defines/IdentifierManager\";\nimport UISpriteExt from \"../../../component/UISpriteExt\";\n\n// Learn TypeScript:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/typescript.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/typescript.html\n// Learn Attribute:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class CollectedTrainSupplyItem extends cc.Component {\n\n    @property(cc.Sprite)\n    icon:cc.Sprite = null;\n\n    @property(cc.Label)\n    amountLabel:cc.Label = null;\n\n    private _itemID:GameCurrencyType = GameCurrencyType.NoneType;\n    public getItemID() : GameCurrencyType {\n        return this._itemID;\n    }\n    public setItemID(itemID:GameCurrencyType) : void {\n        this._itemID = itemID;\n        let frameName = '';\n        switch (this._itemID) {\n            case GameCurrencyType.GoldCoin:{\n                frameName = 'match_scene/texture/userInterface/match_goldcoin'\n            }\n                break;\n            case GameCurrencyType.TrainFood:{\n                frameName = 'match_scene/texture/userInterface/match_food'\n            }\n                break;\n            case GameCurrencyType.TrainSoap:{\n                frameName = 'match_scene/texture/userInterface/match_soap'\n            }\n                break;\n            case GameCurrencyType.TrainEyepatch:{\n                frameName = 'match_scene/texture/userInterface/match_eyepatch'\n            }\n                break;\n            case GameCurrencyType.TrainHoe:{\n                frameName = 'match_scene/texture/userInterface/match_hoe'\n            }\n                    break;\n        \n            default:\n                break;\n        }\n\n        let component = this.icon.getComponent(UISpriteExt);\n        if (component) {\n            component.src = frameName;\n        }\n    } \n\n    private _amount:number = 0;\n    public getAmount() : number {\n        return this._amount;\n    }\n    public setAmount(amount:number) : void {\n\n        let oldAmount = this._amount;\n        this._amount = amount;\n        this.amountLabel.string = this._amount.toString();\n        if (oldAmount != this._amount) {\n            this.amountLabel.node.stopActionByTag(1001);\n\n            this.amountLabel.node.scale = 1.0;\n            let amountAction = cc.sequence(cc.scaleTo(0.05, 1.5).easing(cc.easeIn(2)),\n                                           cc.scaleTo(0.2, 1.0).easing(cc.easeOut(2))\n                                          );\n            amountAction.setTag(1001);\n            this.amountLabel.node.runAction(amountAction);\n\n            this.icon.node.stopActionByTag(1001);\n            this.icon.node.scale = 1.0;\n            let iconAction = cc.sequence(cc.scaleTo(0.05, 1.5).easing(cc.easeIn(2)),\n                                         cc.scaleTo(0.2, 1.0).easing(cc.easeOut(2))\n                                        );\n            iconAction.setTag(1001);\n            this.icon.node.runAction(iconAction);\n        }else{\n            this.amountLabel.node.scale = 1.0;\n            this.icon.node.scale = 1.0;\n        }\n    }\n\n    public static create(itemID:GameCurrencyType) : CollectedTrainSupplyItem{\n\n        let res = cc.loader.getRes('match_scene/prefab/userInterface/CollectedTrainSupplyItem', cc.Prefab);\n        if (res) {\n            let node:cc.Node = cc.instantiate(res);\n            if (node) {\n                let component:CollectedTrainSupplyItem = node.getComponent(CollectedTrainSupplyItem);\n                if (component) {\n                    component.init(itemID);     \n                    return component; \n                }\n            }\n        }\n        return null;\n    }\n\n    protected init(itemID:GameCurrencyType) {\n        this.setItemID(itemID);\n        this.setAmount(0);\n    }\n\n    // LIFE-CYCLE CALLBACKS:\n    onLoad () {\n         this.setAmount(0);\n    }\n    start () {\n        \n    }\n    // update (dt) {}\n    onDestroy() {\n        this.icon = null;\n        this.amountLabel = null;\n    }\n}\n","import { CollectionID } from \"./CollectionID\";\n\n// Learn TypeScript:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/typescript.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/typescript.html\n// Learn Attribute:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html\n\nexport enum CollectionGroupID {\n    None                        = 0,\n    ItemBombButterfly           = 602,\n    ItemBombRow                 = 603,\n    ItemBombColumn              = 604,\n    ItemBombCross               = 605,\n    ItemBombRange               = 606,\n    ItemPaw                     = 621,\n};\n\nexport default class CollectionGroupIDManager {\n    //单例对象\n    private static instance:CollectionGroupIDManager = null;\n    public static getInstance():CollectionGroupIDManager{\n        if(this.instance == null){\n            this.instance = new CollectionGroupIDManager();\n        }\n        return this.instance;\n    }\n    private String_To_CollectionGroupID_Map:Object = {};\n    private initString_To_CollectionGroupID_Map() : void {\n        this.String_To_CollectionGroupID_Map[\"butterfly\"] =     CollectionGroupID.ItemBombButterfly;\n        this.String_To_CollectionGroupID_Map[\"hLine\"] =         CollectionGroupID.ItemBombRow;\n        this.String_To_CollectionGroupID_Map[\"vLine\"] =         CollectionGroupID.ItemBombColumn;\n        this.String_To_CollectionGroupID_Map[\"cross\"] =         CollectionGroupID.ItemBombCross;\n        this.String_To_CollectionGroupID_Map[\"boom\"] =          CollectionGroupID.ItemBombRange;\n        this.String_To_CollectionGroupID_Map[\"paw\"] =           CollectionGroupID.ItemPaw;\n    }\n    private CollectionGroupID_To_CollectionIDs_Map:Object = {};\n    private initCollectionGroupID_To_CollectionIDs_Map() : void {\n        this.CollectionGroupID_To_CollectionIDs_Map[CollectionGroupID.ItemBombButterfly] = [\n            CollectionID.ItemBombButterflyRed,\n            CollectionID.ItemBombButterflyGreen,\n            CollectionID.ItemBombButterflyBlue,\n            CollectionID.ItemBombButterflyYellow,\n            CollectionID.ItemBombButterflyOrange,\n            CollectionID.ItemBombButterflyPurple,\n        ];\n        \n        this.CollectionGroupID_To_CollectionIDs_Map[CollectionGroupID.ItemBombRow] = [\n            CollectionID.ItemBombRowRed,\n            CollectionID.ItemBombRowGreen,\n            CollectionID.ItemBombRowBlue,\n            CollectionID.ItemBombRowYellow,\n            CollectionID.ItemBombRowOrange,\n            CollectionID.ItemBombRowPurple,\n        ];\n        \n        this.CollectionGroupID_To_CollectionIDs_Map[CollectionGroupID.ItemBombColumn] = [\n            CollectionID.ItemBombColumnRed,\n            CollectionID.ItemBombColumnGreen,\n            CollectionID.ItemBombColumnBlue,\n            CollectionID.ItemBombColumnYellow,\n            CollectionID.ItemBombColumnOrange,\n            CollectionID.ItemBombColumnPurple,\n        ];\n        \n        this.CollectionGroupID_To_CollectionIDs_Map[CollectionGroupID.ItemBombCross] = [\n            CollectionID.ItemBombCrossRed,\n            CollectionID.ItemBombCrossGreen,\n            CollectionID.ItemBombCrossBlue,\n            CollectionID.ItemBombCrossYellow,\n            CollectionID.ItemBombCrossOrange,\n            CollectionID.ItemBombCrossPurple,\n        ];\n        \n        \n        this.CollectionGroupID_To_CollectionIDs_Map[CollectionGroupID.ItemBombRange] = [\n            CollectionID.ItemBombRangeRed,\n            CollectionID.ItemBombRangeGreen,\n            CollectionID.ItemBombRangeBlue,\n            CollectionID.ItemBombRangeYellow,\n            CollectionID.ItemBombRangeOrange,\n            CollectionID.ItemBombRangePurple,\n        ];\n        \n        \n        this.CollectionGroupID_To_CollectionIDs_Map[CollectionGroupID.ItemPaw] = [\n            CollectionID.ItemPawRed,\n            CollectionID.ItemPawGreen,\n            CollectionID.ItemPawBlue,\n            CollectionID.ItemPawYellow,\n            CollectionID.ItemPawOrange,\n            CollectionID.ItemPawPurple,\n        ];\n    }\n    private CollectionGroupID_To_FrameName_Map:Object = {};\n    private initCollectionGroupID_To_FrameName_Map() : void {\n        this.CollectionGroupID_To_FrameName_Map[CollectionGroupID.ItemBombButterfly] =       \"butterfly_chromatic\";\n        this.CollectionGroupID_To_FrameName_Map[CollectionGroupID.ItemBombRow] =             \"hline_chromatic\";\n        this.CollectionGroupID_To_FrameName_Map[CollectionGroupID.ItemBombColumn] =          \"vline_chromatic\";\n        this.CollectionGroupID_To_FrameName_Map[CollectionGroupID.ItemBombCross] =           \"cross_chromatic\";\n        this.CollectionGroupID_To_FrameName_Map[CollectionGroupID.ItemBombRange] =           \"boom_chromatic\";\n        this.CollectionGroupID_To_FrameName_Map[CollectionGroupID.ItemPaw] =                 \"paw_chromatic\";\n    }\n\n    constructor() {\n        this.initString_To_CollectionGroupID_Map();\n        this.initCollectionGroupID_To_CollectionIDs_Map()\n        this.initCollectionGroupID_To_FrameName_Map();\n    }\n\n    public getCollectionGroupIDFromString(name:string) : CollectionGroupID {\n        let result = this.String_To_CollectionGroupID_Map[name];\n        if (result) {\n            return result;\n        }\n        return CollectionGroupID.None;\n    }\n\n    public getFrameNameFromCollectionGroupID(groupID:CollectionGroupID) : string {\n        let rootPath = 'texture/match/entities/';\n        let result = this.CollectionGroupID_To_FrameName_Map[groupID];\n        if (result) {\n            return rootPath + result;\n        }\n        return rootPath + \"unknow/unknow\";\n    }\n\n    public getCollectionIDsFromCollectionGroupID(groupID:CollectionGroupID) : CollectionID[] {\n        let result = this.CollectionGroupID_To_CollectionIDs_Map[groupID];\n        if (result) {\n            return result;\n        }\n        return [];\n    }\n\n    public getCollectionGroupIDFromCollectionID(collectionID:CollectionID) : CollectionGroupID {\n        let tempMap = this.CollectionGroupID_To_CollectionIDs_Map;\n        for (let key in tempMap) {\n            if (tempMap.hasOwnProperty(key)) {\n                const entityIDs:CollectionID[] = tempMap[key];\n                for(const id of entityIDs){\n                    if (id == collectionID) {\n                        let result = Number(key) as CollectionGroupID;\n                        return result;     \n                    }\n                }\n            }\n        }\n        return CollectionGroupID.None;\n    }\n}\n\n","export enum CollectionID {\n    None = 0,\n    Frame                       = 101,\n    CellNormal                  = 10101,\n    CellConveyer                = 20101,\n    CellMovablePlate            = 20201,\n    PopsicleNormal              = 30101,\n    PopsicleBoom                = 30201,\n    PopsicleLine                = 30301,\n    FloorGrass                  = 40101,\n    // 冰块\n    FloorIce                    = 40201,\n    // 换色器\n    FloorChanger                = 40301,\n    // 倍增器\n    FloorDouble                 = 40401,\n    // 路\n    FloorRoad                   = 40501,\n    \n    RugJam                      = 50101,\n    \n    // 基础\n    ItemNormalRed               = 60101,\n    ItemNormalGreen             = 60102,\n    ItemNormalBlue              = 60103,\n    ItemNormalYellow            = 60104,\n    ItemNormalOrange            = 60105,\n    ItemNormalPurple            = 60106,\n    // 蝴蝶炸弹\n    ItemBombButterflyRed        = 60201,\n    ItemBombButterflyGreen      = 60202,\n    ItemBombButterflyBlue       = 60203,\n    ItemBombButterflyYellow     = 60204,\n    ItemBombButterflyOrange     = 60205,\n    ItemBombButterflyPurple     = 60206,\n    ItemBombButterflyChromatic  = 60207,\n    // 水平直线炸弹\n    ItemBombRowRed              = 60301,\n    ItemBombRowGreen            = 60302,\n    ItemBombRowBlue             = 60303,\n    ItemBombRowYellow           = 60304,\n    ItemBombRowOrange           = 60305,\n    ItemBombRowPurple           = 60306,\n    ItemBombRowChromatic        = 60307,\n    // 垂直直线炸弹\n    ItemBombColumnRed           = 60401,\n    ItemBombColumnGreen         = 60402,\n    ItemBombColumnBlue          = 60403,\n    ItemBombColumnYellow        = 60404,\n    ItemBombColumnOrange        = 60405,\n    ItemBombColumnPurple        = 60406,\n    ItemBombColumnChromatic     = 60407,\n    // 对角线X炸弹\n    ItemBombCrossRed            = 60501,\n    ItemBombCrossGreen          = 60502,\n    ItemBombCrossBlue           = 60503,\n    ItemBombCrossYellow         = 60504,\n    ItemBombCrossOrange         = 60505,\n    ItemBombCrossPurple         = 60506,\n    ItemBombCrossChromatic      = 60507,\n    // 范围炸弹\n    ItemBombRangeRed            = 60601,\n    ItemBombRangeGreen          = 60602,\n    ItemBombRangeBlue           = 60603,\n    ItemBombRangeYellow         = 60604,\n    ItemBombRangeOrange         = 60605,\n    ItemBombRangePurple         = 60606,\n    ItemBombRangeChromatic      = 60607,\n    // 同色炸弹\n    ItemBombRainbow             = 60701,\n    // 同色砖块\n    ItemBlock                   = 60801,\n    \n    // 甜甜圈\n    ItemDoughnut                = 60901,\n    \n    // 魔法水晶\n    ItemMagicCrystal            = 61001,\n    \n    //西瓜\n    ItemWatermelon              = 61101,\n    \n    //水果蛋糕\n    ItemFruitCake               = 61201,\n\n    ItemMower                   = 61401,\n    \n    // 骨头\n    ItemBone                    = 61501,\n    \n    ItemChestnut                = 61601,\n\n    //烟花\n    ItemFireworks               = 61701,\n    \n    //萤火虫\n    ItemFireWormBottle          = 61301,\n    \n    // 小狗\n    ItemPuppy                   = 62001,\n    // 爪印\n    ItemPawRed                  = 62101,\n    ItemPawGreen                = 62102,\n    ItemPawBlue                 = 62103,\n    ItemPawYellow               = 62104,\n    ItemPawOrange               = 62105,\n    ItemPawPurple               = 62106,\n    ItemPawChromatic            = 62107,\n    // 热气球\n    ItemBalloon                 = 62201,\n    // 狗屋\n    ItemDogHouse                = 62301,\n    \n    ItemJamBottle               = 62401,\n    \n    //蜂巢\n    ItemHoneyComb               = 62601,\n\n    ItemStatue                  = 62801,\n\n\n    // 冰砖\n    ParasiteIceCube             = 70101,\n    \n    // 锁链\n    ParasiteShackle             = 70201,\n    \n    // 蜂蜜\n    ParasiteHoney               = 70301,\n\n    // 礼物盒\n    ParasiteGiftBoxRed          = 70401,\n    ParasiteGiftBoxGreen        = 70402,\n    ParasiteGiftBoxBlue         = 70403,\n    ParasiteGiftBoxYellow       = 70404,\n    ParasiteGiftBoxOrange       = 70405,\n    ParasiteGiftBoxPurple       = 70406,\n    \n    // 藤蔓\n    MarkerBoneCollector         = 80101,\n    MarkWormholeEntrance        = 80201,\n    MarkWormholeExit            = 80301,\n    \n    \n    FenceVine                   = 80401,\n    MarkerDropMachine           = 80801,\n    MarkerNormal                = 80901,\n\n    FlyerFireWorm               = 90101,\n    FlyerFireworksEnergy        = 90201,\n};\n\nexport class CollectionIDManager {\n    //单例对象\n    private static instance:CollectionIDManager = null;\n    public static getInstance():CollectionIDManager{\n        if(this.instance == null){\n            this.instance = new CollectionIDManager();\n        }\n        return this.instance;\n    }\n\n    private String_To_CollectID_Map:Object = {};\n    private initString_To_CollectID_Map() : void {\n        this.String_To_CollectID_Map[\"popsicles\"] =         CollectionID.PopsicleNormal;  \n        this.String_To_CollectID_Map[\"popsiclesBoom\"] =     CollectionID.PopsicleBoom;  \n        this.String_To_CollectID_Map[\"popsiclesLine\"] =     CollectionID.PopsicleLine;  \n        this.String_To_CollectID_Map[\"grass\"] =             CollectionID.FloorGrass;  \n        this.String_To_CollectID_Map[\"jam\"] =               CollectionID.RugJam;  \n        this.String_To_CollectID_Map[\"red\"] =               CollectionID.ItemNormalRed;  \n        this.String_To_CollectID_Map[\"green\"] =             CollectionID.ItemNormalGreen;  \n        this.String_To_CollectID_Map[\"blue\"] =              CollectionID.ItemNormalBlue;  \n        this.String_To_CollectID_Map[\"yellow\"] =            CollectionID.ItemNormalYellow;  \n        this.String_To_CollectID_Map[\"orange\"] =            CollectionID.ItemNormalOrange;  \n        this.String_To_CollectID_Map[\"purple\"] =            CollectionID.ItemNormalPurple;  \n        this.String_To_CollectID_Map[\"butterflyRed\"] =      CollectionID.ItemBombButterflyRed;  \n        this.String_To_CollectID_Map[\"butterflyGreen\"] =    CollectionID.ItemBombButterflyGreen;  \n        this.String_To_CollectID_Map[\"butterflyBlue\"] =     CollectionID.ItemBombButterflyBlue;  \n        this.String_To_CollectID_Map[\"butterflyYellow\"] =   CollectionID.ItemBombButterflyYellow;  \n        this.String_To_CollectID_Map[\"butterflyOrange\"] =   CollectionID.ItemBombButterflyOrange;  \n        this.String_To_CollectID_Map[\"butterflyPurple\"] =   CollectionID.ItemBombButterflyPurple;  \n        this.String_To_CollectID_Map[\"hLineRed\"] =          CollectionID.ItemBombRowRed;  \n        this.String_To_CollectID_Map[\"hLineGreen\"] =        CollectionID.ItemBombRowGreen;  \n        this.String_To_CollectID_Map[\"hLineBlue\"] =         CollectionID.ItemBombRowBlue;  \n        this.String_To_CollectID_Map[\"hLineYellow\"] =       CollectionID.ItemBombRowYellow;  \n        this.String_To_CollectID_Map[\"hLineOrange\"] =       CollectionID.ItemBombRowOrange;  \n        this.String_To_CollectID_Map[\"hLinePurple\"] =       CollectionID.ItemBombRowPurple;  \n        this.String_To_CollectID_Map[\"vLineRed\"] =          CollectionID.ItemBombColumnRed;  \n        this.String_To_CollectID_Map[\"vLineGreen\"] =        CollectionID.ItemBombColumnGreen;  \n        this.String_To_CollectID_Map[\"vLineBlue\"] =         CollectionID.ItemBombColumnBlue;  \n        this.String_To_CollectID_Map[\"vLineYellow\"] =       CollectionID.ItemBombColumnYellow;  \n        this.String_To_CollectID_Map[\"vLineOrange\"] =       CollectionID.ItemBombColumnOrange;  \n        this.String_To_CollectID_Map[\"vLinePurple\"] =       CollectionID.ItemBombColumnPurple;  \n        this.String_To_CollectID_Map[\"crossRed\"] =          CollectionID.ItemBombCrossRed;  \n        this.String_To_CollectID_Map[\"crossGreen\"] =        CollectionID.ItemBombCrossGreen;  \n        this.String_To_CollectID_Map[\"crossBlue\"] =         CollectionID.ItemBombCrossBlue;  \n        this.String_To_CollectID_Map[\"crossYellow\"] =       CollectionID.ItemBombCrossYellow;  \n        this.String_To_CollectID_Map[\"crossOrange\"] =       CollectionID.ItemBombCrossOrange;  \n        this.String_To_CollectID_Map[\"crossPurple\"] =       CollectionID.ItemBombCrossPurple;  \n        this.String_To_CollectID_Map[\"boomRed\"] =           CollectionID.ItemBombRangeRed;  \n        this.String_To_CollectID_Map[\"boomGreen\"] =         CollectionID.ItemBombRangeGreen;  \n        this.String_To_CollectID_Map[\"boomBlue\"] =          CollectionID.ItemBombRangeBlue;  \n        this.String_To_CollectID_Map[\"boomYellow\"] =        CollectionID.ItemBombRangeYellow;  \n        this.String_To_CollectID_Map[\"boomOrange\"] =        CollectionID.ItemBombRangeOrange;  \n        this.String_To_CollectID_Map[\"boomPurple\"] =        CollectionID.ItemBombRangePurple;  \n        this.String_To_CollectID_Map[\"pawRed\"] =            CollectionID.ItemPawRed;  \n        this.String_To_CollectID_Map[\"pawGreen\"] =          CollectionID.ItemPawGreen;  \n        this.String_To_CollectID_Map[\"pawBlue\"] =           CollectionID.ItemPawBlue;  \n        this.String_To_CollectID_Map[\"pawYellow\"] =         CollectionID.ItemPawYellow;  \n        this.String_To_CollectID_Map[\"pawOrange\"] =         CollectionID.ItemPawOrange;  \n        this.String_To_CollectID_Map[\"pawPurple\"] =         CollectionID.ItemPawPurple;  \n        this.String_To_CollectID_Map[\"pawChromatic\"] =      CollectionID.ItemPawChromatic;  \n        this.String_To_CollectID_Map[\"rainbow\"] =           CollectionID.ItemBombRainbow;  \n        this.String_To_CollectID_Map[\"block\"] =             CollectionID.ItemBlock;  \n        this.String_To_CollectID_Map[\"doughnut\"] =          CollectionID.ItemDoughnut;  \n        this.String_To_CollectID_Map[\"watermelon\"] =        CollectionID.ItemWatermelon;  \n        this.String_To_CollectID_Map[\"fruitCake\"] =         CollectionID.ItemFruitCake;  \n        this.String_To_CollectID_Map[\"bone\"] =              CollectionID.ItemBone;  \n        this.String_To_CollectID_Map[\"nut\"] =               CollectionID.ItemChestnut; \n        this.String_To_CollectID_Map[\"puppy\"] =             CollectionID.ItemPuppy;  \n        this.String_To_CollectID_Map[\"statue\"] =            CollectionID.ItemStatue; \n        this.String_To_CollectID_Map[\"iceCube\"] =           CollectionID.ParasiteIceCube;  \n        this.String_To_CollectID_Map[\"honey\"] =             CollectionID.ParasiteHoney; \n        this.String_To_CollectID_Map[\"fireworm\"] =          CollectionID.FlyerFireWorm; \n    }\n    private CollectionID_To_FrameName_Map:Object = {};\n    private initCollectionID_To_FrameName_Map() : void {\n        this.CollectionID_To_FrameName_Map[CollectionID.PopsicleNormal] =            \"popsicles\";   \n        this.CollectionID_To_FrameName_Map[CollectionID.PopsicleBoom] =              \"popsiclesboom\";   \n        this.CollectionID_To_FrameName_Map[CollectionID.PopsicleLine] =              \"popsiclesline\";   \n        this.CollectionID_To_FrameName_Map[CollectionID.FloorGrass] =                \"grass\";     \n        this.CollectionID_To_FrameName_Map[CollectionID.RugJam] =                    \"jam\";   \n        this.CollectionID_To_FrameName_Map[CollectionID.ItemNormalRed] =             \"red\";   \n        this.CollectionID_To_FrameName_Map[CollectionID.ItemNormalGreen] =           \"green\";   \n        this.CollectionID_To_FrameName_Map[CollectionID.ItemNormalBlue] =            \"blue\";   \n        this.CollectionID_To_FrameName_Map[CollectionID.ItemNormalYellow] =          \"yellow\";   \n        this.CollectionID_To_FrameName_Map[CollectionID.ItemNormalOrange] =          \"orange\";   \n        this.CollectionID_To_FrameName_Map[CollectionID.ItemNormalPurple] =          \"purple\";   \n        this.CollectionID_To_FrameName_Map[CollectionID.ItemBombButterflyRed] =      \"butterfly_red\";   \n        this.CollectionID_To_FrameName_Map[CollectionID.ItemBombButterflyGreen] =    \"butterfly_green\";   \n        this.CollectionID_To_FrameName_Map[CollectionID.ItemBombButterflyBlue] =     \"butterfly_blue\";   \n        this.CollectionID_To_FrameName_Map[CollectionID.ItemBombButterflyYellow] =   \"butterfly_yellow\";   \n        this.CollectionID_To_FrameName_Map[CollectionID.ItemBombButterflyOrange] =   \"butterfly_orange\";   \n        this.CollectionID_To_FrameName_Map[CollectionID.ItemBombButterflyPurple] =   \"butterfly_purple\";   \n        this.CollectionID_To_FrameName_Map[CollectionID.ItemBombRowRed] =            \"hline_red\";   \n        this.CollectionID_To_FrameName_Map[CollectionID.ItemBombRowGreen] =          \"hline_green\";   \n        this.CollectionID_To_FrameName_Map[CollectionID.ItemBombRowBlue] =           \"hline_blue\";   \n        this.CollectionID_To_FrameName_Map[CollectionID.ItemBombRowYellow] =         \"hline_yellow\";   \n        this.CollectionID_To_FrameName_Map[CollectionID.ItemBombRowOrange] =         \"hline_orange\";   \n        this.CollectionID_To_FrameName_Map[CollectionID.ItemBombRowPurple] =         \"hline_purple\";   \n        this.CollectionID_To_FrameName_Map[CollectionID.ItemBombColumnRed] =         \"vline_red\";   \n        this.CollectionID_To_FrameName_Map[CollectionID.ItemBombColumnGreen] =       \"vline_green\";   \n        this.CollectionID_To_FrameName_Map[CollectionID.ItemBombColumnBlue] =        \"vline_blue\";   \n        this.CollectionID_To_FrameName_Map[CollectionID.ItemBombColumnYellow] =      \"vline_yellow\";   \n        this.CollectionID_To_FrameName_Map[CollectionID.ItemBombColumnOrange] =      \"vline_orange\";   \n        this.CollectionID_To_FrameName_Map[CollectionID.ItemBombColumnPurple] =      \"vline_purple\";   \n        this.CollectionID_To_FrameName_Map[CollectionID.ItemBombCrossRed] =          \"cross_red\";   \n        this.CollectionID_To_FrameName_Map[CollectionID.ItemBombCrossGreen] =        \"cross_green\";   \n        this.CollectionID_To_FrameName_Map[CollectionID.ItemBombCrossBlue] =         \"cross_blue\";   \n        this.CollectionID_To_FrameName_Map[CollectionID.ItemBombCrossYellow] =       \"cross_yellow\";   \n        this.CollectionID_To_FrameName_Map[CollectionID.ItemBombCrossOrange] =       \"cross_orange\";   \n        this.CollectionID_To_FrameName_Map[CollectionID.ItemBombCrossPurple] =       \"cross_purple\";   \n        this.CollectionID_To_FrameName_Map[CollectionID.ItemBombRangeRed] =          \"boom_red\";   \n        this.CollectionID_To_FrameName_Map[CollectionID.ItemBombRangeGreen] =        \"boom_green\";   \n        this.CollectionID_To_FrameName_Map[CollectionID.ItemBombRangeBlue] =         \"boom_blue\";   \n        this.CollectionID_To_FrameName_Map[CollectionID.ItemBombRangeYellow] =       \"boom_yellow\";   \n        this.CollectionID_To_FrameName_Map[CollectionID.ItemBombRangeOrange] =       \"boom_orange\";   \n        this.CollectionID_To_FrameName_Map[CollectionID.ItemBombRangePurple] =       \"boom_purple\";   \n        this.CollectionID_To_FrameName_Map[CollectionID.ItemPawRed] =                \"paw_red\";   \n        this.CollectionID_To_FrameName_Map[CollectionID.ItemPawGreen] =              \"paw_green\";   \n        this.CollectionID_To_FrameName_Map[CollectionID.ItemPawBlue] =               \"paw_blue\";   \n        this.CollectionID_To_FrameName_Map[CollectionID.ItemPawYellow] =             \"paw_yellow\";   \n        this.CollectionID_To_FrameName_Map[CollectionID.ItemPawOrange] =             \"paw_orange\";   \n        this.CollectionID_To_FrameName_Map[CollectionID.ItemPawPurple] =             \"paw_purple\";  \n        this.CollectionID_To_FrameName_Map[CollectionID.ItemPawChromatic] =          \"paw_chromatic\";  \n        this.CollectionID_To_FrameName_Map[CollectionID.ItemBombRainbow] =           \"rainbow\";   \n        this.CollectionID_To_FrameName_Map[CollectionID.ItemBlock] =                 \"block\";   \n        this.CollectionID_To_FrameName_Map[CollectionID.ItemDoughnut] =              \"doughnut\";  \n        this.CollectionID_To_FrameName_Map[CollectionID.ItemWatermelon] =            \"watermelon\";\n        this.CollectionID_To_FrameName_Map[CollectionID.ItemFruitCake] =             \"fruit_cake\";   \n        this.CollectionID_To_FrameName_Map[CollectionID.ItemBone] =                  \"bone\";    \n        this.CollectionID_To_FrameName_Map[CollectionID.ItemChestnut] =              \"nut\";   \n        this.CollectionID_To_FrameName_Map[CollectionID.ItemPuppy] =                 \"doghouse\";   \n        this.CollectionID_To_FrameName_Map[CollectionID.ItemStatue] =                \"statue\";\n        this.CollectionID_To_FrameName_Map[CollectionID.ParasiteIceCube] =           \"ice_cube\";  \n        this.CollectionID_To_FrameName_Map[CollectionID.ParasiteHoney] =             \"honey\";   \n        this.CollectionID_To_FrameName_Map[CollectionID.FlyerFireWorm] =             \"fireworm\";\n    }\n\n    constructor(){\n        this.initString_To_CollectID_Map();\n        this.initCollectionID_To_FrameName_Map();\n    };\n\n    public getCollectionIDFromString(name:string) : CollectionID {\n        let result = this.String_To_CollectID_Map[name];\n        if (result) {\n            return result;\n        }\n        return CollectionID.None;\n    }\n\n    public getCollectionNameFromID(collectionID:CollectionID) : string {\n        let tmpMap = this.String_To_CollectID_Map;\n        for(let key in tmpMap){\n            if(tmpMap[key] == collectionID){\n                return key;\n            }\n        }\n        return \"\";\n    }\n\n    public getFrameNameFromCollectionID(collectionID : CollectionID) : string {\n        let result = this.CollectionID_To_FrameName_Map[collectionID];\n        if (result) {\n            return 'common/texture/icons/match/' + result;\n        }\n        return 'icons_unknow.png';\n    }\n}\n","import IGame from \"../../../base/IGame\";\nimport IdentifierManager from \"../defines/IdentifierManager\";\nimport GameSceneBase from \"../GameSceneBase\";\n\n// Learn TypeScript:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/typescript.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/typescript.html\n// Learn Attribute:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class CompleteBanner extends cc.Component {\n\n    @property(cc.Node)\n    maskView:cc.Node = null;\n\n    @property(cc.Label)\n    title:cc.Label = null;\n\n\n    private _completeCallback:Function = null;\n    // LIFE-CYCLE CALLBACKS:\n    // onLoad () {}\n    private _displayDuraion:number = 0; \n\n    public static create(level:number, completeCallback:(object:Object) => void = null, hideLevel:boolean = false) : CompleteBanner {\n        let res = cc.loader.getRes('match_scene/prefab/userInterface/CompleteBanner', cc.Prefab);\n        if (res) {\n            let node = cc.instantiate(res);\n            if (node) {\n                let component = node.getComponent(CompleteBanner) as CompleteBanner;\n                if (component) {\n                    component.init(level, completeCallback, hideLevel);\n                }\n                return component;   \n            }\n        }\n    }\n\n    protected init(level:number, completeCallback:(object:Object) => void, hideLevel:boolean) : void {\n        this._completeCallback = completeCallback;\n        if (hideLevel) {\n            this.title.string = ' ';\n        }else{\n            this.title.string = '第' + level.toString() + '关';\n        }\n    }\n\n    start () {\n\n        let canvas = cc.find(\"Canvas\");\n        if (canvas) {\n            let gameScene = canvas.getComponent(GameSceneBase);\n            gameScene.reportStepComplete();\n        }\n        let anim = this.node.getComponent(cc.Animation);\n        anim.play('appear');\n        \n        IGame.playAudio(IdentifierManager.getInstance().getMatchAudioFilePath('voice_level_complete'));\n    }\n\n    public didAppear () : void{\n        this._displayDuraion = 2.2;\n\n        this.maskView.on(\"touchstart\", this.onTouchStart, this);\n        let anim = this.node.getComponent(cc.Animation);\n        anim.play('idle');\n\n    }\n\n    update (dt) {\n        dt = dt * cc.director.getScheduler().getTimeScale();\n        if (this._displayDuraion > 0) {\n            this._displayDuraion -= dt;   \n            if (this._displayDuraion <= 0) {\n                let anim = this.node.getComponent(cc.Animation);\n                anim.play('disappear');\n            } \n        }\n    }\n\n    public didDisappear () : void{\n        if (this._completeCallback) {\n            this._completeCallback.call(this, null);\n        }\n        this.node.destroy();\n    }\n\n    private onTouchStart(evt:cc.Event.EventTouch) {\n        if (this._displayDuraion > 0) {\n            this._displayDuraion = 0;\n            let anim = this.node.getComponent(cc.Animation);\n            anim.play('disappear');\n        }\n    }\n\n    onDestroy() {\n        this._completeCallback = null;\n    }\n    \n}\n","import GameMath from \"../utils/GameMath\";\n\n/**\n * Created by chenzd on 2018/8/3.\n * 曲线运动\n */\n\nexport default class CurveToAction {\n\n    //静态创建方法\n    public static create(duration:number, starPoint:cc.Vec2, endPoint:cc.Vec2){\n        \n        let dis:cc.Vec2 = endPoint.sub(starPoint);\n        let angleDes = Math.atan2(dis.x, dis.y) / Math.PI * 180;\n\n        //随机偏移角度\n        let offsetR:number = (40 + Math.floor(Math.random() * 5 + 1));\n        if(Math.random() > 0.5){\n            offsetR = -offsetR;\n        }\n\n        angleDes += offsetR;\n\n        angleDes = angleDes % 360;\n\n        if(angleDes < 0){\n            angleDes = 360 + angleDes;\n        }\n\n        if(angleDes - 90 >= 180){\n            angleDes = 360 - (angleDes - 90);\n        }else{\n            angleDes -= 90;\n        }\n\n        let r:number = GameMath.getDistance(starPoint, endPoint) * 0.5;\n\n        let rangle:number = angleDes * Math.PI / 180;\n\n        let x1:number = starPoint.x + r * Math.cos(rangle);\n        let y1:number = starPoint.y + r * Math.sin(rangle);\n\n\n        var bezier = [cc.v2(x1, y1), cc.v2(endPoint.x, endPoint.y), cc.v2(endPoint.x, endPoint.y)];\n        // cc.log(bezier);\n        var bezierTo = cc.bezierTo(duration, bezier);\n\n        return bezierTo;\n    }\n\n    public static createNotRandom(duration:number, starPoint:cc.Vec2, endPoint:cc.Vec2){\n        \n        let dis:cc.Vec2 = endPoint.sub(starPoint);\n        let angleDes = Math.atan2(dis.x, dis.y) / Math.PI * 180;\n        angleDes -= 160;\n\n        angleDes = angleDes % 360;\n\n        if(angleDes < 0){\n            angleDes = 360 + angleDes;\n        }\n\n        if(angleDes - 90 >= 180){\n            angleDes = 360 - (angleDes - 90);\n        }else{\n            angleDes -= 90;\n        }\n\n        \n        let r:number = GameMath.getDistance(endPoint, starPoint) * 0.6;\n\n        let rangle:number = angleDes * Math.PI / 180;\n\n        let x1:number = endPoint.x + r * Math.cos(rangle);\n        let y1:number = endPoint.y + r * Math.sin(rangle);\n\n\n        var bezier = [cc.v2(x1, y1), cc.v2(endPoint.x, endPoint.y), cc.v2(endPoint.x, endPoint.y)];\n        // cc.log(bezier);\n        var bezierTo = cc.bezierTo(duration, bezier);\n\n        return bezierTo;\n    }\n\n}\n","//三消相关定义\n\n\nexport enum GameType{\n    None,\n    Order,      // 订单\n    Grass,      // 铺草坪\n    Popsicle,   // 冰棍\n    Path,       // 路径\n};\n\nexport enum GameConfigModelType{\n    GCM_ErrorNoneData = -1,\n    GCM_CFGTripleLevelOrder = 1,\n    GCM_CFGTripleLevelGrass,\n    GCM_CFGTripleLevelPopsicles,\n    GCM_CFGTripleLevelPath,\n};\n","//各类窗口z-index定义\n\nexport enum EViewZIndex {\n    None = 0,           //最底层\n    Panel = 100,        //弹窗面板类（窗口，提示框）\n    Effect = 9000,      //（特效层）金币飞行\n    Guide = 10000,      //指引层\n    Tip =   15000,      //提示框类\n    MessageBox = 20000, //确认框类\n    Loading = 30000     //加载菊花窗口\n};","\nimport GameMath from \"../../../extend/utils/GameMath\";\nimport GridCommand from \"../commond/GridCommand\";\nimport { CollectionID } from \"../defines/CollectionID\";\nimport { EntityColor, EntityDropStep, EntityID, EntityType } from \"../defines/EntityID\";\nimport IdentifierManager from \"../defines/IdentifierManager\";\nimport { PowerID } from \"../defines/PowerID\";\nimport TMXConfigInfoKeys from \"../defines/TMXConfigInfoKeys\";\nimport GridBase from \"../grid/GridBase\";\nimport EntityPrefabNodePool from \"./EntityPrefabNodePool\";\nimport EntityStateWait from \"./state/concreteState/EntityStateWait\";\nimport EntityStateBase, { EntityStateType } from \"./state/EntityStateBase\";\nimport EntityStateMachine from \"./state/EntityStateMachine\";\n\n\n// Learn TypeScript:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/typescript.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/typescript.html\n// Learn Attribute:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html\n\nconst { ccclass, property } = cc._decorator;\n\n@ccclass\nexport default class EntityBase extends cc.Component {\n\n    protected static getEntitySpriteFarme(frameName: string): cc.SpriteFrame {\n        let result = null;\n        let spriteFrame = cc.loader.getRes(frameName, cc.SpriteFrame);\n        if (spriteFrame) {\n            result = spriteFrame;\n        }\n        return result;\n    }\n\n    protected _puppet: cc.Node = null;\n    public getPuppet(): cc.Node {\n        return this._puppet;\n    }\n    protected setPuppetSpriteFrameName(frameName: string) {\n        let spriteFrame = EntityBase.getEntitySpriteFarme(frameName);\n        if (spriteFrame) {\n            if (this._puppet) {\n                let sprite = this._puppet.getComponent(cc.Sprite);\n                if (sprite) {\n                    sprite.spriteFrame = spriteFrame;\n                }\n            }\n        }\n    }\n\n    protected updatePuppet(): void {\n        let frameName = IdentifierManager.getInstance().getFrameNameFromEntityID(this.getEntityID());\n        this.setPuppetSpriteFrameName(frameName);\n    }\n\n    private _stateMachine: EntityStateMachine = null;\n    private _occupyArea: cc.Rect = cc.rect(0, 0, 0, 0);;\n    private _tileSize: cc.Size = cc.size(0, 0);\n\n    private _visible: boolean = true;\n    public getVisible(): boolean {\n        return this._visible;\n    }\n    public setVisible(visible: boolean): void {\n        this._visible = visible;\n        if (this._visible) {\n            this.node.opacity = 255;\n        } else {\n            this.node.opacity = 0;\n        }\n    }\n\n    public playAnimation(name: string): cc.AnimationState {\n        let anim = this.node.getComponent(cc.Animation);\n        if (anim) {\n            return anim.play(name);\n        }\n        return null;\n    }\n\n    public pauseAnimation(name: string): void {\n        let anim = this.node.getComponent(cc.Animation);\n        if (anim && anim.getAnimationState(name) != null) {\n            anim.pause(name);\n        }\n        return null;\n    }\n\n    public setCurrentAnimationTime(time?: number, name?: string): void {\n        let anim = this.node.getComponent(cc.Animation);\n        if (anim && anim.getAnimationState(name) != null) {\n            anim.setCurrentTime(time, name);\n        }\n        return null;\n    }\n\n    public getAnimationState(name: string): cc.AnimationState {\n        let anim = this.node.getComponent(cc.Animation);\n        if (anim) {\n            return anim.getAnimationState(name);\n        }\n        return null;\n    }\n\n    public getCurrentAnimationClipName(): string {\n        let anim = this.getComponent(cc.Animation);\n        if (anim) {\n            let clip = anim.currentClip;\n            if (clip) {\n                return clip.name;\n            }\n        }\n        return '';\n    }\n\n    public getContentSize(): cc.Size {\n        return this.node.getContentSize();\n    }\n    public setContentSize(size: cc.Size): void {\n        this.node.setContentSize(size);\n    }\n\n    public runAction(action: cc.Action): cc.Action {\n        return this.node.runAction(action);\n    }\n\n    public clone(): EntityBase {\n        return null;\n    }\n\n    public getEntityComponent(): EntityBase {\n        return null;\n    }\n\n    private _grid: GridBase = null;\n    public getGrid(): GridBase {\n        return this._grid;\n    }\n\n    private _entityType: EntityType = EntityType.None;\n    public getEntityType(): EntityType {\n        return this._entityType;\n    }\n\n    public onCollected(): void {\n        let collectFactor = 1;\n        let floor = this.getGrid().getFloorAtLogicalPos(this.getLogicalPos());\n        if (floor && floor.getEntityID() == EntityID.FloorDouble) {\n            collectFactor = 2;\n        }\n\n        for (let i = 0; i < collectFactor; i++) {\n            this.getGrid().chargeFlyer(this);\n            this.getGrid().createCollectedEntityFlyer(this);\n            this.getGrid().collectEntity(this);\n\n        }\n    }\n\n    public isTargetCollection(): boolean {\n        return this.getGrid().isTargetCollectionID(this.getCollectionID());\n    }\n    public removeFromGrid(): void {\n        this.getGrid().removeEntity(this.getEntityType(), this.getLogicalPos());\n    }\n\n    public removeFromGridAndAddToEffect(): void {\n        this.removeFromGrid();\n        this.node.parent = this.getGrid().node;\n        this.setPixelPos(this.getLogicalPos());\n        this.node.zIndex = this.getTopZOrder();\n    }\n\n    public shiftToEffectLayer(): void {\n        this.getGrid().shiftEntityToEffectLayer(this);\n    }\n\n    private _entityColor: EntityColor = EntityColor.None;\n    public getEntityColor(): EntityColor {\n        return this._entityColor;\n    }\n    public setEntityColor(color: EntityColor): void {\n        this._entityColor = color;\n        this.updatePuppet();\n    }\n\n    public static DEFAULT_MISSILE_PRIORITY = 9999;\n    public static DEFAULT_FIREWORKS_ATTACKED_PRIORITY = 999;\n    private _fireWorksAttackedPriority: number = EntityBase.DEFAULT_FIREWORKS_ATTACKED_PRIORITY;\n    public getFireWorksAttackedPriority(): number {\n        return this._fireWorksAttackedPriority;\n    }\n    public setFireWorksAttackedPriority(priority: number) {\n        this._fireWorksAttackedPriority = priority;\n    }\n\n    private _missileAttackedPriority: number = EntityBase.DEFAULT_MISSILE_PRIORITY;\n    public getMissileAttackedPriority(): number {\n        return this._missileAttackedPriority;\n    }\n    public setMissileAttackedPriority(priority: number) {\n        this._missileAttackedPriority = priority;\n    }\n\n    private _immuneDamage: boolean = false;\n    public getImmuneDamage(): boolean {\n        return this._immuneDamage;\n    }\n    public setImmuneDamage(immuneDamage: boolean): void {\n        this._immuneDamage = immuneDamage;\n    }\n\n    public getCurrentStateType(): EntityStateType {\n        let state = this.getCurrentState();\n        return state.getType();\n    }\n    public getCurrentState(): EntityStateBase {\n        let state = this._stateMachine.getCurrentState() as EntityStateBase;\n        return state;\n    }\n\n    public setCurrentState(state: EntityStateBase): void {\n        this._stateMachine.setCurrentState(state);\n    }\n\n    public dealWithConfigMap(config: Object): void {\n        let fireworkAttackedPriority = config[TMXConfigInfoKeys.CFG_FIREWORK_ATTACKED_PRIORITY];\n        if (fireworkAttackedPriority) {\n            let priority = Number(fireworkAttackedPriority);\n            this.setFireWorksAttackedPriority(priority);\n        }\n\n        let missileAttackedPriority = config[TMXConfigInfoKeys.CFG_MISSILE_ATTACKED_PRIORITY];\n        if (missileAttackedPriority) {\n            let priority = Number(missileAttackedPriority);\n            this.setMissileAttackedPriority(priority);\n        }\n    }\n\n    public getEntityID(): EntityID {\n        return EntityID.None;\n    }\n\n    protected _prefabFileName = ''\n    public getPrefabFileName(): string {\n        return this._prefabFileName;\n    }\n    public setPrefabFileName(fileName: string): string {\n        return this._prefabFileName = fileName;\n    }\n\n    public getCollectionID(): CollectionID {\n        return CollectionID.None;\n    }\n\n    public getProducedTrainSupplyMaps(): Object {\n        return {};\n    }\n\n    public getPowerID(): PowerID {\n        return PowerID.None;\n    }\n\n    public getScore(): number {\n        return 0;\n    }\n\n    public getButterflyPriority(cleanColor: EntityColor, willLayoutGrass: boolean): number {\n        return IdentifierManager.getInstance().getDefaultButterflyPriorityFromEntityID(this.getEntityID());\n    }\n\n    public getLogicalPos(): cc.Vec2 {\n        return this._occupyArea.origin;\n    }\n\n    public setLogicalPos(pos: cc.Vec2): void {\n        this._occupyArea.origin = pos;\n        this.node.setPosition(this.getPixelPos(pos));\n        this.node.zIndex = this.getBottomZOrder();\n    }\n\n    public getPixelPos(logicalPos: cc.Vec2): cc.Vec2 {\n\n        let contentSize = this.getContentSize();\n        let offset = cc.v2(contentSize.width * 0.5 - this._tileSize.width * 0.5,\n            contentSize.height * 0.5 - this._tileSize.height * 0.5);\n        let pixePos = this.getGrid().getPixelPosFromLogicalPos(logicalPos).add(offset);\n        return pixePos;\n    }\n\n    public setPixelPos(logicalPos: cc.Vec2): void {\n        this.node.setPosition(this.getPixelPos(logicalPos));\n    }\n\n    public getTopZOrder(): number {\n        return this.getGrid().getTopZOrderForEnity(this);\n    }\n    public getBottomZOrder(): number {\n        return this.getGrid().getBottomZOrderForEnity(this);\n    }\n\n    public getLogicalSize(): cc.Size {\n        return this._occupyArea.size;\n    }\n\n    public getOccupyArea(): cc.Rect {\n        return this._occupyArea;\n    }\n\n    private _path: EntityDropStep[] = [];\n    public getPath(): EntityDropStep[] {\n        return this._path;\n    }\n\n    public addStepToPath(step: EntityDropStep): void {\n        this._path.push(step);\n    }\n\n    public clearPath(): void {\n        GameMath.clearArray(this._path);\n    }\n\n    public canExcuteCommand(command: GridCommand): boolean {\n        return false;\n    }\n\n    public excuteCommand(command: GridCommand): void {\n\n    }\n\n    public initEntity(grid: GridBase, entityType: EntityType, width: number = 1, height: number = 1): void {\n        this._grid = grid;\n        if (this._grid) {\n            this._puppet = this.node.getChildByName('puppet');\n            this._entityType = entityType;\n            this._occupyArea.width = width;\n            this._occupyArea.height = height;\n            this._tileSize = this._grid.getCellSize();\n            let size = cc.size(this._tileSize.width * width, this._tileSize.height * height);\n            this.node.setContentSize(size);\n            this.node.setAnchorPoint(cc.v2(0.5, 0.5));\n        }\n        this._stateMachine = EntityStateMachine.create(this);\n        this.setCurrentState(EntityStateWait.create());\n    }\n\n    onLoad() {\n\n    }\n\n    update(dt) {\n        dt = dt * cc.director.getScheduler().getTimeScale();\n        this._stateMachine.update(dt);\n    }\n\n    onDestroy() {\n        this._puppet = null;\n        this._stateMachine = null;\n        this._occupyArea = null;\n        this._tileSize = null;\n        this._grid = null;\n        this._prefabFileName = null;\n        this._path = null;\n    }\n\n    public destoryWithRecycle(recycle: boolean = false) {\n        if (recycle) {\n            this.resetForRecycle();\n            this.node.removeFromParent(true);\n            EntityPrefabNodePool.getInstance().putPrefabNode(this);\n        } else {\n            this.node.destroy();\n        }\n    }\n\n    protected resetForRecycle() {\n        this.node.scale = 1;\n        this.node.angle = 0;\n        this.node.opacity = 255;\n        this._grid = null;\n        this._stateMachine = null;\n        this._fireWorksAttackedPriority = EntityBase.DEFAULT_FIREWORKS_ATTACKED_PRIORITY;\n        this._missileAttackedPriority = EntityBase.DEFAULT_MISSILE_PRIORITY;\n        this.clearPath();\n        this.setImmuneDamage(false);\n        this.setVisible(true);\n    }\n\n    protected selfDestory(recycle: boolean = false): void {\n        this.removeFromGridAndAddToEffect();\n        this.getGrid().addObstructs(this);\n        this.runAction(cc.sequence(cc.delayTime(0.05), cc.callFunc(() => {\n            this.getGrid().removeObstructs(this);\n            this.destoryWithRecycle(recycle);\n        })));\n    }\n    protected selfHurt(): void {\n        this.getGrid().addObstructs(this);\n        this.runAction(cc.sequence(cc.delayTime(0.05), cc.callFunc(() => {\n            this.getGrid().removeObstructs(this);\n        })));\n    }\n}\n","\nexport enum EntityEventType{\n    EntityChanged,\n};\n\nexport default class EntityEventBase extends cc.Event.EventCustom {\n    public static ENTITY_EVENT_KEY:string = 'ENTITY_EVENT_KEY';\n    private _type:EntityEventType;\n    public getEventType() : EntityEventType {\n        return this._type;\n    }\n    constructor(type:EntityEventType) {\n        super(EntityEventBase.ENTITY_EVENT_KEY, true);\n        this._type = type;\n    }\n}\n","import EntityBase from \"../entity/EntityBase\";\nimport EntityEventBase, { EntityEventType } from \"./EntityEventBase\";\n\nexport default class EntityEventChanged extends EntityEventBase {\n\n   private _entity:EntityBase;\n   public getEntity() : EntityBase {\n       return this._entity;\n   }\n   public static create(entity:EntityBase) : EntityEventChanged {\n       return new EntityEventChanged(entity);\n   }\n   constructor(entity:EntityBase) {\n       super(EntityEventType.EntityChanged);\n       this._entity = entity;\n   }\n}\n","import { EntityID } from \"./EntityID\";\n\nexport enum EntityGroupID {\n    None                        = 0,\n    ItemNormal                  = 601,\n    ItemBombButterfly           = 602,\n    ItemBombRow                 = 603,\n    ItemBombColumn              = 604,\n    ItemBombCross               = 605,\n    ItemBombRange               = 606,\n    ItemPaw                     = 621,\n    ParasiteGiftBox             = 704,\n};\n\nexport default class EntityGroupIDManager {\n    //单例对象\n    private static instance:EntityGroupIDManager = null;\n    public static getInstance():EntityGroupIDManager{\n        if(this.instance == null){\n            this.instance = new EntityGroupIDManager();\n        }\n        return this.instance;\n    }\n    private String_To_EntityGroupID_Map:Object = {};\n    private initString_To_EntityGroupID_Map() : void {\n        this.String_To_EntityGroupID_Map[\"fruit\"] =         EntityGroupID.ItemNormal;\n        this.String_To_EntityGroupID_Map[\"butterfly\"] =     EntityGroupID.ItemBombButterfly;\n        this.String_To_EntityGroupID_Map[\"hLine\"] =         EntityGroupID.ItemBombRow;\n        this.String_To_EntityGroupID_Map[\"vLine\"] =         EntityGroupID.ItemBombColumn;\n        this.String_To_EntityGroupID_Map[\"cross\"] =         EntityGroupID.ItemBombCross;\n        this.String_To_EntityGroupID_Map[\"boom\"] =          EntityGroupID.ItemBombRange;\n        this.String_To_EntityGroupID_Map[\"paw\"] =           EntityGroupID.ItemPaw;\n        this.String_To_EntityGroupID_Map[\"giftBox\"] =       EntityGroupID.ParasiteGiftBox;\n    }\n    private EntityGroupID_To_EntityIDs_Map:Object = {};\n    private initEntityGroupID_To_EntityIDs_Map() : void {\n        this.EntityGroupID_To_EntityIDs_Map[EntityGroupID.ItemNormal] = [\n            EntityID.ItemNormalRed,\n            EntityID.ItemNormalGreen,\n            EntityID.ItemNormalBlue,\n            EntityID.ItemNormalYellow,\n            EntityID.ItemNormalOrange,\n            EntityID.ItemNormalPurple,\n        ];\n    \n        this.EntityGroupID_To_EntityIDs_Map[EntityGroupID.ItemBombButterfly] = [\n            EntityID.ItemBombButterflyRed,\n            EntityID.ItemBombButterflyGreen,\n            EntityID.ItemBombButterflyBlue,\n            EntityID.ItemBombButterflyYellow,\n            EntityID.ItemBombButterflyOrange,\n            EntityID.ItemBombButterflyPurple,\n        ];\n        \n        this.EntityGroupID_To_EntityIDs_Map[EntityGroupID.ItemBombRow] = [\n            EntityID.ItemBombRowRed,\n            EntityID.ItemBombRowGreen,\n            EntityID.ItemBombRowBlue,\n            EntityID.ItemBombRowYellow,\n            EntityID.ItemBombRowOrange,\n            EntityID.ItemBombRowPurple,\n        ];\n        \n        this.EntityGroupID_To_EntityIDs_Map[EntityGroupID.ItemBombColumn] = [\n            EntityID.ItemBombColumnRed,\n            EntityID.ItemBombColumnGreen,\n            EntityID.ItemBombColumnBlue,\n            EntityID.ItemBombColumnYellow,\n            EntityID.ItemBombColumnOrange,\n            EntityID.ItemBombColumnPurple,\n        ];\n        \n        this.EntityGroupID_To_EntityIDs_Map[EntityGroupID.ItemBombCross] = [\n            EntityID.ItemBombCrossRed,\n            EntityID.ItemBombCrossGreen,\n            EntityID.ItemBombCrossBlue,\n            EntityID.ItemBombCrossYellow,\n            EntityID.ItemBombCrossOrange,\n            EntityID.ItemBombCrossPurple,\n        ];\n        \n        \n        this.EntityGroupID_To_EntityIDs_Map[EntityGroupID.ItemBombRange] = [\n            EntityID.ItemBombRangeRed,\n            EntityID.ItemBombRangeGreen,\n            EntityID.ItemBombRangeBlue,\n            EntityID.ItemBombRangeYellow,\n            EntityID.ItemBombRangeOrange,\n            EntityID.ItemBombRangePurple,\n        ];\n        \n        \n        this.EntityGroupID_To_EntityIDs_Map[EntityGroupID.ItemPaw] = [\n            EntityID.ItemPawRed,\n            EntityID.ItemPawGreen,\n            EntityID.ItemPawBlue,\n            EntityID.ItemPawYellow,\n            EntityID.ItemPawOrange,\n            EntityID.ItemPawPurple,\n        ];\n\n        this.EntityGroupID_To_EntityIDs_Map[EntityGroupID.ParasiteGiftBox] = [\n            EntityID.ParasiteGiftBoxRed,\n            EntityID.ParasiteGiftBoxGreen,\n            EntityID.ParasiteGiftBoxBlue,\n            EntityID.ParasiteGiftBoxYellow,\n            EntityID.ParasiteGiftBoxOrange,\n            EntityID.ParasiteGiftBoxPurple,\n        ];\n    }\n    private EntityGroupID_To_FrameName_Map:Object = {};\n    private initEntityGroupID_To_FrameName_Map() : void {\n        this.EntityGroupID_To_FrameName_Map[EntityGroupID.ItemNormal] =              \"items/60701.png\";\n        this.EntityGroupID_To_FrameName_Map[EntityGroupID.ItemBombButterfly] =       \"items/60207.png\";\n        this.EntityGroupID_To_FrameName_Map[EntityGroupID.ItemBombRow] =             \"items/60307.png\";\n        this.EntityGroupID_To_FrameName_Map[EntityGroupID.ItemBombColumn] =          \"items/60407.png\";\n        this.EntityGroupID_To_FrameName_Map[EntityGroupID.ItemBombCross] =           \"items/60507.png\";\n        this.EntityGroupID_To_FrameName_Map[EntityGroupID.ItemBombRange] =           \"items/60607.png\";\n        this.EntityGroupID_To_FrameName_Map[EntityGroupID.ItemPaw] =                 \"items/62107.png\";\n        this.EntityGroupID_To_FrameName_Map[EntityGroupID.ParasiteGiftBox] =         \"parasites/70407.png\";\n    }\n\n    constructor() {\n        this.initString_To_EntityGroupID_Map();\n        this.initEntityGroupID_To_EntityIDs_Map();\n        this.initEntityGroupID_To_FrameName_Map();\n    }\n\n    public getEntityGroupIDFromString(name:string) : EntityGroupID {\n        let result = this.String_To_EntityGroupID_Map[name];\n        if (result) {\n            return result;\n        }\n        return EntityGroupID.None;\n    }\n\n    public getFrameNameFromEntityGroupID(groupID:EntityGroupID) : string {\n        let rootPath = 'match_scene/texture/entities/';\n        let result = this.EntityGroupID_To_FrameName_Map[groupID];\n        if (result) {\n            return rootPath + result;\n        }\n        return rootPath + \"unknow/unknow\";\n    }\n\n    public getEntityIDsFromEntityGroupID(groupID:EntityGroupID) : EntityID[] {\n        let result = this.EntityGroupID_To_EntityIDs_Map[groupID];\n        if (result) {\n            return result;\n        }\n        return [];\n    }\n\n    public getEntityGroupIDFromEntityID(entityID:EntityID) : EntityGroupID {\n        let tempMap = this.EntityGroupID_To_EntityIDs_Map;\n        for (let key in tempMap) {\n            if (tempMap.hasOwnProperty(key)) {\n                const entityIDs:EntityID[] = tempMap[key];\n                for(const id of entityIDs){\n                    if (id == entityID) {\n                        let result = Number(key) as EntityGroupID;\n                        return result;     \n                    }\n                }\n            }\n        }\n        return EntityGroupID.None;\n    }\n}\n","import { ItemBombType } from \"../entity/item/color/bomb/ItemBombBase\";\nimport { CollectionID } from \"./CollectionID\";\nimport EntityBase from \"../entity/EntityBase\";\n\n\nexport enum EntityID {\n\n    None = 0,\n\n    Frame                       = 1,\n\n    CellNormal                  = 10101,\n    CellConveyerD2U             = 20101,\n    CellConveyerL2R             = 20102,\n    CellConveyerU2D             = 20103,\n    CellConveyerR2L             = 20104,\n    CellConveyerD2L             = 20105,\n    CellConveyerL2U             = 20106,\n    CellConveyerU2R             = 20107,\n    CellConveyerR2D             = 20108,\n    CellConveyerD2R             = 20109,\n    CellConveyerR2U             = 20110,\n    CellConveyerU2L             = 20111,\n    CellConveyerL2D             = 20112,\n    \n    CellMovablePlate            = 20201,\n    \n    PopsicleNormal              = 30101,\n    PopsicleNormal_1x1          = 30101,\n    PopsicleNormal_1x2          = 30102,\n    PopsicleNormal_2x2          = 30103,\n    PopsicleNormal_2x3          = 30104,\n    PopsicleNormal_3x3          = 30105,\n    PopsicleNormal_3x4          = 30106,\n    PopsicleBoom                = 30201,\n    PopsicleBoom_2x2            = 30201,\n    PopsicleBoom_1x1            = 30202,\n    PopsicleLine                = 30301,\n    \n    FloorGrass                  = 40101,\n    \n    // 冰块\n    FloorIceHp1                 = 40201,\n    FloorIceHp2                 = 40202,\n    FloorIceHp3                 = 40203,\n    FloorIceHp4                 = 40204,\n    \n    // 换色器\n    FloorChangerRed             = 40301,\n    FloorChangerGreen           = 40302,\n    FloorChangerBlue            = 40303,\n    FloorChangerYellow          = 40304,\n    FloorChangerOrange          = 40305,\n    FloorChangerPurple          = 40306,\n    \n    // 倍增器\n    FloorDouble                 = 40401,\n    \n    // 路径\n    FloorRoadLineVU             = 40501,\n    FloorRoadLineHR             = 40502,\n    FloorRoadLineVD             = 40503,\n    FloorRoadLineHL             = 40504,\n    FloorRoadTurnLdD            = 40505,\n    FloorRoadTurnLuL            = 40506,\n    FloorRoadTurnRuU            = 40507,\n    FloorRoadTurnRdR            = 40508,\n    FloorRoadTurnRdD            = 40509,\n    FloorRoadTurnRuR            = 40510,\n    FloorRoadTurnLuU            = 40511,\n    FloorRoadTurnLdL            = 40512,\n    FloorRoadStartPoint         = 40601,\n    \n    RugJam                      = 50101,\n    \n    // 基础\n    ItemNormalRed               = 60101,\n    ItemNormalGreen             = 60102,\n    ItemNormalBlue              = 60103,\n    ItemNormalYellow            = 60104,\n    ItemNormalOrange            = 60105,\n    ItemNormalPurple            = 60106,\n    // 蝴蝶炸弹\n    ItemBombButterflyRed        = 60201,\n    ItemBombButterflyGreen      = 60202,\n    ItemBombButterflyBlue       = 60203,\n    ItemBombButterflyYellow     = 60204,\n    ItemBombButterflyOrange     = 60205,\n    ItemBombButterflyPurple     = 60206,\n    // 水平直线炸弹\n    ItemBombRowRed              = 60301,\n    ItemBombRowGreen            = 60302,\n    ItemBombRowBlue             = 60303,\n    ItemBombRowYellow           = 60304,\n    ItemBombRowOrange           = 60305,\n    ItemBombRowPurple           = 60306,\n    // 垂直直线炸弹\n    ItemBombColumnRed           = 60401,\n    ItemBombColumnGreen         = 60402,\n    ItemBombColumnBlue          = 60403,\n    ItemBombColumnYellow        = 60404,\n    ItemBombColumnOrange        = 60405,\n    ItemBombColumnPurple        = 60406,\n    // 对角线X炸弹\n    ItemBombCrossRed            = 60501,\n    ItemBombCrossGreen          = 60502,\n    ItemBombCrossBlue           = 60503,\n    ItemBombCrossYellow         = 60504,\n    ItemBombCrossOrange         = 60505,\n    ItemBombCrossPurple         = 60506,\n    // 范围炸弹\n    ItemBombRangeRed            = 60601,\n    ItemBombRangeGreen          = 60602,\n    ItemBombRangeBlue           = 60603,\n    ItemBombRangeYellow         = 60604,\n    ItemBombRangeOrange         = 60605,\n    ItemBombRangePurple         = 60606,\n    // 同色炸弹\n    ItemBombRainbow             = 60701,\n    // 同色砖块\n\n    ItemBlockHp1                = 60801,\n    ItemBlockHp2                = 60802,\n    ItemBlockHp3                = 60803,\n    ItemBlockHp4                = 60804,\n    ItemBlockHp5                = 60805,\n    ItemBlockHp6                = 60806,\n    // 甜甜圈\n    ItemDoughnutHp1             = 60901,\n    ItemDoughnutHp2             = 60902,\n    ItemDoughnutHp3             = 60903,\n    // 魔法水晶\n    ItemMagicCrystal            = 61001,\n    \n    //西瓜\n    ItemWatermelon              = 61101,\n    \n    //水果蛋糕\n    ItemFruitCake               = 61201,\n\n    ItemFireWormBottle          = 61301,\n    \n    ItemMowerUp                 = 61401,\n    ItemMowerRight              = 61402,\n    ItemMowerDown               = 61403,\n    ItemMowerLeft               = 61404,\n    // 骨头\n    ItemBone                    = 61501,\n    \n    ItemChestnut                = 61601,\n\n    //烟花\n    ItemFireworksHp1            = 61701,\n    ItemFireworksHp2            = 61702,\n    ItemFireworksHp3            = 61703,\n    ItemFireworksHp4            = 61704,\n    \n    // 小狗\n    ItemPuppy                   = 62001,\n    // 爪印\n    ItemPawRed                  = 62101,\n    ItemPawGreen                = 62102,\n    ItemPawBlue                 = 62103,\n    ItemPawYellow               = 62104,\n    ItemPawOrange               = 62105,\n    ItemPawPurple               = 62106,\n    // 热气球\n    ItemBalloon                 = 62201,\n    // 狗屋\n    ItemDogHouse                = 62301,\n    ItemJamBottle               = 62401,\n    //蜂巢\n    ItemHoneyComb               = 62601,\n\n    ItemStatueHp1               = 62801,\n    ItemStatueHp2               = 62802,\n    ItemStatueHp3               = 62803,\n    \n    \n    // 冰砖\n    ParasiteIceCubeHp1           = 70101,\n    ParasiteIceCubeHp2           = 70102,\n    ParasiteIceCubeHp3           = 70103,\n    ParasiteIceCubeHp4           = 70104,\n    ParasiteIceCubeHp5           = 70105,\n    ParasiteIceCubeHp6           = 70106,\n    \n    // 锁链\n    ParasiteShackleHp1           = 70201,\n    ParasiteShackleHp2           = 70202,\n    ParasiteShackleHp3           = 70203,\n    \n    // 蜂蜜\n    ParasiteHoneyHp1             = 70301,\n    ParasiteHoneyHp2             = 70302,\n\n    // 礼物盒\n    ParasiteGiftBoxRed           = 70401,\n    ParasiteGiftBoxGreen         = 70402,\n    ParasiteGiftBoxBlue          = 70403,\n    ParasiteGiftBoxYellow        = 70404,\n    ParasiteGiftBoxOrange        = 70405,\n    ParasiteGiftBoxPurple        = 70406,\n    \n    MarkBoneCollector            = 80101,\n    MarkWormholeEntrance         = 80201,\n    MarkWormholeExit             = 80301,\n    // 藤蔓\n    FenceVineVertical            = 80401,\n    FenceVineHorizontal          = 80501,\n    \n    MarkDropMachine              = 80801,\n    MarkNormal                   = 80901,\n    \n    FlyerMissileRed              = 90101,\n    FlyerMissileGreen            = 90102,\n    FlyerMissileBlue             = 90103,\n    FlyerMissileYellow           = 90104,\n    FlyerMissileOrange           = 90105,\n    FlyerMissilePurple           = 90106,\n    \n    FlyerCannonRed               = 90201,\n    FlyerCannonGreen             = 90202,\n    FlyerCannonBlue              = 90203,\n    FlyerCannonYellow            = 90204,\n    FlyerCannonOrange            = 90205,\n    FlyerCannonPurple            = 90206,\n    FlyerCannonWhite             = 90207,\n    \n    FlyerBombRed                = 90301,\n    FlyerBombGreen              = 90302,\n    FlyerBombBlue               = 90303,\n    FlyerBombYellow             = 90304,\n    FlyerBombOrange             = 90305,\n    FlyerBombPurple             = 90306,\n    FlyerBombWhite              = 90307,\n    \n    FlyerNuclear                = 90401,\n    \n    FlyerLaser                  = 90501,\n    FlyerLaserBullet            = 90502,\n\n    \n    FlyerPopsicelLine           = 90601,\n    FlyerPopsicelBomb           = 90701,\n\n    FlyerCollectedEntity        = 90801,\n    FlyerChargeEntity           = 90802,\n    FlyerCollectedSupply        = 90803,\n    FlyerMoreStep               = 90804,\n    \n\n    FlyerAnimationBomb1x1           = 90901,\n    FlyerAnimationCommonHurt        = 90902,\n    FlyerAnimationFocusFrame        = 90903,\n    FlyerAnimationHighlightedCell   = 90904,\n    FlyerAnimationItemMarked        = 90905,\n    FlyerAnimationBombCross         = 90906,\n\n    FlyerAnimationFloorIceDie           = 91001,\n\n    FlyerAnimationRugJamDie             = 91002,\n\n    FlyerAnimationItemNormalRedDie      = 91003,\n    FlyerAnimationItemNormalGreenDie    = 91004,\n    FlyerAnimationItemNormalBlueDie     = 91005,\n    FlyerAnimationItemNormalYellowDie   = 91006,\n    FlyerAnimationItemNormalOrangeDie   = 91007,\n    FlyerAnimationItemNormalPurpleDie   = 91008,\n    FlyerAnimationItemBlockDie          = 91009,\n    FlyerAnimationItemDoughnutDie       = 91010,\n    FlyerAnimationItemWatermelonDie     = 91011,\n    FlyerAnimationItemFruitCakeDie      = 91012,\n    FlyerAnimationItemFirewormBottleDie = 91013,\n    FlyerAnimationItemChestnutDie       = 91014,\n    FlyerAnimationItemJamBottleDie      = 91015,\n    FlyerAnimationItemStatueDie         = 91016,\n\n    FlyerAnimationParasiteIceCubeDie    = 91101,\n    FlyerAnimationParasiteShackleDie    = 91102,\n    FlyerAnimationParasiteHoneyDie      = 91103,\n\n    FlyerAnimationParasiteGiftBoxRedDie     = 91104,\n    FlyerAnimationParasiteGiftBoxGreenDie   = 91105,\n    FlyerAnimationParasiteGiftBoxBlueDie    = 91106,\n    FlyerAnimationParasiteGiftBoxYellowDie  = 91107,\n    FlyerAnimationParasiteGiftBoxOrangeDie  = 91108,\n    FlyerAnimationParasiteGiftBoxPurpleDie  = 91109,\n\n\n    FlyerHammer                         = 91201,\n    FlyerMower                          = 91301,\n    FlyerFireworks                      = 91401,\n    \n\n    \n};\n\nexport enum EntityType{\n    None,\n    Frame,\n    Cell,\n    Floor,\n    Rug,\n    Popsicle,\n    Item,\n    Parasite,\n    Fences,\n    Flyer,\n    Marker,\n};\n\nexport enum EntityColor {\n    None = -1,\n    Begin = 0,\n    Red = 0,\n    Green,\n    Blue,\n    Yellow,\n    Orange,\n    Purple,\n    End = Purple,\n};\n\nexport enum EntityCleanType {\n    None,\n    Bomb,\n    Match,\n    Neighbor,\n    Floor,\n    Popsicle,\n    Suicide,\n    Activate,\n    LayoutGrass,\n    Terminate,\n};\n\nexport class EntityCleanOption {\n    public cleanType:EntityCleanType;\n    public cleanRoot:cc.Vec2;\n    public cleanColor:EntityColor;\n    public createBombType:ItemBombType;\n    public hitNeighbour:boolean;\n    public hitFloor:boolean;\n    public layoutGrass:boolean;\n\n    public static create(CleanType:EntityCleanType,  \n                         CleanRoot:cc.Vec2,\n                         CleanColor:EntityColor = EntityColor.None,\n                         CreateBombType:ItemBombType = ItemBombType.None,\n                         HitNeighbour:boolean = false,\n                         HitFloor:boolean = false,\n                         LayoutGrass:boolean = false) : EntityCleanOption {\n        return new EntityCleanOption(CleanType, \n                                     CleanRoot, \n                                     CleanColor, \n                                     CreateBombType, \n                                     HitNeighbour,\n                                     HitFloor,\n                                     LayoutGrass)\n    }\n\n    constructor(CleanType:EntityCleanType,  \n                CleanRoot:cc.Vec2,\n                CleanColor:EntityColor,\n                CreateBombType:ItemBombType,\n                HitNeighbour:boolean,\n                HitFloor:boolean,\n                LayoutGrass:boolean) {\n        this.cleanType = CleanType;\n        this.cleanRoot = CleanRoot;\n        this.cleanColor = CleanColor;\n        this.createBombType = CreateBombType;\n        this.hitNeighbour = HitNeighbour;\n        this.hitFloor = HitFloor;\n        this.layoutGrass = LayoutGrass;\n    }\n};\n\nexport class EntityChangeOption {\n    public targetID : EntityID;\n    public collectOld : boolean;\n\n    public static create(TargetID:EntityID, \n                         CollectOld:boolean) : EntityChangeOption {\n        return new EntityChangeOption(TargetID, CollectOld);\n    }\n    \n    constructor(TargetID:EntityID, \n                CollectOld:boolean) {\n        this.targetID = TargetID;\n        this.collectOld = CollectOld;\n    }\n};\n\nexport class EntityChargeOption {\n    public chargeID : CollectionID = CollectionID.None;\n    public chargeAmount : number = 0;\n\n    public static create(ChargeID:CollectionID, \n                         ChargeAmount:number) : EntityChargeOption {\n        return new EntityChargeOption(ChargeID, ChargeAmount);\n    }\n    \n    constructor(ChargeID:CollectionID, \n                ChargeAmount:number) {\n        this.chargeID = ChargeID;\n        this.chargeAmount = ChargeAmount;\n    }\n};\n\nexport enum EntityDropStepType{\n    Hide,\n    Born,\n    Stay,\n    Drop,\n    Wormhole,\n};\n\nexport class EntityDropStep {\n\n    public static create(Type:EntityDropStepType,\n                         LogicalPos:cc.Vec2) : EntityDropStep {\n        return new EntityDropStep(Type, LogicalPos);\n    }\n\n    public type:EntityDropStepType;\n    public logicalPos:cc.Vec2;\n    constructor(Type:EntityDropStepType,\n                LogicalPos:cc.Vec2){\n        this.type = Type;\n        this.logicalPos = LogicalPos;\n    }\n}\n\nexport class HurtAnimationInfo {\n    public fileName:string = '';\n    public entityID:EntityID = 0;\n\n    public static create(FileName:string, EntityID:EntityID) : HurtAnimationInfo {\n        return new HurtAnimationInfo(FileName, EntityID);\n    }\n    constructor(FileName:string, EntityID:EntityID){\n        this.fileName = FileName;\n        this.entityID = EntityID;\n    }\n}\n\nexport class EntityIDManager {\n    //单例对象\n    private static instance:EntityIDManager = null;\n    public static getInstance():EntityIDManager{\n        if(this.instance == null){\n            this.instance = new EntityIDManager();\n        }\n        return this.instance;\n    }\n\n    private String_To_EntityID_Map:Object = {};\n    private initString_To_EntityID_Map():void {\n        this.String_To_EntityID_Map[\"popsicles\"]        =  EntityID.PopsicleNormal;\n        this.String_To_EntityID_Map[\"popsiclesLine\"]    =  EntityID.PopsicleLine;\n        this.String_To_EntityID_Map[\"popsiclesBoom\"]    =  EntityID.PopsicleBoom;\n        this.String_To_EntityID_Map[\"grass\"]            =  EntityID.FloorGrass;\n        this.String_To_EntityID_Map[\"doubler\"]          =  EntityID.FloorDouble;\n        this.String_To_EntityID_Map[\"ice1\"]             =  EntityID.FloorIceHp1;\n        this.String_To_EntityID_Map[\"ice2\"]             =  EntityID.FloorIceHp2;\n        this.String_To_EntityID_Map[\"ice3\"]             =  EntityID.FloorIceHp3;\n        this.String_To_EntityID_Map[\"ice4\"]             =  EntityID.FloorIceHp4;\n        this.String_To_EntityID_Map[\"changerRed\"]       =  EntityID.FloorChangerRed;\n        this.String_To_EntityID_Map[\"changerGreen\"]     =  EntityID.FloorChangerGreen;\n        this.String_To_EntityID_Map[\"changerBlue\"]      =  EntityID.FloorChangerBlue;\n        this.String_To_EntityID_Map[\"changerYellow\"]    =  EntityID.FloorChangerYellow;\n        this.String_To_EntityID_Map[\"changerOrange\"]    =  EntityID.FloorChangerOrange;\n        this.String_To_EntityID_Map[\"changerPurple\"]    =  EntityID.FloorChangerPurple;\n        this.String_To_EntityID_Map[\"jam\"]              =  EntityID.RugJam;\n        this.String_To_EntityID_Map[\"red\"]              =  EntityID.ItemNormalRed;\n        this.String_To_EntityID_Map[\"green\"]            =  EntityID.ItemNormalGreen;\n        this.String_To_EntityID_Map[\"blue\"]             =  EntityID.ItemNormalBlue;\n        this.String_To_EntityID_Map[\"yellow\"]           =  EntityID.ItemNormalYellow;\n        this.String_To_EntityID_Map[\"orange\"]           =  EntityID.ItemNormalOrange;\n        this.String_To_EntityID_Map[\"purple\"]           =  EntityID.ItemNormalPurple;\n        this.String_To_EntityID_Map[\"butterflyRed\"]     =  EntityID.ItemBombButterflyRed;\n        this.String_To_EntityID_Map[\"butterflyGreen\"]   =  EntityID.ItemBombButterflyGreen;\n        this.String_To_EntityID_Map[\"butterflyBlue\"]    =  EntityID.ItemBombButterflyBlue;\n        this.String_To_EntityID_Map[\"butterflyYellow\"]  =  EntityID.ItemBombButterflyYellow;\n        this.String_To_EntityID_Map[\"butterflyOrange\"]  =  EntityID.ItemBombButterflyOrange;\n        this.String_To_EntityID_Map[\"butterflyPurple\"]  =  EntityID.ItemBombButterflyPurple;\n        this.String_To_EntityID_Map[\"hLineRed\"]         =  EntityID.ItemBombRowRed;\n        this.String_To_EntityID_Map[\"hLineGreen\"]       =  EntityID.ItemBombRowGreen;\n        this.String_To_EntityID_Map[\"hLineBlue\"]        =  EntityID.ItemBombRowBlue;\n        this.String_To_EntityID_Map[\"hLineYellow\"]      =  EntityID.ItemBombRowYellow;\n        this.String_To_EntityID_Map[\"hLineOrange\"]      =  EntityID.ItemBombRowOrange;\n        this.String_To_EntityID_Map[\"hLinePurple\"]      =  EntityID.ItemBombRowPurple;\n        this.String_To_EntityID_Map[\"vLineRed\"]         =  EntityID.ItemBombColumnRed;\n        this.String_To_EntityID_Map[\"vLineGreen\"]       =  EntityID.ItemBombColumnGreen;\n        this.String_To_EntityID_Map[\"vLineBlue\"]        =  EntityID.ItemBombColumnBlue;\n        this.String_To_EntityID_Map[\"vLineYellow\"]      =  EntityID.ItemBombColumnYellow;\n        this.String_To_EntityID_Map[\"vLineOrange\"]      =  EntityID.ItemBombColumnOrange;\n        this.String_To_EntityID_Map[\"vLinePurple\"]      =  EntityID.ItemBombColumnPurple;\n        this.String_To_EntityID_Map[\"crossRed\"]         =  EntityID.ItemBombCrossRed;\n        this.String_To_EntityID_Map[\"crossGreen\"]       =  EntityID.ItemBombCrossGreen;\n        this.String_To_EntityID_Map[\"crossBlue\"]        =  EntityID.ItemBombCrossBlue;\n        this.String_To_EntityID_Map[\"crossYellow\"]      =  EntityID.ItemBombCrossYellow;\n        this.String_To_EntityID_Map[\"crossOrange\"]      =  EntityID.ItemBombCrossOrange;\n        this.String_To_EntityID_Map[\"crossPurple\"]      =  EntityID.ItemBombCrossPurple;\n        this.String_To_EntityID_Map[\"boomRed\"]          =  EntityID.ItemBombRangeRed;\n        this.String_To_EntityID_Map[\"boomGreen\"]        =  EntityID.ItemBombRangeGreen;\n        this.String_To_EntityID_Map[\"boomBlue\"]         =  EntityID.ItemBombRangeBlue;\n        this.String_To_EntityID_Map[\"boomYellow\"]       =  EntityID.ItemBombRangeYellow;\n        this.String_To_EntityID_Map[\"boomOrange\"]       =  EntityID.ItemBombRangeOrange;\n        this.String_To_EntityID_Map[\"boomPurple\"]       =  EntityID.ItemBombRangePurple;\n        this.String_To_EntityID_Map[\"pawRed\"]           =  EntityID.ItemPawRed;\n        this.String_To_EntityID_Map[\"pawGreen\"]         =  EntityID.ItemPawGreen;\n        this.String_To_EntityID_Map[\"pawBlue\"]          =  EntityID.ItemPawBlue;\n        this.String_To_EntityID_Map[\"pawYellow\"]        =  EntityID.ItemPawYellow;\n        this.String_To_EntityID_Map[\"pawOrange\"]        =  EntityID.ItemPawOrange;\n        this.String_To_EntityID_Map[\"pawPurple\"]        =  EntityID.ItemPawPurple;\n        this.String_To_EntityID_Map[\"rainbow\"]          =  EntityID.ItemBombRainbow;\n        this.String_To_EntityID_Map[\"block1\"]           =  EntityID.ItemBlockHp1;\n        this.String_To_EntityID_Map[\"block2\"]           =  EntityID.ItemBlockHp2;\n        this.String_To_EntityID_Map[\"block3\"]           =  EntityID.ItemBlockHp3;\n        this.String_To_EntityID_Map[\"block4\"]           =  EntityID.ItemBlockHp4;\n        this.String_To_EntityID_Map[\"block5\"]           =  EntityID.ItemBlockHp5;\n        this.String_To_EntityID_Map[\"block6\"]           =  EntityID.ItemBlockHp6;\n        this.String_To_EntityID_Map[\"doughnut1\"]        =  EntityID.ItemDoughnutHp1;\n        this.String_To_EntityID_Map[\"doughnut2\"]        =  EntityID.ItemDoughnutHp2;\n        this.String_To_EntityID_Map[\"doughnut3\"]        =  EntityID.ItemDoughnutHp3;\n        this.String_To_EntityID_Map[\"magicCrystal\"]     =  EntityID.ItemMagicCrystal;\n        this.String_To_EntityID_Map[\"watermelon\"]       =  EntityID.ItemWatermelon;\n        this.String_To_EntityID_Map[\"bone\"]             =  EntityID.ItemBone;\n        this.String_To_EntityID_Map[\"mower\"]            =  EntityID.ItemMowerUp;\n        this.String_To_EntityID_Map[\"nut\"]              =  EntityID.ItemChestnut;\n        this.String_To_EntityID_Map[\"puppy\"]            =  EntityID.ItemPuppy;\n        this.String_To_EntityID_Map[\"honeyComb\"]        =  EntityID.ItemHoneyComb;\n        this.String_To_EntityID_Map[\"jamBottle\"]        =  EntityID.ItemJamBottle;\n        this.String_To_EntityID_Map[\"statue1\"]          =  EntityID.ItemStatueHp1;\n        this.String_To_EntityID_Map[\"statue2\"]          =  EntityID.ItemStatueHp2;\n        this.String_To_EntityID_Map[\"statue3\"]          =  EntityID.ItemStatueHp3;\n        this.String_To_EntityID_Map[\"iceCube1\"]         =  EntityID.ParasiteIceCubeHp1;\n        this.String_To_EntityID_Map[\"iceCube2\"]         =  EntityID.ParasiteIceCubeHp2;\n        this.String_To_EntityID_Map[\"iceCube3\"]         =  EntityID.ParasiteIceCubeHp3;\n        this.String_To_EntityID_Map[\"iceCube4\"]         =  EntityID.ParasiteIceCubeHp4;\n        this.String_To_EntityID_Map[\"iceCube5\"]         =  EntityID.ParasiteIceCubeHp5;\n        this.String_To_EntityID_Map[\"iceCube6\"]         =  EntityID.ParasiteIceCubeHp6;\n        this.String_To_EntityID_Map[\"chain1\"]           =  EntityID.ParasiteShackleHp1;\n        this.String_To_EntityID_Map[\"chain2\"]           =  EntityID.ParasiteShackleHp2;\n        this.String_To_EntityID_Map[\"chain3\"]           =  EntityID.ParasiteShackleHp3;\n        this.String_To_EntityID_Map[\"honey1\"]           =  EntityID.ParasiteHoneyHp1;\n        this.String_To_EntityID_Map[\"honey2\"]           =  EntityID.ParasiteHoneyHp2\n        this.String_To_EntityID_Map[\"fireworks1\"]       =  EntityID.ItemFireworksHp1;\n        this.String_To_EntityID_Map[\"fireworks2\"]       =  EntityID.ItemFireworksHp2;\n        this.String_To_EntityID_Map[\"fireworks3\"]       =  EntityID.ItemFireworksHp3;\n        this.String_To_EntityID_Map[\"fireworks4\"]       =  EntityID.ItemFireworksHp4;\n        this.String_To_EntityID_Map[\"giftBoxRed\"]       =  EntityID.ParasiteGiftBoxRed;\n        this.String_To_EntityID_Map[\"giftBoxGreen\"]     =  EntityID.ParasiteGiftBoxGreen;\n        this.String_To_EntityID_Map[\"giftBoxBlue\"]      =  EntityID.ParasiteGiftBoxBlue;\n        this.String_To_EntityID_Map[\"giftBoxYellow\"]    =  EntityID.ParasiteGiftBoxYellow;\n        this.String_To_EntityID_Map[\"giftBoxOrange\"]    =  EntityID.ParasiteGiftBoxOrange;\n        this.String_To_EntityID_Map[\"giftBoxPurple\"]    =  EntityID.ParasiteGiftBoxPurple;\n    }\n    private EntityID_To_FrameName_Map:Object = {};\n    private initEntityID_To_FrameName_Map() : void {\n        this.EntityID_To_FrameName_Map[EntityID.None] =                    'unknow/unknow'; \n        this.EntityID_To_FrameName_Map[EntityID.CellNormal] =              'cells/10101'; \n        this.EntityID_To_FrameName_Map[EntityID.CellConveyerD2U] =         'conveyers/20101'; \n        this.EntityID_To_FrameName_Map[EntityID.CellConveyerL2R] =         'conveyers/20102'; \n        this.EntityID_To_FrameName_Map[EntityID.CellConveyerU2D] =         'conveyers/20103'; \n        this.EntityID_To_FrameName_Map[EntityID.CellConveyerR2L] =         'conveyers/20104'; \n        this.EntityID_To_FrameName_Map[EntityID.CellConveyerD2L] =         'conveyers/20105'; \n        this.EntityID_To_FrameName_Map[EntityID.CellConveyerL2U] =         'conveyers/20106'; \n        this.EntityID_To_FrameName_Map[EntityID.CellConveyerU2R] =         'conveyers/20107'; \n        this.EntityID_To_FrameName_Map[EntityID.CellConveyerR2D] =         'conveyers/20108'; \n        this.EntityID_To_FrameName_Map[EntityID.CellConveyerD2R] =         'conveyers/20109'; \n        this.EntityID_To_FrameName_Map[EntityID.CellConveyerR2U] =         'conveyers/20110'; \n        this.EntityID_To_FrameName_Map[EntityID.CellConveyerU2L] =         'conveyers/20111'; \n        this.EntityID_To_FrameName_Map[EntityID.CellConveyerL2D] =         'conveyers/20112'; \n        this.EntityID_To_FrameName_Map[EntityID.CellMovablePlate] =        'conveyers/20201'; \n        this.EntityID_To_FrameName_Map[EntityID.PopsicleNormal] =          'popsicles/30101'; \n        this.EntityID_To_FrameName_Map[EntityID.PopsicleNormal_1x1] =      'popsicles/30101'; \n        this.EntityID_To_FrameName_Map[EntityID.PopsicleNormal_1x2] =      'popsicles/30102'; \n        this.EntityID_To_FrameName_Map[EntityID.PopsicleNormal_2x2] =      'popsicles/30103'; \n        this.EntityID_To_FrameName_Map[EntityID.PopsicleNormal_2x3] =      'popsicles/30104'; \n        this.EntityID_To_FrameName_Map[EntityID.PopsicleNormal_3x3] =      'popsicles/30105'; \n        this.EntityID_To_FrameName_Map[EntityID.PopsicleNormal_3x4] =      'popsicles/30106'; \n        this.EntityID_To_FrameName_Map[EntityID.PopsicleBoom] =            'popsicles/30201'; \n        this.EntityID_To_FrameName_Map[EntityID.PopsicleBoom_2x2] =        'popsicles/30201'; \n        this.EntityID_To_FrameName_Map[EntityID.PopsicleBoom_1x1] =        'popsicles/30202'; \n        this.EntityID_To_FrameName_Map[EntityID.PopsicleLine] =            'popsicles/30301'; \n        this.EntityID_To_FrameName_Map[EntityID.FloorGrass] =              'floors/40101'; \n        this.EntityID_To_FrameName_Map[EntityID.FloorIceHp1] =             'floors/40201'; \n        this.EntityID_To_FrameName_Map[EntityID.FloorIceHp2] =             'floors/40202'; \n        this.EntityID_To_FrameName_Map[EntityID.FloorIceHp3] =             'floors/40203'; \n        this.EntityID_To_FrameName_Map[EntityID.FloorIceHp4] =             'floors/40204'; \n        this.EntityID_To_FrameName_Map[EntityID.FloorChangerRed] =         'floors/40301'; \n        this.EntityID_To_FrameName_Map[EntityID.FloorChangerGreen] =       'floors/40302'; \n        this.EntityID_To_FrameName_Map[EntityID.FloorChangerBlue] =        'floors/40303'; \n        this.EntityID_To_FrameName_Map[EntityID.FloorChangerYellow] =      'floors/40304'; \n        this.EntityID_To_FrameName_Map[EntityID.FloorChangerOrange] =      'floors/40305'; \n        this.EntityID_To_FrameName_Map[EntityID.FloorChangerPurple] =      'floors/40306'; \n        this.EntityID_To_FrameName_Map[EntityID.FloorDouble] =             'floors/40401'; \n        this.EntityID_To_FrameName_Map[EntityID.FloorRoadLineVU] =         'floors/40501'; \n        this.EntityID_To_FrameName_Map[EntityID.FloorRoadLineHR] =         'floors/40502'; \n        this.EntityID_To_FrameName_Map[EntityID.FloorRoadLineVD] =         'floors/40503'; \n        this.EntityID_To_FrameName_Map[EntityID.FloorRoadLineHL] =         'floors/40504'; \n        this.EntityID_To_FrameName_Map[EntityID.FloorRoadTurnLdD] =        'floors/40505'; \n        this.EntityID_To_FrameName_Map[EntityID.FloorRoadTurnLuL] =        'floors/40506'; \n        this.EntityID_To_FrameName_Map[EntityID.FloorRoadTurnRuU] =        'floors/40507'; \n        this.EntityID_To_FrameName_Map[EntityID.FloorRoadTurnRdR] =        'floors/40508'; \n        this.EntityID_To_FrameName_Map[EntityID.FloorRoadTurnRdD] =        'floors/40509'; \n        this.EntityID_To_FrameName_Map[EntityID.FloorRoadTurnRuR] =        'floors/40510'; \n        this.EntityID_To_FrameName_Map[EntityID.FloorRoadTurnLuU] =        'floors/40511'; \n        this.EntityID_To_FrameName_Map[EntityID.FloorRoadTurnLdL] =        'floors/40512'; \n        this.EntityID_To_FrameName_Map[EntityID.FloorRoadStartPoint] =     'floors/40601'; \n        this.EntityID_To_FrameName_Map[EntityID.RugJam] =                  'rugs/50101'; \n        this.EntityID_To_FrameName_Map[EntityID.ItemNormalRed] =           'items/60101'; \n        this.EntityID_To_FrameName_Map[EntityID.ItemNormalGreen] =         'items/60102'; \n        this.EntityID_To_FrameName_Map[EntityID.ItemNormalBlue] =          'items/60103'; \n        this.EntityID_To_FrameName_Map[EntityID.ItemNormalYellow] =        'items/60104'; \n        this.EntityID_To_FrameName_Map[EntityID.ItemNormalOrange] =        'items/60105'; \n        this.EntityID_To_FrameName_Map[EntityID.ItemNormalPurple] =        'items/60106'; \n        this.EntityID_To_FrameName_Map[EntityID.ItemBombButterflyRed] =    'items/60201'; \n        this.EntityID_To_FrameName_Map[EntityID.ItemBombButterflyGreen] =  'items/60202'; \n        this.EntityID_To_FrameName_Map[EntityID.ItemBombButterflyBlue] =   'items/60203'; \n        this.EntityID_To_FrameName_Map[EntityID.ItemBombButterflyYellow] = 'items/60204'; \n        this.EntityID_To_FrameName_Map[EntityID.ItemBombButterflyOrange] = 'items/60205'; \n        this.EntityID_To_FrameName_Map[EntityID.ItemBombButterflyPurple] = 'items/60206'; \n        this.EntityID_To_FrameName_Map[EntityID.ItemBombRowRed] =          'items/60301'; \n        this.EntityID_To_FrameName_Map[EntityID.ItemBombRowGreen] =        'items/60302'; \n        this.EntityID_To_FrameName_Map[EntityID.ItemBombRowBlue] =         'items/60303'; \n        this.EntityID_To_FrameName_Map[EntityID.ItemBombRowYellow] =       'items/60304'; \n        this.EntityID_To_FrameName_Map[EntityID.ItemBombRowOrange] =       'items/60305'; \n        this.EntityID_To_FrameName_Map[EntityID.ItemBombRowPurple] =       'items/60306'; \n        this.EntityID_To_FrameName_Map[EntityID.ItemBombColumnRed] =       'items/60401'; \n        this.EntityID_To_FrameName_Map[EntityID.ItemBombColumnGreen] =     'items/60402'; \n        this.EntityID_To_FrameName_Map[EntityID.ItemBombColumnBlue] =      'items/60403'; \n        this.EntityID_To_FrameName_Map[EntityID.ItemBombColumnYellow] =    'items/60404'; \n        this.EntityID_To_FrameName_Map[EntityID.ItemBombColumnOrange] =    'items/60405'; \n        this.EntityID_To_FrameName_Map[EntityID.ItemBombColumnPurple] =    'items/60406'; \n        this.EntityID_To_FrameName_Map[EntityID.ItemBombCrossRed] =        'items/60501'; \n        this.EntityID_To_FrameName_Map[EntityID.ItemBombCrossGreen] =      'items/60502'; \n        this.EntityID_To_FrameName_Map[EntityID.ItemBombCrossBlue] =       'items/60503'; \n        this.EntityID_To_FrameName_Map[EntityID.ItemBombCrossYellow] =     'items/60504'; \n        this.EntityID_To_FrameName_Map[EntityID.ItemBombCrossOrange] =     'items/60505'; \n        this.EntityID_To_FrameName_Map[EntityID.ItemBombCrossPurple] =     'items/60506'; \n        this.EntityID_To_FrameName_Map[EntityID.ItemBombRangeRed] =        'items/60601'; \n        this.EntityID_To_FrameName_Map[EntityID.ItemBombRangeGreen] =      'items/60602'; \n        this.EntityID_To_FrameName_Map[EntityID.ItemBombRangeBlue] =       'items/60603'; \n        this.EntityID_To_FrameName_Map[EntityID.ItemBombRangeYellow] =     'items/60604'; \n        this.EntityID_To_FrameName_Map[EntityID.ItemBombRangeOrange] =     'items/60605'; \n        this.EntityID_To_FrameName_Map[EntityID.ItemBombRangePurple] =     'items/60606'; \n        this.EntityID_To_FrameName_Map[EntityID.ItemBombRainbow] =         'items/60701'; \n        this.EntityID_To_FrameName_Map[EntityID.ItemBlockHp1] =            'items/60801'; \n        this.EntityID_To_FrameName_Map[EntityID.ItemBlockHp2] =            'items/60802'; \n        this.EntityID_To_FrameName_Map[EntityID.ItemBlockHp3] =            'items/60803'; \n        this.EntityID_To_FrameName_Map[EntityID.ItemBlockHp4] =            'items/60804'; \n        this.EntityID_To_FrameName_Map[EntityID.ItemBlockHp5] =            'items/60805'; \n        this.EntityID_To_FrameName_Map[EntityID.ItemBlockHp6] =            'items/60806'; \n        this.EntityID_To_FrameName_Map[EntityID.ItemDoughnutHp1] =         'items/60901'; \n        this.EntityID_To_FrameName_Map[EntityID.ItemDoughnutHp2] =         'items/60902'; \n        this.EntityID_To_FrameName_Map[EntityID.ItemDoughnutHp3] =         'items/60903'; \n        this.EntityID_To_FrameName_Map[EntityID.ItemMagicCrystal] =        'items/61001'; \n        this.EntityID_To_FrameName_Map[EntityID.ItemWatermelon] =          'items/61101'; \n        this.EntityID_To_FrameName_Map[EntityID.ItemFruitCake] =           'items/61201'; \n        this.EntityID_To_FrameName_Map[EntityID.ItemFireWormBottle] =      'items/61301'; \n        this.EntityID_To_FrameName_Map[EntityID.ItemMowerUp] =             'items/61401'; \n        this.EntityID_To_FrameName_Map[EntityID.ItemMowerRight] =          'items/61402'; \n        this.EntityID_To_FrameName_Map[EntityID.ItemMowerDown] =           'items/61403'; \n        this.EntityID_To_FrameName_Map[EntityID.ItemMowerLeft] =           'items/61404'; \n        this.EntityID_To_FrameName_Map[EntityID.ItemBone] =                'items/61501'; \n        this.EntityID_To_FrameName_Map[EntityID.ItemChestnut] =            'items/61601'; \n        this.EntityID_To_FrameName_Map[EntityID.ItemFireworksHp1] =        'items/61701'; \n        this.EntityID_To_FrameName_Map[EntityID.ItemFireworksHp2] =        'items/61702'; \n        this.EntityID_To_FrameName_Map[EntityID.ItemFireworksHp3] =        'items/61703'; \n        this.EntityID_To_FrameName_Map[EntityID.ItemFireworksHp4] =        'items/61704'; \n        this.EntityID_To_FrameName_Map[EntityID.ItemPuppy] =               'items/62001'; \n        this.EntityID_To_FrameName_Map[EntityID.ItemPawRed] =              'items/62101'; \n        this.EntityID_To_FrameName_Map[EntityID.ItemPawGreen] =            'items/62102'; \n        this.EntityID_To_FrameName_Map[EntityID.ItemPawBlue] =             'items/62103'; \n        this.EntityID_To_FrameName_Map[EntityID.ItemPawYellow] =           'items/62104'; \n        this.EntityID_To_FrameName_Map[EntityID.ItemPawOrange] =           'items/62105'; \n        this.EntityID_To_FrameName_Map[EntityID.ItemPawPurple] =           'items/62106'; \n        this.EntityID_To_FrameName_Map[EntityID.ItemBalloon] =             'items/62201'; \n        this.EntityID_To_FrameName_Map[EntityID.ItemDogHouse] =            'items/62301'; \n        this.EntityID_To_FrameName_Map[EntityID.ItemJamBottle] =           'items/62401'; \n        this.EntityID_To_FrameName_Map[EntityID.ItemHoneyComb] =           'items/62601'; \n        this.EntityID_To_FrameName_Map[EntityID.ItemStatueHp1] =           'items/62801'; \n        this.EntityID_To_FrameName_Map[EntityID.ItemStatueHp2] =           'items/62802'; \n        this.EntityID_To_FrameName_Map[EntityID.ItemStatueHp3] =           'items/62803'; \n        this.EntityID_To_FrameName_Map[EntityID.ParasiteIceCubeHp1] =      'parasites/70101'; \n        this.EntityID_To_FrameName_Map[EntityID.ParasiteIceCubeHp2] =      'parasites/70102'; \n        this.EntityID_To_FrameName_Map[EntityID.ParasiteIceCubeHp3] =      'parasites/70103'; \n        this.EntityID_To_FrameName_Map[EntityID.ParasiteIceCubeHp4] =      'parasites/70104'; \n        this.EntityID_To_FrameName_Map[EntityID.ParasiteIceCubeHp5] =      'parasites/70105'; \n        this.EntityID_To_FrameName_Map[EntityID.ParasiteIceCubeHp6] =      'parasites/70106'; \n        this.EntityID_To_FrameName_Map[EntityID.ParasiteShackleHp1] =      'parasites/70201'; \n        this.EntityID_To_FrameName_Map[EntityID.ParasiteShackleHp2] =      'parasites/70202'; \n        this.EntityID_To_FrameName_Map[EntityID.ParasiteShackleHp3] =      'parasites/70203'; \n        this.EntityID_To_FrameName_Map[EntityID.ParasiteHoneyHp1] =        'parasites/70301'; \n        this.EntityID_To_FrameName_Map[EntityID.ParasiteHoneyHp2] =        'parasites/70302'; \n        this.EntityID_To_FrameName_Map[EntityID.ParasiteGiftBoxRed] =      'parasites/70401'; \n        this.EntityID_To_FrameName_Map[EntityID.ParasiteGiftBoxGreen] =    'parasites/70402'; \n        this.EntityID_To_FrameName_Map[EntityID.ParasiteGiftBoxBlue] =     'parasites/70403'; \n        this.EntityID_To_FrameName_Map[EntityID.ParasiteGiftBoxYellow] =   'parasites/70404'; \n        this.EntityID_To_FrameName_Map[EntityID.ParasiteGiftBoxOrange] =   'parasites/70405'; \n        this.EntityID_To_FrameName_Map[EntityID.ParasiteGiftBoxPurple] =   'parasites/70406'; \n        this.EntityID_To_FrameName_Map[EntityID.MarkBoneCollector] =       'marks/80101'; \n        this.EntityID_To_FrameName_Map[EntityID.MarkWormholeEntrance] =    'marks/80201'; \n        this.EntityID_To_FrameName_Map[EntityID.MarkWormholeExit] =        'marks/80301'; \n        this.EntityID_To_FrameName_Map[EntityID.FenceVineVertical] =       'marks/80401'; \n        this.EntityID_To_FrameName_Map[EntityID.FenceVineHorizontal] =     'marks/80501'; \n        this.EntityID_To_FrameName_Map[EntityID.MarkDropMachine] =         'marks/80801'; \n        this.EntityID_To_FrameName_Map[EntityID.FlyerMissileRed] =         'flyers/90101'; \n        this.EntityID_To_FrameName_Map[EntityID.FlyerMissileGreen] =       'flyers/90102'; \n        this.EntityID_To_FrameName_Map[EntityID.FlyerMissileBlue] =        'flyers/90103'; \n        this.EntityID_To_FrameName_Map[EntityID.FlyerMissileYellow] =      'flyers/90104'; \n        this.EntityID_To_FrameName_Map[EntityID.FlyerMissileOrange] =      'flyers/90105'; \n        this.EntityID_To_FrameName_Map[EntityID.FlyerMissilePurple] =      'flyers/90106'; \n        this.EntityID_To_FrameName_Map[EntityID.FlyerCannonRed] =          'flyers/90201'; \n        this.EntityID_To_FrameName_Map[EntityID.FlyerCannonGreen] =        'flyers/90202'; \n        this.EntityID_To_FrameName_Map[EntityID.FlyerCannonBlue] =         'flyers/90203'; \n        this.EntityID_To_FrameName_Map[EntityID.FlyerCannonYellow] =       'flyers/90204'; \n        this.EntityID_To_FrameName_Map[EntityID.FlyerCannonOrange] =       'flyers/90205'; \n        this.EntityID_To_FrameName_Map[EntityID.FlyerCannonPurple] =       'flyers/90206';\n        this.EntityID_To_FrameName_Map[EntityID.FlyerMower] =              'items/61401';\n        \n    }\n\n    private EntityID_To_ButterflyPriority_Map:Object = {};\n    private initEntityID_To_ButterflyPriority_Map() : void {\n        this.EntityID_To_ButterflyPriority_Map[EntityID.FloorIceHp1] =             2;\n        this.EntityID_To_ButterflyPriority_Map[EntityID.FloorIceHp2] =             2;\n        this.EntityID_To_ButterflyPriority_Map[EntityID.FloorIceHp3] =             2;\n        this.EntityID_To_ButterflyPriority_Map[EntityID.FloorIceHp4] =             2;\n        this.EntityID_To_ButterflyPriority_Map[EntityID.ItemNormalRed] =           4;\n        this.EntityID_To_ButterflyPriority_Map[EntityID.ItemNormalGreen] =         4;\n        this.EntityID_To_ButterflyPriority_Map[EntityID.ItemNormalBlue] =          4;\n        this.EntityID_To_ButterflyPriority_Map[EntityID.ItemNormalYellow] =        4;\n        this.EntityID_To_ButterflyPriority_Map[EntityID.ItemNormalOrange] =        4;\n        this.EntityID_To_ButterflyPriority_Map[EntityID.ItemNormalPurple] =        4;\n        this.EntityID_To_ButterflyPriority_Map[EntityID.ItemBlockHp1] =            1;\n        this.EntityID_To_ButterflyPriority_Map[EntityID.ItemBlockHp2] =            1;\n        this.EntityID_To_ButterflyPriority_Map[EntityID.ItemBlockHp3] =            1;\n        this.EntityID_To_ButterflyPriority_Map[EntityID.ItemBlockHp4] =            1;\n        this.EntityID_To_ButterflyPriority_Map[EntityID.ItemBlockHp5] =            1;\n        this.EntityID_To_ButterflyPriority_Map[EntityID.ItemBlockHp6] =            1;\n        this.EntityID_To_ButterflyPriority_Map[EntityID.ItemDoughnutHp1] =         2;\n        this.EntityID_To_ButterflyPriority_Map[EntityID.ItemDoughnutHp2] =         2;\n        this.EntityID_To_ButterflyPriority_Map[EntityID.ItemDoughnutHp3] =         2;\n        this.EntityID_To_ButterflyPriority_Map[EntityID.ItemPawRed] =              1;\n        this.EntityID_To_ButterflyPriority_Map[EntityID.ItemPawGreen] =            1;\n        this.EntityID_To_ButterflyPriority_Map[EntityID.ItemPawBlue] =             1;\n        this.EntityID_To_ButterflyPriority_Map[EntityID.ItemPawYellow] =           1;\n        this.EntityID_To_ButterflyPriority_Map[EntityID.ItemPawOrange] =           1;\n        this.EntityID_To_ButterflyPriority_Map[EntityID.ItemPawPurple] =           1;\n        this.EntityID_To_ButterflyPriority_Map[EntityID.ItemJamBottle] =           2;\n        this.EntityID_To_ButterflyPriority_Map[EntityID.ItemFireWormBottle] =      2;\n        this.EntityID_To_ButterflyPriority_Map[EntityID.ItemChestnut] =            2;\n        this.EntityID_To_ButterflyPriority_Map[EntityID.ItemWatermelon] =          2;\n        this.EntityID_To_ButterflyPriority_Map[EntityID.ItemFireworksHp1] =        2;\n        this.EntityID_To_ButterflyPriority_Map[EntityID.ItemFireworksHp2] =        2;\n        this.EntityID_To_ButterflyPriority_Map[EntityID.ItemFireworksHp3] =        2;\n        this.EntityID_To_ButterflyPriority_Map[EntityID.ItemFireworksHp4] =        2;\n        this.EntityID_To_ButterflyPriority_Map[EntityID.ItemStatueHp1] =           1;\n        this.EntityID_To_ButterflyPriority_Map[EntityID.ItemStatueHp2] =           1;\n        this.EntityID_To_ButterflyPriority_Map[EntityID.ItemStatueHp3] =           1;\n        this.EntityID_To_ButterflyPriority_Map[EntityID.ParasiteIceCubeHp1] =      1;\n        this.EntityID_To_ButterflyPriority_Map[EntityID.ParasiteIceCubeHp2] =      1;\n        this.EntityID_To_ButterflyPriority_Map[EntityID.ParasiteIceCubeHp3] =      1;\n        this.EntityID_To_ButterflyPriority_Map[EntityID.ParasiteIceCubeHp4] =      1;\n        this.EntityID_To_ButterflyPriority_Map[EntityID.ParasiteIceCubeHp5] =      1;\n        this.EntityID_To_ButterflyPriority_Map[EntityID.ParasiteIceCubeHp6] =      1;\n        this.EntityID_To_ButterflyPriority_Map[EntityID.ParasiteShackleHp1] =      1;\n        this.EntityID_To_ButterflyPriority_Map[EntityID.ParasiteShackleHp2] =      1;\n        this.EntityID_To_ButterflyPriority_Map[EntityID.ParasiteShackleHp3] =      1;\n        this.EntityID_To_ButterflyPriority_Map[EntityID.ParasiteHoneyHp1] =        1;\n        this.EntityID_To_ButterflyPriority_Map[EntityID.ParasiteHoneyHp2] =        1;\n        this.EntityID_To_ButterflyPriority_Map[EntityID.ParasiteGiftBoxRed] =      1;\n        this.EntityID_To_ButterflyPriority_Map[EntityID.ParasiteGiftBoxGreen] =    1;\n        this.EntityID_To_ButterflyPriority_Map[EntityID.ParasiteGiftBoxBlue] =     1;\n        this.EntityID_To_ButterflyPriority_Map[EntityID.ParasiteGiftBoxYellow] =   1;\n        this.EntityID_To_ButterflyPriority_Map[EntityID.ParasiteGiftBoxOrange] =   1;\n        this.EntityID_To_ButterflyPriority_Map[EntityID.ParasiteGiftBoxPurple] =   1;\n    }\n    private EntityID_To_NormalEntityID_Map:Object = {};\n    private initEntityID_To_NormalEntityID_Map() : void {\n        this.EntityID_To_NormalEntityID_Map[EntityID.ItemNormalRed] =               EntityID.ItemNormalRed;      \n        this.EntityID_To_NormalEntityID_Map[EntityID.ItemNormalGreen] =             EntityID.ItemNormalGreen;      \n        this.EntityID_To_NormalEntityID_Map[EntityID.ItemNormalBlue] =              EntityID.ItemNormalBlue;      \n        this.EntityID_To_NormalEntityID_Map[EntityID.ItemNormalYellow] =            EntityID.ItemNormalYellow;      \n        this.EntityID_To_NormalEntityID_Map[EntityID.ItemNormalOrange] =            EntityID.ItemNormalOrange;      \n        this.EntityID_To_NormalEntityID_Map[EntityID.ItemNormalPurple] =            EntityID.ItemNormalPurple;      \n        this.EntityID_To_NormalEntityID_Map[EntityID.ItemBombButterflyRed] =        EntityID.ItemNormalRed;      \n        this.EntityID_To_NormalEntityID_Map[EntityID.ItemBombButterflyGreen] =      EntityID.ItemNormalGreen;      \n        this.EntityID_To_NormalEntityID_Map[EntityID.ItemBombButterflyBlue] =       EntityID.ItemNormalBlue;      \n        this.EntityID_To_NormalEntityID_Map[EntityID.ItemBombButterflyYellow] =     EntityID.ItemNormalYellow;      \n        this.EntityID_To_NormalEntityID_Map[EntityID.ItemBombButterflyOrange] =     EntityID.ItemNormalOrange;      \n        this.EntityID_To_NormalEntityID_Map[EntityID.ItemBombButterflyPurple] =     EntityID.ItemNormalPurple;      \n        this.EntityID_To_NormalEntityID_Map[EntityID.ItemBombRowRed] =              EntityID.ItemNormalRed;      \n        this.EntityID_To_NormalEntityID_Map[EntityID.ItemBombRowGreen] =            EntityID.ItemNormalGreen;      \n        this.EntityID_To_NormalEntityID_Map[EntityID.ItemBombRowBlue] =             EntityID.ItemNormalBlue;      \n        this.EntityID_To_NormalEntityID_Map[EntityID.ItemBombRowYellow] =           EntityID.ItemNormalYellow;      \n        this.EntityID_To_NormalEntityID_Map[EntityID.ItemBombRowOrange] =           EntityID.ItemNormalOrange;      \n        this.EntityID_To_NormalEntityID_Map[EntityID.ItemBombRowPurple] =           EntityID.ItemNormalPurple;      \n        this.EntityID_To_NormalEntityID_Map[EntityID.ItemBombColumnRed] =           EntityID.ItemNormalRed;      \n        this.EntityID_To_NormalEntityID_Map[EntityID.ItemBombColumnGreen] =         EntityID.ItemNormalGreen;      \n        this.EntityID_To_NormalEntityID_Map[EntityID.ItemBombColumnBlue] =          EntityID.ItemNormalBlue;      \n        this.EntityID_To_NormalEntityID_Map[EntityID.ItemBombColumnYellow] =        EntityID.ItemNormalYellow;      \n        this.EntityID_To_NormalEntityID_Map[EntityID.ItemBombColumnOrange] =        EntityID.ItemNormalOrange;      \n        this.EntityID_To_NormalEntityID_Map[EntityID.ItemBombColumnPurple] =        EntityID.ItemNormalPurple;      \n        this.EntityID_To_NormalEntityID_Map[EntityID.ItemBombCrossRed] =            EntityID.ItemNormalRed;      \n        this.EntityID_To_NormalEntityID_Map[EntityID.ItemBombCrossGreen] =          EntityID.ItemNormalGreen;      \n        this.EntityID_To_NormalEntityID_Map[EntityID.ItemBombCrossBlue] =           EntityID.ItemNormalBlue;      \n        this.EntityID_To_NormalEntityID_Map[EntityID.ItemBombCrossYellow] =         EntityID.ItemNormalYellow;      \n        this.EntityID_To_NormalEntityID_Map[EntityID.ItemBombCrossOrange] =         EntityID.ItemNormalOrange;      \n        this.EntityID_To_NormalEntityID_Map[EntityID.ItemBombCrossPurple] =         EntityID.ItemNormalPurple;      \n        this.EntityID_To_NormalEntityID_Map[EntityID.ItemBombRangeRed] =            EntityID.ItemNormalRed;      \n        this.EntityID_To_NormalEntityID_Map[EntityID.ItemBombRangeGreen] =          EntityID.ItemNormalGreen;      \n        this.EntityID_To_NormalEntityID_Map[EntityID.ItemBombRangeBlue] =           EntityID.ItemNormalBlue;      \n        this.EntityID_To_NormalEntityID_Map[EntityID.ItemBombRangeYellow] =         EntityID.ItemNormalYellow;      \n        this.EntityID_To_NormalEntityID_Map[EntityID.ItemBombRangeOrange] =         EntityID.ItemNormalOrange;      \n        this.EntityID_To_NormalEntityID_Map[EntityID.ItemBombRangePurple] =         EntityID.ItemNormalPurple;      \n        this.EntityID_To_NormalEntityID_Map[EntityID.ItemPawRed] =                  EntityID.ItemNormalRed;      \n        this.EntityID_To_NormalEntityID_Map[EntityID.ItemPawGreen] =                EntityID.ItemNormalGreen;      \n        this.EntityID_To_NormalEntityID_Map[EntityID.ItemPawBlue] =                 EntityID.ItemNormalBlue;      \n        this.EntityID_To_NormalEntityID_Map[EntityID.ItemPawYellow] =               EntityID.ItemNormalYellow;      \n        this.EntityID_To_NormalEntityID_Map[EntityID.ItemPawOrange] =               EntityID.ItemNormalOrange;      \n        this.EntityID_To_NormalEntityID_Map[EntityID.ItemPawPurple] =               EntityID.ItemNormalPurple;   \n        \n        this.EntityID_To_NormalEntityID_Map[EntityID.ParasiteGiftBoxRed] =          EntityID.ItemNormalRed;      \n        this.EntityID_To_NormalEntityID_Map[EntityID.ParasiteGiftBoxGreen] =        EntityID.ItemNormalGreen;      \n        this.EntityID_To_NormalEntityID_Map[EntityID.ParasiteGiftBoxBlue] =         EntityID.ItemNormalBlue;      \n        this.EntityID_To_NormalEntityID_Map[EntityID.ParasiteGiftBoxYellow] =       EntityID.ItemNormalYellow;      \n        this.EntityID_To_NormalEntityID_Map[EntityID.ParasiteGiftBoxOrange] =       EntityID.ItemNormalOrange;      \n        this.EntityID_To_NormalEntityID_Map[EntityID.ParasiteGiftBoxPurple] =       EntityID.ItemNormalPurple;   \n    }\n    private EntityID_To_EntityColor_Map:Object = {};\n    private initEntityID_To_EntityColor_Map() : void {\n        this.EntityID_To_EntityColor_Map[EntityID.ItemNormalRed] =             EntityColor.Red;       \n        this.EntityID_To_EntityColor_Map[EntityID.ItemNormalGreen] =           EntityColor.Green;       \n        this.EntityID_To_EntityColor_Map[EntityID.ItemNormalBlue] =            EntityColor.Blue;       \n        this.EntityID_To_EntityColor_Map[EntityID.ItemNormalYellow] =          EntityColor.Yellow;       \n        this.EntityID_To_EntityColor_Map[EntityID.ItemNormalOrange] =          EntityColor.Orange;       \n        this.EntityID_To_EntityColor_Map[EntityID.ItemNormalPurple] =          EntityColor.Purple;       \n        this.EntityID_To_EntityColor_Map[EntityID.ItemBombButterflyRed] =      EntityColor.Red;       \n        this.EntityID_To_EntityColor_Map[EntityID.ItemBombButterflyGreen] =    EntityColor.Green;       \n        this.EntityID_To_EntityColor_Map[EntityID.ItemBombButterflyBlue] =     EntityColor.Blue;       \n        this.EntityID_To_EntityColor_Map[EntityID.ItemBombButterflyYellow] =   EntityColor.Yellow;       \n        this.EntityID_To_EntityColor_Map[EntityID.ItemBombButterflyOrange] =   EntityColor.Orange;       \n        this.EntityID_To_EntityColor_Map[EntityID.ItemBombButterflyPurple] =   EntityColor.Purple;       \n        this.EntityID_To_EntityColor_Map[EntityID.ItemBombRowRed] =            EntityColor.Red;       \n        this.EntityID_To_EntityColor_Map[EntityID.ItemBombRowGreen] =          EntityColor.Green;       \n        this.EntityID_To_EntityColor_Map[EntityID.ItemBombRowBlue] =           EntityColor.Blue;       \n        this.EntityID_To_EntityColor_Map[EntityID.ItemBombRowYellow] =         EntityColor.Yellow;       \n        this.EntityID_To_EntityColor_Map[EntityID.ItemBombRowOrange] =         EntityColor.Orange;       \n        this.EntityID_To_EntityColor_Map[EntityID.ItemBombRowPurple] =         EntityColor.Purple;       \n        this.EntityID_To_EntityColor_Map[EntityID.ItemBombColumnRed] =         EntityColor.Red;       \n        this.EntityID_To_EntityColor_Map[EntityID.ItemBombColumnGreen] =       EntityColor.Green;       \n        this.EntityID_To_EntityColor_Map[EntityID.ItemBombColumnBlue] =        EntityColor.Blue;       \n        this.EntityID_To_EntityColor_Map[EntityID.ItemBombColumnYellow] =      EntityColor.Yellow;       \n        this.EntityID_To_EntityColor_Map[EntityID.ItemBombColumnOrange] =      EntityColor.Orange;       \n        this.EntityID_To_EntityColor_Map[EntityID.ItemBombColumnPurple] =      EntityColor.Purple;       \n        this.EntityID_To_EntityColor_Map[EntityID.ItemBombCrossRed] =          EntityColor.Red;       \n        this.EntityID_To_EntityColor_Map[EntityID.ItemBombCrossGreen] =        EntityColor.Green;       \n        this.EntityID_To_EntityColor_Map[EntityID.ItemBombCrossBlue] =         EntityColor.Blue;       \n        this.EntityID_To_EntityColor_Map[EntityID.ItemBombCrossYellow] =       EntityColor.Yellow;       \n        this.EntityID_To_EntityColor_Map[EntityID.ItemBombCrossOrange] =       EntityColor.Orange;       \n        this.EntityID_To_EntityColor_Map[EntityID.ItemBombCrossPurple] =       EntityColor.Purple;       \n        this.EntityID_To_EntityColor_Map[EntityID.ItemBombRangeRed] =          EntityColor.Red;       \n        this.EntityID_To_EntityColor_Map[EntityID.ItemBombRangeGreen] =        EntityColor.Green;       \n        this.EntityID_To_EntityColor_Map[EntityID.ItemBombRangeBlue] =         EntityColor.Blue;       \n        this.EntityID_To_EntityColor_Map[EntityID.ItemBombRangeYellow] =       EntityColor.Yellow;       \n        this.EntityID_To_EntityColor_Map[EntityID.ItemBombRangeOrange] =       EntityColor.Orange;       \n        this.EntityID_To_EntityColor_Map[EntityID.ItemBombRangePurple] =       EntityColor.Purple;       \n        this.EntityID_To_EntityColor_Map[EntityID.ItemPawRed] =                EntityColor.Red;       \n        this.EntityID_To_EntityColor_Map[EntityID.ItemPawGreen] =              EntityColor.Green;       \n        this.EntityID_To_EntityColor_Map[EntityID.ItemPawBlue] =               EntityColor.Blue;       \n        this.EntityID_To_EntityColor_Map[EntityID.ItemPawYellow] =             EntityColor.Yellow;       \n        this.EntityID_To_EntityColor_Map[EntityID.ItemPawOrange] =             EntityColor.Orange;       \n        this.EntityID_To_EntityColor_Map[EntityID.ItemPawPurple] =             EntityColor.Purple;   \n        \n        \n        this.EntityID_To_NormalEntityID_Map[EntityID.ParasiteGiftBoxRed] =     EntityColor.Red;      \n        this.EntityID_To_NormalEntityID_Map[EntityID.ParasiteGiftBoxGreen] =   EntityColor.Green;      \n        this.EntityID_To_NormalEntityID_Map[EntityID.ParasiteGiftBoxBlue] =    EntityColor.Blue;      \n        this.EntityID_To_NormalEntityID_Map[EntityID.ParasiteGiftBoxYellow] =  EntityColor.Yellow;      \n        this.EntityID_To_NormalEntityID_Map[EntityID.ParasiteGiftBoxOrange] =  EntityColor.Orange;      \n        this.EntityID_To_NormalEntityID_Map[EntityID.ParasiteGiftBoxPurple] =  EntityColor.Purple;  \n    }\n\n    private EntityID_To_DieAnimationPath_Map:Object = {};\n    private initEntityID_To_DieAnimationPath_Map() : void {\n\n        let root = 'match_scene/prefab/entity/animation/';\n        this.EntityID_To_DieAnimationPath_Map[EntityID.FloorIceHp1] =           HurtAnimationInfo.create(root + 'AnimationIceDie', EntityID.FlyerAnimationFloorIceDie);\n        this.EntityID_To_DieAnimationPath_Map[EntityID.FloorIceHp2] =           HurtAnimationInfo.create(root + 'AnimationIceDie', EntityID.FlyerAnimationFloorIceDie);\n        this.EntityID_To_DieAnimationPath_Map[EntityID.FloorIceHp3] =           HurtAnimationInfo.create(root + 'AnimationIceDie', EntityID.FlyerAnimationFloorIceDie);\n        this.EntityID_To_DieAnimationPath_Map[EntityID.FloorIceHp4] =           HurtAnimationInfo.create(root + 'AnimationIceDie', EntityID.FlyerAnimationFloorIceDie);\n\n        this.EntityID_To_DieAnimationPath_Map[EntityID.RugJam] =                HurtAnimationInfo.create(root + 'AnimationJamDie', EntityID.FlyerAnimationRugJamDie); \n         \n        this.EntityID_To_DieAnimationPath_Map[EntityID.ItemNormalRed] =         HurtAnimationInfo.create(root + 'AnimationFruitDieRed', EntityID.FlyerAnimationItemNormalRedDie);\n        this.EntityID_To_DieAnimationPath_Map[EntityID.ItemNormalGreen] =       HurtAnimationInfo.create(root + 'AnimationFruitDieGreen', EntityID.FlyerAnimationItemNormalGreenDie); \n        this.EntityID_To_DieAnimationPath_Map[EntityID.ItemNormalBlue] =        HurtAnimationInfo.create(root + 'AnimationFruitDieBlue', EntityID.FlyerAnimationItemNormalBlueDie); \n        this.EntityID_To_DieAnimationPath_Map[EntityID.ItemNormalYellow] =      HurtAnimationInfo.create(root + 'AnimationFruitDieYellow', EntityID.FlyerAnimationItemNormalYellowDie); \n        this.EntityID_To_DieAnimationPath_Map[EntityID.ItemNormalOrange] =      HurtAnimationInfo.create(root + 'AnimationFruitDieOrange', EntityID.FlyerAnimationItemNormalOrangeDie);\n        this.EntityID_To_DieAnimationPath_Map[EntityID.ItemNormalPurple] =      HurtAnimationInfo.create(root + 'AnimationFruitDiePurple', EntityID.FlyerAnimationItemNormalPurpleDie);\n        this.EntityID_To_DieAnimationPath_Map[EntityID.ItemBlockHp1] =          HurtAnimationInfo.create(root + 'AnimationBlockDie', EntityID.FlyerAnimationItemBlockDie); \n        this.EntityID_To_DieAnimationPath_Map[EntityID.ItemDoughnutHp1] =       HurtAnimationInfo.create(root + 'AnimationDoughnutDie', EntityID.FlyerAnimationItemDoughnutDie);\n                \n        this.EntityID_To_DieAnimationPath_Map[EntityID.ItemWatermelon] =        HurtAnimationInfo.create(root + 'AnimationWatermelonHurt', EntityID.FlyerAnimationItemWatermelonDie); \n\n\n        this.EntityID_To_DieAnimationPath_Map[EntityID.ItemFruitCake] =         HurtAnimationInfo.create(root + 'AnimationFruitCakeDie', EntityID.FlyerAnimationItemFruitCakeDie);\n        this.EntityID_To_DieAnimationPath_Map[EntityID.ItemFireWormBottle] =    HurtAnimationInfo.create(root + 'AnimationFireWormBottleDie', EntityID.FlyerAnimationItemFirewormBottleDie);\n        this.EntityID_To_DieAnimationPath_Map[EntityID.ItemChestnut] =          HurtAnimationInfo.create(root + 'AnimationChestnutDie', EntityID.FlyerAnimationItemChestnutDie); \n        this.EntityID_To_DieAnimationPath_Map[EntityID.ItemJamBottle] =         HurtAnimationInfo.create(root + 'AnimationJamBottleDie', EntityID.FlyerAnimationItemJamBottleDie); \n        this.EntityID_To_DieAnimationPath_Map[EntityID.ItemStatueHp1] =         HurtAnimationInfo.create(root + 'AnimationStatueDie', EntityID.FlyerAnimationItemStatueDie); \n         \n        this.EntityID_To_DieAnimationPath_Map[EntityID.ParasiteIceCubeHp1] =    HurtAnimationInfo.create(root + 'AnimationIceCubeDie', EntityID.FlyerAnimationParasiteIceCubeDie);\n        this.EntityID_To_DieAnimationPath_Map[EntityID.ParasiteShackleHp1] =    HurtAnimationInfo.create(root + 'AnimationShackleDie', EntityID.FlyerAnimationParasiteShackleDie); \n        this.EntityID_To_DieAnimationPath_Map[EntityID.ParasiteHoneyHp1] =      HurtAnimationInfo.create(root + 'AnimationHoneyDie', EntityID.FlyerAnimationParasiteHoneyDie);\n        this.EntityID_To_DieAnimationPath_Map[EntityID.ParasiteHoneyHp2] =      HurtAnimationInfo.create(root + 'AnimationHoneyDie', EntityID.FlyerAnimationParasiteHoneyDie);\n\n        this.EntityID_To_DieAnimationPath_Map[EntityID.ParasiteGiftBoxRed] =    HurtAnimationInfo.create(root + 'AnimationGiftBoxRedDie', EntityID.FlyerAnimationParasiteGiftBoxRedDie);\n        this.EntityID_To_DieAnimationPath_Map[EntityID.ParasiteGiftBoxGreen] =  HurtAnimationInfo.create(root + 'AnimationGiftBoxGreenDie', EntityID.FlyerAnimationParasiteGiftBoxGreenDie);\n        this.EntityID_To_DieAnimationPath_Map[EntityID.ParasiteGiftBoxBlue] =   HurtAnimationInfo.create(root + 'AnimationGiftBoxBlueDie', EntityID.FlyerAnimationParasiteGiftBoxBlueDie);\n        this.EntityID_To_DieAnimationPath_Map[EntityID.ParasiteGiftBoxYellow] = HurtAnimationInfo.create(root + 'AnimationGiftBoxYellowDie', EntityID.FlyerAnimationParasiteGiftBoxYellowDie);\n        this.EntityID_To_DieAnimationPath_Map[EntityID.ParasiteGiftBoxOrange] = HurtAnimationInfo.create(root + 'AnimationGiftBoxOrangeDie', EntityID.FlyerAnimationParasiteGiftBoxOrangeDie);\n        this.EntityID_To_DieAnimationPath_Map[EntityID.ParasiteGiftBoxPurple] = HurtAnimationInfo.create(root + 'AnimationGiftBoxPurpleDie', EntityID.FlyerAnimationParasiteGiftBoxPurpleDie);\n    }\n\n    \n    constructor(){\n        this.initString_To_EntityID_Map();\n        this.initEntityID_To_FrameName_Map();\n        this.initEntityID_To_ButterflyPriority_Map();\n        this.initEntityID_To_NormalEntityID_Map();\n        this.initEntityID_To_EntityColor_Map();\n        this.initEntityID_To_DieAnimationPath_Map();\n    };\n\n\n    public getEntityIDFromString(name:string):EntityID{\n        let result = this.String_To_EntityID_Map[name];\n        if (result) {\n            return result;\n        }\n        return EntityID.None;\n    }\n\n    public getFrameNameFromEntityID(entityID:EntityID):string{\n        \n        let rootPath = 'match_scene/texture/entities/';\n        let result = this.EntityID_To_FrameName_Map[entityID];\n        if (result) {\n            return rootPath + result;\n        }\n        return rootPath + \"unknow/unknow\";\n        \n    }\n\n    public getHurtAnimationInfoFromEntityID(entityID:EntityID) : HurtAnimationInfo{\n        let result = this.EntityID_To_DieAnimationPath_Map[entityID];\n        if (result) {\n            return result;\n        }\n        return null;\n    }\n    public getDefaultButterflyPriorityFromEntityID(entityID:EntityID) : number {\n        let result = this.EntityID_To_ButterflyPriority_Map[entityID];\n        if (result) {\n            return result;\n        }\n        return EntityBase.DEFAULT_MISSILE_PRIORITY;\n    }\n\n    public getCorrespondingNormlaEntityID(entityID:EntityID) : EntityID {\n        let result = this.EntityID_To_NormalEntityID_Map[entityID];\n        if (result) {\n            return result;\n        }\n        return EntityID.None;\n    }\n    \n    public getEntityColorWithEntityID(entityID:EntityID) : EntityColor {\n        let result = EntityColor.None;\n        if(this.EntityID_To_EntityColor_Map.hasOwnProperty(entityID)){\n            result = this.EntityID_To_EntityColor_Map[entityID];\n        }\n        return result;\n    }\n};\n\n\n","import { EntityID } from \"../defines/EntityID\";\nimport ItemBase from \"./item/ItemBase\";\nimport ItemFactory from \"./item/ItemFactory\";\nimport GridBase from \"../grid/GridBase\";\nimport GameMath from \"../../../extend/utils/GameMath\";\nimport IdentifierManager from \"../defines/IdentifierManager\";\nimport FlyerBase from \"./flyer/FlyerBase\";\nimport EntityBase from \"./EntityBase\";\n\n\nexport default class EntityPrefabNodePool {\n    //单例对象\n    private static instance:EntityPrefabNodePool = null;\n    public static getInstance():EntityPrefabNodePool{\n        if(this.instance == null){\n            this.instance = new EntityPrefabNodePool();\n        }\n        return this.instance;\n    }\n\n    private _prefabNodePools:Object = {}\n    constructor(){\n        \n    }\n\n    public getPrefabNodeWithFileNameAndClassName(fileName:string, className:string) : EntityBase {\n        let node:cc.Node = null;\n        let nodePool = this._prefabNodePools[fileName] as cc.NodePool;\n        if (nodePool && nodePool.size() > 0) {\n            node = nodePool.get();\n        }else{\n            let res = cc.loader.getRes(fileName, cc.Prefab);\n            if (res) {\n                node = cc.instantiate(res);      \n            }\n        }\n\n        if (node) {\n            let component = node.getComponent(className);\n            if (!component) {\n                component = node.addComponent(className);\n                component.setPrefabFileName(fileName); \n            }\n            return component;\n        }\n        return null;\n    }\n\n    public putPrefabNode(entity:EntityBase) : void {\n        if (!entity) {\n            return;\n        }\n        let prefabFileName = entity.getPrefabFileName();\n        if (prefabFileName != '') {\n            if (!this._prefabNodePools.hasOwnProperty(prefabFileName)) {\n                this._prefabNodePools[prefabFileName] = new cc.NodePool();\n            }\n            let nodePool = this._prefabNodePools[prefabFileName] as cc.NodePool;\n            if(nodePool.size() < 100) {\n                nodePool.put(entity.node);\n            }\n        }\n    }\n    public clear() : void {\n        for (let key in this._prefabNodePools) {\n            let pool = this._prefabNodePools[key] as cc.NodePool;\n            pool.clear();\n        }\n        GameMath.clearObject(this._prefabNodePools);\n    }\n}","import StateBase from \"../../fsm/StateBase\";\nimport EntityBase from \"../EntityBase\";\n\nexport enum EntityStateType{\n    None = -1,\n    Wait = 0,\n    Drop,\n    Swap,\n    Clean,\n    Shuffle,\n    Replace,\n    Upgrade,\n    ChangeColor,\n    Generate,\n    Butterfly,\n};\n\nexport default class EntityStateBase implements StateBase{\n\n    private _type:EntityStateType = EntityStateType.None;\n    public getType() : EntityStateType {\n        return this._type;\n    }\n    constructor(Type:EntityStateType) {\n        this._type = Type;\n    }\n\n    enter(entity:EntityBase):void {\n        \n    }\n\n    update(entity:EntityBase, delta:number):void {\n        \n    }\n    \n    exit(entity:EntityBase):void {\n        \n    }\n}\n","import StateMachineBase from \"../../fsm/StateMachineBase\";\nimport EntityBase from \"../EntityBase\";\n\nexport default class EntityStateMachine extends StateMachineBase {   \n    public static create(entity:EntityBase) : EntityStateMachine {\n        return new EntityStateMachine(entity);\n    }\n}\n","import EntityStateBase, { EntityStateType } from \"../EntityStateBase\";\n\nexport default class EntityStateWait extends EntityStateBase {\n    public static create() : EntityStateWait {\n        return new EntityStateWait();\n    }\n    constructor(){\n        super(EntityStateType.Wait);\n    }\n}\n","import { EntityType } from \"../../defines/EntityID\";\nimport GridBase from \"../../grid/GridBase\";\nimport EntityBase from \"../EntityBase\";\nimport FencePos from \"./FencePos\";\n\n// Learn TypeScript:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/typescript.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/typescript.html\n// Learn Attribute:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html\n\n\nexport enum FenceType {\n    None = 0,\n    Vine,\n};\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class FenceBase extends EntityBase {\n\n    private _fenceType:FenceType = FenceType.None;\n    public getFenceType() : FenceType {\n        return this._fenceType;\n    }\n\n    private _fencePos:FencePos = FencePos.create(cc.Vec2.ZERO, cc.v2(0, 1));\n    public getFencePos() : FencePos {\n        return this._fencePos;\n    }\n    public setFencePos(fencePos:FencePos) : void {\n        this._fencePos = fencePos;\n\n        let pixelPosA = this.getGrid().getPixelPosFromLogicalPos(this._fencePos.posA);\n        let pixelPosB = this.getGrid().getPixelPosFromLogicalPos(this._fencePos.posB);\n        let center = pixelPosA.add(pixelPosB).mul(0.5);\n        this.node.setPosition(center);\n        this.node.zIndex = this.getGrid().getBottomZOrder(this.getEntityType(), this._fencePos.posA);\n        this.updatePuppet();\n    }\n\n    public removeFromGridAndAddToEffect() : void {\n        this.removeFromGrid();\n        this.node.parent = this.getGrid().node;\n        this.setFencePos(this.getFencePos());\n        this.node.zIndex = this.getTopZOrder(); \n    }\n\n    protected initFence(grid:GridBase, fenceType:FenceType) {\n        super.initEntity(grid, EntityType.Fences, 1, 1);\n        this._fenceType = fenceType;\n        this._fencePos = FencePos.create(cc.Vec2.ZERO, cc.v2(0, 1));\n    }\n\n    onDestroy() {\n        super.onDestroy();\n        this._fencePos = null;\n    }\n}\n","import { EntityID } from \"../../defines/EntityID\";\nimport IdentifierManager from \"../../defines/IdentifierManager\";\nimport { KindID } from \"../../defines/KindID\";\nimport GridBase from \"../../grid/GridBase\";\nimport FenceBase from \"./FenceBase\";\nimport FenceVine from \"./FenceVine\";\nimport FencePos from \"./FencePos\";\n\nexport default class FenceFactory  {\n\n    public static generateItemWithEntityID(grid:GridBase, logicalPos:cc.Vec2, entityID:EntityID) : FenceBase {\n        let fence:FenceBase = null;\n        \n        switch (entityID) {\n            case EntityID.FenceVineHorizontal:{\n                fence = FenceVine.create(grid);\n                fence.setFencePos(FencePos.create(logicalPos, logicalPos.add(cc.v2(0, -1))));\n            }\n                break;\n            case EntityID.FenceVineVertical:{\n                fence = FenceVine.create(grid);\n                fence.setFencePos(FencePos.create(logicalPos, logicalPos.add(cc.v2(-1, 0))));\n            }\n                break;\n        \n            default:\n                break;\n        }\n        return fence;\n    }\n\n    public static generateItemWithKindID(grid:GridBase, logicalPos:cc.Vec2, kindID:KindID) : FenceBase {\n        let entityID = IdentifierManager.getInstance().getEntityIDFromKindID(kindID);\n        return this.generateItemWithEntityID(grid, logicalPos, entityID);\n    }\n}\n","import GameMath from \"../../../../extend/utils/GameMath\";\n\nexport enum FencePosType{\n    None,\n    Horizontal,\n    Vertical,\n};\n\nexport default class FencePos  {\n    public static create(PosA:cc.Vec2, PosB:cc.Vec2) : FencePos {\n        let offset = PosA.sub(PosB);\n        if ((offset.x == 0 && Math.abs(offset.y) == 1) || (offset.y == 0 && Math.abs(offset.x) == 1)) {\n            if (GameMath.vec2Less(PosA, PosB)) {\n                return new FencePos(PosA, PosB);\n            }else{\n                return new FencePos(PosB, PosA);\n            }\n        }\n        return null;\n    }\n    constructor (public posA:cc.Vec2, public posB:cc.Vec2) {}\n\n    public getFencePosType() : FencePosType{\n        let result:FencePosType = FencePosType.None;\n        let offset = this.posA.sub(this.posB);\n        if (offset.x == 0 && Math.abs(offset.y) == 1) {\n            result = FencePosType.Horizontal;\n        }else if (offset.y == 0 && Math.abs(offset.x) == 1) {\n            result = FencePosType.Vertical;\n        }\n        return result;\n    }\n\n    public equals(fencePos:FencePos) : boolean {\n        if (this.posA.equals(fencePos.posA) && this.posB.equals(fencePos.posB)) {\n            return true;\n        }\n        return false;\n    }\n    \n}\n","import FenceBase, { FenceType } from \"./FenceBase\";\nimport { CollectionID } from \"../../defines/CollectionID\";\nimport { EntityID } from \"../../defines/EntityID\";\nimport GridBase from \"../../grid/GridBase\";\nimport EntityPrefabNodePool from \"../EntityPrefabNodePool\";\n\n// Learn TypeScript:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/typescript.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/typescript.html\n// Learn Attribute:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class FenceVine extends FenceBase {\n\n    public static create(grid:GridBase) : FenceVine {\n\n        let className = 'FenceVine';\n        let prefabFileName = 'match_scene/prefab/entity/fence/FenceVine';\n        let pool = EntityPrefabNodePool.getInstance();\n        let component = pool.getPrefabNodeWithFileNameAndClassName(prefabFileName, className) as FenceVine;\n        if (component) {\n            component.init(grid);\n            return component;       \n        }\n        return null;\n    }\n\n    protected init(grid:GridBase) : void {\n        super.initFence(grid, FenceType.Vine);\n    }\n\n    public getCollectionID() : CollectionID {\n        return CollectionID.FenceVine;\n    }\n   \n    public getEntityID() : EntityID {\n        if (this.getFencePos().posA.y == this.getFencePos().posB.y) {\n            return EntityID.FenceVineVertical;\n        }else{\n            return EntityID.FenceVineHorizontal;\n        }\n    }\n    \n    // LIFE-CYCLE CALLBACKS:\n\n    // onLoad () {}\n\n    start () {\n\n    }\n\n    // update (dt) {}\n}\n","import { EntityCleanOption, EntityType, EntityCleanType, EntityColor } from \"../../defines/EntityID\";\nimport GridBase from \"../../grid/GridBase\";\nimport EntityBase from \"../EntityBase\";\nimport GridCommand, { GridCommandType } from \"../../commond/GridCommand\";\n\n\nexport enum FloorType {\n    Ice,\n    Double,\n    Road,\n    Changer,\n    Grass,\n};\n\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class FloorBase extends EntityBase {\n\n    private _type:FloorType = null;\n    public getFloorType() : FloorType{\n        return this._type;\n    }\n\n    public initFloor(grid:GridBase, type:FloorType):void{\n        super.initEntity(grid, EntityType.Floor);\n        this._type = type;\n    }\n\n    public getType():FloorType{\n        return this._type;\n    }\n\n    public canExcuteCommand(command:GridCommand):boolean{\n        switch(command.type){\n            case GridCommandType.BombClean:{\n                return this.canCleanByBomb(command.cleanColor);\n            }\n            break;\n            case GridCommandType.FloorClean:{\n                return this.canBeFloorClean();\n            }\n            break;\n            case GridCommandType.TerminateClean:{\n                return this.canCleanByTerminate(command.cleanColor);\n            }\n            break;\n            default:{\n                break;\n            }\n        }\n        return false;\n    }\n\n    public excuteCommand(command:GridCommand):void{\n        if(!this.canExcuteCommand(command)){\n            return;\n        }\n        switch(command.type){\n            case GridCommandType.BombClean:{\n                this.onClean(EntityCleanOption.create(EntityCleanType.Bomb,\n                    command.cleanRoot,\n                    command.cleanColor,\n                    command.createBombType,\n                    command.hitNeighbour,\n                    command.hitFloor,\n                    command.layoutGrass));\n            }\n            break;\n            case GridCommandType.FloorClean:{\n                this.onClean(EntityCleanOption.create(EntityCleanType.Floor,\n                    command.cleanRoot,\n                    command.cleanColor,\n                    command.createBombType,\n                    command.hitNeighbour,\n                    command.hitFloor,\n                    command.layoutGrass));\n            }\n            break;\n            case GridCommandType.TerminateClean:{\n                this.onClean(EntityCleanOption.create(EntityCleanType.Terminate,\n                    command.cleanRoot,\n                    command.cleanColor,\n                    command.createBombType,\n                    command.hitNeighbour,\n                    command.hitFloor,\n                    command.layoutGrass));\n            }\n            break;\n            default:{\n                break;\n            }\n        }\n    }\n\n    public canCleanByTerminate(cleanColor:EntityColor) : boolean {\n        return this._canCleanByTerminate(cleanColor);\n    }\n    \n\n    public canCleanByBomb(cleanColor:EntityColor):boolean{\n        if(!this.getImmuneDamage()){\n            return this._canCleanByBomb(cleanColor);\n        }\n        return false;\n    }\n\n    public canBeFloorClean():boolean{\n        if(!this.getImmuneDamage()){\n            return this._canBeFloorClean();\n        }\n        return false;\n    }\n\n    public onClean(cleanOption:EntityCleanOption){\n        this._onClean(cleanOption);\n        this.setImmuneDamage(true);\n    }\n\n    public removeFromGrid():void{\n        this.getGrid().removeFloorAtLogicalPos(this.getLogicalPos());\n    }\n\n    protected _canCleanByTerminate(cleanColor:EntityColor) : boolean {\n        return false;\n    }\n\n    protected _canCleanByBomb(cleanColor:EntityColor):boolean{\n        return false;\n    }\n\n    protected _canBeFloorClean():boolean{\n        return false;\n    }\n\n    protected _onClean(cleanOption:EntityCleanOption):void{\n\n    }\n\n}\n","import FloorBase, { FloorType } from \"./FloorBase\";\nimport GridBase from \"../../grid/GridBase\";\nimport { EntityColor, EntityID } from \"../../defines/EntityID\";\nimport { CollectionID } from \"../../defines/CollectionID\";\nimport EntityBase from \"../EntityBase\";\nimport EntityPrefabNodePool from \"../EntityPrefabNodePool\";\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class FloorChanger extends FloorBase {\n\n    public static create(grid:GridBase, entityColor:EntityColor):FloorChanger{\n        let className = 'FloorChanger';\n        let prefabFileName = 'match_scene/prefab/entity/floor/FloorChanger';\n        let pool = EntityPrefabNodePool.getInstance();\n        let component = pool.getPrefabNodeWithFileNameAndClassName(prefabFileName, className) as FloorChanger;\n        if (component) {\n            component.init(grid, entityColor);    \n            return component;       \n        }\n        return null;\n    }\n\n    public clone():FloorChanger {\n        return FloorChanger.create(this.getGrid(), this.getEntityColor());\n    }\n\n    public getCollectionID():CollectionID{\n        return CollectionID.FloorChanger;\n    }\n\n    public getEntityID():EntityID{\n        let result = EntityID.None;\n        switch(this.getEntityColor()){\n            case EntityColor.Red:{\n                result = EntityID.FloorChangerRed;\n                break;\n            }\n            case EntityColor.Green:{\n                result = EntityID.FloorChangerGreen;\n                break;\n            }\n            case EntityColor.Blue:{\n                result = EntityID.FloorChangerBlue;\n                break;\n            }\n            case EntityColor.Yellow:{\n                result = EntityID.FloorChangerYellow;\n                break;\n            }\n            case EntityColor.Orange:{\n                result = EntityID.FloorChangerOrange;\n                break;\n            }\n            case EntityColor.Purple:{\n                result = EntityID.FloorChangerPurple;\n                break;\n            }\n            default:\n                break;\n        }\n        return result;\n    }\n\n    public _canCleanByBomb(cleanColor:EntityColor):boolean{\n        return false;\n    }\n\n    public _canBeFloorClean():boolean{\n        return false;\n    }\n\n    protected init(grid:GridBase, entityColor:EntityColor):void{\n        super.initFloor(grid, FloorType.Changer);\n        this.setEntityColor(entityColor);\n    }\n}\n","import FloorBase, { FloorType } from \"./FloorBase\";\nimport GridBase from \"../../grid/GridBase\";\nimport { EntityColor, EntityID } from \"../../defines/EntityID\";\nimport { CollectionID } from \"../../defines/CollectionID\";\nimport EntityPrefabNodePool from \"../EntityPrefabNodePool\";\n\n// Learn TypeScript:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/typescript.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/typescript.html\n// Learn Attribute:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class FloorDoubler extends FloorBase {\n    \n    public static create(grid:GridBase):FloorDoubler{\n\n        let className = 'FloorDoubler';\n        let prefabFileName = 'match_scene/prefab/entity/floor/FloorDoubler';\n        let pool = EntityPrefabNodePool.getInstance();\n        let component = pool.getPrefabNodeWithFileNameAndClassName(prefabFileName, className) as FloorDoubler;\n        if (component) {\n            component.init(grid);    \n            return component;       \n        }\n        return null;\n    }\n\n    public clone():FloorDoubler {\n        return FloorDoubler.create(this.getGrid());\n    }\n\n    public getCollectionID():CollectionID{\n        return CollectionID.FloorDouble;\n    }\n\n    public getEntityID():EntityID{\n        return EntityID.FloorDouble;\n    }\n\n    public _canCleanByBomb(cleanColor:EntityColor):boolean{\n        return false;\n    }\n\n    public _canBeFloorClean():boolean{\n        return false;\n    }\n\n    protected init(grid:GridBase):void{\n        super.initFloor(grid, FloorType.Double);\n    }\n}\n","\nimport { EntityID, EntityColor } from \"../../defines/EntityID\";\nimport IdentifierManager from \"../../defines/IdentifierManager\";\nimport { KindID } from \"../../defines/KindID\";\nimport FloorBase from \"./FloorBase\";\nimport FloorRoad, { FloorRoadDirection } from \"./FloorRoad\";\nimport FloorIce from \"./FloorIce\";\nimport FloorGrass from \"./FloorGrass\";\nimport FloorChanger from \"./FloorChanger\";\nimport FloorDoubler from \"./FloorDoubler\";\n\nexport default class FloorFactory {\n\n    public static generateFloorWithEntityID(grid, entityID:EntityID) : FloorBase {\n        let floor:FloorBase = null;\n\n        switch (entityID) {\n            case EntityID.FloorIceHp1:\n            case EntityID.FloorIceHp2:\n            case EntityID.FloorIceHp3:\n            case EntityID.FloorIceHp4:{\n                let color = entityID - EntityID.FloorIceHp1 + 1;\n                floor = FloorIce.create(grid, color);\n            }\n                break;\n                \n            case EntityID.FloorRoadLineVU:{\n                floor = FloorRoad.create(grid, FloorRoadDirection.Down, FloorRoadDirection.Up);\n            }\n                break;\n            case EntityID.FloorRoadLineHR:{\n                floor = FloorRoad.create(grid, FloorRoadDirection.Left, FloorRoadDirection.Right);\n            }\n                break;\n            case EntityID.FloorRoadLineVD:{\n                floor = FloorRoad.create(grid, FloorRoadDirection.Up, FloorRoadDirection.Down);\n            }\n                break;\n            case EntityID.FloorRoadLineHL:{\n                floor = FloorRoad.create(grid, FloorRoadDirection.Right, FloorRoadDirection.Left);\n            }\n                break;\n            case EntityID.FloorRoadTurnLdD:{\n                floor = FloorRoad.create(grid, FloorRoadDirection.Left, FloorRoadDirection.Down);\n            }\n                break;\n            case EntityID.FloorRoadTurnLuL:{\n                floor = FloorRoad.create(grid, FloorRoadDirection.Up, FloorRoadDirection.Left);\n            }\n                break;\n            case EntityID.FloorRoadTurnRuU:{\n                floor = FloorRoad.create(grid, FloorRoadDirection.Right, FloorRoadDirection.Up);\n            }\n                break;\n            case EntityID.FloorRoadTurnRdR:{\n                floor = FloorRoad.create(grid, FloorRoadDirection.Down, FloorRoadDirection.Right);\n            }\n                break;\n            case EntityID.FloorRoadTurnRdD:{\n                floor = FloorRoad.create(grid, FloorRoadDirection.Right, FloorRoadDirection.Down);\n            }\n                break;\n            case EntityID.FloorRoadTurnRuR:{\n                floor = FloorRoad.create(grid, FloorRoadDirection.Up, FloorRoadDirection.Right);\n            }\n                break;\n            case EntityID.FloorRoadTurnLuU:{\n                floor = FloorRoad.create(grid, FloorRoadDirection.Left, FloorRoadDirection.Up);\n            }\n                break;\n            case EntityID.FloorRoadTurnLdL:{\n                floor = FloorRoad.create(grid, FloorRoadDirection.Down, FloorRoadDirection.Left);\n            }\n                break;\n            case EntityID.FloorChangerRed:\n            case EntityID.FloorChangerGreen:\n            case EntityID.FloorChangerBlue:\n            case EntityID.FloorChangerYellow:\n            case EntityID.FloorChangerOrange:\n            case EntityID.FloorChangerPurple:{\n                let color = entityID - EntityID.FloorChangerRed + EntityColor.Red;\n                if(color >= EntityColor.Begin && color <= EntityColor.End){\n                    floor = FloorChanger.create(grid, color as EntityColor);\n                    if(floor){\n                        floor.setEntityColor(color as EntityColor);\n                    }\n                }\n            }\n                break;\n            \n            case EntityID.FloorGrass:{\n                floor = FloorGrass.create(grid);\n            }\n                break;\n            case EntityID.FloorDouble:{\n                floor = FloorDoubler.create(grid);\n            }\n                break;\n            default:\n                break;\n        }\n\n        return floor;\n    }\n    \n    public static generateFloorWithKindID(grid, kindID:KindID) : FloorBase {\n        let entityID = IdentifierManager.getInstance().getEntityIDFromKindID(kindID);\n        return this.generateFloorWithEntityID(grid, entityID);\n    }\n}\n","import IGame from \"../../../../base/IGame\";\nimport { CollectionID } from \"../../defines/CollectionID\";\nimport { EntityID } from \"../../defines/EntityID\";\nimport IdentifierManager from \"../../defines/IdentifierManager\";\nimport GridBase from \"../../grid/GridBase\";\nimport EntityPrefabNodePool from \"../EntityPrefabNodePool\";\nimport FloorBase, { FloorType } from \"./FloorBase\";\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class FloorGrass extends FloorBase {\n\n    public static create(grid:GridBase):FloorGrass{\n        let className = 'FloorGrass';\n        let prefabFileName = 'match_scene/prefab/entity/floor/FloorGrass';\n        let pool = EntityPrefabNodePool.getInstance();\n        let component = pool.getPrefabNodeWithFileNameAndClassName(prefabFileName, className) as FloorGrass;\n        if (component) {\n            component.init(grid);\n            return component;       \n        }\n        return null;\n    }\n\n    public clone():FloorGrass {\n        return FloorGrass.create(this.getGrid());\n    }\n\n    public getCollectionID():CollectionID{\n        return CollectionID.FloorGrass;\n    }\n\n    public getEntityID():EntityID{\n        return EntityID.FloorGrass;\n    }\n\n    public getScore():number{\n        return 200;\n    }\n\n    public onCollected():void{\n        if (this.getGrid().isTargetCollectionID(this.getCollectionID())) {\n            this.getGrid().updateTargetBarUIWithDelta(this.getCollectionID(), -1);\n        }\n        this.getGrid().collectEntity(this);\n    }\n\n    public grow():void{\n        this.getGrid().gainScoreWithEntity(this);\n        this.playAnimation('grow');\n        this.selfHurt();\n        IGame.playAudio(IdentifierManager.getInstance().getMatchAudioFilePath('grass'));\n    }\n\n    protected init(grid:GridBase):void{\n        super.initFloor(grid, FloorType.Grass);\n    }\n}\n","import FloorBase, { FloorType } from \"./FloorBase\";\nimport GridBase from \"../../grid/GridBase\";\nimport { CollectionID } from \"../../defines/CollectionID\";\nimport { EntityID, EntityColor, EntityCleanOption, EntityCleanType } from \"../../defines/EntityID\";\nimport GridCommand from \"../../commond/GridCommand\";\nimport FlyerAnimation, { FlyerAnimationType } from \"../flyer/FlyerAnimation\";\nimport IGame from \"../../../../base/IGame\";\nimport IdentifierManager from \"../../defines/IdentifierManager\";\nimport EntityPrefabNodePool from \"../EntityPrefabNodePool\";\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class FloorIce extends FloorBase {\n\n    private _healthPoint:number = 0;\n\n    public static create(grid:GridBase, healthPoint:number):FloorIce{\n\n        let className = 'FloorIce';\n        let prefabFileName = 'match_scene/prefab/entity/floor/FloorIce';\n        let pool = EntityPrefabNodePool.getInstance();\n        let component = pool.getPrefabNodeWithFileNameAndClassName(prefabFileName, className) as FloorIce;\n        if (component) {\n            component.init(grid, healthPoint);\n            return component;       \n        }\n        return null;\n    }\n\n    public clone():FloorIce {\n        return FloorIce.create(this.getGrid(),this.getHealthPoint());\n    }\n\n    public getCollectionID():CollectionID{\n        return CollectionID.FloorIce;\n    }\n\n    public getEntityID():EntityID{\n        let result = EntityID.None;\n        switch(this.getHealthPoint()){\n            case 1:{\n                result = EntityID.FloorIceHp1;\n                break;\n            }\n            case 2:{\n                result = EntityID.FloorIceHp2;\n                break;\n            }\n            case 3:{\n                result = EntityID.FloorIceHp3;\n                break;\n            }\n            case 4:{\n                result = EntityID.FloorIceHp4;\n                break;\n            }\n            default:{\n                break;\n            }\n        }\n        return result;\n    }\n\n    public getScore():number{\n        return 50;\n    }\n\n    public getButterflyPriority(color:EntityColor, layoutGrass:boolean):number{\n        let popsicle = this.getGrid().getPopsicleAtLogicalPos(this.getLogicalPos());\n        if(popsicle){\n            let coverItem = this.getGrid().getItemAtLogicalPos(this.getLogicalPos());\n            if (coverItem && coverItem.canExcuteCommand(GridCommand.BombClean(this.getLogicalPos(), color, layoutGrass))) {\n                return 1;    \n            }else{\n                return 1;\n            }\n        }\n        return super.getButterflyPriority(color, layoutGrass);\n    }\n    \n    protected _canCleanByTerminate(cleanColor:EntityColor) : boolean {\n        return true;\n    }\n\n    public _canCleanByBomb(cleanColor:EntityColor):boolean{\n        return false;\n    }\n\n    public _canBeFloorClean():boolean{\n        return true;\n    }\n\n    public _onClean(cleanOption:EntityCleanOption):void{\n        let rate = 1;\n        if (cleanOption.cleanType == EntityCleanType.Terminate) {\n            rate = this.getHealthPoint()\n            this.setHealthPoint(1);\n        }\n        this.getGrid().gainScoreWithEntity(this, rate);\n        if(this.getHealthPoint() <= 1){\n            this.setVisible(false);\n            if (!this.isTargetCollection()) {\n                let flyer = FlyerAnimation.createDieAnimation(this.getGrid(), this.getEntityID());\n                this.getGrid().setFlyerAtLogicalPos(flyer, this.getLogicalPos());\n                IGame.playAudio(IdentifierManager.getInstance().getMatchAudioFilePath('ice'));\n            }\n            this.onCollected();\n            this.selfDestory();\n            this.getGrid().dispatchCommand(this.getLogicalPos(), GridCommand.PopsicleClean(), 0);\n        }else{\n            this.setHealthPoint(this.getHealthPoint() - 1);\n            this.selfHurt();\n            let flyer = FlyerAnimation.createDieAnimation(this.getGrid(), this.getEntityID());\n            this.getGrid().setFlyerAtLogicalPos(flyer, this.getLogicalPos());\n            IGame.playAudio(IdentifierManager.getInstance().getMatchAudioFilePath('ice'));\n            flyer.node.zIndex = this.getTopZOrder();\n        }\n    }\n\n    protected init(grid:GridBase, healthPoint:number):void{\n        super.initFloor(grid, FloorType.Ice);\n        this.setHealthPoint(healthPoint);\n    }\n\n    protected getHealthPoint():number{\n        return this._healthPoint;\n    }\n\n    protected setHealthPoint(val:number):void{\n        this._healthPoint = val;\n        this.updatePuppet();\n    }\n}\n","import { CollectionID } from \"../../defines/CollectionID\";\nimport { EntityID } from \"../../defines/EntityID\";\nimport GridBase from \"../../grid/GridBase\";\nimport FloorBase, { FloorType } from \"./FloorBase\";\nimport EntityPrefabNodePool from \"../EntityPrefabNodePool\";\n\nexport enum FloorRoadDirection{\n    Left = 0,\n    Up,\n    Right,\n    Down,\n};\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class FloorRoad extends FloorBase {\n    private _isStartPoint:boolean = false;\n\n    private _inDirection:FloorRoadDirection = FloorRoadDirection.Left;\n    private _outDirection:FloorRoadDirection = FloorRoadDirection.Up;\n\n\n    public static create(grid:GridBase, inDirection:FloorRoadDirection, \n                        outDirection:FloorRoadDirection):FloorRoad{\n        let className = 'FloorRoad';\n        let prefabFileName = 'match_scene/prefab/entity/floor/FloorRoad';\n        let pool = EntityPrefabNodePool.getInstance();\n        let component = pool.getPrefabNodeWithFileNameAndClassName(prefabFileName, className) as FloorRoad;\n        if (component) {\n            component.init(grid, inDirection, outDirection); \n            return component;       \n        }\n        return null;\n    }\n\n\n    public clone():FloorRoad {\n        return FloorRoad.create(this.getGrid(),this._inDirection, this._outDirection);\n    }\n\n    public init(grid:GridBase, inDircetion:FloorRoadDirection, outDirection:FloorRoadDirection){\n        super.initFloor(grid, FloorType.Road);\n        this.setInDirection(inDircetion);\n        this.setOutDirection(outDirection);\n        this.updatePuppet();\n    }\n\n    public getCollectionID():CollectionID{\n        return CollectionID.FloorRoad;\n    }\n\n    public getEntityID():EntityID{\n        \n        if(this.getIsStartPoint()){\n            return EntityID.FloorRoadStartPoint;\n        }\n\n        let result = EntityID.None;\n\n        switch(this._inDirection){\n            case FloorRoadDirection.Left:{\n                switch(this._outDirection){\n                    case FloorRoadDirection.Right:{\n                        result = EntityID.FloorRoadLineHR;\n                        break;\n                    }\n                    case FloorRoadDirection.Up:{\n                        result = EntityID.FloorRoadTurnLuU;\n                        break;\n                    }\n                    case FloorRoadDirection.Down:{\n                        result = EntityID.FloorRoadTurnLdD;\n                        break;\n                    }\n                    default:{\n                        break;\n                    }\n                }\n            }\n            break;\n            case FloorRoadDirection.Right:{\n                switch(this._outDirection){\n                    case FloorRoadDirection.Left:{\n                        result = EntityID.FloorRoadLineHL;\n                        break;\n                    }\n                    case FloorRoadDirection.Up:{\n                        result = EntityID.FloorRoadTurnRuU;\n                        break;\n                    }\n                    case FloorRoadDirection.Down:{\n                        result = EntityID.FloorRoadTurnRdD;\n                        break;\n                    }\n                    default:{\n                        break;\n                    }\n                }\n            }\n            break;\n            case FloorRoadDirection.Up:{\n                switch(this._outDirection){\n                    case FloorRoadDirection.Left:{\n                        result = EntityID.FloorRoadTurnLuL;\n                        break;\n                    }\n                    case FloorRoadDirection.Right:{\n                        result = EntityID.FloorRoadTurnRuR;\n                        break;\n                    }\n                    case FloorRoadDirection.Down:{\n                        result = EntityID.FloorRoadLineVD;\n                        break;\n                    }\n                    default:{\n                        break;\n                    }\n                }\n            }\n            break;\n            case FloorRoadDirection.Down:{\n                switch(this._outDirection){\n                    case FloorRoadDirection.Left:{\n                        result = EntityID.FloorRoadTurnLdL;\n                        break;\n                    }\n                    case FloorRoadDirection.Right:{\n                        result = EntityID.FloorRoadTurnRdR;\n                        break;\n                    }\n                    case FloorRoadDirection.Up:{\n                        result = EntityID.FloorRoadLineVU;\n                        break;\n                    }\n                    default:{\n                        break;\n                    }\n                }\n            }\n            break;\n            default:{\n                break;\n            }\n        }\n        return result;\n    }\n\n    public getIsStartPoint():boolean{\n        return this._isStartPoint;\n    }\n\n    public setIsStartPoint(val:boolean){\n        this._isStartPoint = val;\n        this.updatePuppet();\n    }\n\n    public getInDirection():FloorRoadDirection{\n        return this._inDirection;\n    }\n\n    public setInDirection(val:FloorRoadDirection):void{\n        this._inDirection = val;\n    }\n\n    public getOutDirection():FloorRoadDirection{\n        return this._outDirection;\n    }\n\n    public setOutDirection(val:FloorRoadDirection):void{\n        this._outDirection = val;\n    }\n}\n","import { EntityID } from \"../../defines/EntityID\";\nimport IdentifierManager from \"../../defines/IdentifierManager\";\nimport GridBase from \"../../grid/GridBase\";\nimport EntityPrefabNodePool from \"../EntityPrefabNodePool\";\nimport FlyerBase, { FlyerType } from \"./FlyerBase\";\n\n// Learn TypeScript:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/typescript.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/typescript.html\n// Learn Attribute:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html\n\n\nexport enum FlyerAnimationType{\n    Bomb1x1,\n    CommonHurt,\n    FocusFrame,\n    HighlightedCell,\n    ItemMarked,\n    BombCross,\n}; \n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class FlyerAnimation extends FlyerBase {\n\n    private _autoRemoveOnFinish:boolean = false;\n    public getAutoRemoveOnFinish():boolean {\n        return this._autoRemoveOnFinish;\n    }\n    public setAutoRemoveOnFinish(auto:boolean) : void {\n        this._autoRemoveOnFinish = auto;\n    }\n\n    public _entityID:EntityID = EntityID.None;\n    public getEntityID() : EntityID {\n        return this._entityID;\n    }\n\n    public launch() {\n        let state = this.playAnimation('default');\n        if (this._autoRemoveOnFinish) {\n            if (state) {\n                let action = cc.sequence(cc.delayTime(state.duration), cc.callFunc(()=>{\n                    this.getGrid().removeObstructs(this);\n                    this.destoryWithRecycle(true);\n                }));\n                this.runAction(action);\n            }else{\n                this.getGrid().removeObstructs(this);\n                this.destoryWithRecycle(true);\n            }\n        }\n    }\n\n    public init(grid:GridBase,\n                entityID:EntityID, \n                autoRemove:boolean){\n        this._entityID = entityID;\n        super.initFlyer(grid, FlyerType.Animation);\n        this.setAutoRemoveOnFinish(autoRemove);\n    }\n\n    public static create(grid:GridBase, \n                         entityID:EntityID,\n                         filePatth:string, \n                         autoRemove:boolean = true):FlyerAnimation{\n        let className = 'FlyerAnimation';\n        let prefabFileName = filePatth;\n        let pool = EntityPrefabNodePool.getInstance();\n        let component = pool.getPrefabNodeWithFileNameAndClassName(prefabFileName, className) as FlyerAnimation;\n        if (component) {\n            component.init(grid, entityID, autoRemove); \n            return component;       \n        }\n        return null;\n    }\n\n    public static createDieAnimation(grid:GridBase, entityID:EntityID, autoRemove:boolean = true) : FlyerAnimation {\n\n        let info = IdentifierManager.getInstance().getHurtAnimationInfoPathFromEntityID(entityID);\n        if (info) {\n            return this.create(grid, info.entityID, info.fileName, autoRemove);\n        }\n        return null;\n    }\n\n    public static createAnimationWithType(grid:GridBase, type:FlyerAnimationType, autoRemove:boolean = true) : FlyerAnimation {\n\n        let path:string = null;\n        let entityID:EntityID = EntityID.None;\n        switch (type) {\n            case FlyerAnimationType.Bomb1x1:\n                path = 'match_scene/prefab/entity/animation/AnimationBomb1x1';\n                entityID = EntityID.FlyerAnimationBomb1x1;\n                break;\n            case FlyerAnimationType.CommonHurt:\n                path = 'match_scene/prefab/entity/animation/AnimationCommonHurt';\n                entityID = EntityID.FlyerAnimationCommonHurt;\n                break;\n            case FlyerAnimationType.FocusFrame:\n                path = 'match_scene/prefab/entity/animation/AnimationFocusFrame';\n                entityID = EntityID.FlyerAnimationFocusFrame;\n                break;\n            case FlyerAnimationType.HighlightedCell:\n                path = 'match_scene/prefab/entity/animation/AnimationHighlightedCell';\n                entityID = EntityID.FlyerAnimationHighlightedCell;\n                break;\n            case FlyerAnimationType.ItemMarked:\n            \n                path = 'match_scene/prefab/entity/animation/AnimationItemMarked';\n                entityID = EntityID.FlyerAnimationItemMarked;\n                break;\n            case FlyerAnimationType.BombCross:\n                path = 'match_scene/prefab/entity/animation/AnimationFireworkBoom';\n                entityID = EntityID.FlyerAnimationBombCross;\n                break;\n            default:\n                break;\n        }\n\n        if (path) {\n            return this.create(grid, entityID, path, autoRemove);\n        }\n        return null;\n    }\n\n    // LIFE-CYCLE CALLBACKS:\n\n    // onLoad () {}\n\n    start () {\n\n    }\n\n    // update (dt) {}\n}\n","import GameMath from \"../../../../extend/utils/GameMath\";\nimport { CollectionID } from \"../../defines/CollectionID\";\nimport { EntityColor, EntityIDManager, EntityType } from \"../../defines/EntityID\";\nimport GridBase from \"../../grid/GridBase\";\nimport CellBase from \"../cell/CellBase\";\nimport EntityBase from \"../EntityBase\";\nimport GridCommand from \"../../commond/GridCommand\";\n\n// Learn TypeScript:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/typescript.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/typescript.html\n// Learn Attribute:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html\n\n\nexport enum FlyerType{\n    None,\n    Missile,\n    Cannon,\n    Mower,\n    Bomb,\n    NuclearBomb,\n    LasetBullet,\n    Laser,\n    Hammer,\n    PopsicleLine,\n    PopsicleBomb,\n    Animation,\n    CollectedEntity,\n    CollectedSupply,\n    MoreStep,\n    Charger,\n    ComboWord,\n    FireworksMissile,\n    FireworksCannon,\n    Score,\n};\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class FlyerBase extends EntityBase {\n\n    private _flyerType:FlyerType = FlyerType.None;\n    public getFlyerType() : FlyerType {\n        return this._flyerType;\n    }\n\n    public getCollectionID():CollectionID{\n        return CollectionID.None;\n    }\n\n    public launch() : void {\n        \n    }\n\n    protected initFlyer(grid:GridBase, flyerType:FlyerType) : void {\n        super.initEntity(grid, EntityType.Flyer);\n        this._flyerType = flyerType;\n    }\n\n    protected getAttackPos(color:EntityColor, layoutGrass:boolean) : cc.Vec2 {\n        let targetPos = cc.v2(-1, -1); \n        let targetPriority = EntityBase.DEFAULT_MISSILE_PRIORITY;\n        let grid = this.getGrid();\n        let entityTypes:EntityType[] = [\n            EntityType.Parasite,\n            EntityType.Item,\n            EntityType.Rug,\n            EntityType.Floor,\n            EntityType.Popsicle,\n            EntityType.Cell,\n        ];\n\n        let cellsMap = grid.getCellsMap();\n        let checkPositions:cc.Vec2[] = [];\n        let attackedPositions = grid.getAttackedPosition();\n        for (let key in cellsMap) {\n            let cell = cellsMap[key] as CellBase;\n            let checkPos = cell.getLogicalPos();\n            if (GameMath.indexOf(attackedPositions, checkPos) == -1) {\n                checkPositions.push(checkPos);\n            }\n        }\n        GameMath.shuffleArray(checkPositions);\n    \n        for (let checkPos of checkPositions) {\n            if (GameMath.indexOf(attackedPositions, checkPos) == -1) {\n                let minPriority = EntityBase.DEFAULT_MISSILE_PRIORITY;\n\n                let canAttackTop = false;\n                for (let entityType of entityTypes) {\n                    let entity = grid.getEntity(entityType, checkPos);\n                    if (entity) {\n\n                        if (entityType == EntityType.Parasite || entityType == EntityType.Item) {\n                            if (entity.canExcuteCommand(GridCommand.BombClean(this.getLogicalPos(), color, layoutGrass))) {\n                                canAttackTop = true;\n                            }\n                        }else{\n                            canAttackTop = true;\n                        }\n                        if (canAttackTop) {\n                            let butterflyPriority = entity.getButterflyPriority(color, layoutGrass);\n                            if (butterflyPriority < minPriority) {\n                                minPriority = butterflyPriority;\n                            }\n                        }else{\n                            break;\n                        }\n                    }\n                }\n                if (canAttackTop) {\n                    if (minPriority < targetPriority) {\n                        targetPriority = minPriority;\n                        targetPos = checkPos;\n                    }\n                }\n            }\n        }\n\n        if (targetPos.equals(cc.v2(-1, -1))) {\n            if (checkPositions.length > 0) {\n                let index = GameMath.randomInt(0, checkPositions.length - 1);\n                targetPos = checkPositions[index];\n            }else{\n                while (1) {\n                    let x = GameMath.randomInt(0, grid.getGridSize().width - 1);\n                    let y = GameMath.randomInt(0, grid.getGridSize().height - 1);\n                    let checkPos = cc.v2(x, y);\n                    \n                    let cell = grid.getCellAtLogicalPos(checkPos);\n                    if (cell) {\n                        targetPos = checkPos;\n                        break;\n                    }\n                }\n            }\n        }\n        return targetPos;\n    } \n}\n","import IGame from \"../../../../base/IGame\";\nimport GameMath from \"../../../../extend/utils/GameMath\";\nimport GridCommand from \"../../commond/GridCommand\";\nimport { EntityColor, EntityID } from \"../../defines/EntityID\";\nimport IdentifierManager from \"../../defines/IdentifierManager\";\nimport GridBase from \"../../grid/GridBase\";\nimport EntityPrefabNodePool from \"../EntityPrefabNodePool\";\nimport FlyerBase, { FlyerType } from \"./FlyerBase\";\n\n// Learn TypeScript:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/typescript.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/typescript.html\n// Learn Attribute:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class FlyerBomb extends FlyerBase {\n\n    protected FLYER_BOMB_DURATION = 0.2;\n\n    protected _launched:boolean = false;\n    protected _bombDuration:number = 0;\n    protected _lastBombRingIndex:number = 0;\n    protected _canLayoutGrass:boolean = false;\n    public getCanLayoutGrass():boolean {\n        return this._canLayoutGrass;\n    }\n    public setCanLayoutGrass(canLayoutGrass:boolean) : void {\n        this._canLayoutGrass = canLayoutGrass;\n    }\n    \n    private _origin:cc.Vec2 = cc.Vec2.ZERO;\n    public getOrigin():cc.Vec2 {\n        return this._origin;\n    }\n    public setOrigin(origin:cc.Vec2) : void {\n        this._origin = origin;\n    }\n\n    private _radius:number = 0;\n    public getRadius():number {\n        return this._radius;\n    }\n    public setRadius(radius:number) : void {\n        this._radius = radius;\n    }\n\n    public getEntityID() : EntityID {\n        let result = EntityID.FlyerBombWhite;\n        switch (this.getEntityColor()) {\n            case EntityColor.Red:\n                result = EntityID.FlyerBombRed;\n                break;\n            case EntityColor.Green:\n                result = EntityID.FlyerBombGreen;\n                break;\n            case EntityColor.Blue:\n                result = EntityID.FlyerBombBlue;\n                break;\n            case EntityColor.Yellow:\n                result = EntityID.FlyerBombYellow;\n                break;\n            case EntityColor.Orange:\n                result = EntityID.FlyerBombOrange;\n                break;\n            case EntityColor.Purple:\n                result = EntityID.FlyerBombPurple;\n                break;\n                \n            default:\n                break;\n        }\n        return result;\n    }\n    \n    public launch() {\n        if (this._launched) {\n            return;\n        }\n\n        let willAttackPositions = GameMath.enumerateRingPos(this._origin, 0, this._radius);\n        for (let pos of willAttackPositions) {\n            this.getGrid().recordAttackedPosition(pos);\n        }\n\n        this._launched = true;\n        IGame.playAudio(IdentifierManager.getInstance().getMatchAudioFilePath('eliminate_special_bomb'));\n\n        this._bombDuration = 0\n        this._lastBombRingIndex = -1;\n        this._launched = true;\n        this.getGrid().addObstructs(this);\n\n        let state = this.playAnimation('default');\n        if (state) {\n            let action = cc.sequence(cc.delayTime(state.duration), cc.callFunc(()=>{\n                this.getGrid().removeObstructs(this);\n                this.destoryWithRecycle(true);\n            }));\n            this.runAction(action);\n        }\n    }\n\n    update (dt) {\n        if (this._launched == false) {\n            return;\n        }\n        dt = dt * cc.director.getScheduler().getTimeScale();\n        this._bombDuration += dt;\n\n        let currentRingIndex = Math.min(this._radius,  Math.floor(this._radius * this._bombDuration / this.FLYER_BOMB_DURATION));\n        if (currentRingIndex > this._lastBombRingIndex) {\n            let positions = GameMath.enumerateRingPos(this._origin, this._lastBombRingIndex + 1, currentRingIndex);\n            let grid = this.getGrid();\n            for (let pos of positions) {\n                grid.dispatchCommand(pos, GridCommand.BombClean(this._origin, this.getEntityColor(), this.getCanLayoutGrass()), 0);\n                grid.highlightedCell(pos);\n            }\n            this._lastBombRingIndex = currentRingIndex;\n\n            if (this._lastBombRingIndex >= this._radius) {\n                grid.removeObstructs(this);\n            }\n        }\n    }\n\n    onDestroy(){\n        super.onDestroy();\n        this._origin = null;\n    }\n\n    public static create(grid:GridBase, \n                         color:EntityColor, \n                         layoutGrass:boolean, \n                         origin:cc.Vec2, \n                         raidus:number):FlyerBomb{\n\n        let filePath = 'match_scene/prefab/entity/flyer/FlyerBomb';\n        switch (color) {\n            case EntityColor.Red:\n                filePath += 'Red';\n                break;\n            case EntityColor.Green:\n                filePath += 'Green';\n                break;\n            case EntityColor.Blue:\n                filePath += 'Blue';\n                break;\n            case EntityColor.Yellow:\n                filePath += 'Yellow';\n                break;\n            case EntityColor.Orange:\n                filePath += 'Orange';\n                break;\n            case EntityColor.Purple:\n                filePath += 'Purple';\n                break;\n            case EntityColor.None:\n                filePath += 'White';\n                break;\n        \n            default:\n                break;\n        }\n\n        let className = 'FlyerBomb';\n        let prefabFileName = filePath;\n        let pool = EntityPrefabNodePool.getInstance();\n        let component = pool.getPrefabNodeWithFileNameAndClassName(prefabFileName, className) as FlyerBomb;\n        if (component) {\n            component.init(grid, color, layoutGrass, origin, raidus); \n            return component;       \n        }\n        return null;\n    }\n\n    public init(grid:GridBase, \n                color:EntityColor, \n                layoutGrass:boolean, \n                origin:cc.Vec2, \n                raidus:number){\n        super.initFlyer(grid, FlyerType.Bomb);\n        this.setEntityColor(color)\n        this.setCanLayoutGrass(layoutGrass);\n        this.setOrigin(origin);\n        this.setRadius(raidus);\n        this.FLYER_BOMB_DURATION = 0.2;\n        this._launched = false;\n        this._bombDuration = 0;\n        this._lastBombRingIndex = 0;\n    }\n}\n","import IGame from \"../../../../base/IGame\";\nimport GameMath from \"../../../../extend/utils/GameMath\";\nimport GridCommand from \"../../commond/GridCommand\";\nimport { EntityColor, EntityID } from \"../../defines/EntityID\";\nimport IdentifierManager from \"../../defines/IdentifierManager\";\nimport GridBase from \"../../grid/GridBase\";\nimport EntityPrefabNodePool from \"../EntityPrefabNodePool\";\nimport { ItemBombType } from \"../item/color/bomb/ItemBombBase\";\nimport ItemFactory from \"../item/ItemFactory\";\nimport FlyerBase, { FlyerType } from \"./FlyerBase\";\n\n// Learn TypeScript:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/typescript.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/typescript.html\n// Learn Attribute:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class FlyerBullet extends FlyerBase {\n\n    private _duration:number = 0;\n    private _startPos:cc.Vec2 = cc.Vec2.ZERO;\n    private _targetPos:cc.Vec2 = cc.Vec2.ZERO;\n    private _bombType:ItemBombType = ItemBombType.None;\n    private _launched:boolean = false;\n\n    public getEntityID():EntityID {\n        return EntityID.FlyerLaserBullet;\n    }\n\n    public launch() {\n        if (this._launched) {\n            return;\n        }\n        this._launched = true;\n\n        if (this._bombType != ItemBombType.None) {\n            IGame.playAudio(IdentifierManager.getInstance().getMatchAudioFilePath('eliminate_special_color'));    \n        }else{\n            IGame.playAudio(IdentifierManager.getInstance().getMatchAudioFilePath('eliminate_special_colorline'));    \n        }\n        \n        let grid = this.getGrid();\n        let startPos = this.getPixelPos(this._startPos);\n        let targetPos = grid.getPixelPosFromLogicalPos(this._targetPos);\n        this.setPixelPos(this._startPos);\n\n        this.node.scale = 0.25;\n        let move = cc.spawn(cc.moveTo(this._duration, targetPos).easing(cc.easeInOut(2)),\n                            cc.scaleTo(this._duration, 1.0));\n        let callback = cc.callFunc(()=>{\n            if (this._bombType != ItemBombType.None) {\n                \n                grid.highlightedCell(this._targetPos);\n                let item = grid.getItemAtLogicalPos(this._targetPos);\n                if (item && item.canUpgradeByRainbow()) {\n                    \n                    let bombType = this._bombType;\n                    if (this._bombType == ItemBombType.Row || this._bombType == ItemBombType.Column) {\n                        if (GameMath.randomInt(0, 100) < 50) {\n                            bombType = ItemBombType.Row;\n                        }else{\n                            bombType = ItemBombType.Column;\n                        }\n                    }\n                    let item = ItemFactory.generateEffectBombItem(grid, bombType, this.getEntityColor());\n                    if (item) {\n                        grid.dispatchCommand(this._targetPos,GridCommand.Change(item.getEntityID(), true),0);    \n                    }\n                }\n            }\n\n            grid.removeObstructs(this);\n            this.destoryWithRecycle(true);\n        });\n        this.runAction(cc.sequence(move, callback));\n    }\n    \n    public static create(grid:GridBase, \n                         duration:number, \n                         startPos:cc.Vec2, \n                         targetPos:cc.Vec2,\n                         color:EntityColor, \n                         bombType:ItemBombType,\n                         layoutGrass:boolean):FlyerBullet{\n\n        let className = 'FlyerBullet';\n        let prefabFileName = 'match_scene/prefab/entity/flyer/FlyerBullet';\n        let pool = EntityPrefabNodePool.getInstance();\n        let component = pool.getPrefabNodeWithFileNameAndClassName(prefabFileName, className) as FlyerBullet;\n        if (component) {\n            component.init(grid, duration, startPos, targetPos, color, bombType, layoutGrass); \n            return component;       \n        }\n        return null;\n    }\n\n    public init(grid:GridBase,\n                duration:number,  \n                startPos:cc.Vec2, \n                targetPos:cc.Vec2,\n                color:EntityColor, \n                bombType:ItemBombType,\n                layoutGrass:boolean){\n        super.initFlyer(grid, FlyerType.LasetBullet);\n        this.setEntityColor(color)\n\n        this._duration = duration;\n        this._startPos = startPos;\n        this._targetPos = targetPos;\n        this._bombType = bombType;\n        this._launched = false;\n    }\n}\n","import GameMath from \"../../../../extend/utils/GameMath\";\nimport GridCommand from \"../../commond/GridCommand\";\nimport { EntityColor, EntityID } from \"../../defines/EntityID\";\nimport GridBase from \"../../grid/GridBase\";\nimport EntityPrefabNodePool from \"../EntityPrefabNodePool\";\nimport FlyerAnimation, { FlyerAnimationType } from \"./FlyerAnimation\";\nimport FlyerBase, { FlyerType } from \"./FlyerBase\";\n\n// Learn TypeScript:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/typescript.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/typescript.html\n// Learn Attribute:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html\n\nconst { ccclass, property } = cc._decorator;\n\n@ccclass\nexport default class FlyerCannon extends FlyerBase {\n\n    protected static FLYER_CANNON_MIN_SPEED = 500.0;\n    protected static FLYER_CANNON_MAX_SPEED = 5000.0\n    protected static FLYER_CANNON_START_SPEED = 500.0\n    protected static FLYER_CANNON_ACCELERATION = 5000.0\n    protected static FLYER_CANNON_TAIL_FADE_DURATION = 0.4\n\n    protected _hitOrigin: boolean = false;\n    protected _launched: boolean = false;\n    protected _aliveArea: cc.Rect = cc.rect(0, 0, 0, 0);\n    protected _speed: number = 0;\n    protected _lastCellPostion: cc.Vec2 = cc.v2(-1, -1);\n    protected _startFly: boolean = false;\n\n    public getEntityID(): EntityID {\n        let result = EntityID.FlyerCannonWhite;\n        switch (this.getEntityColor()) {\n            case EntityColor.None:\n                result = EntityID.FlyerCannonWhite;\n                break;\n            case EntityColor.Red:\n                result = EntityID.FlyerCannonRed;\n                break;\n            case EntityColor.Green:\n                result = EntityID.FlyerCannonGreen;\n                break;\n            case EntityColor.Blue:\n                result = EntityID.FlyerCannonBlue;\n                break;\n            case EntityColor.Yellow:\n                result = EntityID.FlyerCannonYellow;\n                break;\n            case EntityColor.Orange:\n                result = EntityID.FlyerCannonOrange;\n                break;\n            case EntityColor.Purple:\n                result = EntityID.FlyerCannonPurple;\n                break;\n\n            default:\n                break;\n        }\n        return result;\n    }\n\n    private _layoutGrass: boolean = false;\n    public getLayoutGrass(): boolean {\n        return this._layoutGrass;\n    }\n    public setLayourGrass(layoutGrass: boolean): void {\n        this._layoutGrass = layoutGrass;\n    }\n\n    private _origin: cc.Vec2 = cc.Vec2.ZERO;\n    public getOrigin(): cc.Vec2 {\n        return this._origin;\n    }\n    public setOrigin(origin: cc.Vec2): void {\n        this._origin = origin;\n    }\n\n    private _direction: cc.Vec2 = cc.Vec2.ZERO;\n    public getDirection(): cc.Vec2 {\n        return this._direction;\n    }\n    public setDirection(direction: cc.Vec2): void {\n        this._direction = direction;\n        let rotation = GameMath.getAngle(cc.Vec2.ZERO, direction);\n        this._puppet.angle = -rotation;\n    }\n\n    public launch() {\n\n        if (this._launched) {\n            return;\n        }\n\n        let willAttackPos = this._origin.clone();\n        let grid = this.getGrid();\n        let validLogicalRect = cc.rect(0, 0, grid.getGridSize().width, grid.getGridSize().height);\n        while (1) {\n            if (!GameMath.rectContainsPoint(validLogicalRect, willAttackPos)) {\n                break;\n            }\n            grid.recordAttackedPosition(willAttackPos.clone());\n            willAttackPos.addSelf(this._direction);\n        }\n\n        this._launched = true;\n        this.setOrigin(this.getOrigin());\n\n        this._lastCellPostion = this._origin;\n        if (this._hitOrigin) {\n            this._lastCellPostion = this._lastCellPostion.sub(this._direction);\n        }\n        this._launched = true;\n        this._speed = FlyerCannon.FLYER_CANNON_START_SPEED;\n\n\n\n        grid.addObstructs(this);\n\n        let state = this.playAnimation('default');\n        if (state) {\n            let action = cc.sequence(cc.delayTime(state.duration),\n                cc.callFunc(() => { this._startFly = true }));\n            this.runAction(action);\n        } else {\n            this._startFly = true;\n        }\n\n    }\n\n    update(dt) {\n        if (this._launched == false) {\n            return;\n        }\n\n        if (this._startFly == false) {\n            return;\n        }\n\n        dt = dt * cc.director.getScheduler().getTimeScale();\n\n\n        let grid = this.getGrid();\n        this._speed = GameMath.clamp(this._speed + FlyerCannon.FLYER_CANNON_ACCELERATION * dt,\n            FlyerCannon.FLYER_CANNON_MIN_SPEED,\n            FlyerCannon.FLYER_CANNON_MAX_SPEED);\n\n        //根据向量方向，速度时间算出当前帧运动位置\n        let newPosition = this.node.getPosition().add(this._direction.normalize().mul(this._speed).mul(dt));\n        this.node.setPosition(newPosition);\n        let newCellPos = grid.getLogicalPosFromPixelPos(newPosition);\n\n        if (!newCellPos.equals(this._lastCellPostion)) {\n            let offset = newCellPos.sub(this._lastCellPostion);\n            let count = offset.mag() / this._direction.mag();\n            for (let i = 0; i < count; i++) {\n                let pos = this._lastCellPostion.add(this._direction.mul(i + 1));\n\n                let blocked = false;\n                let item = grid.getItemAtLogicalPos(pos);\n                if (item && item.canBlockBombRay()) {\n                    blocked = true;\n                }\n\n                let cell = grid.getCellAtLogicalPos(pos);\n                if (cell) {\n                    grid.dispatchCommand(pos, GridCommand.BombClean(this.getOrigin(), this.getEntityColor(), this._layoutGrass), 0);\n                    grid.highlightedCell(pos);\n                }\n\n                if (blocked) {\n                    let flyer = FlyerAnimation.createAnimationWithType(this.getGrid(), FlyerAnimationType.Bomb1x1);\n                    grid.setFlyerAtLogicalPos(flyer, pos);\n                    grid.removeObstructs(this);\n                    this.destoryWithRecycle(true);\n                }\n\n                if (grid.isGrassFloorAtLogicalPos(pos)) {\n                    let item = grid.getItemAtLogicalPos(pos);\n                    if (item) {\n                        if (item.canMatch() && item.canSwap() && item.canLayoutGrass()) {\n                            this._layoutGrass = true;\n                        }\n                    } else {\n                        this._layoutGrass = true;\n                    }\n                }\n            }\n            this._lastCellPostion = newCellPos;//记录最后到达的格子坐标\n        }\n\n        if (!GameMath.rectContainsPoint(this._aliveArea, this.node.getPosition())) {\n            grid.removeObstructs(this);\n            this.destoryWithRecycle(false);\n        }\n    }\n    public static create(grid: GridBase,\n        color: EntityColor,\n        layoutGrass: boolean,\n        origin: cc.Vec2,\n        direction: cc.Vec2,\n        hitOrigin: boolean): FlyerCannon {\n\n        let filePath = 'match_scene/prefab/entity/flyer/FlyerCannon';\n        switch (color) {\n            case EntityColor.Red:\n                filePath += 'Red';\n                break;\n            case EntityColor.Green:\n                filePath += 'Green';\n                break;\n            case EntityColor.Blue:\n                filePath += 'Blue';\n                break;\n            case EntityColor.Yellow:\n                filePath += 'Yellow';\n                break;\n            case EntityColor.Orange:\n                filePath += 'Orange';\n                break;\n            case EntityColor.Purple:\n                filePath += 'Purple';\n                break;\n            case EntityColor.None:\n                filePath += 'White';\n                break;\n\n            default:\n                break;\n        }\n\n        let className = 'FlyerCannon';\n        let prefabFileName = filePath;\n        let pool = EntityPrefabNodePool.getInstance();\n        let component = pool.getPrefabNodeWithFileNameAndClassName(prefabFileName, className) as FlyerCannon;\n        if (component) {\n            component.init(grid, color, layoutGrass, origin, direction, hitOrigin);\n            return component;\n        }\n        return null;\n    }\n    onDestroy() {\n        super.onDestroy();\n        this._aliveArea = null;\n        this._lastCellPostion = null;\n    }\n    public init(grid: GridBase,\n        color: EntityColor,\n        layoutGrass: boolean,\n        origin: cc.Vec2,\n        direction: cc.Vec2,\n        hitOrigin: boolean) {\n\n        super.initFlyer(grid, FlyerType.Cannon);\n        this.setEntityColor(color)\n        this.setLayourGrass(layoutGrass);\n        this.setOrigin(origin);\n        this.setDirection(direction);\n        this._speed = 0;\n        this._lastCellPostion = cc.v2(-1, -1);\n        this._hitOrigin = hitOrigin;\n        this._launched = false;\n        this._startFly = false;\n\n        this._aliveArea = cc.rect(-2000, -2000,\n            4000, 4000);\n    }\n\n}\n","import UISpriteExt from \"../../../../component/UISpriteExt\";\nimport CurveToAction from \"../../../../extend/action/CurveToAction\";\nimport GridCommand from \"../../commond/GridCommand\";\nimport { CollectionID } from \"../../defines/CollectionID\";\nimport { EntityID } from \"../../defines/EntityID\";\nimport IdentifierManager from \"../../defines/IdentifierManager\";\nimport GridBase from \"../../grid/GridBase\";\nimport EntityPrefabNodePool from \"../EntityPrefabNodePool\";\nimport FlyerBase, { FlyerType } from \"./FlyerBase\";\nimport GameMath from \"../../../../extend/utils/GameMath\";\n\n// Learn TypeScript:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/typescript.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/typescript.html\n// Learn Attribute:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class FlyerChargeEntity extends FlyerBase {\n\n    private _collectionID:CollectionID = CollectionID.None;\n\n    public static create(grid:GridBase, \n                         collectionID:CollectionID, \n                         origin:cc.Vec2,\n                         targetPos:cc.Vec2) : FlyerChargeEntity {\n\n        let className = 'FlyerChargeEntity';\n        let prefabFileName = 'match_scene/prefab/entity/flyer/FlyerChargeEntity';\n        let pool = EntityPrefabNodePool.getInstance();\n        let component = pool.getPrefabNodeWithFileNameAndClassName(prefabFileName, className) as FlyerChargeEntity;\n        if (component) {\n            component.init(grid, collectionID, origin, targetPos); \n            return component;       \n        }\n        return null;\n    }\n    protected init(grid:GridBase, \n                collectionID:CollectionID, \n                origin:cc.Vec2,\n                targetPos:cc.Vec2){\n        super.initFlyer(grid, FlyerType.Charger);\n        this.setOrigin(origin);\n        this.setTargetPos(targetPos);\n        this._collectionID = collectionID;\n        this.updatePuppet();\n    }\n\n    protected updatePuppet():void{\n        let frameName = IdentifierManager.getInstance().getFrameNameFromCollectionID(this._collectionID);\n        let component = this._puppet.getComponent(UISpriteExt)\n        if (component) {\n            component.src = frameName;\n        }\n    }\n    \n    public getCollectionID():CollectionID{\n        return CollectionID.None;\n    }\n\n    public getEntityID():EntityID{\n        return EntityID.FlyerChargeEntity;\n    }\n\n    private _origin:cc.Vec2 = cc.Vec2.ZERO;\n    public getOrigin():cc.Vec2 {\n        return this._origin;\n    }\n    public setOrigin(origin:cc.Vec2) : void {\n        this._origin = origin;\n    }\n\n    private _targetPos:cc.Vec2 = cc.Vec2.ZERO;\n    public getTargetPos():cc.Vec2 {\n        return this._targetPos;\n    }\n    public setTargetPos(target:cc.Vec2) : void {\n        this._targetPos = target;\n    }\n\n    public launch() : void {\n        \n        let startPos = this.getGrid().getPixelPosFromLogicalPos(this._origin);\n        let targetPos = this.getGrid().getPixelPosFromLogicalPos(this._targetPos);\n        let distance = GameMath.getDistance(startPos, targetPos);\n        let speed = 600;\n        let duration = distance / speed;\n\n        this.node.setPosition(startPos);\n        this.getGrid().addObstructs(this);\n        let move = cc.spawn(CurveToAction.create(duration, startPos, targetPos).easing(cc.easeOut(2)),\n                 cc.scaleTo(duration, 0.35))\n        let callback = cc.callFunc(()=>{\n            this.getGrid().dispatchCommand(this._targetPos, GridCommand.Charge(this._collectionID, 1), 0);\n            this.getGrid().removeObstructs(this);\n            this.destoryWithRecycle(true);\n        })\n\n        let action = cc.sequence(move, callback);\n        this.node.runAction(action);\n\n    }\n\n    // LIFE-CYCLE CALLBACKS:\n\n    // onLoad () {}\n\n    start () {\n\n    }\n\n    onDestroy() {\n        super.onDestroy();\n        this._origin = null;\n        this._targetPos = null;\n    }\n}\n","import UISpriteExt from \"../../../../component/UISpriteExt\";\nimport CurveToAction from \"../../../../extend/action/CurveToAction\";\nimport { CollectionID } from \"../../defines/CollectionID\";\nimport { EntityID } from \"../../defines/EntityID\";\nimport IdentifierManager from \"../../defines/IdentifierManager\";\nimport GridBase from \"../../grid/GridBase\";\nimport EntityPrefabNodePool from \"../EntityPrefabNodePool\";\nimport FlyerBase, { FlyerType } from \"./FlyerBase\";\nimport GameMath from \"../../../../extend/utils/GameMath\";\n\n// Learn TypeScript:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/typescript.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/typescript.html\n// Learn Attribute:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class FlyerCollectedEntity extends FlyerBase {\n\n    private _collectionID:CollectionID = CollectionID.None;\n    private _delta:number = 0;\n\n    public static create(grid:GridBase, \n                         collectionID:CollectionID,\n                         delta:number,\n                         origin:cc.Vec2) : FlyerCollectedEntity {\n\n        let className = 'FlyerCollectedEntity';\n        let prefabFileName = 'match_scene/prefab/entity/flyer/FlyerCollectedEntity';\n        let pool = EntityPrefabNodePool.getInstance();\n        let component = pool.getPrefabNodeWithFileNameAndClassName(prefabFileName, className) as FlyerCollectedEntity;\n        if (component) {\n            component.init(grid, collectionID, delta, origin); \n            return component;       \n        }\n        return null;\n    }\n    protected init(grid:GridBase, \n                collectionID:CollectionID,\n                delta:number,\n                origin:cc.Vec2){\n        super.initFlyer(grid, FlyerType.CollectedEntity);\n        this.setOrigin(origin);\n        this._collectionID = collectionID;\n        this._delta = delta;\n        this.updatePuppet();\n    }\n\n    protected updatePuppet():void{\n        let frameName = IdentifierManager.getInstance().getFrameNameFromCollectionID(this._collectionID);\n\n        let component = this._puppet.getComponent(UISpriteExt)\n        if (component) {\n            component.src = frameName;\n        }\n    }\n    \n    public getCollectionID():CollectionID{\n        return CollectionID.None;\n    }\n\n    public getEntityID():EntityID{\n        return EntityID.FlyerCollectedEntity;\n    }\n\n    private _origin:cc.Vec2 = cc.Vec2.ZERO;\n    public getOrigin():cc.Vec2 {\n        return this._origin;\n    }\n    public setOrigin(origin:cc.Vec2) : void {\n        this._origin = origin;\n    }\n\n    public launch() : void {\n        \n        let startPos = this.getGrid().getPixelPosFromLogicalPos(this._origin);\n        let targetWorldPos = this.getGrid().getWorldPosForTarget(this._collectionID);\n        let targetPos = this.getGrid().node.convertToNodeSpaceAR(targetWorldPos);\n        let distance = GameMath.getDistance(startPos, targetPos);\n        let speed = 1000;\n        let duration = distance / speed;\n\n        this.node.setPosition(startPos);\n\n        let move = cc.spawn(CurveToAction.create(duration, startPos, targetPos),\n                 cc.scaleTo(duration, 0.75))\n        let callback = cc.callFunc(()=>{\n            this.getGrid().updateTargetBarUIWithDelta(this._collectionID, this._delta);\n            this.destoryWithRecycle(true);\n        })\n        let action = cc.sequence(move, callback);\n        this.node.runAction(action);\n\n    }\n\n    // LIFE-CYCLE CALLBACKS:\n\n    // onLoad () {}\n\n    start () {\n\n    }\n\n    // update (dt) {}\n\n    onDestroy() {\n        super.onDestroy();\n        this._origin = null;\n    }\n}\n","import IGame from \"../../../../base/IGame\";\nimport { GameCurrencyType } from \"../../../../define/GameCurrencyType\";\nimport GameMath from \"../../../../extend/utils/GameMath\";\nimport { CollectionID } from \"../../defines/CollectionID\";\nimport { EntityID } from \"../../defines/EntityID\";\nimport IdentifierManager from \"../../defines/IdentifierManager\";\nimport GridBase from \"../../grid/GridBase\";\nimport EntityPrefabNodePool from \"../EntityPrefabNodePool\";\nimport FlyerBase, { FlyerType } from \"./FlyerBase\";\nimport CurveToAction from \"../../../../extend/action/CurveToAction\";\n\n// Learn TypeScript:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/typescript.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/typescript.html\n// Learn Attribute:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class FlyerCollectedSupply extends FlyerBase {\n    private _itemID:GameCurrencyType = GameCurrencyType.NoneType;\n    private _delay:number = 0;\n    public getItemID() : GameCurrencyType {\n        return this._itemID;\n    }\n    public setItemID(itemID:GameCurrencyType) {\n        this._itemID = itemID;\n        this.updatePuppet();\n    }\n\n    private _itemAmount:number = 0;\n    public getAmount() : number {\n        return this._itemAmount;\n    }\n    public setAmount(amount:number) {\n        this._itemAmount = amount;\n    }\n\n    public static create(grid:GridBase, \n                         itemID:GameCurrencyType,\n                         itemAmount:number,\n                         origin:cc.Vec2,\n                         delay:number = 0) : FlyerCollectedSupply {\n\n        let className = 'FlyerCollectedSupply';\n        let prefabFileName = 'match_scene/prefab/entity/flyer/FlyerCollectedSupply';\n        let pool = EntityPrefabNodePool.getInstance();\n        let component = pool.getPrefabNodeWithFileNameAndClassName(prefabFileName, className) as FlyerCollectedSupply;\n        if (component) {\n            component.init(grid, itemID, itemAmount, origin, delay); \n            return component;       \n        }\n        return null;\n    }\n    protected init(grid:GridBase, \n                itemID:GameCurrencyType,\n                itemAmount:number,\n                origin:cc.Vec2,\n                delay:number = 0){\n        super.initFlyer(grid, FlyerType.CollectedSupply);\n        this.setOrigin(origin);\n        this.setAmount(itemAmount);\n        this.setItemID(itemID);\n        this._delay = delay;\n    }\n\n    protected updatePuppet():void{\n        \n        let frameName = '';\n        switch (this.getItemID()) {\n            case GameCurrencyType.TrainFood:\n                frameName = 'match_scene/texture/entities/flyers/90202'\n                break;\n            case GameCurrencyType.TrainSoap:\n                frameName = 'match_scene/texture/entities/flyers/90205'\n                break;\n            case GameCurrencyType.TrainEyepatch:\n                frameName = 'match_scene/texture/entities/flyers/90201'\n                break;\n            case GameCurrencyType.TrainHoe:\n                frameName = 'match_scene/texture/entities/flyers/90204'\n                break;\n            case GameCurrencyType.GoldCoin:\n                frameName = 'match_scene/texture/entities/flyers/90203'\n                break;\n            default:\n                break;\n        }\n\n        this.setPuppetSpriteFrameName(frameName);\n            \n        // let component = this._puppet.getComponent(UISpriteExt)\n        // if (component) {\n        //     component.src = frameName;\n        // }\n        \n    }\n    \n    public getCollectionID():CollectionID{\n        return CollectionID.None;\n    }\n\n    public getEntityID():EntityID{\n        return EntityID.FlyerCollectedSupply;\n    }\n\n    private _origin:cc.Vec2 = cc.Vec2.ZERO;\n    public getOrigin():cc.Vec2 {\n        return this._origin;\n    }\n    public setOrigin(origin:cc.Vec2) : void {\n        this._origin = origin;\n    }\n\n    public launch() : void {\n        \n        let startPos = this.getGrid().getPixelPosFromLogicalPos(this._origin);\n        let targetWorldPos = this.getGrid().getWorldPosForSupply(this._itemID);\n        let targetPos = this.getGrid().node.convertToNodeSpaceAR(targetWorldPos);\n        let distance = GameMath.getDistance(startPos, targetPos);\n        let speed = 750;\n        let targetScale = 1.25;\n        let endScale = 1.5;\n        if (this._itemID == GameCurrencyType.GoldCoin) {\n            targetScale = 1.0;\n            endScale = 1.0;\n            speed = 1100;\n        }\n\n        \n        this.getGrid().addFlyerObstructs(this);\n        this.node.setPosition(startPos);\n        this.node.setScale(0);\n        let acitons:cc.FiniteTimeAction[] = []\n        let minRadius = Math.round(this.getGrid().getCellSize().width * 0.75);\n        let maxRadius = Math.round(this.getGrid().getCellSize().width * 1.5);\n        let radius = GameMath.randomInt(minRadius,maxRadius);\n        let angle = GameMath.randomInt(0, 360);\n        let radian =  angle / 180.0 * Math.PI;\n        let jumpTargetPos = cc.v2(startPos.x + radius * Math.cos(radian), startPos.y + radius * Math.sin(radian));\n        \n        if (this._delay > 0) {\n            acitons.push(cc.delayTime(this._delay));\n        }\n        \n        acitons.push(cc.spawn(cc.scaleTo(0.3, targetScale).easing(cc.easeBackOut()),\n                              cc.moveTo(0.3, jumpTargetPos).easing(cc.easeOut(2))));\n        \n        acitons.push(cc.delayTime(0.1));\n        let duration = distance / speed;\n        \n        acitons.push(cc.spawn(CurveToAction.create(duration, jumpTargetPos, targetPos),\n                              cc.scaleTo(duration, endScale)));\n        acitons.push(cc.callFunc(()=>{\n            this.getGrid().updateSupplyBarUIWithDelta(this._itemID, this._itemAmount);\n            IGame.playAudio(IdentifierManager.getInstance().getMatchAudioFilePath('coincollect'));\n            this.getGrid().removeFlyerObstructs(this);\n            this.destoryWithRecycle(true);\n        }));\n  \n        let action = cc.sequence(acitons);\n        this.node.runAction(action);\n    }\n\n    // LIFE-CYCLE CALLBACKS:\n\n    // onLoad () {}\n\n    start () {\n\n    }\n\n    // update (dt) {}\n\n    onDestroy() {\n        super.onDestroy();\n        this._origin = null;\n    }\n}\n","import FlyerBase, { FlyerType } from \"./FlyerBase\";\nimport { EntityID } from \"../../defines/EntityID\";\nimport GridBase from \"../../grid/GridBase\";\nimport EntityPrefabNodePool from \"../EntityPrefabNodePool\";\nimport IGame from \"../../../../base/IGame\";\nimport IdentifierManager from \"../../defines/IdentifierManager\";\n\n// Learn TypeScript:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/typescript.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/typescript.html\n// Learn Attribute:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class FlyerComboWord extends FlyerBase {\n\n    private _comboCount = 0;\n    public static create(grid:GridBase, combo:number, needObstruct:boolean = false, autoRemove:boolean = true):FlyerComboWord{\n\n        let className = 'FlyerComboWord';\n        let prefabFileName = 'match_scene/prefab/entity/flyer/FlyerComboWord';\n        let pool = EntityPrefabNodePool.getInstance();\n        let component = pool.getPrefabNodeWithFileNameAndClassName(prefabFileName, className) as FlyerComboWord;\n        if (component) {\n            component.init(grid, combo, needObstruct, autoRemove); \n            return component;       \n        }\n        return null;\n    }\n\n    public init(grid:GridBase, combo:number, needObstruct:boolean = false, autoRemove:boolean){\n        super.initFlyer(grid, FlyerType.Animation);\n        this._comboCount = combo;\n        this.setAutoRemoveOnFinish(autoRemove);\n        let filePathRoot = 'texture/match/entities/effects/combo_word/';\n        if(this._comboCount < 4) {\n            filePathRoot += 'fresh';\n            IGame.playAudio(IdentifierManager.getInstance().getMatchAudioFilePath('voice_combo1'));\n        }else if(this._comboCount < 5) {\n            filePathRoot += 'sweet';\n            IGame.playAudio(IdentifierManager.getInstance().getMatchAudioFilePath('voice_combo2'));\n        }else if(this._comboCount < 6) {\n            filePathRoot += 'tasty';\n            IGame.playAudio(IdentifierManager.getInstance().getMatchAudioFilePath('voice_combo3'));\n        }else if(this._comboCount < 8) {\n            filePathRoot += 'fantastic';\n            IGame.playAudio(IdentifierManager.getInstance().getMatchAudioFilePath('voice_combo4'));\n        }else {\n            filePathRoot += 'incredible';\n            IGame.playAudio(IdentifierManager.getInstance().getMatchAudioFilePath('voice_combo5'));\n        }\n        this.setPuppetSpriteFrameName(filePathRoot);\n        this._needObstruct = needObstruct;\n    }\n\n    private _needObstruct = false;\n    private _autoRemoveOnFinish:boolean = false;\n    public getAutoRemoveOnFinish():boolean {\n        return this._autoRemoveOnFinish;\n    }\n    public setAutoRemoveOnFinish(auto:boolean) : void {\n        this._autoRemoveOnFinish = auto;\n    }\n\n    public getEntityID() : EntityID {\n        return EntityID.None;\n    }\n\n    public launch() {\n\n        let size = this.getGrid().node.getContentSize();\n        this.node.setPosition(cc.v2(size.width * 0.5, size.height * 0.5 + 60));\n\n        if (this._needObstruct) {\n            this.getGrid().addObstructs(this);\n        }\n        let state = this.playAnimation('default');\n        if (this._autoRemoveOnFinish) {\n            if (state) {\n                let action = cc.sequence(cc.delayTime(state.duration), cc.callFunc(()=>{\n                    this.getGrid().removeObstructs(this);\n                    this.destoryWithRecycle(true);\n                }));\n                this.runAction(action);\n            }else{\n                this.getGrid().removeObstructs(this);\n                this.destoryWithRecycle(true);\n            }\n        }\n    }\n}\n","import IGame from \"../../../../base/IGame\";\nimport GameMath from \"../../../../extend/utils/GameMath\";\nimport GridCommand from \"../../commond/GridCommand\";\nimport { EntityColor, EntityID, EntityIDManager, EntityType } from \"../../defines/EntityID\";\nimport IdentifierManager from \"../../defines/IdentifierManager\";\nimport GridBase from \"../../grid/GridBase\";\nimport EntityPrefabNodePool from \"../EntityPrefabNodePool\";\nimport FlyerBase, { FlyerType } from \"./FlyerBase\";\nimport FlyerAnimation, { FlyerAnimationType } from \"./FlyerAnimation\";\nimport EntityBase from \"../EntityBase\";\nimport CellBase from \"../cell/CellBase\";\n\nconst { ccclass, property } = cc._decorator;\n\n@ccclass\nexport default class FlyerFireworksMissile extends FlyerBase {\n\n    private static maxSpeed: number = 1000;\n    private static maxForce: number = 5000;\n    private static maxCentrifugalForce: number = FlyerFireworksMissile.maxForce\n    private static startCentrifugalForce: number = 800\n\n\n    private _layoutGrass: boolean = false;\n    private _launched: boolean = false;\n\n\n    private _currentMaxCentrifugalForce: number = 0;\n    private _targetPos: cc.Vec2 = cc.v2(0, 0);\n    private _targetLogicalPos: cc.Vec2 = cc.v2(0, 0);\n    private _velocity: cc.Vec2 = cc.v2(0, 0);\n    private setVelocity(velocity: cc.Vec2) {\n        this._velocity = velocity\n        if (this._velocity.mag() > 0.000001) {\n            let angle = GameMath.getAngle(cc.v2(0, 100), this._velocity, cc.v2(0, 100), true)\n            this._puppet.angle = -angle\n        }\n    }\n\n    public static create(grid: GridBase, layoutGrass: boolean): FlyerFireworksMissile {\n        let className = 'FlyerFireworksMissile';\n        let filePath = 'match_scene/prefab/entity/flyer/FlyerFireworksMissile';\n        let prefabFileName = filePath;\n        let pool = EntityPrefabNodePool.getInstance();\n        let component = pool.getPrefabNodeWithFileNameAndClassName(prefabFileName, className) as FlyerFireworksMissile;\n        if (component) {\n            component.init(grid, layoutGrass);\n            return component;\n        }\n        return null;\n    }\n\n    public init(grid: GridBase, layoutGrass: boolean) {\n        super.initFlyer(grid, FlyerType.FireworksMissile);\n        this._layoutGrass = layoutGrass;\n        this._launched = false;\n    }\n\n    public getEntityID(): EntityID {\n        return EntityID.FlyerFireworks;\n    }\n\n    protected getAttackPos(color: EntityColor, layoutGrass: boolean): cc.Vec2 {\n\n        let targetPos = cc.v2(-1, -1);\n        let targetPriority = EntityBase.DEFAULT_FIREWORKS_ATTACKED_PRIORITY;\n        let grid = this.getGrid();\n        let entityTypes: EntityType[] = [\n            EntityType.Parasite,\n            EntityType.Item,\n            EntityType.Rug,\n            EntityType.Floor,\n            EntityType.Popsicle,\n            EntityType.Cell,\n        ];\n\n        let cellsMap = grid.getCellsMap();\n        let checkPositions: cc.Vec2[] = [];\n        let attackedPositions = grid.getAttackedPosition();\n        for (let key in cellsMap) {\n            let cell = cellsMap[key] as CellBase;\n            let checkPos = cell.getLogicalPos();\n            if (GameMath.indexOf(attackedPositions, checkPos) == -1) {\n                checkPositions.push(checkPos);\n            }\n        }\n        GameMath.shuffleArray(checkPositions);\n        for (let checkPos of checkPositions) {\n            if (GameMath.indexOf(attackedPositions, checkPos) == -1) {\n                let minPriority = EntityBase.DEFAULT_FIREWORKS_ATTACKED_PRIORITY;\n\n                let canAttackTop = false;\n                for (let entityType of entityTypes) {\n                    let entity = grid.getEntity(entityType, checkPos);\n                    if (entity) {\n\n                        if (entityType == EntityType.Parasite || entityType == EntityType.Item) {\n                            if (entity.canExcuteCommand(GridCommand.BombClean(this.getLogicalPos(), color, layoutGrass))) {\n                                canAttackTop = true;\n                            }\n                        } else {\n                            canAttackTop = true;\n                        }\n\n                        if (canAttackTop) {\n                            let butterflyPriority = entity.getFireWorksAttackedPriority();\n                            if (butterflyPriority < minPriority) {\n                                minPriority = butterflyPriority;\n                            }\n                        } else {\n                            break;\n                        }\n                    }\n                }\n                if (canAttackTop) {\n                    if (minPriority < targetPriority) {\n                        targetPriority = minPriority;\n                        targetPos = checkPos;\n                    }\n                }\n            }\n        }\n\n        if (targetPriority >= EntityBase.DEFAULT_FIREWORKS_ATTACKED_PRIORITY || targetPos.equals(cc.v2(-1, -1))) {\n            targetPos = super.getAttackPos(color, layoutGrass);\n        }\n\n        return targetPos;\n    }\n\n    public launch() {\n        if (this._launched) {\n            return;\n        }\n\n        this._launched = true;\n        IGame.playAudio(IdentifierManager.getInstance().getMatchAudioFilePath('fireworks'));\n        let grid = this.getGrid();\n        this._targetLogicalPos = this.getAttackPos(this.getEntityColor(), this._layoutGrass);\n        this._targetPos = grid.getPixelPosFromLogicalPos(this._targetLogicalPos);\n\n        let offsets: cc.Vec2[] = [\n            cc.v2(0, 0),\n            cc.v2(0, 1),\n            cc.v2(0, -1),\n            cc.v2(1, 0),\n            cc.v2(-1, 0),\n        ];\n        for (let offset of offsets) {\n            let attackPos = this._targetLogicalPos.add(offset)\n            grid.recordAttackedPosition(attackPos);\n        }\n        grid.addObstructs(this);\n\n        this.setVelocity(cc.v2(0, FlyerFireworksMissile.maxSpeed))\n        this._currentMaxCentrifugalForce = FlyerFireworksMissile.startCentrifugalForce\n    }\n\n\n    update(dt) {\n        if (this._launched == false) {\n            return;\n        }\n\n        this._currentMaxCentrifugalForce = Math.min(\n            FlyerFireworksMissile.maxCentrifugalForce,\n            (FlyerFireworksMissile.maxCentrifugalForce - FlyerFireworksMissile.startCentrifugalForce) * dt + this._currentMaxCentrifugalForce\n        )\n\n        let offset = this._targetPos.sub(this.node.getPosition());\n        let grid = this.getGrid()\n        let cellSize = grid.getCellSize()\n        if (offset.mag() < cellSize.width * 0.5) {\n\n            let flyer = FlyerAnimation.createAnimationWithType(grid, FlyerAnimationType.BombCross, true)\n            grid.setFlyerAtLogicalPos(flyer, this._targetLogicalPos);\n\n            let offsets: cc.Vec2[] = [\n                cc.v2(0, 0),\n                cc.v2(0, 1),\n                cc.v2(0, -1),\n                cc.v2(1, 0),\n                cc.v2(-1, 0),\n            ];\n\n            for (let offset of offsets) {\n                let attackPos = this._targetLogicalPos.add(offset)\n                grid.dispatchCommand(attackPos, GridCommand.BombClean(attackPos, EntityColor.None, this._layoutGrass), 0);\n                grid.highlightedCell(this._targetLogicalPos);\n                grid.bombCell(attackPos);\n            }\n            grid.removeObstructs(this);\n            this.destoryWithRecycle(false);\n        }\n\n        let desireVelocity = offset.normalize().mul(FlyerFireworksMissile.maxSpeed)\n        let desireForce = desireVelocity.sub(this._velocity).mul(60)\n        let accelerateShadow = (this._velocity.x * desireForce.x + this._velocity.y * desireForce.y) / this._velocity.mag()\n        let accelerateForce = this._velocity.normalize().mul(accelerateShadow)\n        let centrifugalForce = desireForce.sub(accelerateForce)\n\n        if (centrifugalForce.mag() > this._currentMaxCentrifugalForce) {\n            desireForce = desireForce.mul(this._currentMaxCentrifugalForce / centrifugalForce.mag())\n        }\n        let force = desireForce.normalize().mul(Math.min(FlyerFireworksMissile.maxForce, desireForce.mag()))\n        let acceleration = force\n\n        let newVelocity = this._velocity.add(acceleration.mul(dt))\n        let speed = Math.min(newVelocity.mag(), FlyerFireworksMissile.maxSpeed)\n        this.setVelocity(newVelocity.normalize().mul(speed))\n        this.node.setPosition(this.node.getPosition().add(this._velocity.mul(dt)))\n    }\n}\n","import FlyerBase, { FlyerType } from \"./FlyerBase\";\nimport { ItemBombType } from \"../item/color/bomb/ItemBombBase\";\nimport { EntityID, EntityColor } from \"../../defines/EntityID\";\nimport IGame from \"../../../../base/IGame\";\nimport IdentifierManager from \"../../defines/IdentifierManager\";\nimport GridBase from \"../../grid/GridBase\";\nimport GridCommand from \"../../commond/GridCommand\";\nimport { GameCurrencyType } from \"../../../../define/GameCurrencyType\";\nimport EntityPrefabNodePool from \"../EntityPrefabNodePool\";\n\n// Learn TypeScript:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/typescript.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/typescript.html\n// Learn Attribute:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class FlyerHammer extends FlyerBase {\n\n    public static create(grid:GridBase, targetPos:cc.Vec2):FlyerHammer{\n\n        let className = 'FlyerHammer';\n        let prefabFileName = 'match_scene/prefab/entity/flyer/FlyerHammer';\n        let pool = EntityPrefabNodePool.getInstance();\n        let component = pool.getPrefabNodeWithFileNameAndClassName(prefabFileName, className) as FlyerHammer;\n        if (component) {\n            component.init(grid, targetPos); \n            return component;       \n        }\n        return null;\n    }\n\n    public init(grid:GridBase, targetPos:cc.Vec2){\n        super.initFlyer(grid, FlyerType.Hammer);\n        this._targetPos = targetPos;\n        this._launched = false;\n    }\n    \n    private _targetPos:cc.Vec2 = cc.Vec2.ZERO;\n    private _launched:boolean = false;\n    public getEntityID():EntityID {\n        return EntityID.FlyerHammer;\n    }\n\n    public launch() {\n        if (this._launched) {\n            return;\n        }\n        this._launched = true;\n        let worldPos = this.getGrid().getWorldPosForGear(GameCurrencyType.AidHammer);\n        let nodePos = this.getGrid().node.convertToNodeSpaceAR(worldPos);\n        this.node.setPosition(nodePos);\n        \n        let grid = this.getGrid();\n        let targetPixelPos = grid.getPixelPosFromLogicalPos(this._targetPos);\n        grid.addObstructs(this);\n        \n        let action = cc.sequence(cc.moveTo(0.33, targetPixelPos),\n                                 cc.callFunc(()=>{\n                                    let state = this.playAnimation('default');\n                                    if (state) {\n                                        let action = cc.sequence(cc.delayTime(state.duration),\n                                                                 cc.callFunc(()=>{\n                                                                     grid.removeObstructs(this)\n                                                                     this.destoryWithRecycle(true);\n                                                                    }))\n                                        this.runAction(action);\n                                    }else{\n                                        grid.removeObstructs(this)\n                                        this.destoryWithRecycle(true);\n                                    }\n                                 }));\n        this.runAction(action);\n        \n    }\n\n    private onHitted() {\n        IGame.playAudio(IdentifierManager.getInstance().getMatchAudioFilePath('prop_hammer'));    \n        this.getGrid().dispatchCommand(this._targetPos, \n                                       GridCommand.BombClean(this._targetPos, EntityColor.None, false),\n                                       0);\n    }\n\n    onDestroy() {\n        super.onDestroy();\n        this._targetPos = null;\n    }\n}\n","import { EntityColor, EntityID } from \"../../defines/EntityID\";\nimport GridBase from \"../../grid/GridBase\";\nimport { ItemBombType } from \"../item/color/bomb/ItemBombBase\";\nimport ItemBombRainbow from \"../item/color/bomb/ItemBombRainbow\";\nimport FlyerBase, { FlyerType } from \"./FlyerBase\";\nimport GameMath from \"../../../../extend/utils/GameMath\";\nimport FlyerBullet from \"./FlyerBullet\";\nimport GridCommand from \"../../commond/GridCommand\";\nimport FlyerAnimation, { FlyerAnimationType } from \"./FlyerAnimation\";\nimport EntityPrefabNodePool from \"../EntityPrefabNodePool\";\nimport ItemBase from \"../item/ItemBase\";\n\n// Learn TypeScript:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/typescript.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/typescript.html\n// Learn Attribute:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html\n\nenum FlyerLaserState {\n    None,\n    LockTarget,\n    WaitLastLaser,\n    DestroyTarget,\n};\n\nconst { ccclass, property } = cc._decorator;\n\n@ccclass\nexport default class FlyerLaser extends FlyerBase {\n\n    private _shootOneLaser(duration: number): boolean {\n        let grid = this.getGrid();\n\n        let effectPostions: cc.Vec2[] = [];\n        let itemsMap = grid.getItemsMap();\n\n        for (let key in itemsMap) {\n            let item = itemsMap[key] as ItemBase;\n            if (item.canMatch() && item.getEntityColor() == this._laserColor) {\n                if (GameMath.indexOf(this._targetPositions, item.getLogicalPos()) == -1) {\n                    effectPostions.push(item.getLogicalPos());\n                }\n            }\n        }\n\n        if (effectPostions.length <= 0) {\n            return false;\n        }\n\n        let index = GameMath.randomInt(0, effectPostions.length - 1);\n        let pos = effectPostions[index];\n        this._targetPositions.push(pos);\n\n        let bullet = FlyerBullet.create(grid, duration, this._origin, pos, this._laserColor, this._laserBombType, this._laserLayoutGrass);\n        grid.setFlyerAtLogicalPos(bullet, pos);\n\n        let mark = FlyerAnimation.createAnimationWithType(grid, FlyerAnimationType.ItemMarked, false);\n        grid.setFlyerAtLogicalPos(mark, pos);\n        mark.setVisible(false);\n\n        let showMark = cc.sequence(cc.delayTime(duration),\n            cc.callFunc(() => { mark.setVisible(true) }));\n        mark.runAction(showMark);\n        this._marks.push(mark);\n\n        return true;\n    }\n    private _marks: FlyerBase[] = [];\n    private _targetPositions: cc.Vec2[] = [];\n    private _origin: cc.Vec2 = cc.Vec2.ZERO;\n    private _findTargetInterval: number = 0;\n    private _state: FlyerLaserState = FlyerLaserState.None;\n    private _laserColor: EntityColor = EntityColor.None\n    private _laserBombType: ItemBombType = ItemBombType.None;\n    private _laserLayoutGrass: boolean = false;\n    private _lastLaserDuration: number = 0;\n    private _rainbowItem: ItemBombRainbow = null;\n    private _launched: boolean = false;\n\n    public getEntityID(): EntityID {\n        return EntityID.FlyerLaser;\n    }\n\n    public launch(): void {\n        if (this._launched) {\n            return;\n        }\n        let grid = this.getGrid();\n        let itemsMap = grid.getItemsMap();\n        for (let key in itemsMap) {\n            let item = itemsMap[key] as ItemBase;\n            if (item.canMatch() && item.getEntityColor() == this._laserColor) {\n                grid.recordAttackedPosition(item.getLogicalPos())\n            }\n        }\n\n        this._launched = true;\n        if (this._rainbowItem) {\n            this._rainbowItem.node.setScale(1.2);\n            this._rainbowItem.node.zIndex = GridBase.ZORDER_EFFECT;\n            this._rainbowItem.shiftToEffectLayer();\n        }\n        this._state = FlyerLaserState.LockTarget;\n        this._lastLaserDuration = 0.2;\n        this.getGrid().addObstructs(this);\n    }\n\n    public update(dt): void {\n\n        switch (this._state) {\n            case FlyerLaserState.LockTarget: {\n                let angleDelta = GameMath.clamp(180 + this._targetPositions.length * 30, 180, 3581);\n                this._rainbowItem.node.angle += -(angleDelta * dt);\n                this._findTargetInterval -= dt;\n                if (this._findTargetInterval <= 0) {\n                    let duration = GameMath.clamp(0.5 - this._targetPositions.length * 0.03, 0.2, 0.5);\n                    let interval = GameMath.clamp(0.2 - this._targetPositions.length * 0.015, 0.05, 0.2);\n                    this._lastLaserDuration = duration;\n                    this._findTargetInterval = interval;\n                    let launched = this._shootOneLaser(duration);\n                    if (!launched) {\n                        this._state = FlyerLaserState.WaitLastLaser;\n                        this._findTargetInterval += this._lastLaserDuration;\n                    }\n                }\n            }\n                break;\n            case FlyerLaserState.WaitLastLaser: {\n                let angleDelta = GameMath.clamp(180 + this._targetPositions.length * 30, 180, 3581);\n                this._rainbowItem.node.angle += -(angleDelta * dt);\n                this._findTargetInterval -= dt;\n                if (this._findTargetInterval <= 0) {\n                    this._rainbowItem.runAction(cc.rotateBy(1, angleDelta).repeatForever());\n                    this._state = FlyerLaserState.DestroyTarget;\n                }\n\n            }\n                break;\n            case FlyerLaserState.DestroyTarget: {\n                this._state = FlyerLaserState.None;\n                let grid = this.getGrid();\n                for (let mark of this._marks) {\n                    mark.destoryWithRecycle(true);\n                }\n                this._marks.length = 0;\n\n                this._rainbowItem.excuteCommand(GridCommand.SuicideClean(this._origin, EntityColor.None, this._laserLayoutGrass));\n                for (let checkPos of this._targetPositions) {\n                    grid.dispatchCommand(checkPos, GridCommand.MatchClean(checkPos, 0, this._laserLayoutGrass), 0);\n                    grid.highlightedCell(checkPos);\n                    grid.bombCell(checkPos);\n                }\n\n                grid.removeObstructs(this);\n                this.destoryWithRecycle(true);\n            }\n                break;\n            default:\n                break;\n        }\n    }\n\n    public static create(grid: GridBase,\n        rainbow: ItemBombRainbow,\n        origin: cc.Vec2,\n        color: EntityColor,\n        type: ItemBombType,\n        layoutGrass: boolean): FlyerLaser {\n\n        let className = 'FlyerLaser';\n        let prefabFileName = 'match_scene/prefab/entity/flyer/FlyerLaser';\n        let pool = EntityPrefabNodePool.getInstance();\n        let component = pool.getPrefabNodeWithFileNameAndClassName(prefabFileName, className) as FlyerLaser;\n        if (component) {\n            component.init(grid, rainbow, origin, color, type, layoutGrass);\n            return component;\n        }\n        return null;\n    }\n\n    protected init(grid: GridBase, rainbow: ItemBombRainbow, origin: cc.Vec2, color: EntityColor, type: ItemBombType, layoutGrass: boolean) {\n        super.initFlyer(grid, FlyerType.Laser);\n        this._marks.length = 0;\n        this._targetPositions.length = 0;\n        this._findTargetInterval = 0;\n        this._state = FlyerLaserState.None;\n        this._lastLaserDuration = 0;\n        this._rainbowItem = rainbow;\n        this._origin = origin;\n        this._laserColor = color;\n        this._laserBombType = type;\n        this._laserLayoutGrass = layoutGrass;\n        this._launched = false;\n    }\n    // LIFE-CYCLE CALLBACKS:\n\n    // onLoad () {}\n\n    start() {\n\n    }\n\n    // update (dt) {}\n\n    onDestroy() {\n        super.onDestroy();\n        this._marks = null;\n        this._targetPositions = null;\n        this._origin = null;\n        this._rainbowItem = null;\n    }\n}\n","import IGame from \"../../../../base/IGame\";\nimport { Pair } from \"../../../../base/Pair\";\nimport OrbitTrack from \"../../../../extend/action/OrbitTrack\";\nimport GameMath from \"../../../../extend/utils/GameMath\";\nimport GridCommand from \"../../commond/GridCommand\";\nimport { EntityColor, EntityID, EntityType } from \"../../defines/EntityID\";\nimport IdentifierManager from \"../../defines/IdentifierManager\";\nimport GridBase from \"../../grid/GridBase\";\nimport EntityPrefabNodePool from \"../EntityPrefabNodePool\";\nimport FlyerBase, { FlyerType } from \"./FlyerBase\";\nimport FlyerBomb from \"./FlyerBomb\";\nimport FlyerCannon from \"./FlyerCannon\";\nimport EntityBase from \"../EntityBase\";\nimport CellBase from \"../cell/CellBase\";\n\n// Learn TypeScript:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/typescript.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/typescript.html\n// Learn Attribute:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html\n\nexport enum FlyerMissileType {\n    None,\n    Dot,\n    Row,\n    Column,\n    Cross,\n    Range,\n}\n\nconst { ccclass, property } = cc._decorator;\n\n@ccclass\nexport default class FlyerMissile extends FlyerBase {\n\n    private _missileType: FlyerMissileType = FlyerMissileType.None;\n    private _layoutGrass: boolean = false;\n    private _launched: boolean = false;\n\n    public getEntityID(): EntityID {\n        let result = EntityID.None;\n        switch (this.getEntityColor()) {\n            case EntityColor.Red:\n                result = EntityID.FlyerMissileRed;\n                break;\n            case EntityColor.Green:\n                result = EntityID.FlyerMissileGreen;\n                break;\n            case EntityColor.Blue:\n                result = EntityID.FlyerMissileBlue;\n                break;\n            case EntityColor.Yellow:\n                result = EntityID.FlyerMissileYellow;\n                break;\n            case EntityColor.Orange:\n                result = EntityID.FlyerMissileOrange;\n                break;\n            case EntityColor.Purple:\n                result = EntityID.FlyerMissilePurple;\n                break;\n\n            default:\n                break;\n        }\n        return result;\n    }\n\n    public static create(grid: GridBase, missileType: FlyerMissileType, color: EntityColor, layoutGrass: boolean): FlyerMissile {\n\n\n        let filePath = 'match_scene/prefab/entity/flyer/FlyerMissile';\n        switch (color) {\n            case EntityColor.Red:\n                filePath += 'Red';\n                break;\n            case EntityColor.Green:\n                filePath += 'Green';\n                break;\n            case EntityColor.Blue:\n                filePath += 'Blue';\n                break;\n            case EntityColor.Yellow:\n                filePath += 'Yellow';\n                break;\n            case EntityColor.Orange:\n                filePath += 'Orange';\n                break;\n            case EntityColor.Purple:\n                filePath += 'Purple';\n                break;\n            case EntityColor.None:\n                filePath += 'White';\n                break;\n\n            default:\n                break;\n        }\n\n        let className = 'FlyerMissile';\n        let prefabFileName = filePath;\n        let pool = EntityPrefabNodePool.getInstance();\n        let component = pool.getPrefabNodeWithFileNameAndClassName(prefabFileName, className) as FlyerMissile;\n        if (component) {\n            component.init(grid, missileType, color, layoutGrass);\n            return component;\n        }\n        return null;\n    }\n\n    public init(grid: GridBase, missileType: FlyerMissileType, color: EntityColor, layoutGrass: boolean) {\n        super.initFlyer(grid, FlyerType.Missile);\n        this.setEntityColor(color);\n        this._missileType = missileType;\n        this._layoutGrass = layoutGrass;\n        this._launched = false;\n    }\n\n    protected getAttackPos(color: EntityColor, layoutGrass: boolean): cc.Vec2 {\n\n        let targetPos = cc.v2(-1, -1);\n        let targetPriority = EntityBase.DEFAULT_MISSILE_PRIORITY;\n        let grid = this.getGrid();\n        let entityTypes: EntityType[] = [\n            EntityType.Item,\n        ];\n\n        let cellsMap = grid.getCellsMap();\n        let checkPositions: cc.Vec2[] = [];\n        let attackedPositions = grid.getAttackedPosition();\n        for (let key in cellsMap) {\n            let cell = cellsMap[key] as CellBase;\n            let checkPos = cell.getLogicalPos();\n            if (GameMath.indexOf(attackedPositions, checkPos) == -1) {\n                checkPositions.push(checkPos);\n            }\n        }\n        GameMath.shuffleArray(checkPositions);\n        for (let checkPos of checkPositions) {\n            if (GameMath.indexOf(attackedPositions, checkPos) == -1) {\n                let minPriority = EntityBase.DEFAULT_MISSILE_PRIORITY;\n\n                let canAttackTop = false;\n                for (let entityType of entityTypes) {\n                    let entity = grid.getEntity(entityType, checkPos);\n                    if (entity) {\n\n                        if (entityType == EntityType.Parasite || entityType == EntityType.Item) {\n                            if (entity.canExcuteCommand(GridCommand.BombClean(this.getLogicalPos(), color, layoutGrass))) {\n                                canAttackTop = true;\n                            }\n                        } else {\n                            canAttackTop = true;\n                        }\n\n                        if (canAttackTop) {\n                            let butterflyPriority = entity.getMissileAttackedPriority();\n                            if (butterflyPriority < minPriority) {\n                                minPriority = butterflyPriority;\n                            }\n                        } else {\n                            break;\n                        }\n                    }\n                }\n                if (canAttackTop) {\n                    if (minPriority < targetPriority) {\n                        targetPriority = minPriority;\n                        targetPos = checkPos;\n                    }\n                }\n            }\n        }\n\n        if (targetPriority >= EntityBase.DEFAULT_MISSILE_PRIORITY || targetPos.equals(cc.v2(-1, -1))) {\n            targetPos = super.getAttackPos(color, layoutGrass);\n        }\n\n        return targetPos;\n    }\n\n    public launch() {\n        if (this._launched) {\n            return;\n        }\n\n        this._launched = true;\n        IGame.playAudio(IdentifierManager.getInstance().getMatchAudioFilePath('eliminate_special_cube'));\n        let grid = this.getGrid();\n        let targetPos = this.getAttackPos(this.getEntityColor(), this._layoutGrass);\n        let targetPixelPos = grid.getPixelPosFromLogicalPos(targetPos);\n        grid.addObstructs(this);\n        this._puppet.angle = -45;\n        let speed = 1100;\n        let acceleration = 2.0;\n        let cellSize = grid.getCellSize();\n        let radius = GameMath.randomInt(cellSize.width, cellSize.width * 1.5);\n\n        let actions: cc.FiniteTimeAction[] = [];\n        let state = this.playAnimation('default');\n        if (state) {\n            actions.push(cc.delayTime(state.duration));\n        }\n\n        let move: cc.ActionInterval = OrbitTrack.createWithSpeed(speed, this.node.getPosition(), targetPixelPos, cc.v2(1, 1), radius, true).easing(cc.easeIn(acceleration));\n        let scaleAction = cc.sequence(cc.scaleTo(move.getDuration() * 0.25, 1.2).easing(cc.easeIn(2)),\n            cc.delayTime(move.getDuration() * 0.5),\n            cc.scaleTo(move.getDuration() * 0.25, 1.0).easing(cc.easeOut(2)));\n        actions.push(cc.spawn(move, scaleAction));\n\n        let attackCallBack: cc.ActionInstant = null;\n        let gridSize = grid.getGridSize();\n        switch (this._missileType) {\n            case FlyerMissileType.Dot: {\n                grid.recordAttackedPosition(targetPos);\n                attackCallBack = cc.callFunc(() => {\n                    IGame.playAudio(IdentifierManager.getInstance().getMatchAudioFilePath('eliminate_special_cube2'));\n                    grid.dispatchCommand(targetPos, GridCommand.BombClean(targetPos, this.getEntityColor(), this._layoutGrass), 0);\n                })\n            }\n                break;\n            case FlyerMissileType.Row: {\n                let rayDirections: Pair<cc.Vec2, boolean>[] = [\n                    new Pair<cc.Vec2, boolean>(cc.v2(1, 0), true),\n                    new Pair<cc.Vec2, boolean>(cc.v2(-1, 0), false),\n                ];\n\n                for (let raydirection of rayDirections) {\n                    let willAttackPos = targetPos.clone();\n                    let direction = raydirection.first;\n                    let validLogicalRect = cc.rect(0, 0, gridSize.width, gridSize.height);\n                    while (1) {\n                        if (!GameMath.rectContainsPoint(validLogicalRect, willAttackPos)) {\n                            break;\n                        }\n                        grid.recordAttackedPosition(willAttackPos.clone());\n                        willAttackPos.addSelf(direction);\n                    }\n                }\n\n                attackCallBack = cc.callFunc(() => {\n                    IGame.playAudio(IdentifierManager.getInstance().getMatchAudioFilePath('eliminate_special_line'));\n                    let grid = this.getGrid();\n                    for (let ray of rayDirections) {\n                        let cannon = FlyerCannon.create(grid, this.getEntityColor(), this._layoutGrass, targetPos, ray.first, ray.second);\n                        grid.setFlyerAtLogicalPos(cannon, targetPos);\n                    }\n                })\n            }\n                break;\n            case FlyerMissileType.Column: {\n                let rayDirections: Pair<cc.Vec2, boolean>[] = [\n                    new Pair<cc.Vec2, boolean>(cc.v2(0, 1), true),\n                    new Pair<cc.Vec2, boolean>(cc.v2(0, -1), false),\n                ];\n                for (let raydirection of rayDirections) {\n                    let willAttackPos = targetPos.clone();\n                    let direction = raydirection.first;\n                    let validLogicalRect = cc.rect(0, 0, gridSize.width, gridSize.height);\n                    while (1) {\n                        if (!GameMath.rectContainsPoint(validLogicalRect, willAttackPos)) {\n                            break;\n                        }\n                        grid.recordAttackedPosition(willAttackPos.clone());\n                        willAttackPos.addSelf(direction);\n                    }\n                }\n                attackCallBack = cc.callFunc(() => {\n                    IGame.playAudio(IdentifierManager.getInstance().getMatchAudioFilePath('eliminate_special_line'));\n                    let grid = this.getGrid();\n                    for (let ray of rayDirections) {\n                        let cannon = FlyerCannon.create(grid, this.getEntityColor(), this._layoutGrass, targetPos, ray.first, ray.second);\n                        grid.setFlyerAtLogicalPos(cannon, targetPos);\n                    }\n                })\n\n\n            }\n                break;\n            case FlyerMissileType.Cross: {\n                let rayDirections: Pair<cc.Vec2, boolean>[] = [\n                    new Pair<cc.Vec2, boolean>(cc.v2(1, 1), true),\n                    new Pair<cc.Vec2, boolean>(cc.v2(-1, -1), false),\n                    new Pair<cc.Vec2, boolean>(cc.v2(1, -1), false),\n                    new Pair<cc.Vec2, boolean>(cc.v2(-1, 1), false),\n                ];\n                for (let raydirection of rayDirections) {\n                    let willAttackPos = targetPos.clone();\n                    let direction = raydirection.first;\n                    let validLogicalRect = cc.rect(0, 0, gridSize.width, gridSize.height);\n                    while (1) {\n                        if (!GameMath.rectContainsPoint(validLogicalRect, willAttackPos)) {\n                            break;\n                        }\n                        grid.recordAttackedPosition(willAttackPos.clone());\n                        willAttackPos.addSelf(direction);\n                    }\n                }\n                attackCallBack = cc.callFunc(() => {\n                    IGame.playAudio(IdentifierManager.getInstance().getMatchAudioFilePath('eliminate_special_cross'));\n                    let grid = this.getGrid();\n                    for (let ray of rayDirections) {\n                        let cannon = FlyerCannon.create(grid, this.getEntityColor(), this._layoutGrass, targetPos, ray.first, ray.second);\n                        grid.setFlyerAtLogicalPos(cannon, targetPos);\n                    }\n                })\n            }\n                break;\n            case FlyerMissileType.Range: {\n                let willAttackPositions = GameMath.enumerateRingPos(targetPos, 0, 2);\n                for (let pos of willAttackPositions) {\n                    this.getGrid().recordAttackedPosition(pos);\n                }\n                attackCallBack = cc.callFunc(() => {\n                    IGame.playAudio(IdentifierManager.getInstance().getMatchAudioFilePath('eliminate_special_bomb'));\n                    let bomb = FlyerBomb.create(grid, this.getEntityColor(), this._layoutGrass, targetPos, 2);\n                    grid.setFlyerAtLogicalPos(bomb, targetPos);\n                })\n            }\n                break;\n        }\n        if (attackCallBack) {\n            actions.push(attackCallBack);\n        }\n        let destoryCallBack: cc.ActionInstant = cc.callFunc(() => {\n            grid.highlightedCell(targetPos);\n            grid.bombCell(targetPos);\n            grid.removeObstructs(this);\n            this.destoryWithRecycle(false);\n        });\n        actions.push(destoryCallBack);\n        this.runAction(cc.sequence(actions));\n    }\n}\n","import FlyerBase, { FlyerType } from \"./FlyerBase\";\nimport GridBase from \"../../grid/GridBase\";\nimport EntityPrefabNodePool from \"../EntityPrefabNodePool\";\nimport { CollectionID } from \"../../defines/CollectionID\";\nimport { EntityID } from \"../../defines/EntityID\";\nimport GameMath from \"../../../../extend/utils/GameMath\";\n\n// Learn TypeScript:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/typescript.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/typescript.html\n// Learn Attribute:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class FlyerMoreStep extends FlyerBase {\n\n    @property(cc.Label)\n    amountLabel:cc.Label = null;\n\n    private _extraStep:number = 0;\n    public static create(grid:GridBase, \n                         stepAmout:number,\n                         origin:cc.Vec2) : FlyerMoreStep {\n\n        let className = 'FlyerMoreStep';\n        let prefabFileName = 'match_scene/prefab/entity/flyer/FlyerMoreStep';\n        let pool = EntityPrefabNodePool.getInstance();\n        let component = pool.getPrefabNodeWithFileNameAndClassName(prefabFileName, className) as FlyerMoreStep;\n        if (component) {\n            component.init(grid, stepAmout, origin); \n            return component;       \n        }\n        return null;\n    }\n    protected init(grid:GridBase, \n                stepAmout:number,\n                origin:cc.Vec2){\n        super.initFlyer(grid, FlyerType.MoreStep);\n        this.setOrigin(origin);\n        this._extraStep = stepAmout;\n        this.amountLabel.string = '+' + this._extraStep.toString();\n    }\n\n    protected updatePuppet():void{\n        \n    }\n    \n    public getCollectionID():CollectionID{\n        return CollectionID.None;\n    }\n\n    public getEntityID():EntityID{\n        return EntityID.FlyerMoreStep;\n    }\n\n    private _origin:cc.Vec2 = cc.Vec2.ZERO;\n    public getOrigin():cc.Vec2 {\n        return this._origin;\n    }\n    public setOrigin(origin:cc.Vec2) : void {\n        this._origin = origin;\n    }\n\n    public launch() : void {\n        \n        let startPos = this.getGrid().getPixelPosFromLogicalPos(this._origin);\n        let targetWorldPos = this.getGrid().getWorldPosForStep();\n        let targetPos = this.getGrid().node.convertToNodeSpaceAR(targetWorldPos);\n        let distance = GameMath.getDistance(startPos, targetPos);\n        let speed = 1000;\n        let duration = distance / speed;\n\n        this.node.setPosition(startPos);\n\n        let jumpOut = cc.scaleTo(0.3, 2.0).easing(cc.easeBackOut());\n        let move = cc.spawn(cc.moveTo(duration, targetPos),\n                            cc.scaleTo(duration, 0.75))\n        let callback = cc.callFunc(()=>{\n            this.getGrid().updateStepBarUIWithDelta(this._extraStep);\n            this.destoryWithRecycle(true);\n        })\n        let action = cc.sequence(jumpOut, move, callback);\n        this.node.runAction(action);\n    }\n\n    // LIFE-CYCLE CALLBACKS:\n\n    // onLoad () {}\n\n    start () {\n\n    }\n\n    // update (dt) {}\n\n    onDestroy() {\n        super.onDestroy();\n        this.amountLabel = null;\n        this._origin = null;\n    }\n}\n","import FlyerBase, { FlyerType } from \"./FlyerBase\";\nimport { EntityID, EntityColor } from \"../../defines/EntityID\";\nimport GameMath from \"../../../../extend/utils/GameMath\";\nimport GridCommand from \"../../commond/GridCommand\";\nimport GridBase from \"../../grid/GridBase\";\nimport EntityPrefabNodePool from \"../EntityPrefabNodePool\";\nimport IdentifierManager from \"../../defines/IdentifierManager\";\nimport IGame from \"../../../../base/IGame\";\n\n// Learn TypeScript:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/typescript.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/typescript.html\n// Learn Attribute:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html\nexport enum FlyerMowerDirection {\n    Up = 0,\n    Right,\n    Down,\n    Left,\n};\nconst { ccclass, property } = cc._decorator;\n\n@ccclass\nexport default class FlyerMower extends FlyerBase {\n\n    protected static FLYER_MOWER_MIN_SPEED = 500.0;\n    protected static FLYER_MOWER_MAX_SPEED = 2000.0\n    protected static FLYER_MOWER_START_SPEED = 500.0\n    protected static FLYER_MOWER_ACCELERATION = 1000.0\n\n    public static create(grid: GridBase,\n        layoutGrass: boolean,\n        origin: cc.Vec2,\n        direction: FlyerMowerDirection): FlyerMower {\n        let filePath = 'match_scene/prefab/entity/flyer/FlyerMower';\n        let className = 'FlyerMower';\n        let prefabFileName = filePath;\n        let pool = EntityPrefabNodePool.getInstance();\n        let component = pool.getPrefabNodeWithFileNameAndClassName(prefabFileName, className) as FlyerMower;\n        if (component) {\n            component.init(grid, layoutGrass, origin, direction);\n            return component;\n        }\n        return null;\n    }\n    public init(grid: GridBase,\n        layoutGrass: boolean,\n        origin: cc.Vec2,\n        direction: FlyerMowerDirection) {\n        super.initFlyer(grid, FlyerType.Mower);\n        this.setLayourGrass(layoutGrass);\n        this.setOrigin(origin);\n        this.setDirection(direction);\n        this._speed = 0;\n        this._lastCellPostion = cc.v2(-1, -1);\n        this._launched = false;\n        this._startFly = false;\n        this._hadPlayMoveAction = false;\n\n        this._aliveArea = cc.rect(-2000, -2000, 4000, 4000);\n    }\n\n    protected _launched: boolean = false;\n    protected _aliveArea: cc.Rect = cc.rect(0, 0, 0, 0);\n    protected _speed: number = 0;\n    protected _lastCellPostion: cc.Vec2 = cc.Vec2.ZERO;\n    protected _startFly: boolean = false;\n    protected _hadPlayMoveAction: boolean = false;\n\n    public getEntityID(): EntityID {\n        return EntityID.FlyerMower;\n    }\n\n    private _layoutGrass: boolean = false;\n    public getLayoutGrass(): boolean {\n        return this._layoutGrass;\n    }\n    public setLayourGrass(layoutGrass: boolean): void {\n        this._layoutGrass = layoutGrass;\n    }\n\n    private _origin: cc.Vec2 = cc.Vec2.ZERO;\n    public getOrigin(): cc.Vec2 {\n        return this._origin;\n    }\n    public setOrigin(origin: cc.Vec2): void {\n        this._origin = origin;\n    }\n\n    private _direction: FlyerMowerDirection = FlyerMowerDirection.Up;\n    public getDirection(): FlyerMowerDirection {\n        return this._direction;\n    }\n    public setDirection(direction: FlyerMowerDirection): void {\n        this._direction = direction;\n        let stepDirection = this.getStepDirection();\n        let rotation = GameMath.getAngle(cc.Vec2.ZERO, stepDirection);\n        this._puppet.angle = -rotation;\n    }\n    protected getStepDirection(): cc.Vec2 {\n        let result = cc.v2(0, 1);\n        switch (this._direction) {\n            case FlyerMowerDirection.Up:\n                result = cc.v2(0, 1);\n                break;\n            case FlyerMowerDirection.Right:\n                result = cc.v2(1, 0);\n                break;\n            case FlyerMowerDirection.Down:\n                result = cc.v2(0, -1);\n                break;\n            case FlyerMowerDirection.Left:\n                result = cc.v2(-1, 0);\n                break;\n\n            default:\n                break;\n        }\n        return result;\n    }\n\n    public launch() {\n        if (this._launched) {\n            return;\n        }\n        IGame.playAudio(IdentifierManager.getInstance().getMatchAudioFilePath('mower'));\n        let willAttackPos = this._origin.clone();\n        let grid = this.getGrid();\n        let validLogicalRect = cc.rect(0, 0, grid.getGridSize().width, grid.getGridSize().height);\n        while (1) {\n            if (!GameMath.rectContainsPoint(validLogicalRect, willAttackPos)) {\n                break;\n            }\n            grid.recordAttackedPosition(willAttackPos.clone());\n            willAttackPos.addSelf(this.getStepDirection());\n        }\n\n        this._launched = true;\n        this.setOrigin(this.getOrigin());\n        this._lastCellPostion = this._origin;\n\n        this._launched = true;\n        this._speed = FlyerMower.FLYER_MOWER_START_SPEED;\n\n\n        grid.addObstructs(this);\n\n        let state = this.playAnimation('jump');\n        if (state) {\n            let action = cc.sequence(cc.delayTime(state.duration),\n                cc.callFunc(() => {\n                    this._startFly = true;\n                }));\n            this.runAction(action);\n        } else {\n            this._startFly = true;\n        }\n    }\n\n    update(dt) {\n        if (this._launched == false) {\n            return;\n        }\n\n        if (this._startFly == false) {\n            return;\n        }\n\n        if (this._hadPlayMoveAction == false) {\n            this.playAnimation('move');\n            this._hadPlayMoveAction = true;\n        }\n\n        dt = dt * cc.director.getScheduler().getTimeScale();\n        let grid = this.getGrid();\n        let stepDirection = this.getStepDirection();\n        this._speed = GameMath.clamp(this._speed + FlyerMower.FLYER_MOWER_ACCELERATION * dt,\n            FlyerMower.FLYER_MOWER_MIN_SPEED,\n            FlyerMower.FLYER_MOWER_MAX_SPEED);\n\n        let newPosition = this.node.getPosition().add(stepDirection.normalize().mul(this._speed).mul(dt));\n        this.node.setPosition(newPosition);\n        let newCellPos = grid.getLogicalPosFromPixelPos(newPosition);\n\n        if (!newCellPos.equals(this._lastCellPostion)) {\n            let offset = newCellPos.sub(this._lastCellPostion);\n            let count = offset.mag() / stepDirection.mag();\n            for (let i = 0; i < count; i++) {\n                let pos = this._lastCellPostion.add(stepDirection.mul(i + 1));\n\n                let cell = grid.getCellAtLogicalPos(pos);\n                if (cell) {\n                    grid.dispatchCommand(pos, GridCommand.TerminateClean(this.getOrigin(), this.getEntityColor(), this._layoutGrass), 0);\n                    grid.highlightedCell(pos);\n                }\n\n                if (grid.isGrassFloorAtLogicalPos(pos)) {\n                    let item = grid.getItemAtLogicalPos(pos);\n                    if (item) {\n                        if (item.canMatch() && item.canSwap() && item.canLayoutGrass()) {\n                            this._layoutGrass = true;\n                        }\n                    } else {\n                        this._layoutGrass = true;\n                    }\n                }\n            }\n            this._lastCellPostion = newCellPos;\n        }\n\n        if (!GameMath.rectContainsPoint(this._aliveArea, this.node.getPosition())) {\n            grid.removeObstructs(this);\n            this.destoryWithRecycle(false);\n        }\n    }\n\n    onDestroy() {\n        super.onDestroy();\n        this._aliveArea = null;\n        this._lastCellPostion = null;\n        this._origin = null;\n    }\n}\n","import { EntityColor, EntityID } from \"../../defines/EntityID\";\nimport GridBase from \"../../grid/GridBase\";\nimport FlyerBase, { FlyerType } from \"./FlyerBase\";\nimport GameMath from \"../../../../extend/utils/GameMath\";\nimport GridCommand from \"../../commond/GridCommand\";\nimport IGame from \"../../../../base/IGame\";\nimport IdentifierManager from \"../../defines/IdentifierManager\";\nimport EntityPrefabNodePool from \"../EntityPrefabNodePool\";\n\n// Learn TypeScript:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/typescript.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/typescript.html\n// Learn Attribute:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class FlyerNuclear extends FlyerBase {\n\n    private FLYER_NUCLEAR_BOMB_DURATION = 2.0;\n\n    private _shouldLayoutGrass:boolean = false;\n    public getShouldLayoutGrass() : boolean {\n        return this._shouldLayoutGrass;\n    }\n    public setShouldLayoutGrass(shouldLayoutGrass:boolean) : void {\n        this._shouldLayoutGrass = shouldLayoutGrass;\n    }\n    \n    private _origin:cc.Vec2 = cc.Vec2.ZERO;\n    public getOrigin():cc.Vec2 {\n        return this._origin;\n    }\n    public setOrigin(origin:cc.Vec2) : void {\n        this._origin = origin;\n    }\n    \n    private _radius:number = 0;\n    public getRadius():number {\n        return this._radius;\n    }\n    public setRadius(radius:number) : void {\n        this._radius = radius;\n    }\n\n    public getEntityID() : EntityID {\n        return EntityID.FlyerNuclear;\n    }\n\n    private _launched:boolean = false;\n    private _bombDuration:number = 0;\n    private _lastBombRingIndex:number = 0;\n\n    public init(grid:GridBase, \n                layoutGrass:boolean, \n                origin:cc.Vec2, \n                raidus:number) : void{\n        super.initFlyer(grid, FlyerType.NuclearBomb);\n        this.setRadius(raidus);\n        this.setOrigin(origin);\n        this.setEntityColor(EntityColor.None);\n        this.setShouldLayoutGrass(layoutGrass);\n        this._launched = false;\n        this._bombDuration = 0;\n        this._lastBombRingIndex = 0;\n    }\n\n\n    public static create(grid:GridBase, \n                         layoutGrass:boolean, \n                         origin:cc.Vec2, \n                         raidus:number = GridBase.MAX_GRID_HEIGHT + GridBase.MAX_GRID_WIDTH):FlyerNuclear{\n        let className = 'FlyerNuclear';\n        let prefabFileName = 'match_scene/prefab/entity/flyer/FlyerNuclear';\n        let pool = EntityPrefabNodePool.getInstance();\n        let component = pool.getPrefabNodeWithFileNameAndClassName(prefabFileName, className) as FlyerNuclear;\n        if (component) {\n            component.init(grid, layoutGrass, origin, raidus); \n            return component;       \n        }\n        return null;\n    }\n\n    public launch() : void {\n    \n        if (this._launched) {\n            return;\n        }\n        this._launched = true;\n        IGame.playAudio(IdentifierManager.getInstance().getMatchAudioFilePath('eliminate_special_colorcolor'));\n        this._bombDuration = 0;\n        this._lastBombRingIndex = -1;\n        \n        let grid = this.getGrid();\n        grid.addObstructs(this);\n        \n        let size = grid.getGridSize();\n        let conners:cc.Vec2[] = [\n            cc.v2(0,                0),\n            cc.v2(size.width - 1,   0),\n            cc.v2(0,                size.height - 1),\n            cc.v2(size.width - 1,   size.height - 1),\n        ];\n        \n        let maxDistanceSquared = 0;\n\n        let originPixel = grid.getPixelPosFromLogicalPos(this._origin);\n        for (let conner of conners) {\n            let connerPixel = grid.getPixelPosFromLogicalPos(conner);\n            let distanceSquared = GameMath.getDistanceSQ(originPixel, connerPixel);\n            if (distanceSquared > maxDistanceSquared) {\n                maxDistanceSquared = distanceSquared;\n            }\n        }\n        \n        let distance = Math.min(Math.sqrt(maxDistanceSquared), 1270);\n        this.node.setScale(distance / 135);\n\n        let state = this.playAnimation('default');\n        if (state) {\n            let action = cc.sequence(cc.delayTime(state.duration), cc.callFunc(()=>{\n                this.destoryWithRecycle(false);\n            }));\n            this.runAction(action);\n        }\n    }\n    \n\n    update(delta:number):void {\n\n        if (this._launched == false) {\n            return;\n        }\n        this._bombDuration += delta;\n        let currentRingIndex = Math.min(this._radius,  Math.floor(this._radius * this._bombDuration / this.FLYER_NUCLEAR_BOMB_DURATION));\n\n        if (currentRingIndex > this._lastBombRingIndex) {\n            let positions = GameMath.enumerateRingPos(this._origin, this._lastBombRingIndex + 1, currentRingIndex);\n            let grid = this.getGrid();\n            for (let pos of positions) {\n                let cell = grid.getCellAtLogicalPos(pos);\n                if (cell) {\n                    grid.dispatchCommand(pos, GridCommand.BombClean(this._origin, this.getEntityColor(), this._shouldLayoutGrass), 0);\n                    grid.highlightedCell(pos);\n                }\n            }\n            this._lastBombRingIndex = currentRingIndex;\n            if (this._lastBombRingIndex >= this._radius) {\n                grid.removeObstructs(this);\n            }\n        }\n    }\n\n    // LIFE-CYCLE CALLBACKS:\n\n    // onLoad () {}\n\n    start () {\n\n    }\n\n    // update (dt) {}\n\n    onDestroy() {\n        super.onDestroy();\n        this._origin = null;\n    }\n}\n","import FlyerBase, { FlyerType } from \"./FlyerBase\";\nimport GameMath from \"../../../../extend/utils/GameMath\";\nimport GridCommand from \"../../commond/GridCommand\";\nimport GridBase from \"../../grid/GridBase\";\nimport FlyerBomb from \"./FlyerBomb\";\nimport { EntityColor, EntityID } from \"../../defines/EntityID\";\nimport EntityPrefabNodePool from \"../EntityPrefabNodePool\";\n\n// Learn TypeScript:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/typescript.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/typescript.html\n// Learn Attribute:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class FlyerPopsicleBomb extends FlyerBase {\n\n    protected FLYER_BOMB_DURATION = 0.2;\n\n    protected _launched:boolean = false;\n    protected _bombDuration:number = 0;\n    protected _lastBombRingIndex:number = 0;\n    protected _canLayoutGrass:boolean = false;\n    public getCanLayoutGrass():boolean {\n        return this._canLayoutGrass;\n    }\n    public setCanLayoutGrass(canLayoutGrass:boolean) : void {\n        this._canLayoutGrass = canLayoutGrass;\n    }\n\n    private _origin:cc.Vec2 = cc.Vec2.ZERO;\n    public getOrigin():cc.Vec2 {\n        return this._origin;\n    }\n    public setOrigin(origin:cc.Vec2) : void {\n        this._origin = origin;\n    }\n    \n    private _bombPositions:cc.Vec2[] = [];\n\n    public getEntityID() : EntityID {\n        return EntityID.FlyerPopsicelBomb;;\n    }\n\n    \n    public launch() {\n        if (this._launched) {\n            return;\n        }\n        this._launched = true;\n        this._bombDuration = 0\n        this._lastBombRingIndex = -1;\n        this._launched = true;\n        this.getGrid().addObstructs(this);\n\n        \n\n        let state = this.playAnimation('default');\n        if (state) {\n            let action = cc.sequence(cc.delayTime(state.duration), cc.callFunc(()=>{\n                this.getGrid().removeObstructs(this);\n                this.destoryWithRecycle(true);\n            }));\n            this.runAction(action);\n        }\n\n        let grid = this.getGrid();\n        for (let bombPos of this._bombPositions) {\n            let cleanPos = this._origin.add(bombPos)\n            this.getGrid().recordAttackedPosition(cleanPos);\n            grid.dispatchCommand(cleanPos, GridCommand.BombClean(this._origin, this.getEntityColor(), this._canLayoutGrass), 0);\n            grid.highlightedCell(cleanPos);\n        }\n    }\n\n    public static create(grid:GridBase, \n                         color:EntityColor, \n                         origin:cc.Vec2,\n                         layoutGrass:boolean, \n                         bombPostions:cc.Vec2[]):FlyerPopsicleBomb{\n\n        let className = 'FlyerPopsicleBomb';\n        let prefabFileName = 'match_scene/prefab/entity/flyer/FlyerPopsicleBomb';\n        let pool = EntityPrefabNodePool.getInstance();\n        let component = pool.getPrefabNodeWithFileNameAndClassName(prefabFileName, className) as FlyerPopsicleBomb;\n        if (component) {\n            component.init(grid, color, origin, layoutGrass, bombPostions); \n            return component;       \n        }\n        return null;\n    }\n\n    public init(grid:GridBase, \n                color:EntityColor, \n                origin:cc.Vec2,\n                layoutGrass:boolean, \n                bombPostions:cc.Vec2[]){\n        super.initFlyer(grid, FlyerType.Bomb);\n        this.setEntityColor(color)\n        this.setCanLayoutGrass(layoutGrass);\n        this.setOrigin(origin);\n        this._bombPositions = bombPostions;\n        this._launched = false;\n        this._bombDuration = 0;\n        this._lastBombRingIndex = 0;\n        \n    }\n\n    onDestroy() {\n        super.onDestroy();\n        this._origin = null;\n        this._bombPositions = null;\n    }\n}\n","import FlyerCannon from \"./FlyerCannon\";\nimport { EntityID, EntityColor } from \"../../defines/EntityID\";\nimport GridBase from \"../../grid/GridBase\";\nimport FlyerBase, { FlyerType } from \"./FlyerBase\";\nimport GameMath from \"../../../../extend/utils/GameMath\";\nimport GridCommand from \"../../commond/GridCommand\";\nimport EntityPrefabNodePool from \"../EntityPrefabNodePool\";\n\n// Learn TypeScript:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/typescript.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/typescript.html\n// Learn Attribute:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class FlyerPopsicleLine extends FlyerCannon {\n    \n    public getEntityID() : EntityID {\n        return EntityID.FlyerPopsicelLine;;\n    }\n\n    protected updatePuppet():void{\n        \n    }\n    \n    public static create(grid:GridBase, \n                         color:EntityColor,\n                         layoutGrass:boolean, \n                         origin:cc.Vec2, \n                         direction:cc.Vec2, \n                         hitOrigin:boolean):FlyerPopsicleLine{\n\n        let className = 'FlyerPopsicleLine';\n        let prefabFileName = 'match_scene/prefab/entity/flyer/FlyerPopsicleLine';\n        let pool = EntityPrefabNodePool.getInstance();\n        let component = pool.getPrefabNodeWithFileNameAndClassName(prefabFileName, className) as FlyerPopsicleLine;\n        if (component) {\n            component.init(grid, color, layoutGrass, origin, direction, hitOrigin); \n            return component;       \n        }\n        return null;\n    }\n    public init(grid:GridBase, \n                color:EntityColor,\n                layoutGrass:boolean, \n                origin:cc.Vec2, \n                direction:cc.Vec2, \n                hitOrigin:boolean){\n        super.initFlyer(grid, FlyerType.PopsicleLine);\n        this.setEntityColor(EntityColor.None);\n        this.setLayourGrass(layoutGrass);\n        this.setOrigin(origin);\n        this.setDirection(direction);\n        this._hitOrigin = hitOrigin;\n\n        this._speed = 0;\n        this._lastCellPostion = cc.v2(-1, -1);\n        this._aliveArea = cc.rect(-2000, -2000, 4000, 4000);\n        this._launched = false;\n        this._startFly = false;   \n    }\n\n}\n","import GridBase from \"../../grid/GridBase\";\nimport EntityPrefabNodePool from \"../EntityPrefabNodePool\";\nimport FlyerBase, { FlyerType } from \"./FlyerBase\";\nimport { EntityID } from \"../../defines/EntityID\";\nimport CurveToAction from \"../../../../extend/action/CurveToAction\";\n\n// Learn TypeScript:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/typescript.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/typescript.html\n// Learn Attribute:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class FlyerScoreLabel extends FlyerBase {\n\n    private _score = 0;\n    private _pixelPos:cc.Vec2 = cc.v2(0, 0)\n    public static create(grid:GridBase, pixelPos:cc.Vec2, score:number, needObstruct:boolean = false, autoRemove:boolean = true):FlyerScoreLabel{\n\n        let className = 'FlyerScoreLabel';\n        let prefabFileName = 'match_scene/prefab/entity/flyer/FlyerScoreLabel';\n        let pool = EntityPrefabNodePool.getInstance();\n        let component = pool.getPrefabNodeWithFileNameAndClassName(prefabFileName, className) as FlyerScoreLabel;\n        if (component) {\n            component.init(grid, pixelPos, score, needObstruct, autoRemove); \n            return component;       \n        }\n        return null;\n    }\n\n    public init(grid:GridBase, pixelPos:cc.Vec2, score:number, needObstruct:boolean = false, autoRemove:boolean){\n        super.initFlyer(grid, FlyerType.Score);\n        this._score = score;\n        let label = this._puppet.getComponent(cc.Label);\n        if (label) {\n            label.string = this._score.toString();\n        }\n        this._pixelPos = pixelPos;\n        this.setAutoRemoveOnFinish(autoRemove);\n        this._needObstruct = needObstruct;\n    }\n\n    private _needObstruct = false;\n    private _autoRemoveOnFinish:boolean = false;\n    public getAutoRemoveOnFinish():boolean {\n        return this._autoRemoveOnFinish;\n    }\n    public setAutoRemoveOnFinish(auto:boolean) : void {\n        this._autoRemoveOnFinish = auto;\n    }\n\n    public getEntityID() : EntityID {\n        return EntityID.None;\n    }\n\n    public launch() {\n        this.node.setPosition(this._pixelPos);\n        this.getGrid().addFlyerObstructs(this);\n        \n        let duration = 1;\n        let state = this.playAnimation('default');\n        if (state) {\n            duration = state.duration;\n        }\n        let delay = cc.delayTime(duration);\n        let action = cc.sequence(delay,\n                                cc.callFunc(()=>{\n                                    this.getGrid().removeFlyerObstructs(this);\n                                    this.destoryWithRecycle(true);\n                                }));\n        this.runAction(action);\n        \n    }\n}\n","import GridBase from \"../../grid/GridBase\";\nimport EntityPrefabNodePool from \"../EntityPrefabNodePool\";\nimport FlyerBase, { FlyerType } from \"./FlyerBase\";\nimport { EntityID } from \"../../defines/EntityID\";\nimport CurveToAction from \"../../../../extend/action/CurveToAction\";\nimport GameMath from \"../../../../extend/utils/GameMath\";\n\n// Learn TypeScript:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/typescript.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/typescript.html\n// Learn Attribute:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class FlyerScore extends FlyerBase {\n\n    private _score = 0;\n    private _pixelPos:cc.Vec2 = cc.v2(0, 0)\n    public static create(grid:GridBase, pixelPos:cc.Vec2, score:number, needObstruct:boolean = false, autoRemove:boolean = true):FlyerScore{\n\n        let className = 'FlyerScore';\n        let prefabFileName = 'match_scene/prefab/entity/flyer/FlyerScore';\n        let pool = EntityPrefabNodePool.getInstance();\n        let component = pool.getPrefabNodeWithFileNameAndClassName(prefabFileName, className) as FlyerScore;\n        if (component) {\n            component.init(grid, pixelPos, score, needObstruct, autoRemove); \n            return component;       \n        }\n        return null;\n    }\n\n    public init(grid:GridBase, pixelPos:cc.Vec2, score:number, needObstruct:boolean = false, autoRemove:boolean){\n        super.initFlyer(grid, FlyerType.Score);\n        this._score = score;\n        this._pixelPos = pixelPos;\n        this.setAutoRemoveOnFinish(autoRemove);\n        this._needObstruct = needObstruct;\n    }\n\n    private _needObstruct = false;\n    private _autoRemoveOnFinish:boolean = false;\n    public getAutoRemoveOnFinish():boolean {\n        return this._autoRemoveOnFinish;\n    }\n    public setAutoRemoveOnFinish(auto:boolean) : void {\n        this._autoRemoveOnFinish = auto;\n    }\n\n    public getEntityID() : EntityID {\n        return EntityID.None;\n    }\n\n    public launch() {\n\n        this.getGrid().addFlyerObstructs(this);\n        this.node.setPosition(this._pixelPos);\n        let speed = 800;\n        let scoreWorldPos = this.getGrid().getWorldPosForScore();\n        let targetPos = this.node.parent.convertToNodeSpaceAR(scoreWorldPos);\n        let startPos = this.node.getPosition();\n        let duration = GameMath.getDistance(startPos, targetPos) / speed\n\n        let move = cc.spawn(CurveToAction.create(duration, startPos, targetPos),\n                            cc.fadeTo(duration, 92));\n        let action = cc.sequence(move,\n                                cc.callFunc(()=>{\n                                    this.getGrid().updateScoreBarUIWithDelta(this._score);\n                                    this.getGrid().removeFlyerObstructs(this);\n                                    this.destoryWithRecycle(true);\n                                }));\n        this.runAction(action);\n        \n    }\n}\n","import { EntityType } from \"../../defines/EntityID\";\nimport GridBase from \"../../grid/GridBase\";\nimport { CellType } from \"../cell/CellBase\";\nimport EntityBase from \"../EntityBase\";\n\n// Learn TypeScript:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/typescript.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/typescript.html\n// Learn Attribute:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class FrameBase extends EntityBase {\n    \n    protected getPositionCode(pos:cc.Vec2) {\n\n        let bitOffsets:cc.Vec2[] = [\n            cc.v2(1, 0),\n            cc.v2(1, 1),\n            cc.v2(0, 1),\n            cc.v2(-1, 1),\n            cc.v2(-1, 0),\n            cc.v2(-1, -1),\n            cc.v2(0, -1),\n            cc.v2(1, -1),\n        ];\n        let cell = this.getGrid().getCellAtLogicalPos(pos);\n        if (cell) {\n            if (cell.getCellType() != CellType.MovablePlate) {\n                return 0;\n            }\n        }\n        \n        let code = 0;\n        let bitValue = 1;\n    \n        for (let offset of bitOffsets) {\n            let checkPos = pos.add(offset);\n            let cell = this.getGrid().getCellAtLogicalPos(checkPos);\n            if (cell) {\n                if (cell.getCellType() != CellType.MovablePlate) {\n                    code += bitValue;\n                }\n            }\n            bitValue *= 2;\n        }\n        return code;\n    }\n\n    protected initFrame(grid:GridBase) : void {\n        super.initEntity(grid, EntityType.Frame, 1, 1);\n    }\n}\n","import { CollectionID } from \"../../defines/CollectionID\";\nimport { EntityID } from \"../../defines/EntityID\";\nimport GridBase from \"../../grid/GridBase\";\nimport FrameBase from \"./FrameBase\";\nimport EntityPrefabNodePool from \"../EntityPrefabNodePool\";\n\n// Learn TypeScript:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/typescript.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/typescript.html\n// Learn Attribute:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class FrameNormal extends FrameBase {\n    \n    public getCollectionID() : CollectionID {\n        return CollectionID.Frame;\n    }\n    public getEntityID() : EntityID {\n        return EntityID.Frame;\n    }\n    public setLogicalPos(pos:cc.Vec2) : void {\n        super.setLogicalPos(pos);\n        let code = this.getPositionCode(this.getLogicalPos());\n\n        let frameName = \"01101\";\n        switch (code) {\n            case 128:{\n                frameName = \"00101\";\n            }\n                break;\n            case 2:{\n                frameName = \"00102\";\n            }\n                break;\n            case 8:{\n                frameName = \"00103\";\n            }\n                break;\n            case 32:{\n                frameName = \"00104\";\n            }\n                break;\n            case 160:{\n                frameName = \"00201\";\n            }\n                break;\n            case 130:{\n                frameName = \"00202\";\n            }\n                break;\n            case 10:{\n                frameName = \"00203\";\n            }\n                break;\n            case 40:{\n                frameName = \"00204\";\n            }\n                break;\n            case 136:{\n                frameName = \"00205\";\n            }\n                break;\n            case 34:{\n                frameName = \"00206\";\n            }\n                break;\n            case 162:{\n                frameName = \"00301\";\n            }\n                break;\n            case 138:{\n                frameName = \"00302\";\n            }\n                break;\n            case 42:{\n                frameName = \"00303\";\n            }\n                break;\n            case 168:{\n                frameName = \"00304\";\n            }\n                break;\n            case 170:{\n                frameName = \"00401\";\n            }\n                break;\n            case 64:\n            case 96:\n            case 192:\n            case 224:{\n                frameName = \"00501\";\n            }\n                break;\n            case 1:\n            case 3:\n            case 129:\n            case 131:{\n                frameName = \"00502\";\n            }\n                break;\n            case 4:\n            case 6:\n            case 12:\n            case 14:{\n                frameName = \"00503\";\n            }\n                break;\n            case 16:\n            case 24:\n            case 56:\n            case 48:{\n                frameName = \"00504\";\n            }\n                break;\n            case 66:\n            case 98:\n            case 194:\n            case 226:{\n                frameName = \"00601\";\n            }\n                break;\n            case 72:\n            case 104:\n            case 200:\n            case 232:{\n                frameName = \"00602\";\n            }\n                break;\n            case 9:\n            case 11:\n            case 137:\n            case 139:{\n                frameName = \"00603\";\n            }\n                break;\n            case 33:\n            case 35:\n            case 161:\n            case 163:{\n                frameName = \"00604\";\n            }\n                break;\n            case 36:\n            case 38:\n            case 44:\n            case 46:{\n                frameName = \"00605\";\n            }\n                break;\n            case 132:\n            case 134:\n            case 140:\n            case 142:{\n                frameName = \"00606\";\n            }\n                break;\n            case 144:\n            case 152:\n            case 176:\n            case 184:{\n                frameName = \"00607\";\n            }\n                break;\n            case 18:\n            case 26:\n            case 50:\n            case 58:{\n                frameName = \"00608\";\n            }\n                break;\n            case 74:\n            case 106:\n            case 202:\n            case 234:{\n                frameName = \"00701\";\n            }\n                break;\n            case 41:\n            case 43:\n            case 169:\n            case 171:{\n                frameName = \"00702\";\n            }\n                break;\n            case 164:\n            case 166:\n            case 172:\n            case 174:{\n                frameName = \"00703\";\n            }\n                break;\n            case 146:\n            case 154:\n            case 178:\n            case 186:{\n                frameName = \"00704\";\n            }\n                break;\n            case 65:\n            case 67:\n            case 97:\n            case 99:\n            case 193:\n            case 195:\n            case 225:\n            case 227:{\n                frameName = \"00801\";\n            }\n                break;\n            case 5:\n            case 7:\n            case 13:\n            case 15:\n            case 133:\n            case 135:\n            case 141:\n            case 143:{\n                frameName = \"00802\";\n            }\n                break;\n            case 20:\n            case 22:\n            case 28:\n            case 30:\n            case 52:\n            case 54:\n            case 60:\n            case 62:{\n                frameName = \"00803\";\n            }\n                break;\n            case 80:\n            case 88:\n            case 112:\n            case 120:\n            case 208:\n            case 216:\n            case 240:\n            case 248:{\n                frameName = \"00804\";\n            }\n                break;\n            case 68:\n            case 70:\n            case 76:\n            case 78:\n            case 100:\n            case 102:\n            case 108:\n            case 110:\n            case 196:\n            case 198:\n            case 204:\n            case 206:\n            case 228:\n            case 230:\n            case 236:\n            case 238:{\n                frameName = \"00805\";\n            }\n                break;\n            case 17:\n            case 19:\n            case 25:\n            case 27:\n            case 49:\n            case 51:\n            case 57:\n            case 59:\n            case 145:\n            case 147:\n            case 153:\n            case 155:\n            case 177:\n            case 179:\n            case 185:\n            case 187:{\n                frameName = \"00806\";\n            }\n                break;\n            case 73:\n            case 75:\n            case 105:\n            case 107:\n            case 201:\n            case 203:\n            case 233:\n            case 235:{\n                frameName = \"00901\";\n            }\n                break;\n            case 37:\n            case 39:\n            case 45:\n            case 47:\n            case 165:\n            case 167:\n            case 173:\n            case 175:{\n                frameName = \"00902\";\n            }\n                break;\n            case 148:\n            case 150:\n            case 156:\n            case 158:\n            case 180:\n            case 182:\n            case 188:\n            case 190:{\n                frameName = \"00903\";\n            }\n                break;\n            case 82:\n            case 90:\n            case 114:\n            case 122:\n            case 210:\n            case 218:\n            case 242:\n            case 250:{\n                frameName = \"00904\";\n            }\n                break;\n            case 69:\n            case 71:\n            case 77:\n            case 79:\n            case 101:\n            case 103:\n            case 109:\n            case 111:\n            case 197:\n            case 199:\n            case 205:\n            case 207:\n            case 229:\n            case 231:\n            case 237:\n            case 239:{\n                frameName = \"01001\";\n            }\n                break;\n            case 21:\n            case 23:\n            case 29:\n            case 31:\n            case 53:\n            case 55:\n            case 61:\n            case 63:\n            case 149:\n            case 151:\n            case 157:\n            case 159:\n            case 181:\n            case 183:\n            case 189:\n            case 191:{\n                frameName = \"01002\";\n            }\n                break;\n            case 84:\n            case 86:\n            case 92:\n            case 94:\n            case 116:\n            case 118:\n            case 124:\n            case 126:\n            case 212:\n            case 214:\n            case 220:\n            case 222:\n            case 244:\n            case 246:\n            case 252:\n            case 254:{\n                frameName = \"01003\";\n            }\n                break;\n            case 81:\n            case 83:\n            case 89:\n            case 91:\n            case 113:\n            case 115:\n            case 121:\n            case 123:\n            case 209:\n            case 211:\n            case 217:\n            case 219:\n            case 241:\n            case 243:\n            case 249:\n            case 251:{\n                frameName = \"01004\";\n            }\n                break;\n            case 85:\n            case 87:\n            case 93:\n            case 95:\n            case 117:\n            case 119:\n            case 125:\n            case 127:\n            case 213:\n            case 215:\n            case 221:\n            case 223:\n            case 245:\n            case 247:\n            case 253:\n            case 255:{\n                frameName = \"01101\";\n            }\n                break;\n            default:{\n            }\n                break;\n        }\n       \n        frameName = 'match_scene/texture/entities/frames/' + frameName;\n        this.setPuppetSpriteFrameName(frameName);\n        this.setVisible(code != 0)\n    }\n\n    public static create(grid:GridBase) : FrameNormal{\n\n        let className = 'FrameNormal';\n        let prefabFileName = 'match_scene/prefab/entity/frame/FrameNormal';\n        let pool = EntityPrefabNodePool.getInstance();\n        let component = pool.getPrefabNodeWithFileNameAndClassName(prefabFileName, className) as FrameNormal;\n        if (component) {\n            component.init(grid); \n            return component;       \n        }\n        return null;\n    }\n\n    protected init(grid:GridBase){\n        super.initFrame(grid);\n    }\n}\n","/**\n * Created by chenzd on 2018/7/16.\n * 全局定义\n */\nexport enum DebugMatchType {\n    None = 0,\n    Order = 1,\n    Grass = 2,\n    Popsicle = 3,\n    Path = 4,\n}\n\nexport default class GameConfig {\n    \n    public static IsDebug:boolean = false;//是否debug模式\n    public static IsPublishForPlanners:boolean = false;//策划使用模式\n    public static GameVer:number = 1041902201704; //当前发布版本号\n    public static IsVerify:boolean = false; //是否是审核版本\n    public static EnableAutoPilot:boolean = false;\n\n    // public static DebugLevel:number = 1;   //测试关卡（debug模式下有选关功能这个停用）\n    public static DebugMatchType:DebugMatchType = DebugMatchType.None;\n    public static LANGUAGE:string = \"cn\";//语言\n\n    // public static LoginVersion: number = 5104; // 后端版本号\n    // public static LoginSdk:number = 0; //登录方式 0 自动判断   1 无sdk  2微信登陆 \n    public static LoginModel:number = 5; // 1 iphone 2 ipad 3安卓 4window 5网页\n    public static ConfigDir:string = '';\n    public static OnStage:boolean = true; // 游戏是否在前台\n    public static DigRedPacket:boolean = true; // 掘金红包是否开启 \n\n    //public static GameStatus:number = '';\n\n\n    //  public static HttpSerever: string =\"https://pttestp1.bizgame.com/server/getserver.php\";\n    //  public static UserFrom:string = \"10191001\";//渠道号\n    //  public static PlatformId:string = \"10191\";   //平台号\n    // public static Channel:string = \"1019101\";\n    \n    public static Platform = {\n        \"1\":{\n            HttpSerever: \"http://192.168.1.124:6001/Platform101/server/getserver.php\", //开发服\n            UserFrom:\"99001\",\n            PlatformId:\"99\",\n            Channel:\"9901\",\n            ConfigUrl:\"\",\n            LoginVersion: 5114  // 后端版本号\n        },\n\n        // \"2\":{\n        //     HttpSerever: \"https://lbvip1.bcpgame.com:3166/hptp/server/getserver.php\",    //正式服\n        //     UserFrom:\"10191001\",\n        //     PlatformId:\"10191\",\n        //     Channel:\"1019101\",\n        //     ConfigUrl:\"https://respet.bcpgame.com/petgame/config/\",\n        //     LoginVersion: 51141\n        // }\n\n        \"2\":{\n            HttpSerever: \"https://lbvip1.bcpgame.com:3155/ttptp/server/getserver.php\",    //测试服\n            UserFrom:\"10191001\",\n            PlatformId:\"10191\",\n            Channel:\"1019101\",\n            ConfigUrl:\"{s0}.zip\",\n            LoginVersion: 5114\n        }\n    }\n\n    //分享图片地址\n    public static shareImgDomain:string ='https://respet.bcpgame.com/petgame/share';\n\n    //礼包图片路径\n    public static giftImgDomain:string = 'https://respet.bcpgame.com/petgame/source/gift';\n\n    //支付配置\n    public static PayEnv:number = 0; // 0 正式 1 沙箱\n    public static OfferId:string = '1450017098'; // 米大师ID\n    public static ZoneId:number = 1; // 分区 ID\n\n    ////登录方式   1 无sdk  2微信登陆 \n    public static get LoginSdk():number{\n        if( window.hasOwnProperty(\"wx\") ){\n            return 2;\n        }else{\n            return 1;\n        }\n    }\n}","import IGame from \"../../../../base/IGame\";\nimport { GameCurrencyType } from \"../../../../define/GameCurrencyType\";\nimport IdentifierManager from \"../../defines/IdentifierManager\";\nimport { MatchGameEndRewardType, MatchGameEndType } from \"../../GameSceneBase\";\nimport GameResultBasePanel, { GameEndExtraRewardType } from \"./GameResultBasePanel\";\nimport GameConfig from \"../../../../define/GameConfig\";\nimport GameMath from \"../../../../extend/utils/GameMath\";\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class GameCongratulationPanel extends GameResultBasePanel {\n    \n    @property(cc.Label)\n    rewardButtonLabel:cc.Label = null;\n\n    @property(cc.Label)\n    cancelButtonLable:cc.Label = null;\n\n    @property(cc.Node)\n    giveUpButton:cc.Node = null;\n\n    @property(cc.Node)\n    terminateButton:cc.Node = null;\n\n    protected _rewardType:MatchGameEndRewardType = MatchGameEndRewardType.Normal;\n    protected sendMarkID() {\n        this._gameScene.reportStepCongratulation();\n    }\n\n    protected playSoundEffect(){\n        IGame.stopBGM();\n        IGame.playAudio(IdentifierManager.getInstance().getMatchAudioFilePath('levelcomplete'));\n        IGame.playAudio(IdentifierManager.getInstance().getMatchAudioFilePath('voice_level_complete2'));\n    }\n\n    protected getExtraRewardType():GameEndExtraRewardType{\n        let extraRewardType = GameEndExtraRewardType.None;\n        let uiData = this._gameScene.getEndUIData();\n        if (uiData) {\n            extraRewardType = uiData.succeedRewardType;\n        }\n        if (GameConfig.IsVerify) {\n            extraRewardType = GameEndExtraRewardType.None;\n        }\n        return extraRewardType;\n    }\n\n    protected initSupplyItem() {\n\n        let extraRewardType = this.getExtraRewardType();\n        this._rewardType = MatchGameEndRewardType.Normal;\n        switch (extraRewardType) {\n            case GameEndExtraRewardType.ShareForReward:{\n                this._rewardType = MatchGameEndRewardType.None;\n            }\n                break;\n            default:\n                break;\n        }\n        super.initSupplyItem();\n    }\n\n    protected initButtons(){\n        super.initButtons();\n        this.giveUpButton.on('touchend', this.onCancelButtonClicked, this);\n        this.terminateButton.on('touchend', this.onTerminateButtonClicked, this);\n        this.terminateButton.active = this._gameScene.getLevel() >= 5;\n        this.rewardButton.active = false;\n        this.giveUpButton.active = false;\n    }\n\n    protected onConfirmButtonClicked(event:cc.Event.EventCustom){\n        this.reportResult(MatchGameEndType.Complete, this._rewardType, false);\n    }\n\n    protected onCancelButtonClicked(event:cc.Event.EventCustom){\n        this.reportResult(MatchGameEndType.Complete, this._rewardType, false);\n    }\n\n    protected onTerminateButtonClicked(event:cc.Event.EventCustom){\n        this.reportResult(MatchGameEndType.Complete, this._rewardType, false);\n    }\n    \n    protected onReportResultRespone(data):void{\n        //this._gameScene.reportStepNextGame()\n        console.log('GameCongratulationPanel.onReportResultRespone');\n        super.onReportResultRespone(data);\n        this.terminateButton.active = false;\n        switch (this._rewardType) {\n            case MatchGameEndRewardType.None:{\n                this.onRewardFlyToBackpackComplete();\n            }\n                break;\n            case MatchGameEndRewardType.Normal:\n            case MatchGameEndRewardType.Doubled:{\n                this.rewardFlyToBackpack();\n            }\n                break;\n        \n            default:\n                break;\n        }\n    }\n\n    protected rewardFlyToBackpack():void{\n        super.rewardFlyToBackpack();\n        this.giveUpButton.active = false;\n    }\n\n    protected onRewardFlyToBackpackComplete(){\n        \n    }\n}\n","export enum GameCurrencyType{\n    NoneType       = -2,\n    NeedUseDiamond = -1, //钻石代付\n    NeedBuyDiamond = 0,  //没有可以使用的货币数量\n    \n    // ===》对应配置，不可更改类型值 《===\n    CurrencyBegin  = 1,\n    DiamondCoin    = 1,  //钻石\n    StarCoin       = 2,  //星币\n    GoldCoin       = 3,  //金狗币\n    // ===》对应配置，不可更改类型值 《===\n    LifeHeart      = 4,  //爱心生命值\n    VirtualCoin    = 5,  //虚拟币\n    RedPacket      = 7,  //红包\n    CurrencyEnd    = RedPacket,\n    \n    ExtraStep5       = 10010,\n    ExtraStep1       = 10011,\n    ExtraStep3       = 10012,\n    ExtraStep2       = 10013,\n    \n    BeginLine        = 10020,\n    BeginRange       = 10030,\n    BeginRainbow     = 10040,\n\n    TimeLimitedBeginLine        = 10021,\n    TimeLimitedBeginRange       = 10031,\n    TimeLimitedBeginRainbow     = 10041,\n\n    InfiniteBeginLine        = 10022,\n    InfiniteBeginRange       = 10032,\n    InfiniteBeginRainbow     = 10042,\n\n    OneRoundBeginLine        = 10023,\n    OneRoundBeginRange       = 10033,\n    OneRoundBeginRainbow     = 10043,\n\n    LuckyWheelRow                   = 13020,\n    LuckyWheelColumn                = 13030,\n    LuckyWheelCross                 = 13040,\n    LuckyWheelRange                 = 13050,  \n    LuckyWheelMissile_Row           = 13060,  \n    LuckyWheelMissile_Column        = 13070,  \n    LuckyWheelMissile_Cross         = 13080,  \n    LuckyWheelMissile_Range         = 13090,  \n\n    LuckyWheelRow_Cross                   = 13100,\n    LuckyWheelColumn_Cross                = 13110,\n    LuckyWheelRow_Range                   = 13120,\n    LuckyWheelColumn_Range                = 13130,  \n    LuckyWheelMissile_Row_Column          = 13140,  \n    LuckyWheelMissile_Rainbow        \t  = 13150,  \n    LuckyWheelMissile_Row_Cross           = 13160,  \n    LuckyWheelMissile_Column_Range        = 13170,      \n    \n\n    AidHammer                   = 10050,\n    AidBomb                     = 10060,\n    AidSwap                     = 10070,\n\n    TimeLimitedAidHammer       = 10051,\n    TimeLimitedAidBomb         = 10061,\n    TimeLimitedAidSwap         = 10071,\n    \n    LifeAddOnePoint  = 10080,\n    LifeEverOneHour  = 10090,\n    LifeEverTwoHour  = 10100,\n    \n    TrainFood        = 10110,\n    TrainSoap        = 10120,\n    TrainEyepatch    = 10130,\n    TrainHoe         = 10140,\n    AddSpeed         = 10150,\n\n\n    PetKeJi          = 20010,\n\n};","import { GameCurrencyType } from \"../../../../define/GameCurrencyType\";\n\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class GameEndItem extends cc.Component {\n\n    @property(cc.Label)\n    nameLabel:cc.Label = null;\n\n    @property(cc.Label)\n    numLabel:cc.Label = null;\n\n    @property(cc.Sprite)\n    ico:cc.Sprite = null;\n\n    private _itemID:GameCurrencyType = GameCurrencyType.NoneType;\n    public getItemID() : GameCurrencyType {\n        return this._itemID;\n    }\n    public setItemID(itemID:GameCurrencyType) : void {\n        this._itemID = itemID;\n    } \n\n    // LIFE-CYCLE CALLBACKS:\n\n    // onLoad () {}\n\n    start () {\n\n    }\n\n    // update (dt) {}\n\n    onDestroy() {\n        // this.nameLabel = null;\n        // this.numLabel = null;\n        // this.ico = null;\n    }\n}\n","import { Pair } from \"../../base/Pair\";\nimport FencePos from \"../../scenes/match/entity/fence/FencePos\";\nimport { ItemBombType } from \"../../scenes/match/entity/item/color/bomb/ItemBombBase\";\n\n/**\n * Created by chenzd on 2018/7/25.\n * 三消数学\n */\n\nexport default class GameMath {\n    /**\n     计算匹配合成位置的合成点\n     \n     @param positions 所有匹配位置集合\n     @param baseStep 所有位置的优先级\n     @return 合成点\n     */\n\n    public static getMergePos(positionList:cc.Vec2[], baseStepList:number[]):cc.Vec2{\n\n        let positions:Pair<cc.Vec2, number>[] = [];\n        for(let i:number = 0; i < positionList.length; i++){\n            let tmpPos = new Pair<cc.Vec2, number>(positionList[i], baseStepList[i]);\n            positions.push(tmpPos);\n        }\n\n        // 排序，从左到右，从下到上\n        //如果第一个参数应该位于第二个之前则返回一个负数，如果两个参数相等则返回0，如果第一个参数应该位于第二个之后则返回一个正数\n        positions.sort(function(infoA, infoB):number{\n            if(infoA.first.y == infoB.first.y){\n                if(infoA.first.x < infoB.first.x){\n                    return -1;\n                }else{\n                    return 1;\n                }\n            }else{\n                if(infoA.first.y < infoB.first.y){\n                    return -1;\n                }else{\n                    return 1;\n                }\n            }\n        });\n\n        // 中心点取步长最少且，横向纵向延伸到的点最多的点\n    \n        // 步长最少的索引号\n        let minStepPosIndex:number = -1;\n        // 最少步长\n        let minStepCount:number = 0;\n        // 最多连接数\n        let maxLinkedPosCount:number = 0;\n\n        for(let i:number = 0; i < positions.length; i++){\n            let rootPos = positions[i].first;\n            // 累加到每个点的步长\n            let stepCount:number = 0;\n            for(let info of positions){\n                stepCount += Math.abs(info.first.x - rootPos.x) + Math.abs(info.first.y - rootPos.y);\n            }\n\n            stepCount += positions[i].second;\n\n            // 累加横向延伸到的点\n            let linkedPosSet:cc.Vec2[] = [];\n            let horizontalOffsets:cc.Vec2[] = [cc.v2(1,0), cc.v2(-1, 0)];\n            let horizontalLinkedPos:cc.Vec2[] = [rootPos];\n\n            for(let j:number = 0; j < horizontalLinkedPos.length; j++){\n                let rootPos = horizontalLinkedPos[j];\n                for(let offset of horizontalOffsets){\n                    let checkPos = rootPos.add(offset);\n                    if(GameMath.indexOf(horizontalLinkedPos, checkPos) != -1){\n                        continue;\n                    }\n                    let hasCheckPos:boolean = false;\n                    for(let pos of positions){\n                        if(pos.first.equals(checkPos)){\n                            hasCheckPos = true;\n                            break;\n                        }\n                    }\n\n                    if(hasCheckPos){\n                        horizontalLinkedPos.push(checkPos);\n                    }\n\n                }\n            }\n\n            for(let hLinkPos of horizontalLinkedPos){\n                if(GameMath.indexOf(linkedPosSet, hLinkPos) != -1){\n                    linkedPosSet.push(hLinkPos);\n                }\n            }\n\n            // 累加纵向延伸到的点\n            let verticalOffsets:cc.Vec2[] = [cc.v2(0, -1), cc.v2(0, 1)];\n            let verticalLinkedPos:cc.Vec2[] = [rootPos];\n\n            for(let j:number = 0; j < verticalLinkedPos.length; j++){\n                let rootPos = verticalLinkedPos[j];\n\n                for(let offset of verticalOffsets){\n                    let checkPos = rootPos.add(offset);\n                    \n                    if(GameMath.indexOf(verticalLinkedPos, checkPos) != -1){\n                        continue;\n                    }\n\n                    let hasCheckPos:boolean = false;\n                    for(let pos of positions){\n                        if(pos.first.equals(checkPos)){\n                            hasCheckPos = true;\n                            break;\n                        }\n                    }\n\n                    if(hasCheckPos){\n                        verticalLinkedPos.push(checkPos);\n                    }\n                }\n            }\n\n            for(let vLinkPos of verticalLinkedPos){\n                \n                if(GameMath.indexOf(linkedPosSet, vLinkPos) != -1){\n                    linkedPosSet.push(vLinkPos);\n                }\n            }\n\n            let linkedPosCount:number = linkedPosSet.length;\n            // 判断是否比当前点更合适\n            let isMin:boolean = false;\n            if(minStepPosIndex == -1){\n                isMin = true;\n            }else{\n                if(stepCount < minStepCount){\n                    isMin = true;\n                }else if(stepCount == minStepCount && linkedPosCount > maxLinkedPosCount){\n                    isMin = true;\n                }\n            }\n\n            // 记录匹配的点\n            if(isMin){\n                minStepPosIndex = i;\n                minStepCount = stepCount;\n                maxLinkedPosCount = linkedPosCount;\n            }\n        }\n\n        return positions[minStepPosIndex].first;\n    }\n\n\n    /**\n     计算合成等级\n     @param positions\n     @return\n     */\n    public static getCreateBombType(positions:cc.Vec2[]):ItemBombType{\n        let bombType:ItemBombType = ItemBombType.None;\n\n        // 获取包围盒\n        let left:number = -1;\n        let right:number = -1;\n        let bottom:number = -1;\n        let top:number = -1;\n        for(let pos of positions){\n            if(left == -1 || pos.x < left){\n                left = pos.x;\n            }\n\n            if(right == -1 || pos.x > right){\n                right = pos.x;\n            }\n\n            if(bottom == -1 || pos.y < bottom){\n                bottom = pos.y;\n            }\n\n            if(top == -1 || pos.y > top){\n                top = pos.y;\n            }\n        }\n\n        let width:number = right - left + 1;\n        let height:number = top - bottom + 1;\n\n        // 最大宽高是指在某一行或列存在的点的数量（应该取相连的最大数量）\n        let solidWidth:number = 0;\n        let solidHeight:number = 0;\n\n        let origin = cc.v2(left, bottom);\n        for (let column = 0; column < width; column++) {\n            let solidCount = 0;\n            for (let row = 0; row < height; row++) {\n                if(GameMath.indexOf(positions, origin.add(cc.v2(column, row))) != -1) {\n                    solidCount++;\n                }\n            }\n            if (solidCount > solidHeight) {\n                solidHeight = solidCount;\n            }\n        }\n\n        for (let row = 0; row < height; row++) {\n            let solidCount = 0;\n            for (let column = 0; column < width; column++) {\n                if(GameMath.indexOf(positions, origin.add(cc.v2(column, row))) != -1) {\n                    solidCount++;\n                }\n            }\n            if (solidCount > solidWidth) {\n                solidWidth = solidCount;\n            }\n        }\n        \n        // 最大实线宽高有任意一个大于等于5 则为直线5消\n        if(solidWidth >= 5 || solidHeight >= 5){\n            bombType = ItemBombType.Rainbow;\n        }else if(solidWidth >= 3 && solidHeight >= 3){\n            // 应该查找L图形，每一个点查找四个L的方向的两条边，如果两条边都大于3，则是L\n            // 统计被充满的边的数量\n            let fullSideCount:number = 0;\n            let bottomIsFull:boolean = true;\n            for(let i:number = 0; i < solidWidth; i++){\n                let checkPos = cc.v2(left +i, bottom);\n                if(GameMath.indexOf(positions, checkPos) == -1){\n                    bottomIsFull = false;\n                    break;\n                }\n            }\n            if(bottomIsFull){\n                fullSideCount += 1;\n            }\n\n            let topIsFull:boolean = true;\n            for(let i:number = 0; i < solidWidth; i++){\n                let checkPos = cc.v2(left + i, top);\n                if(GameMath.indexOf(positions, checkPos) == -1){\n                    topIsFull = false;\n                    break;\n                }\n            }\n            if(topIsFull){\n                fullSideCount += 1;\n            }\n\n            let leftIsFull:boolean = true;\n            for(let i:number = 0; i < solidHeight; i++){\n                let checkPos = cc.v2(left, bottom + i);\n                if(GameMath.indexOf(positions, checkPos) == -1){\n                    leftIsFull = false;\n                }\n            }\n            if(leftIsFull){\n                fullSideCount += 1;\n            }\n\n            let rightIsFull:boolean = true;\n            for(let i:number = 0; i < solidHeight; i++){\n                let checkPos = cc.v2(right, bottom + i);\n                if(GameMath.indexOf(positions, checkPos) == -1){\n                    rightIsFull = false;\n                }\n            }\n            if(rightIsFull){\n                fullSideCount += 1;\n            }\n            // 最大实线宽高都大于等于3时，有两条以上的边被充满为L消，否则为T消\n            if(fullSideCount >= 2){\n                bombType = ItemBombType.Range;\n            }else{\n                bombType = ItemBombType.Cross;\n            }\n\n        }else if(solidWidth >= 4 || solidHeight >= 4){\n            // 任意宽高大于等于4 则为直线4消\n            if(solidHeight >= 4){\n                bombType = ItemBombType.Row;\n            }else if(solidWidth >= 4){\n                bombType = ItemBombType.Column;\n            }\n        }else if(solidWidth >= 2 && solidHeight >= 2){\n            // 宽高均大于等于2 则为田字消\n            bombType = ItemBombType.Butterfly;\n        }else{\n            bombType = ItemBombType.None;\n        }\n\n        return bombType;\n    }\n    \n    /**\n     判断一个点是否是合法的匹配连接点\n\n     @param checkPositions 所有连接到的点\n     @param pos 将要检查的点\n     @return 是否是合法匹配连接\n     */\n    public static isValidMatchPos(checkPositions:cc.Vec2[], pos:cc.Vec2):boolean{\n        \n        // 合法的匹配点是有2个以上相邻的点在点集中，或者延伸到的点超过三\n    \n        // 计算相邻的4个点有几个在点集中\n        let sameColorNeighbourCount:number = 0;\n        let neighbourOffsets:cc.Vec2[] = [cc.v2(1,0), cc.v2(-1, 0), cc.v2(0, 1), cc.v2(0, -1)];\n        for(let offset of neighbourOffsets){\n            let checkPos = pos.add(offset);\n            if(GameMath.indexOf(checkPositions, checkPos) != -1){\n                sameColorNeighbourCount++;\n            }\n        }\n\n        // 2个以上，则是合法的点\n        if(sameColorNeighbourCount >= 2){\n            return true;\n        }else{\n            // 计算横向延伸到的点\n            let horizontalOffsets:cc.Vec2[] = [cc.v2(1,0), cc.v2(-1, 0)];\n            let horizontalConnectCount = 1;\n            for (let offset of horizontalOffsets) {\n                let checkPos = pos.clone();\n                while (1) {\n                    checkPos.addSelf(offset);\n                    if (GameMath.indexOf(checkPositions, checkPos) == -1) {\n                        break;\n                    }\n                    horizontalConnectCount += 1;\n                }\n            }\n\n            if (horizontalConnectCount >= 3) {\n                return true;\n            }\n\n            // 计算纵向延伸到的点\n            let verticalOffsets:cc.Vec2[] = [cc.v2(0,1), cc.v2(0, -1)];\n            let verticalConnectCount = 1;\n\n            for (let offset of verticalOffsets) {\n                let checkPos = pos.clone();\n                while (1) {\n                    checkPos.addSelf(offset);\n                    if (GameMath.indexOf(checkPositions, checkPos) == -1) {\n                        break;\n                    }\n                    verticalConnectCount += 1;\n                }\n            }\n\n            if (verticalConnectCount >= 3) {\n                return true;\n            }\n        }\n        return false;\n    }\n    \n    /**\n     过滤不合法的匹配连接点\n     @param linkedPos\n     */\n    public static filterInvalidMathPositions(linkedPos:cc.Vec2[]):void{\n        if(linkedPos.length < 3){\n            GameMath.clearArray(linkedPos);\n        }\n\n        while (1) {\n            let invalidIndex= -1;\n            for (let index = 0; index < linkedPos.length; index++) {\n                let checkPos = linkedPos[index];\n                if (!this.isValidMatchPos(linkedPos, checkPos)) {\n                    invalidIndex = index;\n                    break;\n                }\n            }\n\n            if (invalidIndex != -1) {\n                linkedPos.splice(invalidIndex, 1);\n            }else{\n                break;\n            }\n        }\n\n        if(linkedPos.length < 3){\n            GameMath.clearArray(linkedPos);\n        }\n    }\n    \n    /**\n     枚举圆形(菱形)范围\n     @param origin 原点\n     @param radius 半径\n     @return\n     */\n    public static enumerateCirclePos(origin:cc.Vec2, radius:number):cc.Vec2[]{\n        return this.enumerateRingPos(origin, 0, radius);\n    }\n    \n    /**\n     枚举环形(菱形)范围\n     @param origin 原点\n     @param radius 半径\n     @return\n     */\n    public static enumerateRingPos(origin:cc.Vec2, innerRadius:number, outerRadius:number):cc.Vec2[]{\n\n        let result:cc.Vec2[] = [];\n        for (let rowDelta = -outerRadius; rowDelta <= outerRadius; rowDelta++) {\n            for (let columnDelta = -outerRadius; columnDelta <= outerRadius; columnDelta++) {\n                let step = (Math.abs(rowDelta)  + Math.abs(columnDelta));\n                if ( step <= outerRadius && step >= innerRadius) {\n                    result.push(origin.add(cc.v2(columnDelta, rowDelta)));\n                }\n            }\n        }\n        return result;\n    }\n\n    /**\n     * 枚举直线范围\n     * @param origin 原点\n     * @param direction 方向 1为单位(1,0)(1,1)\n     * @param len 长度\n     */\n    public static enumerateCannonPos(origin:cc.Vec2, direction:cc.Vec2, len:number):cc.Vec2[]{\n        let result:cc.Vec2[] = [];\n\n        for(let i = 0; i < len; i++){\n            result.push(origin.add(direction));\n        }\n\n        return result;\n    }\n    \n    \n    /**\n     计算圆的切点\n\n     @param origin 圆心\n     @param radius 半径\n     @param fromPos 圆外在切线上的一个点\n     @param isClockwise 是否顺时针\n     @return\n     */\n    public static getContactPoint(origin:cc.Vec2, radius:number, outPoint:cc.Vec2, isClockwise:boolean):cc.Vec2{\n        //TODO 未验证\n        let offset = outPoint.sub(origin);\n        let cosRadin = radius / offset.mag();\n\n        //TODO 未验证\n        let newOffset = offset.mul(cosRadin);\n\n        let a = Math.acos(cosRadin);\n        if(!isClockwise){\n            a = -a;\n        }\n\n        let originOffset = cc.v2(newOffset.x * Math.cos(a) - newOffset.y * Math.sin(a),\n                                newOffset.x * Math.sin(a) + newOffset.y * Math.cos(a));\n        \n        let result = origin.add(originOffset);\n\n        return result;\n    }\n    \n    /**\n     计算两点角度\n\n     @param beginPos 起点\n     @param endPos 终点\n     @param zeroAngleVector 0 度方向向量\n     @param isClockwise 顺时针\n     @return \n     */\n    public static getAngle(beginPos:cc.Vec2, endPos:cc.Vec2, zeroAngleVector = cc.v2(0, 1), isClockwise:boolean = true):number{\n        \n        if (beginPos.equals(endPos)) {\n            return 0;\n        }\n        let offset = endPos.sub(beginPos);\n        let lengthA = zeroAngleVector.mag();\n        let lengthB = offset.mag();\n        let cosValue = (zeroAngleVector.x * offset.x + zeroAngleVector.y * offset.y) / (lengthB * lengthA);\n        let radian = Math.acos(cosValue);\n        let angle:number = 180.0 / Math.PI * radian;\n        let crossMulty:number = zeroAngleVector.x * offset.y - offset.x * zeroAngleVector.y;\n\n        if(isClockwise){\n            if(crossMulty > 0){\n                angle = 360 - angle;\n            }\n        }else{\n            if(crossMulty < 0){\n                angle = 360 - angle;\n            }\n        }\n        return angle;\n    }\n\n    public static getDistance(beginPos:cc.Vec2, endPos:cc.Vec2):number{\n        return beginPos.sub(endPos).mag();\n    }\n    public static getDistanceSQ(beginPos:cc.Vec2, endPos:cc.Vec2):number{\n        return beginPos.sub(endPos).magSqr();\n    }\n    public static rectIntersectsRect(rect1:cc.Rect, rect2:cc.Rect):boolean{\n        return rect1.intersects(rect2);\n    }\n    public static rectContainsPoint(rect:cc.Rect, point:cc.Vec2):boolean{\n        return rect.contains(point);\n    }\n    /**\n     * 查找数组没有匹配的元素的话加入数组\n     * @param array 数组\n     * @param val 元素\n     * @param compare 匹配函数\n     */\n    public static insertAsSet(array:any[], val:any, compare:(p1:any, p2: any) => boolean = null) : void {\n        if (GameMath.indexOf(array, val, 0, compare) == -1) {\n            array.push(val);\n        }\n    } \n\n    /**\n     * 查找数组有没有匹配的元素，有匹配返回下标，没有返回-1\n     * @param valArr 数组\n     * @param val 元素\n     * @param startIndex 开始下标\n     * @param compare 匹配函数\n     */\n    public static indexOf(valArr:any[], val:any,startIndex:number = 0, compare:(p1:any, p2: any) => boolean = null):number{\n        let len = valArr.length;\n        for(let i:number = startIndex; i < len; i++){\n            let tmpVal = valArr[i];\n            if(compare != null){\n                if(compare(tmpVal, val)){\n                    return i;\n                }\n            }else{\n                if(tmpVal.equals){\n                    if(tmpVal.equals(val)){\n                        return i;\n                    }\n                }else{\n                    if(tmpVal == val) {\n                        return i;\n                    }\n                }\n            }\n        }\n        return -1;\n    }\n\n    public static clearArray(array:any[]) {\n        array.length = 0;\n    }\n\n    public static shuffleArray(array:any[]) {\n        array.sort(function(){ return 0.5 - Math.random() });\n    }\n\n    public static isEmptyObject(obj:Object) : boolean {\n        if(obj) {\n            for (const key in obj) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static clearObject(obj:Object) : void {\n        for (const key in obj) {\n            delete obj[key];\n        }\n    }\n\n    public static randomInt(min:number, max:number, differentWithLast:boolean = false, lastNumber:number = 0) : number {\n        if (differentWithLast && (min <= lastNumber && lastNumber <= max)) {\n            let minOffset = 1;\n            let maxOffset = (max - min) - 1;\n            \n            let result = (Math.round(Math.random() * (maxOffset - minOffset) + minOffset) + lastNumber) % max + min    \n            return result;\n        }else{\n            let offset = max - min;\n            let result = Math.round(Math.random() * offset)  + min;\n            return result;\n        }\n    }\n\n    public static random(min:number, max:number) : number {\n        let offset = max - min;\n        let result = Math.random() * offset + min;\n        return result;\n    }\n\n    public static clamp(value:number, min:number, max:number) : number {\n        let minValue = Math.min(min, max);\n        let maxValue = Math.max(min, max);\n        return Math.max(Math.min(value, maxValue), minValue); \n    }\n\n    public static INVALID_LOGICAL_POSITION:cc.Vec2 = cc.v2(-1, -1);\n    public static getStringFromVec2(logicalPos:cc.Vec2) : string {\n        let hashValue = logicalPos.x * 1000 + logicalPos.y + 10000;\n        let result = hashValue.toString(); \n        return result;\n    }\n    public static getVec2FromString(stringValue:string) : cc.Vec2 {\n\n        let result:cc.Vec2 = null;\n        let hashValue = Number(stringValue);\n        if (hashValue) {\n            let x = Math.floor((hashValue - 10000) / 1000);\n            let y = (hashValue - 10000) - 1000 * x;\n            result = cc.v2(x, y);\n        }\n        return result;\n    }\n\n    public static getVec2FromConfigString(stringValue:string) : cc.Vec2 {\n        let result:cc.Vec2 = null;\n        let dataString = stringValue.replace('{','').replace('}','');\n        let numbers = dataString.split(',');\n        if (numbers.length == 2) {\n            result = cc.v2(Number(numbers[0]), Number(numbers[1]));\n        }\n        return result;\n    }\n\n    public static getConfigStringFromVec2(pos:cc.Vec2) : string{\n        let result:string = '{' + pos.x + ', ' + pos.y + '}';\n        return result;\n    }\n\n    public static vec2Less(posA:cc.Vec2, posB:cc.Vec2) : boolean {\n        if (posA.x == posB.x){\n            return posA.y < posB.y;\n        }\n        return posA.x < posB.x;\n    }\n\n    public static getStringFromFencePos(fencePos:FencePos) : string {\n        let stringA = this.getStringFromVec2(fencePos.posA);\n        let stringB = this.getStringFromVec2(fencePos.posB);\n        return stringA + '|' + stringB;\n    }\n\n    public static getFencePosFromString(stringValue:string) : FencePos {\n        let postions = stringValue.split('|');\n        if (postions.length == 2) {\n            let posA = this.getVec2FromString(postions[0]);\n            let posB = this.getVec2FromString(postions[1]);\n            return FencePos.create(posA, posB);\n        }\n        return null;\n    }\n\n    public static fencePosLess(fencePosA:FencePos, fencePosB:FencePos) : boolean {\n        if (fencePosA.posA.equals(fencePosB.posA)) {\n            return this.vec2Less(fencePosA.posB, fencePosB.posB);\n        }\n        return this.vec2Less(fencePosA.posA, fencePosB.posA);\n    }\n\n    /**\n     * 获取窗口适配的缩放比例\n     * @param viewSize 窗口大小\n     * @param designSize 设计大小\n     * @param minSacle 最小缩放\n     * @param maxScal 最大缩放\n     */\n    public static getScaleFromViewSize(viewSize:cc.Size, designSize:cc.Size, minSacle:number = 0, maxScal:number = 1):number{\n        let scale = Math.min(viewSize.width / designSize.width, \n            viewSize.height / designSize.height)\n        scale = GameMath.clamp(scale, minSacle, maxScal);\n        return scale;\n    }\n\n\n    public static getScaleViewSizeFromRealSize(realSize:cc.Size, deviceViewSize:cc.Size, minWidth:number):cc.Size{\n        let result = cc.size(0, 0);\n\n        let ratio = this.getScaleFromViewSize(deviceViewSize, realSize, 0, 10);\n        result = cc.size(realSize.width * ratio, realSize.height * ratio);\n        if (result.width < minWidth) {\n            let viewRatio = minWidth / result.width;\n            result = cc.size(result.width * viewRatio, result.height * viewRatio);\n        }\n        return result;\n    }\n\n    public static getDeviceViewSizeFromViewSize(viewSize:cc.Size, winSize:cc.Size, deviceSize:cc.Size){\n        let result = cc.size(0, 0);\n        let ratioWidth = viewSize.width / winSize.width;\n        let ratioHeight = viewSize.height / winSize.height;\n        result = cc.size(deviceSize.width * ratioWidth, deviceSize.height * ratioHeight);\n        return result;\n    }\n\n    /**\n     * 获取窗口适配的缩放比例\n     * @param viewSize 视窗尺寸\n     * @param winSize 设计尺寸\n     * @param deviceSize 设备尺寸\n     * @param realSize 广告真实尺寸\n     * @param minWidth 广告最小宽度\n     */\n    public static getAdBannerSize(viewSize:cc.Size, winSize:cc.Size, deviceSize:cc.Size, realSize:cc.Size, minWidth:number):cc.Size{\n        let deviceViewSize = GameMath.getDeviceViewSizeFromViewSize(viewSize, winSize, deviceSize);\n        let result = GameMath.getScaleViewSizeFromRealSize(realSize, deviceViewSize, minWidth);\n        return result;\n    }\n\n    \n}\n","import IGame from \"../../../base/IGame\";\nimport GameMath from \"../../../extend/utils/GameMath\";\nimport NoMoreStepBasePanel from \"./NoMoreStepBasePanel/NoMoreStepBasePanel\";\n\n\n\nconst {ccclass, property} = cc._decorator;\n\n\n\n@ccclass\nexport default class GameNoMoreStepPanel extends NoMoreStepBasePanel {\n\n    public giveUp() {\n        this._gameScene.gameOver();\n    }\n}\n","import GameConfig from \"../../../../define/GameConfig\";\nimport IGame from \"../../../../base/IGame\";\nimport IdentifierManager from \"../../defines/IdentifierManager\";\nimport GameResultBasePanel, { GameEndExtraRewardType } from \"./GameResultBasePanel\";\nimport { MatchGameEndType, MatchGameEndRewardType } from \"../../GameSceneBase\";\n// Learn TypeScript:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/typescript.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/typescript.html\n// Learn Attribute:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class GameOverPanel extends GameResultBasePanel {\n\n    @property(cc.Label)\n    rewardButtonLabel:cc.Label = null;\n\n    @property(cc.Label)\n    cancelButtonLable:cc.Label = null;\n\n    private _rewardType:MatchGameEndRewardType = MatchGameEndRewardType.None;\n    \n\n    protected playSoundEffect(){\n        IGame.stopBGM();\n        IGame.playAudio(IdentifierManager.getInstance().getMatchAudioFilePath('levelfailed'));\n    }\n\n    protected getExtraRewardType():GameEndExtraRewardType{\n        let extraRewardType = GameEndExtraRewardType.None;\n        let uiData = this._gameScene.getEndUIData();\n        if (uiData) {\n            extraRewardType = uiData.failedRewardType;\n        }\n        if (GameConfig.IsVerify) {\n            extraRewardType = GameEndExtraRewardType.None;\n        }\n        return extraRewardType;\n    }\n\n    protected recordBestScore(){\n        this.setFriendView();\n    }\n\n    protected initButtons(){\n        super.initButtons();\n        this.rewardButton.active = false;\n    }\n\n    protected initSupplyItem() {\n        this._rewardType = MatchGameEndRewardType.None;\n        super.initSupplyItem();\n    }\n\n    protected onConfirmButtonClicked(event:cc.Event.EventCustom){\n        \n    }\n\n    protected onCancelButtonClicked(event:cc.Event.EventCustom){\n        this.reportResult(MatchGameEndType.GameOver, this._rewardType, false);\n    }\n\n    protected onReportResultRespone(data):void{\n        super.onReportResultRespone(data);\n\n        switch (this._rewardType) {\n            case MatchGameEndRewardType.None:{\n                this.onRewardFlyToBackpackComplete();\n            }\n                break;\n            case MatchGameEndRewardType.Normal:\n            case MatchGameEndRewardType.Doubled:{\n                this.rewardFlyToBackpack();\n            }\n                break;\n        \n            default:\n                break;\n        }\n    }\n    \n}\n","import IGame from \"../../../../base/IGame\";\nimport { GameCurrencyType } from \"../../../../define/GameCurrencyType\";\nimport CurveToAction from \"../../../../extend/action/CurveToAction\";\nimport GameMath from \"../../../../extend/utils/GameMath\";\nimport IdentifierManager from \"../../defines/IdentifierManager\";\nimport ItemInfoManager from \"../../defines/ItemInfoManager\";\nimport GameSceneBase, { MatchGameEndRewardType, MatchGameEndType } from \"../../GameSceneBase\";\nimport GameEndItem from \"./GameEndItem\";\nimport StarAndScoreFrame from \"./StarAndScoreFrame\";\n\n// Learn TypeScript:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/typescript.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/typescript.html\n// Learn Attribute:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html\n\n//LD: (int) 通关双倍 0无 1分享 2看视频 4邀请好友\nexport enum GameEndExtraRewardType {\n    None = 0,\n    Share = 1,\n    WatchVideo = 2,\n    Request = 4,\n    ShareForReward = 7,\n}\n\nexport class GameEndPanelData{\n    public static createWithData(object:Object) : GameEndPanelData{\n        let succeedRewardType = 0;\n        if (object && object.hasOwnProperty('LD')) {\n            succeedRewardType = object['LD'];\n        }\n        let failedRewardType = 0;\n        if (object && object.hasOwnProperty('LT')) {\n            failedRewardType = object['LT'];\n        }\n        return GameEndPanelData.create(succeedRewardType, failedRewardType);\n    }\n\n    public static create(succeedRewardType:number, failedRewardType:number) : GameEndPanelData{\n        let result = new GameEndPanelData();\n        result.succeedRewardType = succeedRewardType;\n        result.failedRewardType = failedRewardType;\n        \n        return result;\n    }\n    public succeedRewardType:GameEndExtraRewardType = GameEndExtraRewardType.None;\n    public failedRewardType:GameEndExtraRewardType = GameEndExtraRewardType.None;\n}\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class GameResultBasePanel extends cc.Component {\n\n    @property(StarAndScoreFrame)\n    starFrame:StarAndScoreFrame = null;\n\n    @property(cc.Node)\n    rewardItemsFrame:cc.Node = null;\n\n    @property([GameEndItem])\n    rewardItems:GameEndItem[] = [];\n\n    @property(cc.Sprite)\n    goldSprite:cc.Sprite = null;\n    @property(cc.Sprite)\n    goldDoubleIco:cc.Sprite = null;\n    @property(cc.Label)\n    goldLabel:cc.Label = null;\n\n    @property(cc.Sprite)\n    lifeSprite:cc.Sprite = null;\n    @property(cc.Sprite)\n    lifeDoubleIco:cc.Sprite = null;\n    @property(cc.Label)\n    lifeLabel:cc.Label = null;\n\n    @property(cc.Sprite)\n    backpack:cc.Sprite = null;\n\n    @property(cc.Node)\n    rewardButton:cc.Node = null;\n    @property(cc.Node)\n    cancelButton:cc.Node = null;\n\n    @property(cc.Node)\n    rankNode:cc.Node = null;\n    @property(cc.Sprite)\n    friendSprite: cc.Sprite = null;\n    // @property(cc.Texture2D)\n    // _tex:cc.Texture2D = null;\n\n    protected _gameScene:GameSceneBase = null;\n    protected _report:Object = null;\n\n    protected _achievementReward:Object = null;//成就奖励\n    protected _timeLimitAward:Object = null;//限时闯关奖励\n    protected _activeNextResidentGearType:number = 0;\n\n    protected getExtraRewardType():GameEndExtraRewardType{\n        return GameEndExtraRewardType.None;\n    }\n\n    protected showAdBanner(){}\n    protected closeAdBanner(){}\n    protected sendMarkID() {}\n    protected recordBestScore(){}\n    protected popUpRearAchievementPanel(){}\n    protected playSoundEffect(){}\n    protected initSupplyItem() { \n        let supplyItemIDs:GameCurrencyType[] = [\n            GameCurrencyType.TrainFood,\n            GameCurrencyType.TrainSoap,\n            GameCurrencyType.TrainEyepatch,\n            GameCurrencyType.TrainHoe,\n        ];\n\n        for (let index = 0; index < this.rewardItems.length; index++) {\n            let item = this.rewardItems[index];\n            item.setItemID(supplyItemIDs[index]);\n        }\n\n        //奖励\n        let IT:Object = this._report['IT'];\n        //喂养道具\n        for (let key in this.rewardItems) {\n            let supplyItem = this.rewardItems[key];\n\n            let itemInfo = ItemInfoManager.getInstance().getItemInfoFromItemID(supplyItem.getItemID());\n            if (itemInfo) {\n                supplyItem.nameLabel.string = itemInfo.localization;\n            }\n            \n            if(IT.hasOwnProperty(supplyItem.getItemID())){\n                let itemNum = IT[supplyItem.getItemID()];\n                if(itemNum){\n                    supplyItem.numLabel.string = itemNum.toString();\n                }\n            }\n        }\n        //金币 爱心\n        if(IT[GameCurrencyType.GoldCoin]){\n            let goldNum = IT[GameCurrencyType.GoldCoin];\n            this.goldLabel.string = goldNum.toString();\n        }\n\n        if(IT[GameCurrencyType.LifeAddOnePoint]){\n            let lifeNum = IT[GameCurrencyType.LifeAddOnePoint];\n            this.lifeLabel.string = lifeNum.toString();\n        }\n    }\n    protected initButtons(){\n        this.rewardButton.on('touchend', this.onConfirmButtonClicked, this);\n        this.cancelButton.on('touchend', this.onCancelButtonClicked, this);\n    }\n    protected popUpGiftBox(){}\n    protected onConfirmButtonClicked(event:cc.Event.EventCustom){}\n    protected onCancelButtonClicked(event:cc.Event.EventCustom){}\n    \n    protected onShareSuccess(){}\n    protected onShareFail(){}\n\n    protected onWatchVideoSuccess(){}\n    protected onWatchVideoFail(){}\n    \n    protected reportResult(endType:MatchGameEndType, rewardType:MatchGameEndRewardType, hasExtraReward:boolean):void{\n        this._gameScene.reportResult(endType, rewardType, hasExtraReward, this.onReportResultRespone, this);\n    }\n\n    protected onReportResultRespone(data):void{\n\n    }\n\n    //设置排行\n    protected setRankView():void{\n\n    }\n    //显示好友排行\n    protected setFriendView():void{\n\n    }\n\n    //刷新子域跳帧\n    private _updateSubDomainFixFrameRate:number = 0;\n    //刷新开放数据域的纹理\n    protected updateSubDomainCanvas () {\n\n    }\n\n    //打开回调\n    onOpen(param:Object){\n\n        let canvas = cc.find(\"Canvas\");\n        if (canvas) {\n            this._gameScene = canvas.getComponent(GameSceneBase);\n        }\n\n        let report = param['report'];\n\n        this._report = report;\n        this.playSoundEffect();\n        this.initSupplyItem();\n        this.recordBestScore();\n        this.setRankView();\n        this.initButtons();\n        this.sendMarkID();\n        this.popUpRearAchievementPanel();\n        this.popUpGiftBox();\n        this.showAdBanner();\n    }\n    //窗口动画弹窗完成\n    onAnimationDone(){\n\n        let starCount = 0;\n        if (this._report.hasOwnProperty('starCount')) {\n            starCount = this._report['starCount'];\n        }\n        let score = 0;\n        if (this._report.hasOwnProperty('totalScore')) {\n            score = this._report['totalScore'];\n        }\n        let highscore = 0;\n        if (this._report.hasOwnProperty('historyHighscore')) {\n            highscore = this._report['historyHighscore'];\n        }\n\n        highscore = Math.max(highscore, score);\n        this.starFrame.setStarCount(starCount);\n        this.starFrame.setScore(score);\n        this.starFrame.setHighscore(highscore);\n        this.starFrame.appear();\n    }\n\n    //关闭回调\n    onClose(){\n\n    }\n\n    update () {\n        this.updateSubDomainCanvas();\n    }\n\n    start () {\n\n    }\n\n    protected rewardFlyToBackpack():void{\n        this.rewardButton.active = false;\n        this.cancelButton.active = false;\n\n        let endPos = this.backpack.node.position;\n        let defTime = 0;\n\n        this.backpack.node.runAction(\n            cc.fadeTo(0.3,255)\n        );\n\n        let aniDisappearFun = (node,dTime)=>{\n            //node.setCascadeOpacityEnabled(true);\n            node.runAction(\n                cc.sequence(\n                    cc.delayTime(dTime),\n                    cc.fadeTo(0.2,0)\n                )\n            );\n        }\n\n        let aniBackpackFun = (ico)=>{\n            ico.runAction(\n                cc.sequence(\n                    cc.delayTime(defTime),\n                    CurveToAction.create(0.6, ico.position, endPos),\n                    cc.callFunc(()=>{\n                        IGame.playAudio(IdentifierManager.getInstance().getMatchAudioFilePath('getitem'));\n                        this.backpack.node.runAction(\n                            cc.sequence(\n                                cc.scaleTo(0.1,2.2),\n                                cc.scaleTo(0.1,2)\n                            )\n                        );\n                    }),\n                    cc.removeSelf(true),\n                )\n            );\n        }\n\n        for (let key in this.rewardItems) {\n            let supplyItem = this.rewardItems[key];\n            let ico = cc.instantiate(supplyItem.ico.node);//复制\n            this.node.addChild(ico);\n            let startWorldPos = supplyItem.node.parent.convertToWorldSpaceAR(supplyItem.node.position);\n            let startPos = this.node.convertToNodeSpaceAR(startWorldPos);\n            ico.position = startPos;\n\n            aniDisappearFun(supplyItem.node,defTime);\n            aniBackpackFun(ico);\n            defTime += 0.3;\n        }\n\n        {\n            //金币\n            aniDisappearFun(this.goldSprite.node,0.5);\n            for(let i=0;i<5;i++){\n                let ico = cc.instantiate(this.goldSprite.node);//复制\n                this.node.addChild(ico);\n                let startWorldPos = this.goldSprite.node.parent.convertToWorldSpaceAR(this.goldSprite.node.position);\n                let startPos = this.node.convertToNodeSpaceAR(startWorldPos);\n                ico.position = startPos;\n                ico.opacity = 0;\n\n                \n                for (let key in ico.children) {\n                    let child = ico.children[key];\n                    child.active = false;\n                }\n\n                let acitons:cc.FiniteTimeAction[] = []\n                let minRadius = Math.round(50 * 0.75);\n                let maxRadius = Math.round(50 * 1.5);\n                let radius = GameMath.randomInt(minRadius,maxRadius);\n                let angle = GameMath.randomInt(0, 360);\n                let radian =  angle / 180.0 * Math.PI;\n                let jumpTargetPos = cc.v2(startPos.x + radius * Math.cos(radian), startPos.y + radius * Math.sin(radian));\n                \n                acitons.push(cc.delayTime(0.1 * i));\n                acitons.push(cc.fadeTo(0,255));\n\n                acitons.push(cc.spawn(cc.scaleTo(0.3, 1).easing(cc.easeBackOut()),\n                                    cc.moveTo(0.3, jumpTargetPos).easing(cc.easeOut(2))));\n                \n                acitons.push(cc.delayTime(0.1));\n                acitons.push(cc.spawn(CurveToAction.create(0.8, startPos, endPos),\n                                    cc.scaleTo(0.6, 0.5)));\n                acitons.push(cc.callFunc(()=>{\n                    IGame.playAudio(IdentifierManager.getInstance().getMatchAudioFilePath('coincollect'));\n                    ico.removeFromParent();\n                    ico.destroy();\n                }));\n        \n                ico.runAction(cc.sequence(acitons));\n            }\n        }\n\n        {\n            //生命值\n            let ico = cc.instantiate(this.lifeSprite.node);//复制\n            this.node.addChild(ico);\n            let startWorldPos = this.lifeSprite.node.parent.convertToWorldSpaceAR(this.lifeSprite.node.position);\n            let startPos = this.node.convertToNodeSpaceAR(startWorldPos);\n            ico.position = startPos;\n            ico.opacity = 0;\n\n           \n\n            for (let key in ico.children) {\n                let child = ico.children[key];\n                child.active = false;\n            }\n\n            aniDisappearFun(this.lifeSprite.node,0.3);\n            ico.runAction(\n                cc.sequence(\n                    // cc.delayTime(defTime),\n                    cc.fadeTo(0,255),\n                    cc.spawn(CurveToAction.create(0.8, ico.position, endPos), cc.scaleTo(0.4,0.5)),\n                    cc.removeSelf(true)\n                )\n            );\n            defTime += 0.3;\n        }\n\n        defTime += 0.8;\n        this.node.runAction(\n            cc.sequence(\n                cc.delayTime(defTime),\n                cc.callFunc(()=>{\n                    this.onRewardFlyToBackpackComplete();\n                })\n            )\n        );\n    }\n\n    protected onRewardFlyToBackpackComplete(){\n        \n    }\n}\n","import IGame from \"../../base/IGame\";\nimport UISceneBase from \"../../component/UISceneBase\";\nimport { GameCurrencyType } from \"../../define/GameCurrencyType\";\nimport GameMath from \"../../extend/utils/GameMath\";\nimport { CollectionID } from \"./defines/CollectionID\";\nimport { EntityColor, EntityID } from \"./defines/EntityID\";\nimport ItemInfoManager from \"./defines/ItemInfoManager\";\nimport { PowerID } from \"./defines/PowerID\";\nimport EntityBase from \"./entity/EntityBase\";\nimport EntityPrefabNodePool from \"./entity/EntityPrefabNodePool\";\nimport FlyerAnimation, { FlyerAnimationType } from \"./entity/flyer/FlyerAnimation\";\nimport FlyerBomb from \"./entity/flyer/FlyerBomb\";\nimport FlyerBullet from \"./entity/flyer/FlyerBullet\";\nimport FlyerCollectedEntity from \"./entity/flyer/FlyerCollectedEntity\";\nimport { ItemBombType } from \"./entity/item/color/bomb/ItemBombBase\";\nimport ItemBombButterfly from \"./entity/item/color/bomb/ItemBombButterfly\";\nimport ItemBombColumn from \"./entity/item/color/bomb/ItemBombColumn\";\nimport ItemBombCross from \"./entity/item/color/bomb/ItemBombCross\";\nimport ItemBombRainbow from \"./entity/item/color/bomb/ItemBombRainbow\";\nimport ItemBombRange from \"./entity/item/color/bomb/ItemBombRange\";\nimport ItemBombRow from \"./entity/item/color/bomb/ItemBombRow\";\nimport ItemNormal from \"./entity/item/color/ItemNormal\";\nimport GridBase, { GridMode } from \"./grid/GridBase\";\nimport GameStatistics, { EventCollectTargets } from \"./statistics/GameStatistics\";\nimport CollectedTrainSupplyBar from \"./userinterface/CollectedTrainSupplyBar\";\nimport CompleteBanner from \"./userinterface/CompleteBanner\";\nimport { GameEndPanelData } from \"./userinterface/GameResultPanel/GameResultBasePanel\";\nimport GearBar, { GearBarType } from \"./userinterface/GearBar\";\nimport ScoreBar from \"./userinterface/ScoreBar\";\nimport StepBar from \"./userinterface/StepBar\";\nimport TargetBanner from \"./userinterface/TargetBanner\";\nimport TargetBar from \"./userinterface/TargetBar\";\n\nconst { ccclass, property } = cc._decorator;\n\nexport enum MatchGameEndType {\n    Complete = 1,\n    GiveUp = 2,\n    GameOver = 3,\n    Terminate = 4,\n};\n\nexport enum MatchGameEndRewardType {\n    None,\n    Normal,\n    Doubled,\n}\n\n@ccclass\nexport default class GameSceneBase extends UISceneBase {\n\n    @property(cc.Node)\n    bgTop: cc.Node = null;\n\n    @property(cc.Node)\n    cancelGearLayer: cc.Node = null;\n\n    @property(cc.Node)\n    backgroundMask: cc.Node = null;\n\n    @property(cc.Node)\n    swallowTouchLayer: cc.Node = null;\n\n    @property(cc.Node)\n    gridFrame: cc.Node = null;\n\n    @property(cc.Label)\n    levelLabel: cc.Label = null;\n\n    @property(TargetBar)\n    targetBar: TargetBar = null;\n\n    @property(CollectedTrainSupplyBar)\n    supplyBar: CollectedTrainSupplyBar = null;\n\n    @property(StepBar)\n    stepBar: StepBar = null;\n\n    @property(ScoreBar)\n    scoreBar: ScoreBar = null;\n\n    @property(GearBar)\n    gearBar: GearBar = null;\n\n    @property(cc.Node)\n    pauseButton: cc.Node = null;\n\n    protected _grid: GridBase = null;\n    protected _mode: GridMode = GridMode.Normal;\n    protected _hasShowCompleteBanner: boolean = false;\n    protected _statistics: GameStatistics = null;\n\n    public canGenerateBomb(): boolean { return false };\n    public canGenerateTrainSupply(): boolean { return false };\n    public canPauseGame(): boolean {\n        if (this._grid) {\n            return this._grid.canPauseGame();\n        }\n        return false;\n    };\n\n    public canGetBonusFromLeftStep(): boolean { return false };\n    public canTriggerGuide(): boolean { return false };\n    public canCountScore(): boolean { return false };\n\n    protected initGameScene(level: number) {\n        IGame.playAudioBGM(\"audio/bgm/bgm_crush\");\n        if (this.pauseButton) {\n            this.pauseButton.on('touchend', this.onPauseTabbed, this);\n        }\n        if (this.swallowTouchLayer) {\n            this.swallowTouchLayer.active = false;\n        }\n        this.clearGameScene();\n        this._statistics = GameStatistics.create(level);\n    };\n\n    protected clearGameScene() {\n        this.destroyGrid();\n        this.destroyStatistics();\n        if (this.targetBar) {\n            this.targetBar.clearTargets();\n        }\n    }\n\n    protected createStatistics(level: number) {\n        this._statistics = GameStatistics.create(level);\n    }\n    protected destroyStatistics() {\n        if (this._statistics) {\n            this._statistics = null;\n        }\n    }\n\n    protected phrasePrewarData(data: Object) { }\n    protected preloadResources() {\n        let entityPool = EntityPrefabNodePool.getInstance();\n        let entities: EntityBase[] = [];\n\n        for (let i = 0; i < 3; i++) {\n            entities.push(FlyerBomb.create(this._grid, EntityColor.Red, false, cc.Vec2.ZERO, 0));\n            entities.push(FlyerBullet.create(this._grid, 0, cc.Vec2.ZERO, cc.Vec2.ZERO, EntityColor.Red, ItemBombType.None, false));\n            entities.push(FlyerCollectedEntity.create(this._grid, CollectionID.ItemNormalRed, 0, cc.Vec2.ZERO));\n\n            entities.push(ItemBombButterfly.create(this._grid, EntityColor.Red));\n            entities.push(ItemBombColumn.create(this._grid, EntityColor.Red));\n            entities.push(ItemBombRow.create(this._grid, EntityColor.Red));\n            entities.push(ItemBombRange.create(this._grid, EntityColor.Red));\n            entities.push(ItemBombCross.create(this._grid, EntityColor.Red));\n            entities.push(ItemBombRainbow.create(this._grid));\n        }\n        let count = Math.floor((this._grid.getGridSize().width * this._grid.getGridSize().height) / 3);\n        for (let i = 0; i < count; i++) {\n            entities.push(ItemNormal.create(this._grid, EntityColor.Red));\n            entities.push(FlyerAnimation.createAnimationWithType(this._grid, FlyerAnimationType.HighlightedCell, true));\n            entities.push(FlyerAnimation.createAnimationWithType(this._grid, FlyerAnimationType.CommonHurt, true));\n            entities.push(FlyerAnimation.createAnimationWithType(this._grid, FlyerAnimationType.Bomb1x1, true));\n        }\n\n        for (let i = 0; i < 5; i++) {\n            entities.push(FlyerAnimation.createDieAnimation(this._grid, EntityID.ItemNormalRed));\n            entities.push(FlyerAnimation.createDieAnimation(this._grid, EntityID.ItemNormalGreen));\n            entities.push(FlyerAnimation.createDieAnimation(this._grid, EntityID.ItemNormalBlue));\n            entities.push(FlyerAnimation.createDieAnimation(this._grid, EntityID.ItemNormalYellow));\n            entities.push(FlyerAnimation.createDieAnimation(this._grid, EntityID.ItemNormalOrange));\n            entities.push(FlyerAnimation.createDieAnimation(this._grid, EntityID.ItemNormalPurple));\n        }\n\n        for (let entity of entities) {\n            entityPool.putPrefabNode(entity);\n        }\n    }\n\n    public getGrid(): GridBase {\n        return this._grid;\n    }\n\n    public createGrid(): void {\n        this.destroyGrid();\n        let mapData = this._statistics.getCurrentMapJson();\n        let viewSize = this.gridFrame.getContentSize();\n        this._grid = GridBase.create(this, viewSize, mapData);\n        this.gridFrame.addChild(this._grid.node);\n        this.gridFrame.opacity = 0;\n        this.setGridMode(GridMode.Normal);\n        this.preloadResources();\n        this.reportStepCreateGrid();\n    }\n\n    public destroyGrid() {\n        if (this._grid) {\n            this._grid.node.destroy();\n            this._grid = null;\n        }\n    }\n\n    public runGame() {\n        this._grid.runGame();\n    }\n\n    public getWorldAreas(type: number, data: string): cc.Rect[] {\n        return this._grid.getWorldAreas(type, data);\n    }\n    public getWorldAreaWithLogicalPos(pos: cc.Vec2) {\n        return this._grid.getWorldAreaWithLogicalPos(pos);\n    }\n\n    public getGridMode(): GridMode {\n        return this._mode;\n    }\n    public setGridMode(mode: GridMode) {\n        if (this._mode == mode) {\n            return;\n        }\n        this._mode = mode;\n        this._grid.tryEnableMode(mode);\n        let itemID = GameCurrencyType.NoneType;\n        switch (this._mode) {\n            case GridMode.ForceClean:\n                itemID = GameCurrencyType.AidHammer;\n                break;\n            case GridMode.CrossBomb:\n                itemID = GameCurrencyType.AidBomb;\n                break;\n            case GridMode.ForceSwap:\n                itemID = GameCurrencyType.AidSwap;\n                break;\n            default:\n                break;\n        }\n        if (this.gearBar) {\n            this.gearBar.focusItemWithGearID(itemID);\n        }\n    }\n\n    public selectGear(itemID: GameCurrencyType) {\n        let mode = GridMode.Normal;\n        switch (itemID) {\n            case GameCurrencyType.AidHammer: {\n                if (this.getGridMode() == GridMode.ForceClean) {\n                    mode = GridMode.Normal;\n                } else {\n                    mode = GridMode.ForceClean;\n                }\n            }\n                break;\n            case GameCurrencyType.AidBomb: {\n                if (this.getGridMode() == GridMode.CrossBomb) {\n                    mode = GridMode.Normal;\n                } else {\n                    mode = GridMode.CrossBomb;\n                }\n            }\n                break;\n            case GameCurrencyType.AidSwap: {\n                if (this.getGridMode() == GridMode.ForceSwap) {\n                    mode = GridMode.Normal;\n                } else {\n                    mode = GridMode.ForceSwap;\n                }\n            }\n                break;\n            default:\n                break;\n        }\n        this.setGridMode(mode);\n    }\n\n    protected updateGears(event: cc.Event.EventCustom) {\n        let data = event.getUserData();\n        let itemID = data['itemID'];\n        if (itemID && itemID != GameCurrencyType.NoneType) {\n            this.updateUserInterface();\n            this.selectGear(itemID);\n        }\n    }\n\n    public hasShowCompleteBanner(): boolean {\n        return this._hasShowCompleteBanner;\n    }\n\n    public hadOperated(): boolean {\n        return this._statistics.hadOperated();\n    }\n\n    public getTickTime(): number {\n        return Math.round(this._statistics.getTick());\n    }\n\n    public getPuppyLeftSteps(): number {\n        return this._statistics.getPuppyLeftSteps();\n    }\n\n    public getShareTimes(): number {\n        return this._statistics.getShareForMoreStepTimes();\n    }\n    public setShareTimes(times: number): void {\n        this._statistics.setShareForMoreStepTimes(times);\n    }\n\n    //获取上报数据\n    public getStatisticsReport(): Object {\n\n        let report: Object = {};\n        report['hadOperated'] = this.hadOperated();\n        report['usedStep_ST'] = this.getPowerAmount(PowerID.UsedSwap);\n        report['leftStep_SL'] = this.getPowerAmount(PowerID.AvailableSwap);\n        report['totalTime_T'] = this.getTickTime();\n        report['shareTimes'] = this.getShareTimes();\n        report['config'] = this.getMatchGameConfig();\n        report['isCompleteWithLastStep'] = this.getCompleteWithLastStep();\n        report['totalScore'] = this.getTotalScore();\n        report['completeScore'] = this.getCompleteScore();\n        report['historyHighscore'] = this.getHistoryHighscore();\n        report['starCount'] = this.getStarsCount();\n        if (this.hasShowCompleteBanner()) {\n            report['isVeryFastComplete'] = this.getPowerAmount(PowerID.UsedSwap) < 10;\n        } else {\n            report['isVeryFastComplete'] = false;\n        }\n\n\n        let targetMap = this.getTargetMap();\n        for (let key in targetMap) {\n            let collectionId = Number(key) as CollectionID;\n            let value: number = 0;\n            if (collectionId == CollectionID.ItemPuppy) {\n                value = this.getPuppyLeftSteps();\n            } else {\n                let left = Math.max(0, targetMap[key] - this.getCollectedEntityAmount(collectionId));\n                value = left;\n            }\n            if (!report['leftTarget_TN']) {\n                report['leftTarget_TN'] = {};\n            }\n            report['leftTarget_TN'][collectionId] = value;\n        }\n\n        report['leftTarget_TN'] = this.getRemainingTargets()\n\n\n\n        let gearMap = this.getUsedGearMap();\n        for (let key in gearMap) {\n            let gear = gearMap[key];\n            if (gear > 0) {\n                if (!report['usedGear_GN']) {\n                    report['usedGear_GN'] = {};\n                }\n                report['usedGear_GN'][key] = gear;\n            }\n        }\n\n        let collectedSupplyMap = this.getCollectedSupplyMap();\n        let IT: Object = {};\n        for (let key in collectedSupplyMap) {\n            let amount = collectedSupplyMap[key];\n            let itemID = Number(key) as GameCurrencyType;\n            IT[itemID] = amount;\n        }\n        report['IT'] = IT;\n        return report;\n    }\n\n    public disappearUI() {\n        let anim = this.node.getComponent(cc.Animation);\n        if (anim) {\n            anim.play('disappear');\n        }\n    }\n\n    public appearUI() {\n        let anim = this.node.getComponent(cc.Animation);\n        if (anim) {\n            anim.play('appear');\n        }\n        this.gridFrame.opacity = 255;\n    }\n\n    public getLevel(): number {\n        return this._statistics.getLevel();\n    }\n\n    public getMatchGameConfig(): Object {\n        return this._statistics.getMatchGameConfig();\n    }\n\n    public getDropEntityMap(): Object {\n        return this._statistics.getDropEntityMap();\n    }\n\n    public resetDropConfig(): void {\n        this._statistics.resetDropConfig();\n    }\n\n    public getLimitedEntityMap(): Object {\n        return this._statistics.getLimitedEntityMap();\n    }\n\n    public getLimitedGroupMap(): Object {\n        return this._statistics.getLimitedGroupMap();\n    }\n\n    public getTargetMap(): Object {\n        return this._statistics.getTargetMap();\n    }\n\n    public getRemainingTargets(): Object {\n        return this._statistics.getRemainingTargets();\n    }\n\n    public getTargetAmount(collectionID: CollectionID): number {\n        return this._statistics.getTargetAmount(collectionID);\n    }\n\n    public isTargetCollectionID(collectionID: CollectionID): boolean {\n        return this._statistics.isTargetCollectionID(collectionID)\n    }\n\n    public getCollectedEntityAmount(collectionID: CollectionID): number {\n        return this._statistics.getCollectedEntityAmount(collectionID)\n    }\n\n    public setCollectedEntityAmount(collectionID: CollectionID, amount: number): void {\n        this._statistics.setCollectedEntityAmount(collectionID, amount);\n    }\n\n    public getCollectedSupplyMap(): Object {\n        return this._statistics.getCollectedSupplyMap();\n    }\n\n    public getCollectedSupplyAmount(itemID: GameCurrencyType): number {\n        return this._statistics.getCollectedSupplyAmount(itemID);\n    }\n    public setCollectedSupplyAmount(itemID: GameCurrencyType, amount: number): void {\n        this._statistics.setCollectedSupplyAmount(itemID, amount);\n    }\n\n    public getPowerAmount(powerID: PowerID): number {\n        return this._statistics.getPowerAmount(powerID);\n    }\n    public setPowerAmount(powerID: PowerID, amount: number): void {\n        this._statistics.setPowerAmount(powerID, amount);\n    }\n    public gainPowerAmount(powerID: PowerID, amount: number): void {\n        this.setPowerAmount(powerID, this.getPowerAmount(powerID) + amount);\n    }\n    public lossPowerAmount(powerID: PowerID, amount: number): void {\n        this.gainPowerAmount(powerID, -amount);\n    }\n\n    public getLaunchGearMap(): object {\n        return this._statistics.getLaunchGearMap();\n    }\n    public clearLaunchGears() {\n        this._statistics.clearLaunchGears();\n    }\n\n    public getPrewarGearAmount(itemID: GameCurrencyType): number {\n        return this._statistics.getPrewarGearAmount(itemID);;\n    }\n\n    public setPrewarGearAmount(itemID: GameCurrencyType, amount: number): void {\n        this._statistics.setPrewarGearAmount(itemID, amount);\n    }\n\n\n    public getAvailableGearItemAmount(itemID: GameCurrencyType): number {\n        return this._statistics.getAvailableGearItemAmount(itemID)\n    }\n\n    public getUsedGearMap(): Object {\n        return this._statistics.getUsedGearMap();\n    }\n    public getUsedGearAmount(itemID: GameCurrencyType): number {\n        return this._statistics.getUsedGearAmount(itemID);\n    }\n    public setUsedGearAmount(itemID: GameCurrencyType, amount: number): void {\n        this._statistics.setUsedGearAmount(itemID, amount);\n        this.updateUserInterface();\n    }\n\n    public getLimitedGearMap(): Object {\n        return this._statistics.getLimitedGearMap();\n    }\n\n    public setLimitedGearAmount(id: GameCurrencyType, amount: number): void {\n        this._statistics.setLimitedGearAmount(id, amount);\n    }\n\n    public getLimitedGearAmount(id: GameCurrencyType): number {\n        return this._statistics.getLimitedGearAmount(id);\n    }\n    public getCompleteWithLastStep(): boolean {\n        return this._statistics.getCompleteWithLastStep();\n    }\n    public setCompleteWithLastStep(value: boolean): void {\n        this._statistics.setCompleteWithLastStep(value);\n    }\n    public getTotalScore(): number {\n        return this._statistics.getTotalScore();\n    }\n    public setTotalScore(score: number) {\n        this._statistics.setTotalScore(score);\n    }\n    public gainTotalScore(delta: number) {\n        this.setTotalScore(this.getTotalScore() + delta)\n    }\n    public lossTotalScore(delta: number) {\n        this.gainTotalScore(-delta)\n    }\n    public getHistoryHighscore(): number {\n        return this._statistics.getHistoryHighScore();\n    }\n    public setHistoryHighscore(score: number) {\n        this._statistics.setHistoryHighScore(score)\n    }\n\n    public getStarScores(): number[] {\n        return this._statistics.getStarScores();\n    }\n    public getStarsCount(): number {\n        return this._statistics.getStarsCount();\n    }\n    public getCompleteScore(): number {\n        return this._statistics.getCompleteScore();\n    }\n    public setCompleteScore(score: number) {\n        this._statistics.setCompleteScore(score);\n\n        if (this.scoreBar) {\n            this.scoreBar.updateScore()\n        }\n    }\n    public getCompleteReward(): object {\n        return this._statistics.getCompleteReward();\n    }\n    public getBonusStepCount(): number {\n        return this._statistics.getBonusStepCount();\n    }\n    public setBonusStepCount(count: number) {\n        this._statistics.setBonusStepCount(count);\n    }\n\n    public getEndUIData(): GameEndPanelData {\n        return this._statistics.getEndUIData();\n    }\n    public setEndUIData(data: GameEndPanelData) {\n        this._statistics.setEndUIData(data);\n    }\n    public getEventTargets(): EventCollectTargets {\n        return this._statistics.getEventTargets()\n    }\n    public setEventTargets(targets: EventCollectTargets) {\n        this._statistics.setEventTargets(targets);\n    }\n\n    public getShouldShowAdBanner(): boolean {\n        if (this.gearBar) {\n            return this.gearBar.getType() == GearBarType.Drawer\n        }\n        return false\n    }\n\n    public isCompleted(): boolean {\n        return this._statistics.finishAllTarget();\n    }\n\n    public isFailed() {\n        let available = this.getPowerAmount(PowerID.AvailableSwap);\n        if (available <= 0) {\n            return true;\n        }\n        return false;\n    }\n\n\n    public updateUserInterface(): void { }\n\n    protected updateLevelBar() {\n        if (this.levelLabel) {\n            let levle = this.getLevel();\n            this.levelLabel.string = levle.toString();\n        }\n    }\n\n    public getWorldPosForTarget(collectionID: CollectionID): cc.Vec2 {\n        if (this.targetBar) {\n            return this.targetBar.getWorldPosWithCollectionID(collectionID);\n        }\n        return cc.v2(0, 0);\n    }\n    public updateTargetBarUIWithDelta(collectionID: CollectionID, delta: number) {\n        if (this.targetBar) {\n            let item = this.targetBar.getItemWithCollectionID(collectionID);\n            if (item) {\n                let oldAmount = item.getAmount();\n                item.setAmount(oldAmount + delta);\n            }\n        }\n    }\n    protected updateTargetBar() {\n        if (this.targetBar) {\n            this.targetBar.setTargetData(this.getRemainingTargets());\n            this.targetBar.hideAll();\n        }\n    }\n\n    public getWorldPosForSupply(itemID: GameCurrencyType): cc.Vec2 {\n        if (this.supplyBar) {\n            return this.supplyBar.getWorldPosWithSupplyItemID(itemID);\n        }\n        return cc.v2(0, 0);\n    }\n\n    public updateSupplyBarUIWithDelta(itemID: GameCurrencyType, delta: number) {\n        if (this.supplyBar) {\n            let item = this.supplyBar.getItemWithSupplyItemID(itemID);\n            if (item) {\n                item.setAmount(item.getAmount() + delta);\n            }\n        }\n    }\n    protected updateSupplyBar() {\n        if (this.supplyBar) {\n            this.supplyBar.setSupplyData(this.getCollectedSupplyMap());\n            this.supplyBar.node.active = !this.isPlayingHistoryLevel();\n        }\n    }\n\n    public getWorldPosForStep(): cc.Vec2 {\n        if (this.stepBar) {\n            return cc.v2(this.stepBar.getWorldPos());\n        }\n        return cc.v2(0, 0);\n    }\n\n    protected updateStepBar() {\n        if (this.stepBar) {\n            this.stepBar.setAmount(this.getPowerAmount(PowerID.AvailableSwap));\n        }\n    }\n\n    public updateStepBarUIWithDelta(delta: number) {\n        if (this.stepBar) {\n            this.stepBar.setAmount(this.stepBar.getAmount() + delta);\n        }\n    }\n\n    public getWorldPosForScore(): cc.Vec2 {\n        if (this.scoreBar) {\n            return cc.v2(this.scoreBar.getWorldPos());\n        }\n        return cc.v2(0, 0);\n    }\n\n    public getWorldPosForStar(index: number): cc.Vec2 {\n        if (this.scoreBar) {\n            return cc.v2(this.scoreBar.getWorldPosForStar(index));\n        }\n        return cc.v2(0, 0);\n    }\n\n    public updateScoreBarUIWithDelta(delta: number) {\n        if (this.scoreBar) {\n            this.scoreBar.setScore(this.scoreBar.getScore() + delta)\n        }\n    }\n\n    public getWorldPosForGear(itemID: GameCurrencyType): cc.Vec2 {\n        if (this.gearBar) {\n            return this.gearBar.getGearIconWorldPos(itemID);\n        }\n        return cc.v2(0, 0);\n    }\n\n    protected updateGearBar() {\n        if (this.gearBar) {\n            this.gearBar.updateGears();\n        }\n    }\n    protected updateScore() {\n        this.scoreBar.updateScore()\n    }\n\n    public showTargetBanner(): void {\n        let targetBanner = TargetBanner.create(this.getLevel(), this.getRemainingTargets());\n        if (targetBanner) {\n            this.node.addChild(targetBanner.node, 1000);\n        }\n    }\n\n    public showCompleteBanner(): void {\n        let completeBanner = CompleteBanner.create(this.getLevel(), this.onCompleteBannerDisappear.bind(this), false);\n        if (completeBanner) {\n            this.node.addChild(completeBanner.node, 1000);\n        }\n        this.swallowTouchLayer.active = true;\n        this.setGridMode(GridMode.Normal);\n        this.setCompleteScore(this.getTotalScore());\n\n    }\n    protected onCompleteBannerDisappear(object: Object): void {\n        this._hasShowCompleteBanner = true;\n    }\n    public congratulation(): void {\n    }\n    public noMoreStep(): void { }\n    public stalemate() { }\n    public showReplayPrepareUI() { }\n    public cheatGameWithLevel(level: number) { }\n\n    public endGameWithReplay(replay: boolean) {\n        if (replay) {\n            this.clearForReplay();\n        } else {\n            this.backToMainScene(false);\n        }\n    }\n\n    public clearForReplay() {\n        this._grid.clearGameForReplay();\n    }\n\n    public isPlayingHistoryLevel(): boolean {\n        return false;\n    }\n\n    public getStepMark(key: string): number {\n        return 0;\n    }\n\n    public reportStepMark(key: string) {\n\n    }\n\n    public reportStepInit() {\n        this.reportStepMark('onInit')\n    }\n    public reportStepCreateGrid() {\n        this.reportStepMark('onCreateGrid');\n    }\n    public reportStepSwap(steps: number) {\n        let key = 'onStep' + steps.toString();\n        this.reportStepMark(key);\n    }\n\n    public reportStepComplete() {\n        this.reportStepMark('onComplete');\n    }\n\n    public reportStepCongratulation() {\n        this.reportStepMark('onCongratulation');\n    }\n\n    public reportStepNextGame() {\n        this.reportStepMark('onNextGame');\n    }\n\n    public onPauseTabbed(evt: cc.Event.EventTouch) { }\n    public nextGame() { }\n    public quitGame() { }\n    public replayGame() { }\n    public gameOver() { }\n    public showGameFail() { }\n    public onNoMoreStep(object: Object) { }\n    public stalemateGame() { }\n    public backToMainScene(prepareNext: boolean) { }\n    public beforePlayerOperated() { };\n    public onPlayerOperated() { };\n    public onRecevieGiftBox(data: Object) { }\n    public onCancleGiftBox(data: Object) { }\n    public hideAdBanner() {\n        if (this.gearBar) {\n            this.gearBar.setType(GearBarType.Normal);\n        }\n    }\n\n    public getRequestUseGearParam(itemID: GameCurrencyType, amount: number): Object {\n        let parram: Object = {}\n        return parram\n    }\n\n    public requestUseGear(itemID: GameCurrencyType,\n        amount: number,\n        allbackFunc: Function = null,\n        callbackObj: any = null) { }\n\n    public requestBuyMoreStep(currencyID: GameCurrencyType,\n        price: number,\n        itemID: GameCurrencyType,\n        allbackFunc: Function = null,\n        callbackObj: any = null) { }\n\n    public getReportResultParam(endType: MatchGameEndType,\n        rewardType: MatchGameEndRewardType,\n        hasExtraReward: boolean): Object {\n        let parram = {}\n        return parram\n    }\n    public reportResult(endType: MatchGameEndType,\n        rewardType: MatchGameEndRewardType,\n        hasExtraReward: boolean,\n        callbackFunc: Function = null,\n        callbackObj: any = null) { }\n\n    public cancelGear(event: cc.Event.EventCustom) {\n        this.selectGear(GameCurrencyType.NoneType);\n    }\n\n    onLoad() {\n        let winSize = cc.view.getVisibleSize();\n        let canvas = this.getComponent(cc.Canvas);\n        if (winSize.height / winSize.width >= 1.7) {\n            canvas.fitHeight = false\n            canvas.fitWidth = true;\n            let height = canvas.designResolution.width / winSize.width * winSize.height\n            canvas.designResolution = cc.size(canvas.designResolution.width, height)\n        } else {\n            canvas.fitHeight = true\n            canvas.fitWidth = false;\n            let width = canvas.designResolution.height / winSize.height * winSize.width\n            canvas.designResolution = cc.size(width, canvas.designResolution.height)\n        }\n\n        if (this.bgTop) {\n            this.bgTop.scale = GameMath.getScaleFromViewSize(canvas.designResolution, this.bgTop.getContentSize(), 1, 2)\n            let boundBox = this.bgTop.getBoundingBox();\n            let x = 0;\n            let y = Math.max(canvas.designResolution.height * 0.5 - boundBox.height, 0);\n            y = y + boundBox.height * this.bgTop.anchorY;\n            this.bgTop.setPosition(cc.v2(x, y));\n        }\n\n        if (this.cancelGearLayer) {\n            this.cancelGearLayer.on('touchend', this.cancelGear, this);\n            this.cancelGearLayer.active = false;\n        }\n    }\n\n    public getCurrentPetAnimationName() {\n        let result = '';\n\n        return result;\n    }\n\n    update(dt) {\n        dt = dt * cc.director.getScheduler().getTimeScale();\n        if (this._statistics) {\n            this._statistics.tick(dt);\n        }\n    }\n\n    onDestroy() {\n        this.stepBar = null;\n        this.levelLabel = null;\n        this.gridFrame = null;\n        this.gearBar = null;\n        this.targetBar = null;\n        this.supplyBar = null;\n        this.pauseButton = null;\n        this.swallowTouchLayer = null;\n        this._grid = null;\n        this._statistics = null;\n        EntityPrefabNodePool.getInstance().clear();\n    }\n}\n","import GameSceneBase from \"../GameSceneBase\";\n\n// Learn TypeScript:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/typescript.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/typescript.html\n// Learn Attribute:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class GameStalematePanel extends cc.Component {\n\n    private _report:Object = null;\n    private _gameScene:GameSceneBase = null;\n    onOpen(param:Object){\n        this._report = param;\n        let canvas = cc.find(\"Canvas\");\n        if (canvas) {\n            this._gameScene = canvas.getComponent(GameSceneBase);\n        }\n    }\n\n    onClose() {\n        this._report = null;\n        this._gameScene = null;\n    }\n\n    onCloseBtnClick(){\n        this._gameScene.stalemateGame();\n    }\n}\n","import { CFGTripleLevel } from \"../../../config/CFGTripleLevel\";\nimport { CFGTripleLevelGrass } from \"../../../config/CFGTripleLevelGrass\";\nimport { CFGTripleLevelOrder } from \"../../../config/CFGTripleLevelOrder\";\nimport { CFGTripleLevelPath } from \"../../../config/CFGTripleLevelPath\";\nimport { CFGTripleLevelPopsicles } from \"../../../config/CFGTripleLevelPopsicles\";\nimport { CFGTripleMap } from \"../../../config/CFGTripleMap\";\nimport GameConfig, { DebugMatchType } from \"../../../define/GameConfig\";\nimport { GameCurrencyType } from \"../../../define/GameCurrencyType\";\nimport GameMath from \"../../../extend/utils/GameMath\";\nimport TMXJsonPhraser from \"../../../extend/utils/TMXJsonPhraser\";\nimport { CollectionID } from \"../defines/CollectionID\";\nimport { EntityGroupID } from \"../defines/EntityGroupID\";\nimport { EntityID } from \"../defines/EntityID\";\nimport IdentifierManager from \"../defines/IdentifierManager\";\nimport { KindID } from \"../defines/KindID\";\nimport { PowerID } from \"../defines/PowerID\";\nimport TMXConfigInfoKeys from \"../defines/TMXConfigInfoKeys\";\nimport { GameEndPanelData } from \"../userinterface/GameResultPanel/GameResultBasePanel\";\n\n\n\n\n/**\n * Created by chenzd on 2018/7/27.\n * 三消统计\n */\n\nexport enum GameType{\n    None,\n    Order,      // 订单\n    Grass,      // 铺草坪\n    Popsicle,   // 冰棍\n    Path,       // 路径\n};\n\nexport enum GameMode{\n    None,\n    Normal,\n    ClimbingTower,\n}\n\nexport class EventCollectTargets{\n    public _collections:CollectionID[] = [];\n\n    public static createWithData(data:Object){\n        let targets = [];\n        if (data && data.hasOwnProperty('TTID')) {\n            targets = data['TTID'];\n        }\n        return EventCollectTargets.create(targets);\n    }\n\n    public static create(targets:number[]):EventCollectTargets{\n        let result = new EventCollectTargets();\n        result.setTargets(targets);\n        return result;\n    }\n\n    public setTargets(targets:number[]){\n        this._collections.length = 0;\n        for (let target of targets) {\n            this._collections.push(target);\n        }\n    }\n\n    public getTargets():CollectionID[]{\n        return this._collections\n    }\n}\n\nexport default class GameStatistics{\n\n    //三消关卡配置对象\n    private _cfgObj:Object = {};\n    private _mapDatas:Object[] = [];\n    private _mapIndex:number = 0;\n    private _targetMap:Object = {};\n    private _collectedEntityMap:Object = {};\n    private _collectedSupplyMap:Object = {};\n    private _recordedSupplyMap:Object = {};\n    private _collectedEnergyMap:Object = {};\n    private _dropEntityMap:Object = {};\n    private _limitEntityMap:Object = {};\n    private _limitGroupMap:Object = {};\n    private _prewarGear:Object = {};\n    private _usedGear:Object = {};\n    private _limitedGear:Object = {};\n    private _totalTime:number = 0;\n    private _shareForMoreStepTimes:number = 0;\n    private _endUIData:GameEndPanelData = new GameEndPanelData();\n    private _level:number = 0;\n    private _completeWithLastStep:boolean = false;\n    private _totalScore:number = 0;\n    private _historyHighscore:number = 0;\n    private _completeScore:number = 0;\n    private _bonusStepCount:number = 0;\n    private _eventTargets:EventCollectTargets = new EventCollectTargets();\n    private _startScores:number[] = [];\n    private _completeReward:Object = {};\n    private _availableGear:Object = {};\n    \n    public static create(level:number) : GameStatistics {\n        let result = new GameStatistics();\n        result.init(level);\n        return result;\n    }\n    constructor(){\n    }\n    \n    private init(level:number):void{\n        this._level = level;\n        this.clear();\n        let tmpCfg = GameStatistics.getMatchCfgByLevel(level);\n        if (GameConfig.IsDebug) {\n            switch (GameConfig.DebugMatchType) {\n                case DebugMatchType.Order:\n                    this.initOrderTestConfig(tmpCfg);            \n                    break;\n                case DebugMatchType.Grass:\n                    this.initGrassTestConfig(tmpCfg);            \n                    break;\n                case DebugMatchType.Popsicle:\n                    this.initPopsicleTestConfig(tmpCfg);            \n                    break;\n                case DebugMatchType.Path:\n                    this.initPathTestConfig(tmpCfg);            \n                    break;\n                default:\n                    break;\n            }\n        }\n        \n        let levelType = tmpCfg['LevelType'];\n        switch(levelType){\n            case GameType.Order:{\n                this.setPowerAmount(PowerID.AvailableSwap, tmpCfg['Step']);\n                this.initMapJsonsWithMapNames(tmpCfg['MapID']);\n                this.initCompleteReward(tmpCfg['LevelReward'], tmpCfg['RewardNum']);\n                this.initDropEntities(tmpCfg['DropBox'], tmpCfg['DropProb']);\n                this.initTargetEntities(tmpCfg['Target'], tmpCfg['TargetNum']);\n                this.initLimitEntities(tmpCfg['DropLimit'], tmpCfg['DropLimitNum']);\n                this.initStarScores(tmpCfg['StarScore']);\n                break;\n            }\n            case GameType.Grass:{\n                this.setPowerAmount(PowerID.AvailableSwap, tmpCfg['Step']);\n                this.initMapJsonsWithMapNames(tmpCfg['MapID']);\n                this.initCompleteReward(tmpCfg['LevelReward'], tmpCfg['RewardNum']);\n                this.initDropEntities(tmpCfg['DropBox'], tmpCfg['DropProb']);\n                this.initTargetGrass(this._mapDatas);\n                this.initStarScores(tmpCfg['StarScore']);\n                break;\n            }\n            case GameType.Popsicle:{\n                this.setPowerAmount(PowerID.AvailableSwap, tmpCfg['Step']);\n                this.initMapJsonsWithMapNames(tmpCfg['MapID']);\n                this.initCompleteReward(tmpCfg['LevelReward'], tmpCfg['RewardNum']);\n                this.initDropEntities(tmpCfg['DropBox'], tmpCfg['DropProb']);\n                this.initTargetPopsicle(this._mapDatas);\n                this.initStarScores(tmpCfg['StarScore']);\n                break;\n            }\n            case GameType.Path:{\n                this.setPowerAmount(PowerID.AvailableSwap, tmpCfg['Step']);\n                this.initMapJsonsWithMapNames(tmpCfg['MapID']);\n                this.initCompleteReward(tmpCfg['LevelReward'], tmpCfg['RewardNum']);\n                this.initDropEntities(tmpCfg['DropBox'], tmpCfg['DropProb']);\n                this.initTargetEntities('puppy', '1')\n                this.initLimitEntities(tmpCfg['DropLimit'], tmpCfg['DropLimitNum']);\n                this.initTargetPath(this._mapDatas);\n                this.initStarScores(tmpCfg['StarScore']);\n                break;\n            }\n        }\n        this._cfgObj = tmpCfg;\n\n    }\n\n    protected initOrderTestConfig(config:Object) {\n        config['LevelType'] = 1;\n        config['Step'] = 1;\n        config['MapID'] = 'test_maps/TestOrder';\n        config['DropBox'] = 'red|green|blue|yellow|orange';\n        config['DropProb'] = '100|100|100|100|100';\n        config['Target'] = 'purple';\n        config['TargetNum'] = '3';\n    }\n\n    protected initGrassTestConfig(config:Object) {\n        config['LevelType'] = 2;\n        config['Step'] = 1;\n        config['MapID'] = 'test_maps/TestGrass';\n        config['DropBox'] = 'red|blue|orange|yellow|green';\n        config['DropProb'] = '100|100|100|100|100';\n        config['DropLimit'] = 'red|blue';\n        config['DropLimitNum'] = '3|3';\n    }\n\n    protected initPopsicleTestConfig(config:Object) {\n        config['LevelType'] = 3;\n        config['Step'] = 99;\n        config['MapID'] = 'test_maps/TestPopsicle';\n        config['DropBox'] = 'red|blue|orange|yellow|green';\n        config['DropProb'] = '100|100|100|100|100';\n        config['DropLimit'] = 'red|blue';\n        config['DropLimitNum'] = '3|3';\n    }\n\n    protected initPathTestConfig(config:Object) {\n        config['LevelType'] = 4;\n        config['Step'] = 99;\n        config['MapID'] = 'test_maps/TestPath';\n        config['DropBox'] = 'red|blue|orange|yellow|green|purple';\n        config['DropProb'] = '100|100|100|100|100|100';\n        config['DropLimit'] = '';\n        config['DropLimitNum'] = '';\n    }\n\n\n    //根据关卡获取关卡类型\n    public static getLevelTypeByLevel(levelNum:number):GameType{\n        let type = GameType.None;\n        let cfgTripleLevelObj = CFGTripleLevel.getInstance().getCongfigByLevelNum(levelNum);\n        if(cfgTripleLevelObj){\n            type = cfgTripleLevelObj.LevelType;\n        }\n        return type;\n    }\n\n    //根据关卡获取所有关卡配置\n    public static getMatchCfgByLevel(levelNum:number):Object{\n\n        let retObj:Object = {};\n        let cfgTripleLevelObj = CFGTripleLevel.getInstance().getCongfigByLevelNum(levelNum);\n        if(!cfgTripleLevelObj){\n            return retObj;\n        }\n\n        for(let key in cfgTripleLevelObj){\n            retObj[key] = cfgTripleLevelObj[key];\n        }\n\n        let config = null;\n        if(cfgTripleLevelObj.LevelType == GameType.Order){\n            config = new CFGTripleLevelOrder();\n        }else if(cfgTripleLevelObj.LevelType == GameType.Grass){\n            config = new CFGTripleLevelGrass();\n        }else if(cfgTripleLevelObj.LevelType == GameType.Popsicle){\n            config = new CFGTripleLevelPopsicles();\n        }else if(cfgTripleLevelObj.LevelType == GameType.Path){\n            config = new CFGTripleLevelPath();\n        }\n        if(config){\n            let configObj = config.getCongfigByLevelID(cfgTripleLevelObj.LevelID);\n\n            for(let key in configObj){\n                retObj[key] = configObj[key];\n            }\n        }\n        return retObj;\n    }\n\n    public getMatchGameConfig() : Object {\n        return this._cfgObj;\n    }\n\n    public getCurrentMapJson():Object{\n        if(this._mapDatas.length > 0){\n            return this._mapDatas[this._mapIndex]\n        }\n        return {};\n    }\n\n    public nextMapJson():boolean{\n        if(this._mapIndex + 1 < this._mapDatas.length){\n            this._mapIndex += 1;\n            return true;\n        }\n        return false;\n    }\n\n    public getTotalScore():number {\n        return this._totalScore;\n    }\n\n    public setTotalScore(score:number){\n        this._totalScore = Math.max(0, score);\n    }\n\n    public getHistoryHighScore():number {\n        return this._historyHighscore;\n    }\n\n    public setHistoryHighScore(score:number){\n        if (score) {\n            this._historyHighscore = Math.max(0, score);    \n        }\n    }\n\n    public getStarScores():number[]{\n        return this._startScores;\n    }\n\n    public getStarsCount():number{\n        let index = 0\n        for (; index < this._startScores.length; index++) {\n            let score = this._startScores[index];\n            if (score > this._totalScore) {\n                break;   \n            }\n        }\n        return index;\n    }\n\n    public getCompleteScore():number{\n        return this._completeScore;\n    }\n\n    public setCompleteScore(score:number){\n        this._completeScore = score;\n    }\n\n    public getCompleteReward():object{\n        return this._completeReward;\n    }\n\n    public getBonusStepCount():number{\n        return this._bonusStepCount;\n    }\n    public setBonusStepCount(count:number){\n        this._bonusStepCount = count;\n    }\n\n    public getCompleteWithLastStep() :boolean{\n        return this._completeWithLastStep;\n    }\n\n    public setCompleteWithLastStep(value:boolean):void{\n        this._completeWithLastStep = value;\n    }\n\n    public getTargetMap():Object{\n        return this._targetMap;\n    }\n\n    public getRemainingTargets():Object{\n        let result = {};\n        for (let key in this._targetMap) {\n            let targetAmount = this._targetMap[key];\n            let collectionID = Number(key) as CollectionID;\n            let collectedAmount = this.getCollectedEntityAmount(collectionID);\n            let leftAmount = targetAmount - collectedAmount;\n            result[collectionID] = Math.max(leftAmount, 0);\n        }\n        return result\n    }\n\n    public getTargetAmount(collectionID:CollectionID):number{\n        if(this._targetMap.hasOwnProperty(collectionID)){\n            return this._targetMap[collectionID];\n        }\n        return 0;\n    }\n\n    public finishAllTarget():boolean{\n        let finish = true;\n        for (let key in this._targetMap) {\n            let targetAmount = this._targetMap[key];\n            let collectionID = Number(key) as CollectionID;\n            let collectedAmount = this.getCollectedEntityAmount(collectionID);\n            if (collectedAmount < targetAmount) {\n                finish = false;\n                break;\n            }\n        }\n        return finish;\n    }\n\n    public isTargetCollectionID(collectionID:CollectionID):boolean{\n        let targetAmount = this.getTargetAmount(collectionID);\n        let currentAmount = this.getCollectedEntityAmount(collectionID);\n        if (currentAmount < targetAmount) {\n            return true;\n        }\n        return false;\n    }\n\n    public setTargetAmount(collectionID:CollectionID, amount:number):void{\n        if (collectionID == CollectionID.None) {\n            return;\n        }\n        amount = Math.max(amount, 0);\n        this._targetMap[collectionID] = amount;\n    }\n\n    public getCollectedEntityMap():Object{\n        return this._collectedEntityMap;\n    }\n\n    public getCollectedEntityAmount(collectionID:CollectionID):number{\n        if(this._collectedEntityMap.hasOwnProperty(collectionID)){\n            return this._collectedEntityMap[collectionID];\n        }\n        return 0;\n    }\n\n    public setCollectedEntityAmount(collectionID:CollectionID, amount:number):void{\n        if (collectionID == CollectionID.None) {\n            return;\n        }\n        amount = Math.max(amount, 0);\n        this._collectedEntityMap[collectionID] = amount;\n    }\n\n    public getCollectedSupplyMap():Object{\n        return this._collectedSupplyMap;\n    }\n\n    public getCollectedSupplyAmount(itemID:GameCurrencyType):number{\n        if(this._collectedSupplyMap.hasOwnProperty(itemID)){\n            return this._collectedSupplyMap[itemID];\n        }\n        return 0;\n    }\n\n    public setCollectedSupplyAmount(itemID:GameCurrencyType, amount:number):void{\n        if (itemID == GameCurrencyType.NoneType) {\n            return;\n        }\n        amount = Math.max(amount, 0);\n        this._collectedSupplyMap[itemID] = amount;\n    }\n\n    public getRecordedSupplyInfo(itemID:GameCurrencyType) : Object {\n        return this._recordedSupplyMap[itemID];\n    }\n\n    public getPowerAmount(energyID:PowerID):number{\n        if(this._collectedEnergyMap.hasOwnProperty(energyID)){\n            return this._collectedEnergyMap[energyID];\n        }\n        return 0;\n    }\n\n    public setPowerAmount(energyID:PowerID, amount:number):void{\n        if (energyID == PowerID.None) {\n            return;\n        }\n        amount = Math.max(amount, 0);\n        this._collectedEnergyMap[energyID] = amount;\n    }\n\n    private _puppyStepCount:number = 0;\n    public getPuppyTotalStepCount():number {\n        return this._puppyStepCount;\n    }\n    public getPuppyLeftSteps():number {\n        return this._puppyStepCount - this.getPowerAmount(PowerID.PuppyMovedStep);\n    }\n\n    public getDropEntityMap():Object{\n        return this._dropEntityMap;\n    }\n\n    public getLimitedEntityMap():Object{\n        return this._limitEntityMap;\n    }\n\n    public getLimitedGroupMap():Object{\n        return this._limitGroupMap;\n    }\n\n    public resetDropConfig():void{\n        this.initDropEntities(\"red|green|blue|yellow|orange|purple\",\n        \"100|100|100|100|100|100\");\n        GameMath.clearObject(this._limitEntityMap);\n        GameMath.clearObject(this._limitGroupMap);\n    }\n\n    public getLaunchGearMap():object{\n        return this._prewarGear\n    }\n    public clearLaunchGears() {\n        GameMath.clearObject(this._prewarGear);\n    }\n    public setPrewarGearAmount(id:GameCurrencyType, amount:number):void{\n        if (id == GameCurrencyType.NoneType) {\n            return;\n        }\n        this._prewarGear[id] = Math.max(0, amount);\n    }\n\n    public getPrewarGearAmount(id:GameCurrencyType):number{\n        let result:number = 0;\n        if(this._prewarGear.hasOwnProperty(id)){\n            result = this._prewarGear[id];\n        }\n        return result;\n    }\n\n    public getAvailableGearItemAmount(itemID:GameCurrencyType):number{\n        let reslut = 0;\n        if (this._availableGear.hasOwnProperty(reslut)) {\n            reslut = this._availableGear[itemID]\n        }\n        return reslut;\n    }\n    public setAvailableGearItemAmount(itemID:GameCurrencyType, amount){\n        this._availableGear[itemID] = amount\n    }\n\n    public getUsedGearMap():Object{\n        return this._usedGear;\n    }\n\n    public setUsedGearAmount(id:GameCurrencyType, amount:number):void{\n        if (id == GameCurrencyType.NoneType) {\n            return;\n        }\n        this._usedGear[id] = Math.max(0, amount);\n    }\n\n    public getUsedGearAmount(id:GameCurrencyType):number{\n        let result:number = 0;\n        if(this._usedGear.hasOwnProperty(id)){\n            result = this._usedGear[id];\n        }\n        return result;\n    }\n\n    public getLimitedGearMap():Object{\n        return this._limitedGear;\n    }\n\n    public setLimitedGearAmount(id:GameCurrencyType, amount:number):void{\n        if (id == GameCurrencyType.NoneType) {\n            return;\n        }\n        this._limitedGear[id] = amount;\n    }\n\n    public getLimitedGearAmount(id:GameCurrencyType):number{\n        let result:number = -1;\n        if(this._limitedGear.hasOwnProperty(id)){\n            result = this._limitedGear[id];\n        }\n        return result;\n    }\n\n    public getEventTargets() : EventCollectTargets{\n        return this._eventTargets;\n    }\n    public setEventTargets(targets:EventCollectTargets){\n        this._eventTargets = targets;\n    }\n\n    public getLevel() : number {\n        return this._level;\n    }\n\n    public resetTick() : void {\n        this._totalTime = 0;\n    }\n\n    public tick(delta:number) {\n        this._totalTime += delta;\n    }\n\n    public getTick() : number {\n        return this._totalTime;\n    }\n\n    public hadOperated():boolean{\n        let isEmpty:boolean = true;\n\n        if(!GameMath.isEmptyObject(this._usedGear)){\n            return true;\n        }\n\n        if(this.getPowerAmount(PowerID.UsedSwap) > 0){\n            return true;\n        }\n\n        return false;\n    }\n\n    public getShareForMoreStepTimes() : number {\n        return this._shareForMoreStepTimes;\n    }\n    public setShareForMoreStepTimes(times:number) : void {\n        this._shareForMoreStepTimes = times;\n    } \n\n    public getEndUIData() : GameEndPanelData {\n        return this._endUIData;\n    }\n    public setEndUIData(data:GameEndPanelData) : void {\n        this._endUIData = data;\n    } \n  \n    private clear():void{\n        this._mapIndex = 0;\n        GameMath.clearArray(this._mapDatas);\n        this._dropEntityMap = {};\n        this._targetMap = {};\n        this._limitEntityMap = {};\n\n        this._collectedEntityMap = {};\n        this._collectedEnergyMap = {};\n    }\n    \n\n    private initMapJsonsWithMapNames(nameString:string):void{\n        let mapIds = nameString.split('|');\n\n\n        for (let mapId of mapIds) {\n\n            let data:Object = {};\n            if (GameConfig.IsDebug && GameConfig.DebugMatchType != DebugMatchType.None) {\n                data = cc.loader.getRes('maps/' + mapId).json;\n            }else{\n                let tripleMap = new CFGTripleMap();\n                let mapStr = tripleMap.getMapDataByMapId(mapId);\n                data = JSON.parse(mapStr);\n            }\n            this._mapDatas.push(data);\n        }\n    }\n\n    private initTargetEntities(keys:string, values:string):void{\n        this._targetMap = GameStatistics.phraseTargetEntities(keys, values);\n    }\n\n    private initDropEntities(keys:string, values:string):void{\n        this._dropEntityMap = GameStatistics.phraseDropEntities(keys, values);\n    }\n\n    private initLimitEntities(keys:string, values:string):void{\n        this._limitEntityMap = GameStatistics.phraseLimitEntities(keys, values);\n        this._limitGroupMap = GameStatistics.phraseLimitGroup(keys, values);\n    }\n\n    private initStarScores(values:string):void{\n        if (values) {\n            this._startScores.length = 0;\n            let scores = values.split('|');\n            for (let score of scores) {\n                this._startScores.push(Number(score));\n            }\n        }\n    }\n\n    private initCompleteReward(keys:string, values:string){\n        this._completeReward = GameStatistics.phraseCompleteReward(keys, values);\n    }\n\n    private initTargetGrass(mapDatas:Object[]):void{\n        let totalGrassCount:number = 0;\n        for(const data of mapDatas){\n            let tmxPhraser = new TMXJsonPhraser(data);\n            let tiles = tmxPhraser.getTileLayerWithName(TMXConfigInfoKeys.CELLS_LAYER_KEY);\n            let mapSize = tmxPhraser.getMapSize();\n            for(let column:number = 0;  column < mapSize.width; column++){\n                for(let row:number = 0; row < mapSize.height; row++){\n                    let gid = tiles[row * mapSize.width + column];\n                    let valueMap = tmxPhraser.getPropertieFromGID(gid);\n                    let isEmpty:boolean = true;\n                    for(const key in valueMap){\n                        isEmpty = false;\n                        break;\n                    }\n                    if(!isEmpty){\n                        let kindID = Number(valueMap['Kind']);\n                        if(IdentifierManager.getInstance().needLayoutGrassFromKindID(kindID as KindID)){\n                            totalGrassCount++;\n                        }\n                    }\n                }\n            }\n\n            tiles = tmxPhraser.getTileLayerWithName(TMXConfigInfoKeys.CONVEYERS_LAYER_KEY);\n            mapSize = tmxPhraser.getMapSize();\n            for(let column = 0; column < mapSize.width; column++){\n                for(let row:number = 0; row < mapSize.height; row++){\n                    let gid = tiles[row * mapSize.width + column];\n                    let valueMap = tmxPhraser.getPropertieFromGID(gid);\n                    let isEmpty:boolean = true;\n                    for(const key in valueMap){\n                        isEmpty = false;\n                        break;\n                    }\n                    if(!isEmpty){\n                        let kindID = Number(valueMap['Kind']);\n                        if(IdentifierManager.getInstance().needLayoutGrassFromKindID(kindID as KindID)){\n                            totalGrassCount++;\n                        }\n                    }\n                }\n            }\n\n            tiles = tmxPhraser.getTileLayerWithName(TMXConfigInfoKeys.FLOORS_LAYER_KEY);\n            mapSize = tmxPhraser.getMapSize();\n            for(let column = 0; column < mapSize.width; column++){\n                for(let row:number = 0; row < mapSize.height; row++){\n                    let gid = tiles[row * mapSize.width + column];\n                    let valueMap = tmxPhraser.getPropertieFromGID(gid);\n                    let isEmpty:boolean = true;\n                    for(const key in valueMap){\n                        isEmpty = false;\n                        break;\n                    }\n                    if(!isEmpty){\n                        let kindID = Number(valueMap['Kind']);\n                        if(kindID == Number(KindID.FloorGrass)){\n                            totalGrassCount--;\n                        }\n                    }\n                }\n            }\n        }\n\n        this.setTargetAmount(CollectionID.FloorGrass, totalGrassCount);\n    }\n\n    private initTargetPopsicle(mapDatas:Object[]):void{\n        for(let data of mapDatas){\n            let tmxPhraser = new TMXJsonPhraser(data);\n            let layerKey = TMXConfigInfoKeys.POPSICLES_LAYER_KEY;\n            let objects = tmxPhraser.getObjectLayerWithName(layerKey);\n\n            for(const info of objects){\n                let typeString:string = TMXConfigInfoKeys.CFG_POPSICLE_VALUE_NORMAL;\n                if(info.properties.hasOwnProperty(TMXConfigInfoKeys.CFG_POPSICLE_KEY_TYPE)){\n                    typeString = info.properties[TMXConfigInfoKeys.CFG_POPSICLE_KEY_TYPE];\n                }\n\n                let collectionID = CollectionID.PopsicleNormal;\n                if(typeString == TMXConfigInfoKeys.CFG_POPSICLE_VALUE_LINE){\n                    collectionID = CollectionID.PopsicleLine;\n                }else if(typeString == TMXConfigInfoKeys.CFG_POPSICLE_VALUE_BOOM){\n                    collectionID = CollectionID.PopsicleBoom;\n                }\n\n                this.setTargetAmount(collectionID, this.getTargetAmount(collectionID) + 1);\n            }\n        }\n    }\n\n    private initTargetPath(mapDatas:Object[]) {\n        this._puppyStepCount = 0;\n        let totalRoadCount = 0;\n        for (let json of mapDatas) {\n            let tmxPhraser = TMXJsonPhraser.create(json);\n            let mapSize = tmxPhraser.getMapSize();\n                \n            let floorTiles = tmxPhraser.getTileLayerWithName(TMXConfigInfoKeys.FLOORS_LAYER_KEY);\n            for (let column = 0; column < mapSize.width; column++) {\n                for (let row = 0; row < mapSize.height; row++) {\n                    let gid = floorTiles[row * mapSize.width + column];\n                    let valueMap = tmxPhraser.getPropertieFromGID(gid);\n                    if (!GameMath.isEmptyObject(valueMap)) {\n                        \n                        let kindID = valueMap['Kind'];\n                        if (kindID == KindID.FloorRoadLineVU ||\n                            kindID == KindID.FloorRoadLineHR ||\n                            kindID == KindID.FloorRoadLineVD ||\n                            kindID == KindID.FloorRoadLineHL ||\n                            kindID == KindID.FloorRoadTurnLdD ||\n                            kindID == KindID.FloorRoadTurnLuL ||\n                            kindID == KindID.FloorRoadTurnRuU ||\n                            kindID == KindID.FloorRoadTurnRdR ||\n                            kindID == KindID.FloorRoadTurnRdD ||\n                            kindID == KindID.FloorRoadTurnRuR ||\n                            kindID == KindID.FloorRoadTurnLuU ||\n                            kindID == KindID.FloorRoadTurnLdL) {\n                            totalRoadCount ++;\n                        }\n                    }\n                }\n            }\n            let itemTiles = tmxPhraser.getTileLayerWithName(TMXConfigInfoKeys.ITEMS_LAYER_KEY);\n            for (let column = 0; column < mapSize.width; column++) {\n                for (let row = 0; row < mapSize.height; row++) {\n                    let gid = itemTiles[row * mapSize.width + column];\n                    let valueMap = tmxPhraser.getPropertieFromGID(gid);\n                    if (!GameMath.isEmptyObject(valueMap)) {\n                        \n                        let kindID = valueMap['Kind'];\n                        if (kindID == KindID.ItemDogHouse ||\n                            kindID == KindID.ItemBalloon) {\n                            totalRoadCount --;\n                        }\n                    }\n                }\n            }\n        }\n        \n        this._puppyStepCount = totalRoadCount;\n    }\n\n    public static phraseTargetEntities(keys:string, values:string):Object{\n\n        let targetEntityMap:Object = {};\n        if (keys && values) {\n            let keysArr = keys.split('|');\n            let valuesArr = values.split('|');\n\n            let keyLen:number = keysArr.length;\n            let valLen:number = valuesArr.length;\n            for(let i:number = 0; i < keyLen; i++){\n                if(valLen <= i){\n                    break;\n                }\n                let type:string = keysArr[i];\n                let collectionID = IdentifierManager.getInstance().getCollectionIDFromString(type);\n                if(collectionID != CollectionID.None){\n                    targetEntityMap[collectionID] = Number(valuesArr[i]);\n                }\n            }\n        }\n        \n\n        return targetEntityMap;\n    }\n\n    public static phraseDropEntities(keys:string, values:string):Object{\n        let dropEntityMap:Object = {};\n\n        if (keys && values) {\n            let keysArr = keys.split('|');\n            let valuesArr = values.split('|');\n\n            let keyLen:number = keysArr.length;\n            let valLen:number = valuesArr.length;\n\n            for(let i:number = 0; i < keyLen; i++){\n                if(valLen <= i){\n                    break;\n                }\n                let type:string = keysArr[i];\n                let entityID = IdentifierManager.getInstance().getEntityIDFromString(type);\n                if(entityID != EntityID.None){\n                    dropEntityMap[entityID] = Number(valuesArr[i]) * 100;\n                }\n            }\n\n            let basicColors:EntityID[] = [\n                EntityID.ItemNormalRed,\n                EntityID.ItemNormalGreen,\n                EntityID.ItemNormalBlue,\n                EntityID.ItemNormalYellow,\n                EntityID.ItemNormalOrange,\n                EntityID.ItemNormalPurple,\n            ];\n\n            let totalProbability:number = 0;\n            for(let entityID of basicColors){\n                if(dropEntityMap.hasOwnProperty(entityID)){\n                    totalProbability += dropEntityMap[entityID];\n                }\n                let entity = dropEntityMap[entityID];\n            }\n\n            for(let i:number = 0; i < keyLen; i++){\n                if(valLen <= i){\n                    break;\n                }\n                let type:string = keysArr[i];\n\n                let groupID = IdentifierManager.getInstance().getEntityGroupIDFromString(type);\n                if(groupID != EntityGroupID.None){\n                    let entityIDs = IdentifierManager.getInstance().getEntityIDsFromEntityGroupID(groupID);\n                    for(const entityID of entityIDs){\n                        let basicEntityID = IdentifierManager.getInstance().getCorrespondingNormlaEntityID(entityID);\n                        if(dropEntityMap.hasOwnProperty(basicEntityID)){\n                            dropEntityMap[entityID] = Number(valuesArr[i]) * 100 * (dropEntityMap[basicEntityID] * 1.0 / totalProbability);\n                        }\n                    }\n                }\n            }\n        }\n\n        return dropEntityMap;\n    }\n\n    public static phraseLimitEntities(keys:string, values:string):Object{\n\n        let limitEntityMap:Object = {};\n        if (keys && values) {\n            let keysArr = keys.split('|');\n            let valuesArr = values.split('|');\n\n            let keyLen:number = keysArr.length;\n            let valLen:number = valuesArr.length;\n\n            for(let i:number = 0; i < keyLen; i++){\n                if(valLen <= i){\n                    break;\n                }\n                let type:string = keysArr[i];\n                let entityID = IdentifierManager.getInstance().getEntityIDFromString(type);\n                if(entityID != EntityID.None){\n                    limitEntityMap[entityID] = Number(valuesArr[i]);\n                }\n            }\n        }\n        return limitEntityMap;\n    }\n\n    public static phraseLimitGroup(keys:string, values:string):Object{\n        let limitGroupMap:Object = {};\n        if (keys && values) {\n            let keysArr = keys.split('|');\n            let valuesArr = values.split('|');\n\n            let keyLen:number = keysArr.length;\n            let valLen:number = valuesArr.length;\n\n            for(let i:number = 0; i < keyLen; i++){\n                if(valLen <= i){\n                    break;\n                }\n                let type:string = keysArr[i];\n                let groupID = IdentifierManager.getInstance().getEntityGroupIDFromString(type);\n                if(groupID != EntityGroupID.None){\n                    limitGroupMap[groupID] = Number(valuesArr[i]);\n                }\n            }\n        }\n\n        return limitGroupMap;\n    }\n\n    public static phraseCompleteReward(keys:string, values:string):Object{\n\n        let completeRewardMap:Object = {};\n        if (keys && values) {\n            let keysArr = keys.split('|');\n            let valuesArr = values.split('|');\n\n            let keyLen:number = keysArr.length;\n            let valLen:number = valuesArr.length;\n\n            for(let i:number = 0; i < keyLen; i++){\n                if(valLen <= i){\n                    break;\n                }\n                let type:string = keysArr[i];\n                let itemID = IdentifierManager.getInstance().getItemIDFromName(type);\n                if(itemID != GameCurrencyType.NoneType){\n                    completeRewardMap[itemID] = Number(valuesArr[i]);\n                }\n            }\n        }\n        return completeRewardMap;\n    }\n\n}\n","import { CollectionID } from \"../../defines/CollectionID\";\nimport { CollectionGroupID } from \"../../defines/CollectionGroupID\";\n\n// Learn TypeScript:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/typescript.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/typescript.html\n// Learn Attribute:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html\n\nexport enum GameTargetType{\n    None = 0,\n    Single,\n    Group,\n}\n\nexport class GameTargetBase {\n    private type:GameTargetType = GameTargetType.None;\n    private targetAmount:number = 0;\n\n    public getType():GameTargetType{\n        return this.type\n    }\n\n    public getTargetAmount():number{\n        return this.targetAmount;\n    }\n\n    public setTargetAmount(targetAmount:number){\n        return this.targetAmount = targetAmount;\n    }\n\n    protected initWithType(type:GameTargetType){\n        this.type = type;\n    }\n\n    public getCollectionIDs():CollectionID[]{\n        return [];\n    }\n\n    public getIconFrameName():string{\n        return \"\";\n    }\n}\n","import { GameTargetBase, GameTargetType } from \"./GameTargetBase\";\nimport { CollectionID } from \"../../defines/CollectionID\";\nimport IdentifierManager from \"../../defines/IdentifierManager\";\n\n// Learn TypeScript:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/typescript.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/typescript.html\n// Learn Attribute:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html\n\n\nexport default class GameTargetSingle extends GameTargetBase {\n\n    private collectionID:CollectionID = CollectionID.None;\n    public static create(collectionID:CollectionID, amount:number):GameTargetSingle{\n        let result = new GameTargetSingle()\n        result.init(collectionID, amount);\n        return result;\n    }\n\n    public init(collectionID:CollectionID, amount:number){\n        super.initWithType(GameTargetType.Single);\n        this.collectionID = collectionID;\n        this.setTargetAmount(amount);\n    }\n\n    public getCollectionIDs():CollectionID[]{\n        return [this.collectionID]\n    }\n\n    public getIconFrameName():string{\n        return IdentifierManager.getInstance().getFrameNameFromCollectionID(this.collectionID);\n    }\n}\n","import IGame from \"../../../base/IGame\";\nimport { GameCurrencyType } from \"../../../define/GameCurrencyType\";\nimport IdentifierManager from \"../defines/IdentifierManager\";\nimport { PowerID } from \"../defines/PowerID\";\nimport GameSceneBase from \"../GameSceneBase\";\nimport GearItem from \"./GearItem\";\n\n// Learn TypeScript:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/typescript.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/typescript.html\n// Learn Attribute:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html\n\nexport enum GearBarState{\n    None,\n    Down,\n    Up,\n}\n\nexport enum GearBarType{\n    Normal,\n    Drawer,\n}\n\nexport class GearBarData{\n    public type = GearBarType.Normal;\n\n    public static createWithData(data:Object):GearBarData{\n        let type = GearBarType.Normal;\n        if (data && data.hasOwnProperty('BT')) {\n            let value = data['BT'];\n            switch (value) {\n                case 0:{\n                    type = GearBarType.Normal;\n                }\n                    break;\n                case 3:{\n                    type = GearBarType.Drawer;\n                }\n                    break;\n            \n                default:\n                    break;\n            }\n        }\n        return GearBarData.create(type);\n    }\n\n    public static create(type:GearBarType):GearBarData{\n        let result = new GearBarData();\n        result.type = type;\n        return result;\n    }\n}\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class GearBar extends cc.Component {\n\n    public static AdBannerDefaultHeight = 250;\n    public static GearBarDefaultHeight = 170;\n\n    @property([cc.Node])\n    itemsNode:cc.Node[] =[];\n\n    @property(cc.Label)\n    instroductionLabelDown: cc.Label = null;\n\n    @property(cc.Node)\n    drawUpButton : cc.Node = null;\n\n    @property(cc.Node)\n    drawUpButtonFrame : cc.Node = null;\n\n    @property(cc.Label)\n    instroductionLabelUp: cc.Label = null;\n\n    @property(cc.Node)\n    fallDownButton : cc.Node = null;\n\n    @property(cc.Node)\n    fallDownLayer : cc.Node = null;\n\n    @property(cc.Node)\n    GearBarRoot : cc.Node = null;\n\n    @property(cc.Node)\n    pullUpCover : cc.Node = null;\n    \n    private _gameScene:GameSceneBase = null;\n    private _gearItems:GearItem[] = [];\n    private _lastFocusID:GameCurrencyType = GameCurrencyType.NoneType;\n    private _state:GearBarState = GearBarState.Down;\n    private _type:GearBarType = GearBarType.Normal;\n    private _pullUpHeight:number = GearBar.AdBannerDefaultHeight;\n    private _fallDownHeight:number = 0;\n    private _lastLeftStepCount:number = 0;\n    private _hasShownAdBanner:boolean = false;\n\n    public getAvailableAmount(itemID:GameCurrencyType){\n        return this._gameScene.getAvailableGearItemAmount(itemID);\n    }\n\n    public drawUp(animated:boolean = false){\n        if (animated) {\n            let action = cc.moveTo(0.15, cc.v2(0, this._pullUpHeight));\n            action.setTag(1001);\n            this.GearBarRoot.stopActionByTag(1001);\n            this.GearBarRoot.runAction(action);\n            if(this._gameScene.getPowerAmount(PowerID.AvailableSwap) <= 5){\n                this.playAlertGeatItemsAnimation(0.15);\n            }\n        }else{\n            this.GearBarRoot.setPosition(cc.v2(0, this._pullUpHeight));\n        }\n    }\n\n    public fallDown(animated:boolean = false){\n\n        if (animated) {\n            let action = cc.moveTo(0.15, cc.v2(0, this._fallDownHeight));\n            action.setTag(1001);\n            this.GearBarRoot.stopActionByTag(1001);\n            this.GearBarRoot.runAction(action);\n        }else{\n            this.GearBarRoot.setPosition(cc.v2(0, this._fallDownHeight));\n        }\n    }\n\n    public playAlertGeatItemsAnimation(delay:number){\n        if (!this._gameScene.hasShowCompleteBanner()) {\n            for (let index = 0; index < this._gearItems.length; index++) {\n                let gearItem = this._gearItems[index];\n                gearItem.playAlertAnimation(index * 0.4 + delay)\n            }\n        }\n    }\n\n    public getState():GearBarState{\n        return this._state;\n    }\n    public setState(state:GearBarState, animated:boolean = false){\n        let oldState = this._state;\n        this._state = state;\n        switch (this._state) {\n            case GearBarState.Down:{\n                if (this._type == GearBarType.Drawer){\n                    this.drawUpButtonFrame.active = this._hasShownAdBanner;    \n                }else{\n                    this.drawUpButtonFrame.active = false;\n                }\n                this.fallDownButton.active = false;\n                this.fallDownLayer.active = false;\n                this.instroductionLabelUp.node.active = true;\n                this.instroductionLabelDown.node.active = false;\n                \n                if (animated && oldState != this._state) {\n                    this.fallDown(animated);\n                }else{\n                    this.fallDown(animated);\n                }\n            }\n                break;\n            case GearBarState.Up:{\n                this.drawUpButtonFrame.active = false;\n                this.fallDownButton.active = true;\n                this.fallDownLayer.active = true;\n                this.instroductionLabelUp.node.active = false;\n                this.instroductionLabelDown.node.active = true;\n                if (animated && oldState != this._state) {\n                    this.drawUp(animated);\n                }else{\n                    this.drawUp(animated);\n                }\n\n            }\n                    break;\n        \n            default:\n                break;\n        }\n    }\n    public getType():GearBarType{\n        return this._type;\n    }\n    public setType(type:GearBarType){\n        this._type = type;\n        switch (this._type) {\n            case GearBarType.Normal:{\n                this.setState(GearBarState.Down);\n                this.drawUpButtonFrame.active = false;\n                this.instroductionLabelDown.node.active = true;\n                this.instroductionLabelUp.node.active = false;\n                let widget = this._gameScene.gridFrame.getComponent(cc.Widget);\n                if (widget) {\n                    widget.bottom = GearBar.GearBarDefaultHeight;\n                }\n                this.pullUpCover.active = false;\n            }\n                break;\n            default:\n                break;\n        }\n    }\n    \n    public setData(data:GearBarData){\n        this.setType(data.type);\n    }\n    public focusItemWithGearID(itemID:GameCurrencyType) : void {\n        let gearName:string = '';\n        let instrodution:string = '';\n        switch(itemID) {\n            case GameCurrencyType.AidHammer:\n            case GameCurrencyType.AidBomb:\n            case GameCurrencyType.AidSwap:{\n                // let itemInfo = IdentifierManager.getInstance().getItemInfoFromItemID(itemID);\n                // if (itemInfo) {\n                //     gearName = itemInfo.localization;\n                //     instrodution = itemInfo.description;\n                // }\n            }\n                break;\n        }\n\n        \n        if (this.instroductionLabelUp) {\n            if (gearName != '' && instrodution != '') {\n                this.instroductionLabelUp.string = gearName + ':' + instrodution;\n            }\n        }\n\n        if (this.instroductionLabelDown) {\n            if (gearName != '' && instrodution != '') {\n                this.instroductionLabelDown.string = gearName + ':' + instrodution;\n            }\n        }\n\n        if (itemID == GameCurrencyType.NoneType) {\n            if (this._lastFocusID != GameCurrencyType.NoneType) {\n                if (this._gameScene.backgroundMask) {\n                    this._gameScene.backgroundMask.runAction(cc.fadeTo(0.25, 0).easing(cc.easeIn(2)));\n                }\n                if (this._gameScene.cancelGearLayer) {\n                    this._gameScene.cancelGearLayer.active = false;\n                }\n\n                if (this.instroductionLabelUp) {\n                    this.instroductionLabelUp.node.opacity = 0;\n                }\n                if (this.instroductionLabelDown) {\n                    this.instroductionLabelDown.node.opacity = 0;\n                }\n            }\n        }else{\n            if (this._lastFocusID == GameCurrencyType.NoneType) {\n                if (this._gameScene.backgroundMask) {\n                    this._gameScene.backgroundMask.runAction(cc.fadeTo(0.25, 150).easing(cc.easeIn(2)));\n                }\n                if (this._gameScene.cancelGearLayer) {\n                    this._gameScene.cancelGearLayer.active = true;\n                }\n                if (this.instroductionLabelUp) {\n                    this.instroductionLabelUp.node.opacity = 255;\n                }\n                if (this.instroductionLabelDown) {\n                    this.instroductionLabelDown.node.opacity = 255;\n                }\n            }\n        }\n        \n        for (let gearItem of this._gearItems) {\n            if (gearItem.getItemID() == itemID) {\n                gearItem.node.zIndex = 2;\n            }else{\n                gearItem.node.zIndex = 0;\n            }\n        }   \n        this._lastFocusID = itemID;\n\n        switch (this._type) {\n            case GearBarType.Drawer:{\n                this.setState(GearBarState.Down, true);\n            }\n                break;\n        \n            default:\n                break;\n        }\n        \n    }\n    public onItemTabbed(item:GearItem) : void{\n        this._gameScene.selectGear(item.getItemID());\n    } \n    public updateGears(){\n        for (let item of this._gearItems) {\n            item.updataAmount()\n            item.setLimitedAmount(this._gameScene.getLimitedGearAmount(item.getItemID()));\n            item.setUsedAmount(this._gameScene.getUsedGearAmount(item.getItemID()));\n        }\n\n        let currentLeftStepCount = this._gameScene.getPowerAmount(PowerID.AvailableSwap)\n        if ( currentLeftStepCount <= 5 && this._lastLeftStepCount != currentLeftStepCount) {\n            this.playAlertAnimation();\n            this.playAlertGeatItemsAnimation(0);\n        }\n        this._lastLeftStepCount = currentLeftStepCount\n    }\n    public getItemWithGearID(itemID:GameCurrencyType) : GearItem {\n        let result:GearItem = null;\n        for (let item of this._gearItems) {\n            if (item.getItemID() == itemID) {\n                result = item;\n                break;\n            }\n        }\n        return result;\n    }\n    public getGearIconWorldPos(itemID:GameCurrencyType) :cc.Vec2 {\n\n        let item = this.getItemWithGearID(itemID);\n        if (item) {\n            return item.node.parent.convertToWorldSpaceAR(item.node.position);\n        }\n        return cc.Vec2.ZERO;\n    }\n    public playAlertAnimation(){\n        if (!this._gameScene.hasShowCompleteBanner()) {\n            let hasAvailableItem = false\n            for (let gearItem of this._gearItems) {\n                if (gearItem.getIsAvailable()) {\n                    hasAvailableItem = true;\n                    break\n                }\n            }\n\n            if (hasAvailableItem) {\n                let anim = this.getComponent(cc.Animation);\n                if (anim) {\n                    let currentClip = anim.currentClip;\n                    if (currentClip && currentClip.name == 'alert1') {\n                        return;\n                    }\n                    anim.play('alert1');\n                }\n            }\n        }\n    }\n    private onDrawUpButtonTabbed(event:cc.Event.EventCustom) : void {\n        this.setState(GearBarState.Up, true);\n    }\n    private onFallDownButtonTabbed(event:cc.Event.EventCustom) : void {\n        this.setState(GearBarState.Down, true);\n    }\n\n\n    // LIFE-CYCLE CALLBACKS:\n\n    onLoad () {\n\n        let canvas = cc.find(\"Canvas\");\n        if (canvas) {\n            this._gameScene = canvas.getComponent(GameSceneBase);\n        }\n\n        let itemIds:GameCurrencyType[] = [GameCurrencyType.AidHammer, GameCurrencyType.AidBomb, GameCurrencyType.AidSwap];\n        for (let index = 0; index < this.itemsNode.length; index++) {\n            let gearItem = this.itemsNode[index].getComponent(GearItem);\n            gearItem.setItemID(itemIds[index]);\n            gearItem.setGearBar(this);\n            this._gearItems[index] = gearItem;\n        }\n\n        this.instroductionLabelUp.node.opacity = 0;\n        this.instroductionLabelDown.node.opacity = 0;\n        this.drawUpButton.on('touchend', this.onDrawUpButtonTabbed, this);\n        this.fallDownButton.on('touchend', this.onFallDownButtonTabbed, this);\n        this.fallDownLayer.on('touchend', this.onFallDownButtonTabbed, this);\n        this.setType(GearBarType.Normal);\n        this.setState(GearBarState.Down);\n        this.pullUpCover.active = false;\n\n        this.schedule(this.updateGears , 1)\n    }\n\n    start () {\n\n    }\n    onDestroy() {\n        this.itemsNode = null;\n        this._gameScene = null;\n        this._gearItems = null;\n        \n    }\n}\n","export enum GearID {\n    None = 0\n    \n    // GearDiamond      = GameCurrencyType::DiamondCoin,\n    // GearStarCoin     = GameCurrencyType::StarCoin,\n    // GearGoldCoin     = GameCurrencyType::GoldCoin,\n    // GearVirtualCoin  = GameCurrencyType::VirtualCoin,\n\n    // StepBallAdd5     = 10010,\n    \n    // BeginLine        = 10020,\n    // BeginRange       = 10030,\n    // BeginRainbow     = 10040,\n    \n    // AidHammer        = 10050,\n    // AidBomb          = 10060,\n    // AidSwap          = 10070,\n    \n    // LifeAddOnePoint  = 10080,\n    // LifeEverOneHour  = 10090,\n    // LifeEverTwoHour  = 10100,\n};","import { GameCurrencyType } from \"../../../define/GameCurrencyType\";\nimport GearBar from \"./GearBar\";\nimport UISpriteExt from \"../../../component/UISpriteExt\";\nimport UINodeIdentifier from \"../../../component/UINodeIdentifier\";\nimport { NodeID } from \"../../../extend/identify/nodeIdentify/IdentifyNodeManager\";\nimport IGame from \"../../../base/IGame\";\n\n// Learn TypeScript:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/typescript.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/typescript.html\n// Learn Attribute:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html\n\nconst {ccclass, property} = cc._decorator;\n\nexport enum GearItemState{\n    None,\n    Normal,\n    Disable,\n}\n\n@ccclass\nexport default class GearItem extends cc.Component {\n\n    @property(cc.Node)\n    amountFramePos1:cc.Node = null;\n\n    @property(cc.Node)\n    amountFramePos2:cc.Node = null;\n\n    @property(cc.Node)\n    itemRoot:cc.Node = null;\n\n    @property(cc.Sprite)\n    icon:cc.Sprite = null;\n\n    @property(cc.Node)\n    normalAmountRoot:cc.Node = null;\n    @property(cc.Node)\n    normalAmountFrame:cc.Node = null;\n    @property(cc.Label)\n    normalAmountLabel:cc.Label = null;\n    @property(cc.Node)\n    buyButton:cc.Node = null;\n\n    @property(cc.Node)\n    timeLimitedAmountRoot:cc.Node = null;\n    @property(cc.Node)\n    timeLimitedAmountFrame:cc.Node = null;\n    @property(cc.Label)\n    timeLimitedAmountLabel:cc.Label = null;\n    @property(cc.Label)\n    timeLimitedCountDownLabel:cc.Label = null;\n\n    @property(cc.Node)\n    lockButton:cc.Node = null;\n\n    @property(cc.Node)\n    lockIcon:cc.Node = null;\n\n    @property(UINodeIdentifier)\n    identifyComponent:UINodeIdentifier = null;\n\n    private _isLocked:boolean = false\n    public getIsLocked():boolean{\n        return this._isLocked;\n    }\n    public setIsLocked(isLocked:boolean):void{\n        this._isLocked = isLocked\n        this.lockIcon.active = this._isLocked;\n        this.itemRoot.active = !this._isLocked\n    }\n    private _normalItemID:GameCurrencyType = GameCurrencyType.NoneType;\n    public getItemID() : GameCurrencyType {\n        return this._normalItemID;\n    }\n    public setItemID(itemID:GameCurrencyType) : void {\n        this._normalItemID = itemID;\n        let frameName = ''\n        switch (this._normalItemID) {\n            case GameCurrencyType.AidHammer:{\n                if (this.identifyComponent) {\n                    this.identifyComponent.setIdentifier(NodeID.MatchScene_HammerButton);\n                }\n                frameName = 'match_scene/texture/userInterface/match_hammer'\n            }\n                break;\n            case GameCurrencyType.AidBomb:{\n                if (this.identifyComponent) {\n                    this.identifyComponent.setIdentifier(NodeID.MatchScene_BombButton);\n                }\n                frameName = 'match_scene/texture/userInterface/match_bomb'\n            }\n                break;\n            case GameCurrencyType.AidSwap:{\n                if (this.identifyComponent) {\n                    this.identifyComponent.setIdentifier(NodeID.MatchScene_SwapButton);\n                }\n                frameName = 'match_scene/texture/userInterface/match_swap'\n            }\n                break;\n        \n            default:\n                break;\n        }\n\n        let component = this.icon.getComponent(UISpriteExt);\n        if (component) {\n            component.src = frameName;\n        }\n        this.updataAmount();\n        this.setIsLocked(false);\n    } \n\n    public updataAmount(){\n        if (this._gearBar) {\n            this.timeLimitedAmountRoot.active = false;\n            this.normalAmountRoot.active = false; \n        }\n    }\n\n    private _usedAmount:number = 0;\n    public getUsedAmount() : number {\n        return this._usedAmount;\n    }\n    public setUsedAmount(amount:number) : void {\n        this._usedAmount = amount;\n        this.updateGearState();\n    }\n\n    private _limitedAmount:number = 0;\n    public getLimitedAmount() : number {\n        return this._limitedAmount;\n    }\n    public setLimitedAmount(amount:number) : void {\n        this._limitedAmount = amount;\n        this.updateGearState();\n    }\n\n    private _state:GearItemState = GearItemState.Normal\n    public getState() : number {\n        return this._state;\n    }\n    public setState(state:GearItemState) : void {\n        this._state = state;\n        switch (this._state) {\n            case GearItemState.Normal:{\n                this.icon.node.opacity = 255;\n            }\n                break;\n            case GearItemState.Disable:{\n                this.icon.node.opacity = 128;\n            }\n                break;\n        \n            default:\n                break;\n        }\n    }\n\n    public getIsAvailable():boolean{\n        return !this._isLocked && this._state == GearItemState.Normal\n    }\n    private updateGearState(){\n        let state = GearItemState.Normal;\n        if(this._limitedAmount >= 0 && this._usedAmount >= this._limitedAmount){\n            state = GearItemState.Disable;\n        }\n        this.setState(state);\n    }\n    \n    private onIconTabbed(event:cc.Event.EventCustom) : void {\n        this._gearBar.onItemTabbed(this);\n    }\n\n    private onBuyTabbed(event:cc.Event.EventCustom) : void {\n        this._gearBar.onItemTabbed(this);    \n    }\n    \n    private _gearBar:GearBar = null;\n    public setGearBar(gearBar:GearBar){\n        this._gearBar = gearBar;\n    }\n    public getGearBar():GearBar{\n        return this._gearBar;\n    }\n    public playAlertAnimation(delay:number){\n        switch (this._state) {\n            case GearItemState.Normal:{\n                let anim = this.getComponent(cc.Animation);\n                if (anim) {\n                    anim.play('alert');\n                }\n            }\n                break;\n        }\n    }\n    // LIFE-CYCLE CALLBACKS:\n    onLoad () {\n        this.icon.node.on('touchend', this.onIconTabbed,this);\n        this.buyButton.on('touchend', this.onBuyTabbed,this);\n    }\n\n    start () {\n\n    }\n    // update (dt) {}\n\n    onDestroy() {\n        this.icon = null;\n        this.normalAmountLabel = null;\n        this.itemRoot = null;\n        this.buyButton = null;\n        this.lockButton = null;\n        this.identifyComponent = null;\n        this.lockIcon = null;\n        this._gearBar = null;\n    }\n}\n","import RectangleClipper from \"../../../component/RectangleClipper\";\nimport { GameCurrencyType } from \"../../../define/GameCurrencyType\";\nimport GameMath from \"../../../extend/utils/GameMath\";\nimport GridCommand, { GridCommandType } from \"../commond/GridCommand\";\nimport GridCommandPair from \"../commond/GridCommandPair\";\nimport Heap from \"../commond/Heap\";\nimport { CollectionID } from \"../defines/CollectionID\";\nimport { EntityGroupID } from \"../defines/EntityGroupID\";\nimport { EntityColor, EntityID, EntityType } from \"../defines/EntityID\";\nimport IdentifierManager from \"../defines/IdentifierManager\";\nimport { PowerID } from \"../defines/PowerID\";\nimport CellBase, { GenerateType } from \"../entity/cell/CellBase\";\nimport EntityBase from \"../entity/EntityBase\";\nimport FenceBase from \"../entity/fence/FenceBase\";\nimport FencePos from \"../entity/fence/FencePos\";\nimport FloorBase, { FloorType } from \"../entity/floor/FloorBase\";\nimport FlyerAnimation, { FlyerAnimationType } from \"../entity/flyer/FlyerAnimation\";\nimport FlyerBase from \"../entity/flyer/FlyerBase\";\nimport FlyerChargeEntity from \"../entity/flyer/FlyerChargeEntity\";\nimport FlyerCollectedEntity from \"../entity/flyer/FlyerCollectedEntity\";\nimport FlyerCollectedSupply from \"../entity/flyer/FlyerCollectedSupply\";\nimport FlyerMoreStep from \"../entity/flyer/FlyerMoreStep\";\nimport FlyerScore from \"../entity/flyer/FlyerScore\";\nimport FlyerScoreLabel from \"../entity/flyer/FlyerScoreLabel\";\nimport FrameBase from \"../entity/frame/FrameBase\";\nimport ItemBombBase, { ItemBombType } from \"../entity/item/color/bomb/ItemBombBase\";\nimport ItemBase, { ItemType } from \"../entity/item/ItemBase\";\nimport ItemFactory from \"../entity/item/ItemFactory\";\nimport ItemMower from \"../entity/item/special/ItemMower\";\nimport ItemStateGenerate from \"../entity/item/state/ItemStateGenerate\";\nimport ItemStateReplace from \"../entity/item/state/ItemStateReplace\";\nimport MarkerBase from \"../entity/marker/MarkerBase\";\nimport ParasiteBase, { ParasiteType } from \"../entity/parasite/ParasiteBase\";\nimport PopsicleBase from \"../entity/popsicle/PopsicleBase\";\nimport { RugBase } from \"../entity/rug/RugBase\";\nimport EntityEventBase from \"../event/EntityEventBase\";\nimport GameSceneBase from \"../GameSceneBase\";\nimport GridStateAppear from \"./state/concreteState/GridStateAppear\";\nimport GridStateCreate from \"./state/concreteState/GridStateCreate\";\nimport GridStateCrossBomb from \"./state/concreteState/GridStateCrossBomb\";\nimport GridStateDisappear from \"./state/concreteState/GridStateDisappear\";\nimport GridStateForceClean from \"./state/concreteState/GridStateForceClean\";\nimport GridStateForceSwap from \"./state/concreteState/GridStateForceSwap\";\nimport GridStateLaunchGears from \"./state/concreteState/GridStateLaunchGears\";\nimport GridStateNull from \"./state/concreteState/GridStateNull\";\nimport GridStateSwapNeighbour from \"./state/concreteState/GridStateSwapNeighbour\";\nimport GridStateBase from \"./state/GridStateBase\";\nimport GridStateMachine from \"./state/GridStateMachine\";\n\n// Learn TypeScript:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/typescript.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/typescript.html\n// Learn Attribute:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html\n\nexport enum GridMode {\n    Normal = 0,\n    ForceClean,\n    ForceSwap,\n    CrossBomb,\n};\n\nconst { ccclass, property } = cc._decorator;\n@ccclass\nexport default class GridBase extends cc.Component {\n    public static ZORDER_FRAME_BOTTOM: number = 1000;\n    public static ZORDER_FRAME_TOP: number = 1500;\n    public static ZORDER_CELL_BOTTOM: number = 2000;\n    public static ZORDER_CELL_TOP: number = 2500;\n    public static ZORDER_POPSICLES_BOTTOM: number = 4000;\n    public static ZORDER_POPSICLES_TOP: number = 4500;\n    public static ZORDER_FLOOR_BOTTOM: number = 5000;\n    public static ZORDER_FLOOR_TOP: number = 5500;\n    public static ZORDER_RUG_BOTTOM: number = 6000;\n    public static ZORDER_RUG_TOP: number = 6500;\n    public static ZORDER_ITEM_BOTTOM: number = 7000;\n    public static ZORDER_ITEM_TOP: number = 7500;\n    public static ZORDER_PARASITE_BOTTOM: number = 8000;\n    public static ZORDER_PARASITE_TOP: number = 8500;\n    public static ZORDER_FENCE_BOTTOM: number = 9000;\n    public static ZORDER_FENCE_TOP: number = 9500;\n    public static ZORDER_MARKER_BOTTOM: number = 10000;\n    public static ZORDER_MARKER_TOP: number = 10500;\n    public static ZORDER_PUPPY_BOTTOM: number = 11000;\n    public static ZORDER_PUPPY_TOP: number = 11500;\n    public static ZORDER_CONVEYERS_BOTTOM: number = 12000;\n    public static ZORDER_CONVEYERS_TOP: number = 12500;\n    public static ZORDER_FLYER_BOTTOM: number = 13000;\n    public static ZORDER_FLYER_TOP: number = 13500;\n    public static ZORDER_EFFECT: number = 20000;\n\n    public static MAX_GRID_WIDTH: number = 9;\n    public static MAX_GRID_HEIGHT: number = 12;\n\n    private _frameLayer: cc.Node = null;\n    private _cellLayer: cc.Node = null;\n    private _popsicleLayer: cc.Node = null;\n    private _floorLayer: cc.Node = null;\n    private _rugLayer: cc.Node = null;\n    private _itemLayer: cc.Node = null;\n    private _parasiteLayer: cc.Node = null;\n    private _fenceLayer: cc.Node = null;\n    private _markerLayer: cc.Node = null;\n    private _puppyLayer: cc.Node = null;\n    private _flyerLayer: cc.Node = null;\n    private _effectLayer: cc.Node = null;\n\n\n    private _usePriorityCommandQueue = true;\n    private _priorityCommandQueue: Heap<GridCommandPair> = null\n    public static create(matchScene: GameSceneBase, viewSize: cc.Size, mapData: Object) {\n        let res = cc.loader.getRes('match_scene/prefab/grid/GridBase', cc.Prefab);\n        if (res) {\n            let node = cc.instantiate(res);\n            if (node) {\n                let component = node.getComponent(GridBase) as GridBase;\n                if (component) {\n                    component.init(matchScene, viewSize, mapData);\n                    return component;\n                }\n            }\n        }\n        return null;\n    }\n    public init(gameScene: GameSceneBase, viewSize: cc.Size, mapData: Object) {\n        this._gameScene = gameScene;\n\n        this._frameLayer = new cc.Node();\n        this.node.addChild(this._frameLayer, GridBase.ZORDER_FRAME_BOTTOM);\n\n        this._cellLayer = new cc.Node();\n        this.node.addChild(this._cellLayer, GridBase.ZORDER_CELL_BOTTOM);\n\n        this._popsicleLayer = new cc.Node();\n        this.node.addChild(this._popsicleLayer, GridBase.ZORDER_POPSICLES_BOTTOM);\n\n        this._floorLayer = new cc.Node();\n        this.node.addChild(this._floorLayer, GridBase.ZORDER_FLOOR_BOTTOM);\n\n        this._rugLayer = new cc.Node();\n        this.node.addChild(this._rugLayer, GridBase.ZORDER_RUG_BOTTOM);\n\n        this._itemLayer = new cc.Node();\n        this.node.addChild(this._itemLayer, GridBase.ZORDER_ITEM_BOTTOM);\n\n        this._parasiteLayer = new cc.Node();\n        this.node.addChild(this._parasiteLayer, GridBase.ZORDER_PARASITE_BOTTOM);\n\n        this._fenceLayer = new cc.Node();\n        this.node.addChild(this._fenceLayer, GridBase.ZORDER_FENCE_BOTTOM);\n\n        this._markerLayer = new cc.Node();\n        this.node.addChild(this._markerLayer, GridBase.ZORDER_MARKER_BOTTOM);\n\n        this._puppyLayer = new cc.Node();\n        this.node.addChild(this._puppyLayer, GridBase.ZORDER_PUPPY_BOTTOM);\n\n        this._flyerLayer = new cc.Node();\n        this.node.addChild(this._flyerLayer, GridBase.ZORDER_FLYER_BOTTOM);\n\n        this._effectLayer = new cc.Node();\n        this.node.addChild(this._effectLayer, GridBase.ZORDER_EFFECT);\n        this.conveyerLayer.zIndex = GridBase.ZORDER_CONVEYERS_BOTTOM;\n\n        let compareFunc = function (lhs: GridCommandPair, rhs: GridCommandPair): boolean {\n            if (lhs.delayTime == rhs.delayTime) {\n                if (lhs.command.getPriority() == rhs.command.getPriority()) {\n                    return lhs.index < rhs.index;\n                } else {\n                    return lhs.command.getPriority() < rhs.command.getPriority();\n                }\n            } else {\n                return lhs.delayTime < rhs.delayTime\n            }\n        }\n        let equalsFunc = function (lhs: GridCommandPair, rhs: GridCommandPair): boolean {\n            if (lhs.command.type == GridCommandType.MatchClean && lhs.command.type == rhs.command.type) {\n                if (rhs.targetPos.equals(lhs.targetPos)) {\n                    return true;\n                }\n            }\n            return false;\n        }\n        this._priorityCommandQueue = new Heap(compareFunc, equalsFunc);\n\n        this._stateMachine = GridStateMachine.create(this);\n        this.setCurrentState(GridStateCreate.createState(viewSize, mapData));\n        this.node.on(\"touchstart\", this.onTouchStart, this);\n        this.node.on(\"touchmove\", this.onTouchMove, this);\n        this.node.on(\"touchend\", this.onTouchEnd, this);\n        this.node.on(\"touchcancel\", this.onTouchEnd, this);\n        this.node.on(EntityEventBase.ENTITY_EVENT_KEY, this.onEvent, this);\n    }\n\n    @property(cc.Node)\n    conveyerLayer: cc.Node = null;\n    public getConveyerLayer(): cc.Node {\n        return this.conveyerLayer;\n    }\n    public setConveyerLayerVisiblePos(positions: cc.Vec2[]): void {\n        let cropper = this.conveyerLayer.getComponent(RectangleClipper);\n        if (cropper) {\n\n            let areas: cc.Rect[] = [];\n            for (let pos of positions) {\n                let centerPixelPos = this.getPixelPosFromLogicalPos(pos);\n                let cellSize = this.getCellSize();\n                let rect = cc.rect(centerPixelPos.x - cellSize.width * 0.5,\n                    centerPixelPos.y - cellSize.height * 0.5,\n                    cellSize.width,\n                    cellSize.height);\n                areas.push(rect);\n            }\n            cropper.setCropRectangles(areas);\n        }\n    }\n\n    // MARK: @Property 基础属性\n    public getRandomEntityID(dropProbabilities: Object, limitEntities: Object, limitGroup: Object, fitMinimum: boolean = false): EntityID {\n\n        let result: EntityID = EntityID.None;\n\n        let entityAmounts: Object = {};\n        let entityGroupAmounts: Object = {};\n        let itemsMap = this.getItemsMap();\n\n        for (let key in itemsMap) {\n            let item = itemsMap[key];\n            let entityID = item.getEntityID();\n            let newAmount = 1;\n            let oldAmount = entityAmounts[entityID];\n            if (oldAmount) {\n                newAmount = oldAmount + 1;\n            }\n            entityAmounts[entityID] = newAmount;\n\n            let groupID = IdentifierManager.getInstance().getEntityGroupIDFromEntityID(entityID);\n            newAmount = 1;\n            oldAmount = entityGroupAmounts[groupID];\n            if (oldAmount) {\n                newAmount = oldAmount + 1;\n            }\n            entityGroupAmounts[groupID] = newAmount;\n        }\n\n        let dropItemValues: Object = {};\n        for (let key in dropProbabilities) {\n            dropItemValues[key] = dropProbabilities[key];\n        }\n\n        for (const key in limitEntities) {\n            let limitAmount = limitEntities[key];\n            let currentAmount = entityAmounts[key];\n            if (currentAmount && currentAmount >= limitAmount) {\n                delete dropItemValues[key];\n            }\n        }\n\n        for (let key in limitGroup) {\n            let limitGroupAmount = limitGroup[key];\n            let currentAmount = entityGroupAmounts[key];\n            if (currentAmount && currentAmount >= limitGroupAmount) {\n                let groupID = Number(key) as EntityGroupID;\n                let entityIDs = IdentifierManager.getInstance().getEntityIDsFromEntityGroupID(groupID);\n                for (const entityID of entityIDs) {\n                    delete dropItemValues[entityID];\n                }\n            }\n        }\n\n        // 骨头特殊处理， \n        // 当场面上的骨头足以完成任务时，不再刷新骨头，\n        // 当场面上没有骨头且可以刷新骨头时立即刷新骨头\n        if (this.getTargetAmount(CollectionID.ItemBone) > 0) {\n            let hadCollectedBoneAmount = this.getCollectedEntityAmount(CollectionID.ItemBone);\n            if (entityAmounts.hasOwnProperty(EntityID.ItemBone)) {\n                hadCollectedBoneAmount += entityAmounts[EntityID.ItemBone];\n            }\n\n            if (hadCollectedBoneAmount >= this.getTargetAmount(CollectionID.ItemBone)) {\n                delete dropItemValues[EntityID.ItemBone];\n            } else {\n                let existentBoneAmount = 0;\n                if (entityAmounts.hasOwnProperty(EntityID.ItemBone)) {\n                    existentBoneAmount = entityAmounts[EntityID.ItemBone];\n                }\n\n                if (existentBoneAmount <= 0 && dropItemValues.hasOwnProperty(EntityID.ItemBone)) {\n                    dropItemValues = {};\n                    dropItemValues[EntityID.ItemBone] = 100;\n                }\n            }\n        }\n\n        // 爪印特殊处理，当场面没有爪印且可以刷新爪印时必刷一个爪印\n        if (this.getTargetAmount(CollectionID.ItemPuppy) > 0) {\n            let hadCollectedPuppyAmount = this.getCollectedEntityAmount(CollectionID.ItemPuppy);\n            if (hadCollectedPuppyAmount < this.getTargetAmount(CollectionID.ItemPuppy)) {\n                let existentPawAmount = 0;\n                let entityIDs = IdentifierManager.getInstance().getEntityIDsFromEntityGroupID(EntityGroupID.ItemPaw);\n                for (let entityID of entityIDs) {\n                    if (entityAmounts.hasOwnProperty(entityID)) {\n                        existentPawAmount += entityAmounts[entityID];\n                    }\n                }\n\n                if (existentPawAmount <= 0) {\n                    let availablePawIDs: EntityID[] = [];\n                    for (let entityID of entityIDs) {\n                        if (dropItemValues.hasOwnProperty(entityID)) {\n                            availablePawIDs.push(entityID);\n                        }\n                    }\n\n                    if (availablePawIDs.length > 0) {\n                        dropItemValues = {};\n                        for (let pawID of availablePawIDs) {\n                            dropItemValues[pawID] = 100;\n                        }\n                    }\n                }\n            }\n        }\n\n        // 果酱特殊处理，\n        // 场面上存在的果酱足够完成目标，则不再刷新果酱瓶子\n        // 场面上没有果酱时，且可以刷新果酱时立即刷新一个果酱瓶\n        if (this.getTargetAmount(CollectionID.RugJam) > 0) {\n            let existentJamAmount = 0\n            for (let key in this._rugsMap) {\n                let rug = this._rugsMap[key] as RugBase;\n                if (rug.getEntityID() == EntityID.RugJam) {\n                    existentJamAmount += 1;\n                }\n            }\n\n            if (entityAmounts.hasOwnProperty(EntityID.ItemJamBottle)) {\n                existentJamAmount += entityAmounts[EntityID.ItemJamBottle] * 9\n            }\n\n            let hadCollectedJamAmount = this.getCollectedEntityAmount(CollectionID.RugJam) + existentJamAmount;\n\n            if (hadCollectedJamAmount >= this.getTargetAmount(CollectionID.RugJam)) {\n                delete dropItemValues[EntityID.ItemJamBottle];\n            } else {\n                if (existentJamAmount <= 0 && dropItemValues.hasOwnProperty(EntityID.ItemJamBottle)) {\n                    dropItemValues = {};\n                    dropItemValues[EntityID.ItemJamBottle] = 100;\n                }\n            }\n        }\n\n        let totalValue = 0;\n        for (const key in dropItemValues) {\n            let value = dropItemValues[key];\n            if (value) {\n                totalValue += value;\n            }\n        }\n        let randomValue = GameMath.randomInt(0, totalValue);\n\n        if (fitMinimum) {\n            let totalExsitAmout = 0\n            let totalRateAmount = 0\n            for (const key in dropItemValues) {\n                let amount = dropItemValues[key];\n                let entityID = Number(key) as EntityID\n                let existAmount = entityAmounts[entityID];\n                if (existAmount) {\n                    totalExsitAmout += existAmount;\n                }\n                totalRateAmount += amount;\n            }\n\n            let currentRatio = {}\n            let targetRatio = {}\n            for (const key in dropItemValues) {\n                let amount = dropItemValues[key];\n                let entityID = Number(key) as EntityID\n                let existAmount = entityAmounts[entityID];\n                if (existAmount && totalExsitAmout > 0) {\n                    currentRatio[entityID] = existAmount / totalExsitAmout\n                } else {\n                    currentRatio[entityID] = 0;\n                }\n                targetRatio[entityID] = amount / totalRateAmount\n            }\n\n            let maxGapEntityID = 0;\n            for (const key in dropItemValues) {\n                maxGapEntityID = Number(key) as EntityID\n                break;\n            }\n            let maxGap = 0;\n            for (const key in dropItemValues) {\n                let gap = targetRatio[key] - currentRatio[key]\n                if (gap > maxGap) {\n                    maxGap = gap;\n                    maxGapEntityID = Number(key) as EntityID\n                }\n            }\n            result = maxGapEntityID\n        } else {\n            let currentValue = 0;\n            for (let key in dropItemValues) {\n                let value = dropItemValues[key];\n                if (value) {\n                    currentValue += value;\n                    if (currentValue >= randomValue) {\n                        result = Number(key) as EntityID;\n                        break;\n                    }\n                }\n            }\n        }\n        return result;\n    }\n    public getGlobalRandomEntityID(): EntityID {\n        let entityID = this.getRandomEntityID(this.getDropEntityMap(),\n            this.getLimitedEntityMap(),\n            this.getLimitedGroupMap());\n        return entityID;\n    }\n\n    protected _stateMachine: GridStateMachine = null;\n    public getCurrentState(): GridStateBase {\n        let state = this._stateMachine.getCurrentState() as GridStateBase;\n        return state;\n    }\n    public setCurrentState(state: GridStateBase): void {\n        this._stateMachine.setCurrentState(state);\n    }\n\n    private _gridSize: cc.Size = cc.Size.ZERO;\n    public getGridSize(): cc.Size {\n        return this._gridSize;\n    }\n    public setGridSize(size: cc.Size): void {\n        this._gridSize = size;\n    }\n\n    private _cellSize: cc.Size = cc.Size.ZERO;\n    public getCellSize(): cc.Size {\n        return this._cellSize;\n    }\n    public setCellSize(size: cc.Size): void {\n        this._cellSize = size;\n    }\n\n    private _mode: GridMode = GridMode.Normal;\n    public getMode(): GridMode {\n        return this._mode;\n    }\n    public setMode(mode: GridMode) {\n        this._mode = mode;\n        this._gameScene.setGridMode(mode);\n    }\n    public tryEnableMode(mode: GridMode): boolean {\n        this._mode = mode;\n        if (this.getCurrentState().canChangeState()) {\n            switch (mode) {\n                case GridMode.Normal: {\n                    this.setCurrentState(GridStateSwapNeighbour.create());\n                    return true;\n                }\n                    break;\n                case GridMode.ForceClean: {\n                    this.setCurrentState(GridStateForceClean.create());\n                    return true;\n                }\n                    break;\n                case GridMode.ForceSwap: {\n                    this.setCurrentState(GridStateForceSwap.create());\n                    return true;\n                }\n                    break;\n                case GridMode.CrossBomb: {\n                    this.setCurrentState(GridStateCrossBomb.create());\n                    return true;\n                }\n                    break;\n\n                default:\n                    break;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * 像素坐标转格子坐标\n     * @param pixelPos 像素坐标\n     */\n    public getLogicalPosFromPixelPos(pixelPos: cc.Vec2): cc.Vec2 {\n\n        let contentSize = this.node.getContentSize();\n        let origin = cc.Vec2.ZERO;\n\n        let column = Math.floor((pixelPos.x - origin.x) / this._cellSize.width);\n        let row = Math.floor((pixelPos.y - origin.y) / this._cellSize.height)\n        return cc.v2(column, row);\n    }\n    /**\n     * 格子坐标转像素坐标\n     * @param logicalPos 格子坐标\n     */\n    public getPixelPosFromLogicalPos(logicalPos: cc.Vec2): cc.Vec2 {\n        let origin = cc.v2(this._cellSize.width * 0.5, this._cellSize.height * 0.5)\n        return cc.v2(origin.x + logicalPos.x * this._cellSize.width,\n            origin.y + logicalPos.y * this._cellSize.height);\n    }\n\n    public getBottomZOrder(entityType: EntityType, logicalPos: cc.Vec2): number {\n        let baseZorder = 0;\n        switch (entityType) {\n            case EntityType.Frame:\n                baseZorder = GridBase.ZORDER_FRAME_BOTTOM;\n                break;\n            case EntityType.Cell:\n                baseZorder = GridBase.ZORDER_CELL_BOTTOM;\n                break;\n            case EntityType.Popsicle:\n                baseZorder = GridBase.ZORDER_POPSICLES_BOTTOM;\n                break;\n            case EntityType.Floor:\n                baseZorder = GridBase.ZORDER_FLOOR_BOTTOM;\n                break;\n            case EntityType.Rug:\n                baseZorder = GridBase.ZORDER_RUG_BOTTOM;\n                break;\n            case EntityType.Item:\n                baseZorder = GridBase.ZORDER_ITEM_BOTTOM;\n                break;\n            case EntityType.Parasite:\n                baseZorder = GridBase.ZORDER_PARASITE_BOTTOM;\n                break;\n            case EntityType.Fences:\n                baseZorder = GridBase.ZORDER_FENCE_BOTTOM;\n                break;\n            case EntityType.Flyer:\n                baseZorder = GridBase.ZORDER_FLYER_BOTTOM;\n                break;\n            case EntityType.Marker:\n                baseZorder = GridBase.ZORDER_MARKER_BOTTOM;\n                break;\n            default:\n                break;\n        }\n        return baseZorder + (this._gridSize.height - logicalPos.y) * this._gridSize.width + (this._gridSize.width - logicalPos.x);\n    }\n    public getBottomZOrderForEnity(entity: EntityBase): number {\n        return this.getBottomZOrder(entity.getEntityType(), entity.getLogicalPos())\n    }\n    public getTopZOrder(entityType: EntityType, logicalPos: cc.Vec2): number {\n        let baseZorder = 0;\n        switch (entityType) {\n            case EntityType.Frame:\n                baseZorder = GridBase.ZORDER_FRAME_TOP;\n                break;\n            case EntityType.Cell:\n                baseZorder = GridBase.ZORDER_CELL_TOP;\n                break;\n            case EntityType.Popsicle:\n                baseZorder = GridBase.ZORDER_POPSICLES_TOP;\n                break;\n            case EntityType.Floor:\n                baseZorder = GridBase.ZORDER_FLOOR_TOP;\n                break;\n            case EntityType.Rug:\n                baseZorder = GridBase.ZORDER_RUG_TOP;\n                break;\n            case EntityType.Item:\n                baseZorder = GridBase.ZORDER_ITEM_TOP;\n                break;\n            case EntityType.Parasite:\n                baseZorder = GridBase.ZORDER_PARASITE_TOP;\n                break;\n            case EntityType.Fences:\n                baseZorder = GridBase.ZORDER_FENCE_TOP;\n                break;\n            case EntityType.Flyer:\n                baseZorder = GridBase.ZORDER_FLYER_TOP;\n                break;\n            case EntityType.Marker:\n                baseZorder = GridBase.ZORDER_MARKER_TOP;\n                break;\n            default:\n                break;\n        }\n        return baseZorder + (this._gridSize.height - logicalPos.y) * this._gridSize.width + (this._gridSize.width - logicalPos.x);\n    }\n\n    public getTopZOrderForEnity(entity: EntityBase): number {\n        return this.getTopZOrder(entity.getEntityType(), entity.getLogicalPos())\n    }\n\n    public getAvailableColors(): EntityColor[] {\n        let result: EntityColor[] = [];\n        let globalDropEntityMap = this.getDropEntityMap();\n        for (let key in globalDropEntityMap) {\n            let entityID = Number(key) as EntityID;\n            if (entityID) {\n                let color = IdentifierManager.getInstance().getEntityColorWithEntityID(entityID);\n                if (color != EntityColor.None) {\n                    GameMath.insertAsSet(result, color);\n                }\n            }\n        }\n        return result;\n    }\n\n    private getEntityFromMapAtLogicalPos(map: Object, logicalPos: cc.Vec2): EntityBase {\n        let key = GameMath.getStringFromVec2(logicalPos);\n        let entity = map[key];\n        return entity;\n    }\n    private removeEntityFromMapAtLogicalPos(map: Object, logicalPos: cc.Vec2): void {\n        let entity = this.getEntityFromMapAtLogicalPos(map, logicalPos);\n        if (entity) {\n            let occupyArea = entity.getOccupyArea();\n            for (let row = 0; row < occupyArea.size.height; row++) {\n                for (let column = 0; column < occupyArea.size.width; column++) {\n                    let occupyPos = cc.v2(column, row).add(occupyArea.origin);\n                    let occupyKey = GameMath.getStringFromVec2(occupyPos);\n                    delete map[occupyKey];\n                }\n            }\n            entity.node.removeFromParent();\n        }\n    }\n    private setEntityToMapAtLogicalPos(entity: EntityBase, rootNode: cc.Node, map: Object, logicalPos: cc.Vec2): void {\n        if (!entity) {\n            return;\n        }\n        this.removeEntityFromMapAtLogicalPos(map, logicalPos);\n        let occupyArea = entity.getOccupyArea();\n        for (let row = 0; row < occupyArea.size.height; row++) {\n            for (let column = 0; column < occupyArea.size.width; column++) {\n                let occupyPos = cc.v2(column, row).add(logicalPos);\n                let occupyKey = GameMath.getStringFromVec2(occupyPos);\n                map[occupyKey] = entity;\n            }\n        }\n        entity.node.removeFromParent(false);\n        rootNode.addChild(entity.node);\n        entity.setLogicalPos(logicalPos);\n    }\n    public shiftEntityToEffectLayer(entity: EntityBase): void {\n        if (!entity) {\n            return;\n        }\n        entity.node.parent = this._effectLayer\n    }\n\n    private _framesMap: Object = {};\n    public getFrameAtLogicalPos(logicalPos: cc.Vec2): FrameBase {\n        let result: FrameBase = null;\n        let entity = this.getEntityFromMapAtLogicalPos(this._framesMap, logicalPos);\n        if (entity) {\n            result = entity as FrameBase;\n        }\n        return result;\n    }\n    public setFrameAtLogicalPos(frame: FrameBase, logicalPos: cc.Vec2): void {\n        this.setEntityToMapAtLogicalPos(frame, this._frameLayer, this._framesMap, logicalPos);\n    }\n    public removeFrameAtLogicalPos(logicalPos: cc.Vec2): void {\n        this.removeEntityFromMapAtLogicalPos(this._framesMap, logicalPos);\n    }\n    public getFramesMap(): Object {\n        return this._framesMap;\n    }\n\n    private _cellsMap: Object = {};\n    public getCellAtLogicalPos(logicalPos: cc.Vec2): CellBase {\n        let result: CellBase = null;\n        let entity = this.getEntityFromMapAtLogicalPos(this._cellsMap, logicalPos);\n        if (entity) {\n            result = entity as CellBase;\n        }\n        return result;\n    }\n    public setCellAtLogicalPos(cell: CellBase, logicalPos: cc.Vec2): void {\n        this.setEntityToMapAtLogicalPos(cell, this._cellLayer, this._cellsMap, logicalPos);\n    }\n    public removeCellAtLogicalPos(logicalPos: cc.Vec2): void {\n        this.removeEntityFromMapAtLogicalPos(this._cellsMap, logicalPos);\n    }\n    public getCellsMap(): Object {\n        return this._cellsMap;\n    }\n\n    private _popsiclesMap: Object = {};\n    public getPopsicleAtLogicalPos(logicalPos: cc.Vec2): PopsicleBase {\n        let result: PopsicleBase = null;\n        let entity = this.getEntityFromMapAtLogicalPos(this._popsiclesMap, logicalPos);\n        if (entity) {\n            result = entity as PopsicleBase;\n        }\n        return result;\n    }\n    public setPopsicleAtLogicalPos(popsicle: PopsicleBase, logicalPos: cc.Vec2): void {\n        this.setEntityToMapAtLogicalPos(popsicle, this._popsicleLayer, this._popsiclesMap, logicalPos);\n    }\n    public removePopsicleAtLogicalPos(logicalPos: cc.Vec2): void {\n        this.removeEntityFromMapAtLogicalPos(this._popsiclesMap, logicalPos);\n    }\n    public getPopsiclesMap(): Object {\n        return this._popsiclesMap;\n    }\n\n\n    private _floorsMap: Object = {};\n    public getFloorAtLogicalPos(logicalPos: cc.Vec2): FloorBase {\n        let result: FloorBase = null;\n        let entity = this.getEntityFromMapAtLogicalPos(this._floorsMap, logicalPos);\n        if (entity) {\n            result = entity as FloorBase;\n        }\n        return result;\n    }\n    public setFloorAtLogicalPos(floor: FloorBase, logicalPos: cc.Vec2): void {\n        this.setEntityToMapAtLogicalPos(floor, this._floorLayer, this._floorsMap, logicalPos);\n    }\n    public removeFloorAtLogicalPos(logicalPos: cc.Vec2): void {\n        this.removeEntityFromMapAtLogicalPos(this._floorsMap, logicalPos);\n    }\n    public getFloorsMap(): Object {\n        return this._floorsMap;\n    }\n    public isGrassFloorAtLogicalPos(logicalPos: cc.Vec2): boolean {\n        let result = false;\n        let floor = this.getFloorAtLogicalPos(logicalPos);\n        if (floor && floor.getEntityID() == EntityID.FloorGrass) {\n            result = true;\n        }\n        return result;\n    }\n\n    private _rugsMap: Object = {};\n    public getRugAtLogicalPos(logicalPos: cc.Vec2): RugBase {\n        let result: RugBase = null;\n        let entity = this.getEntityFromMapAtLogicalPos(this._rugsMap, logicalPos);\n        if (entity) {\n            result = entity as RugBase;\n        }\n        return result;\n    }\n    public setRugAtLogicalPos(rug: RugBase, logicalPos: cc.Vec2): void {\n        this.setEntityToMapAtLogicalPos(rug, this._rugLayer, this._rugsMap, logicalPos);\n    }\n    public removeRugAtLogicalPos(logicalPos: cc.Vec2): void {\n        this.removeEntityFromMapAtLogicalPos(this._rugsMap, logicalPos);\n    }\n    public getRugsMap(): Object {\n        return this._rugsMap;\n    }\n\n    private _itemsMap: Object = {};\n    public getItemAtLogicalPos(logicalPos: cc.Vec2): ItemBase {\n        let result: ItemBase = null;\n        let entity = this.getEntityFromMapAtLogicalPos(this._itemsMap, logicalPos);\n        if (entity) {\n            result = entity as ItemBase;\n        }\n        return result;\n    }\n    public setItemAtLogicalPos(item: ItemBase, logicalPos: cc.Vec2): void {\n        let rootLayer = this._itemLayer;\n        if (item.getItemType() == ItemType.Puppy) {\n            rootLayer = this._puppyLayer;\n        }\n        this.setEntityToMapAtLogicalPos(item, rootLayer, this._itemsMap, logicalPos);\n    }\n    public removeItemAtLogicalPos(logicalPos: cc.Vec2): void {\n        this.removeEntityFromMapAtLogicalPos(this._itemsMap, logicalPos);\n    }\n    public swapItem(logicalPosA: cc.Vec2, logicalPosB: cc.Vec2): void {\n\n        if (logicalPosA.equals(logicalPosB)) {\n            return;\n        }\n\n        let itemA = this.getItemAtLogicalPos(logicalPosA);\n        let itemB = this.getItemAtLogicalPos(logicalPosB);\n\n        if (itemA == null && itemB == null) {\n            return;\n        }\n\n        this.removeItemAtLogicalPos(logicalPosA);\n        this.removeItemAtLogicalPos(logicalPosB);\n\n        if (itemA) {\n            this.setItemAtLogicalPos(itemA, logicalPosB);\n        }\n\n        if (itemB) {\n            this.setItemAtLogicalPos(itemB, logicalPosA);\n        }\n    }\n    public generateBomb(targetPos: cc.Vec2, bombType: ItemBombType, color: EntityColor, changeOld: boolean = false): void {\n        let bomb = ItemFactory.generateEffectBombItem(this, bombType, color);\n        if (bomb) {\n            bomb.setPixelPos(targetPos);\n            bomb.setImmuneDamage(true);\n            this._itemLayer.addChild(bomb.node, this.getTopZOrder(bomb.getEntityType(), targetPos));\n            if (changeOld) {\n                bomb.setCurrentState(ItemStateReplace.create(targetPos));\n            } else {\n                bomb.setCurrentState(ItemStateGenerate.create(targetPos));\n            }\n        } else {\n            // cc.log('Can not generate bomb');\n        }\n    }\n    public getItemsMap(): Object {\n        return this._itemsMap;\n    }\n\n    private _parasitesMap: Object = {};\n    public getParasiteAtLogicalPos(logicalPos: cc.Vec2): ParasiteBase {\n        let result: ParasiteBase = null;\n        let entity = this.getEntityFromMapAtLogicalPos(this._parasitesMap, logicalPos);\n        if (entity) {\n            result = entity as ParasiteBase;\n        }\n        return result;\n    }\n    public setParasiteAtLogicalPos(parasite: ParasiteBase, logicalPos: cc.Vec2): void {\n        this.setEntityToMapAtLogicalPos(parasite, this._parasiteLayer, this._parasitesMap, logicalPos);\n    }\n    public removeParasiteAtLogicalPos(logicalPos: cc.Vec2): void {\n        this.removeEntityFromMapAtLogicalPos(this._parasitesMap, logicalPos);\n    }\n    public getParasitesMap(): Object {\n        return this._parasitesMap;\n    }\n\n    private _fencesMap: Object = {};\n    public getFenceAtFencePos(fencePos: FencePos): FenceBase {\n        let result: FenceBase = null;\n        let key = GameMath.getStringFromFencePos(fencePos);\n        result = this._fencesMap[key];\n        return result;\n    }\n    public setFenceAtFencePos(fence: FenceBase, fencePos: FencePos): void {\n        if (!fence) {\n            return;\n        }\n        this.removeFenceAtFencePos(fencePos);\n        let key = GameMath.getStringFromFencePos(fencePos);\n        this._fencesMap[key] = fence;\n        fence.node.removeFromParent(false);\n        this._fenceLayer.addChild(fence.node);\n        fence.setFencePos(fencePos);\n    }\n    public removeFenceAtFencePos(fencePos: FencePos): void {\n        let fence = this.getFenceAtFencePos(fencePos);\n        if (fence) {\n            let key = GameMath.getStringFromFencePos(fencePos);\n            delete this._fencesMap[key];\n            fence.node.removeFromParent();\n        }\n    }\n    public getFencesMap(): Object {\n        return this._fencesMap;\n    }\n\n    private _markersMap: Object = {};\n    public getMarkerAtLogicalPos(logicalPos: cc.Vec2): MarkerBase {\n        let result: MarkerBase = null;\n        let entity = this.getEntityFromMapAtLogicalPos(this._markersMap, logicalPos);\n        if (entity) {\n            result = entity as MarkerBase;\n        }\n        return result;\n    }\n    public setMarkerAtLogicalPos(marker: MarkerBase, logicalPos: cc.Vec2): void {\n        this.setEntityToMapAtLogicalPos(marker, this._markerLayer, this._markersMap, logicalPos);\n    }\n    public removeMarkerAtLogicalPos(logicalPos: cc.Vec2): void {\n        this.removeEntityFromMapAtLogicalPos(this._markersMap, logicalPos);\n    }\n    public getMarkersMap(): Object {\n        return this._markersMap;\n    }\n\n    /**\n     * 飞行道具加入棋盘并发射\n     * @param flyer 飞行道具\n     * @param logicalPos 位置\n     */\n    public setFlyerAtLogicalPos(flyer: FlyerBase, logicalPos: cc.Vec2): void {\n        if (flyer) {\n            flyer.setPixelPos(logicalPos);\n            this._flyerLayer.addChild(flyer.node, this.getTopZOrder(flyer.getEntityType(), logicalPos));\n            flyer.launch();\n        }\n    }\n    public highlightedCell(logicalPos: cc.Vec2): void {\n        let cell = this.getCellAtLogicalPos(logicalPos);\n        if (cell) {\n            let flyer = FlyerAnimation.createAnimationWithType(this, FlyerAnimationType.HighlightedCell);\n            this.setFlyerAtLogicalPos(flyer, logicalPos);\n            flyer.node.zIndex = GridBase.ZORDER_ITEM_BOTTOM;\n        }\n    }\n    public bombCell(logicalPos: cc.Vec2): void {\n        let flyer = FlyerAnimation.createAnimationWithType(this, FlyerAnimationType.Bomb1x1);\n        this.setFlyerAtLogicalPos(flyer, logicalPos);\n    }\n\n    public getEntity(entityType: EntityType, logicalPos: cc.Vec2): EntityBase {\n        let result: EntityBase = null;\n        switch (entityType) {\n            case EntityType.Frame: {\n                result = this.getFrameAtLogicalPos(logicalPos);\n            }\n                break;\n            case EntityType.Cell: {\n                result = this.getCellAtLogicalPos(logicalPos);\n            }\n                break;\n            case EntityType.Popsicle: {\n                result = this.getPopsicleAtLogicalPos(logicalPos);\n            }\n                break;\n            case EntityType.Floor: {\n                result = this.getFloorAtLogicalPos(logicalPos);\n            }\n                break;\n            case EntityType.Rug: {\n                result = this.getRugAtLogicalPos(logicalPos);\n            }\n                break;\n            case EntityType.Item: {\n                result = this.getItemAtLogicalPos(logicalPos);\n            }\n                break;\n            case EntityType.Parasite: {\n                result = this.getParasiteAtLogicalPos(logicalPos);\n            }\n                break;\n            case EntityType.Marker: {\n                result = this.getMarkerAtLogicalPos(logicalPos);\n            }\n                break;\n            default:\n                break;\n        }\n        return result;\n    }\n    public setEntity(entity: EntityBase, logicalPos: cc.Vec2): void {\n        if (!entity) {\n            return;\n        }\n\n        let entityType = entity.getEntityType();\n        switch (entityType) {\n            case EntityType.Frame: {\n                this.setFrameAtLogicalPos(entity as FrameBase, logicalPos);\n            }\n                break;\n            case EntityType.Cell: {\n                this.setCellAtLogicalPos(entity as CellBase, logicalPos);\n            }\n                break;\n            case EntityType.Popsicle: {\n                this.setPopsicleAtLogicalPos(entity as PopsicleBase, logicalPos);\n            }\n                break;\n            case EntityType.Floor: {\n                this.setFloorAtLogicalPos(entity as FloorBase, logicalPos);\n            }\n                break;\n            case EntityType.Rug: {\n                this.setRugAtLogicalPos(entity as RugBase, logicalPos);\n            }\n                break;\n            case EntityType.Item: {\n                this.setItemAtLogicalPos(entity as ItemBase, logicalPos);\n            }\n                break;\n            case EntityType.Parasite: {\n                this.setParasiteAtLogicalPos(entity as ParasiteBase, logicalPos);\n            }\n                break;\n            case EntityType.Marker: {\n                this.setMarkerAtLogicalPos(entity as MarkerBase, logicalPos);\n            }\n                break;\n            default:\n                break;\n        }\n    }\n\n    public removeEntity(entityType: EntityType, logicalPos: cc.Vec2): void {\n        switch (entityType) {\n            case EntityType.Frame: {\n                this.removeFrameAtLogicalPos(logicalPos);\n            }\n                break;\n            case EntityType.Cell: {\n                this.removeCellAtLogicalPos(logicalPos);\n            }\n                break;\n            case EntityType.Popsicle: {\n                this.removePopsicleAtLogicalPos(logicalPos);\n            }\n                break;\n            case EntityType.Floor: {\n                this.removeFloorAtLogicalPos(logicalPos);\n            }\n                break;\n            case EntityType.Rug: {\n                this.removeRugAtLogicalPos(logicalPos);\n            }\n                break;\n            case EntityType.Item: {\n                this.removeItemAtLogicalPos(logicalPos);\n            }\n                break;\n            case EntityType.Parasite: {\n                this.removeParasiteAtLogicalPos(logicalPos);\n            }\n                break;\n            case EntityType.Marker: {\n                this.removeMarkerAtLogicalPos(logicalPos);\n            }\n                break;\n            default:\n                break;\n        }\n    }\n\n    private _obstructs: EntityBase[] = [];\n    public isObstructsEmpty(): boolean {\n        return this._obstructs.length <= 0;\n    }\n    /**\n     * 加入到阻塞列表，阻塞列表是存放延时的导弹爆炸之类的，让列表里面的逻辑全执行完再切换下个状态\n     * @param entity 目标\n     */\n    public addObstructs(entity: EntityBase): void {\n        if (entity) {\n            GameMath.insertAsSet(this._obstructs, entity);\n        }\n    }\n    /**\n     * 删除阻塞列表某个元素\n     * @param entity 目标\n     */\n    public removeObstructs(entity: EntityBase): void {\n        if (entity) {\n            let index = GameMath.indexOf(this._obstructs, entity);\n            if (index != -1) {\n                this._obstructs.splice(index, 1);\n            }\n        }\n    }\n\n    private _flyerObstructs: EntityBase[] = [];\n    public isFlyerObstructsEmpty(): boolean {\n        return this._flyerObstructs.length <= 0;\n    }\n    public addFlyerObstructs(entity: EntityBase): void {\n        if (entity) {\n            GameMath.insertAsSet(this._flyerObstructs, entity);\n        }\n    }\n    public removeFlyerObstructs(entity: EntityBase): void {\n        if (entity) {\n            let index = GameMath.indexOf(this._flyerObstructs, entity);\n            if (index != -1) {\n                this._flyerObstructs.splice(index, 1);\n            }\n        }\n    }\n\n    private _attackePositions: cc.Vec2[] = [];\n    public getAttackedPosition(): cc.Vec2[] {\n        return this._attackePositions;\n    }\n    public recordAttackedPosition(pos: cc.Vec2): void {\n        GameMath.insertAsSet(this._attackePositions, pos);\n    }\n    public clearAttackedPostionRecord(): void {\n        GameMath.clearArray(this._attackePositions);\n    }\n\n    public unimmuneAllEntities(): void {\n\n        for (let key in this._framesMap) {\n            let entity = this._framesMap[key];\n            entity.setImmuneDamage(false);\n        }\n\n        for (let key in this._cellsMap) {\n            let entity = this._cellsMap[key];\n            entity.setImmuneDamage(false);\n        }\n\n        for (let key in this._popsiclesMap) {\n            let entity = this._popsiclesMap[key];\n            entity.setImmuneDamage(false);\n        }\n\n        for (let key in this._floorsMap) {\n            let entity = this._floorsMap[key];\n            entity.setImmuneDamage(false);\n        }\n\n        for (let key in this._rugsMap) {\n            let entity = this._rugsMap[key];\n            entity.setImmuneDamage(false);\n        }\n\n        for (let key in this._itemsMap) {\n            let entity = this._itemsMap[key];\n            entity.setImmuneDamage(false);\n        }\n\n        for (let key in this._parasitesMap) {\n            let entity = this._parasitesMap[key];\n            entity.setImmuneDamage(false);\n        }\n\n        for (let key in this._fencesMap) {\n            let entity = this._fencesMap[key];\n            entity.setImmuneDamage(false);\n        }\n    }\n\n    private _commandPairs: GridCommandPair[] = [];\n    private _nextCommandIndex = 0;\n    private _insertNewCommand: boolean = false;\n    public dispatchCommand(pos: cc.Vec2, command: GridCommand, delayTime: number): void {\n        if (pos.x < 0 || pos.x >= this._gridSize.width || pos.y < 0 || pos.y >= this._gridSize.height) {\n            return;\n        }\n\n        if (this._usePriorityCommandQueue) {\n            let insertCommand = GridCommandPair.create(pos, command, delayTime, this._nextCommandIndex);\n            let index = this._priorityCommandQueue.indexOf(insertCommand);\n            if (index == -1) {\n                this._priorityCommandQueue.push(insertCommand);\n                this._nextCommandIndex++;\n            }\n        } else {\n            if (command.type == GridCommandType.MatchClean) {\n                let index = GameMath.indexOf(this._commandPairs, command, 0, function (lhs: GridCommandPair, rhs: GridCommand) {\n                    if (lhs.command.type == rhs.type) {\n                        if (pos.equals(lhs.targetPos)) {\n                            return true;\n                        }\n                    }\n                    return false;\n                });\n                if (index != -1) {\n                    return;\n                }\n            }\n\n            let insertCommand = GridCommandPair.create(pos, command, delayTime, this._nextCommandIndex);\n            this._commandPairs.push(insertCommand);\n            this._nextCommandIndex++;\n            this._insertNewCommand = true;\n        }\n    }\n    public isCommandListEmpty(): boolean {\n\n        if (this._usePriorityCommandQueue) {\n            return this._priorityCommandQueue.isEmpty();\n        } else {\n            return this._commandPairs.length <= 0;\n        }\n    }\n    public sortCommandList(): void {\n        if (this._insertNewCommand) {\n            this._insertNewCommand = false;\n            this._commandPairs.sort(function (lhs: GridCommandPair, rhs: GridCommandPair) {\n                if (lhs.delayTime == rhs.delayTime) {\n\n                    if (lhs.command.getPriority() == rhs.command.getPriority()) {\n                        if (lhs.index == rhs.index) {\n                            return 0;\n                        } else {\n                            if (lhs.index < rhs.index) {\n                                return -1;\n                            } else {\n                                return 1\n                            }\n                        }\n                    } else {\n                        if (lhs.command.getPriority() > rhs.command.getPriority()) {\n                            return -1;\n                        } else {\n                            return 1;\n                        }\n                    }\n\n                } else if (lhs.delayTime < rhs.delayTime) {\n                    return - 1;\n                } else {\n                    return 1;\n                }\n            });\n        }\n    }\n    public progressCommand(delta: number): void {\n\n        if (this._usePriorityCommandQueue) {\n            let commandPairs = this._priorityCommandQueue.getElements();\n            for (let commandPair of commandPairs) {\n                commandPair.delayTime -= delta;\n            }\n            while (!this._priorityCommandQueue.isEmpty()) {\n                let commandPair = this._priorityCommandQueue.peek();\n                if (commandPair.delayTime < 0) {\n                    commandPair = this._priorityCommandQueue.pop();\n                    this.excuteCommandPair(commandPair);\n                } else {\n                    break\n                }\n            }\n        } else {\n            this.sortCommandList();\n            for (let commandPair of this._commandPairs) {\n                commandPair.delayTime -= delta;\n            }\n\n            let index = 0;\n            // cc.log('CommandPairs')\n            // cc.log(this._commandPairs)\n            while (index < this._commandPairs.length) {\n                let commandPair = this._commandPairs[index];\n                if (commandPair.delayTime > 0) {\n                    this._commandPairs.splice(0, index);\n                    break;\n                }\n                this.excuteCommandPair(commandPair);\n                index += 1;\n                if (index >= this._commandPairs.length) {\n                    this._commandPairs.length = 0;\n                }\n            }\n        }\n    }\n    public excuteCommandPair(commandPair: GridCommandPair): void {\n\n        let entityTypes: EntityType[] = [\n            EntityType.Parasite,\n            EntityType.Item,\n            EntityType.Rug,\n            EntityType.Floor,\n            EntityType.Popsicle,\n            EntityType.Cell,\n        ];\n\n        if (commandPair.command.type == GridCommandType.CheckMatch) {\n            entityTypes = [EntityType.Item];\n        }\n\n        for (let entityType of entityTypes) {\n            let entity = this.getEntity(entityType, commandPair.targetPos);\n            if (entity) {\n                entity.excuteCommand(commandPair.command);\n                if (commandPair.command.type != GridCommandType.TerminateClean) {\n                    break;\n                }\n            }\n        }\n    }\n\n    public runGame(): void {\n        this.setPowerAmount(PowerID.LaunchResidentGears, 1);\n        this.setPowerAmount(PowerID.LaunchGears, 1);\n        this.setCurrentState(GridStateAppear.create());\n    }\n\n    public pauseGame() {\n        this.setCurrentState(GridStateNull.create())\n    }\n\n    public resumeGame() {\n        this.setCurrentState(GridStateLaunchGears.create());\n    }\n\n    public clearGameForReplay(): void {\n        this.setCurrentState(GridStateDisappear.create());\n    }\n\n    public appearUI(): void {\n        this._gameScene.appearUI();\n    }\n\n    public disappearUI(): void {\n        this._gameScene.disappearUI();\n    }\n\n    public showReplayPrepareUI(): void {\n        this._gameScene.showReplayPrepareUI();\n    }\n\n    public isComplete(): boolean {\n        return this._gameScene.isCompleted();\n    }\n    public isFailed(): boolean {\n        return this._gameScene.isFailed();\n    }\n    public hasShowCompleteBanner(): boolean {\n        return this._gameScene.hasShowCompleteBanner();\n    }\n    public showCompleteBanner(): void {\n        this._gameScene.showCompleteBanner();\n    }\n    public congratulation(): void {\n        this._gameScene.congratulation();\n    }\n    public showGameFail(): void {\n        this._gameScene.showGameFail();\n    }\n    public noMoreStep(): void {\n        this._gameScene.noMoreStep();\n    }\n    public stalemate(): void {\n        this._gameScene.stalemate();\n    }\n\n    public chargeFlyer(entity: EntityBase): void {\n\n        let chargeItems: ItemBase[] = [];\n        for (let key in this._itemsMap) {\n            let item = this._itemsMap[key] as ItemBase;\n            if (item.canWillCharge(entity.getCollectionID())) {\n                chargeItems.push(item);\n            }\n        }\n\n        if (chargeItems.length > 0) {\n            chargeItems.sort(function (itemA, itemB): number {\n                if (itemA.getChargePriority() == itemB.getChargePriority()) {\n                    let posA = itemA.getLogicalPos();\n                    let posB = itemB.getLogicalPos();\n                    if (!posA.equals(posB)) {\n                        if (GameMath.vec2Less(itemA.getLogicalPos(), itemB.getLogicalPos())) {\n                            return -1;\n                        } else {\n                            return 1;\n                        }\n                    }\n                    return 0;\n                }\n                return itemA.getChargePriority() - itemB.getChargePriority();\n            });\n            let targetItem = chargeItems[0] as ItemMower;\n            if (targetItem) {\n                targetItem.setWillChargeAmount(targetItem.getWillChargeAmount() + 1);\n                let flyer = FlyerChargeEntity.create(this, entity.getCollectionID(), entity.getLogicalPos(), targetItem.getLogicalPos());\n                this.setFlyerAtLogicalPos(flyer, entity.getLogicalPos());\n            }\n        }\n    }\n    public updateStepBarUIWithDelta(delta: number) {\n        this._gameScene.updateStepBarUIWithDelta(delta);\n    }\n    public updateTargetBarUIWithDelta(collectionID: CollectionID, delta: number) {\n        this._gameScene.updateTargetBarUIWithDelta(collectionID, delta);\n    }\n\n    public updateSupplyBarUIWithDelta(itemID: GameCurrencyType, delta: number) {\n        this._gameScene.updateSupplyBarUIWithDelta(itemID, delta);\n    }\n\n    public updateScoreBarUIWithDelta(delta: number) {\n        this._gameScene.updateScoreBarUIWithDelta(delta);\n    }\n    public collectEntity(entity: EntityBase): void {\n        this.gainCollectedEntity(entity.getCollectionID(), 1);\n        this.gainPower(entity.getPowerID(), 1);\n        this.gainCollectedSupplyWithEntity(entity);\n    }\n    public createCollectedEntityFlyer(entity: EntityBase) {\n        let collectionID = entity.getCollectionID();\n        if (this.isTargetCollectionID(collectionID)) {\n            let flyer = FlyerCollectedEntity.create(this, collectionID, -1, entity.getLogicalPos());\n            this.setFlyerAtLogicalPos(flyer, entity.getLogicalPos());\n        }\n    }\n    public isTargetCollectionID(collectionID: CollectionID): boolean {\n        return this._gameScene.isTargetCollectionID(collectionID);\n    }\n    public gainStepWithItemID(itemID: GameCurrencyType, withFlyer: boolean = false, fromPos: cc.Vec2 = cc.Vec2.ZERO) {\n        let stepNum = 5\n        this.gainPower(PowerID.AvailableSwap, stepNum);\n        if (withFlyer) {\n            let flyer = FlyerMoreStep.create(this, stepNum, fromPos);\n            this.setFlyerAtLogicalPos(flyer, fromPos);\n        } else {\n            this.updateStepBarUIWithDelta(stepNum);\n        }\n    }\n    public getTargetMap(): Object {\n        return this._gameScene.getTargetMap();\n    }\n    public getTargetAmount(collectionID: CollectionID): number {\n        return this._gameScene.getTargetAmount(collectionID);\n    }\n    public getCollectedEntityAmount(collectionID: CollectionID): number {\n        return this._gameScene.getCollectedEntityAmount(collectionID);\n    }\n    public setCollectedEntityAmount(collectionID: CollectionID, amount: number): void {\n        this._gameScene.setCollectedEntityAmount(collectionID, amount);\n    }\n    public gainCollectedEntity(collectionID: CollectionID, amount: number): void {\n        this.setCollectedEntityAmount(collectionID, this.getCollectedEntityAmount(collectionID) + amount);\n    }\n    public lossCollectedEntity(collectionID: CollectionID, amount: number): void {\n        this.gainCollectedEntity(collectionID, -amount);\n    }\n\n    public getCollectedSupplyAmount(itemID: GameCurrencyType): number {\n        return this._gameScene.getCollectedSupplyAmount(itemID);\n    }\n    public setCollectedSupplyAmount(itemID: GameCurrencyType, amount: number): void {\n        this._gameScene.setCollectedSupplyAmount(itemID, amount);\n    }\n    public gainCollectedSupply(itemID: GameCurrencyType, amount: number): void {\n        this.setCollectedSupplyAmount(itemID, this.getCollectedSupplyAmount(itemID) + amount);\n    }\n    public lossCollectedSupply(itemID: GameCurrencyType, amount: number): void {\n        this.gainCollectedSupply(itemID, -amount);\n    }\n    public gainCollectedSupplyWithLogicalPos(itemID: GameCurrencyType, amount: number, logicalPos: cc.Vec2): void {\n        if (this.canGenerateTrainSupply()) {\n            if (itemID != GameCurrencyType.NoneType && amount > 0) {\n                this.gainCollectedSupply(itemID, amount);\n                let flyer = FlyerCollectedSupply.create(this, itemID, amount, logicalPos, 0);\n                this.setFlyerAtLogicalPos(flyer, logicalPos);\n            }\n        }\n    }\n    public gainCollectedSupplyWithEntity(entity: EntityBase) {\n        if (this.canGenerateTrainSupply()) {\n            let supplyMaps = entity.getProducedTrainSupplyMaps();\n            for (let supplyID in supplyMaps) {\n                let itemID = Number(supplyID) as GameCurrencyType;\n                let amount = supplyMaps[supplyID];\n                this.gainCollectedSupplyWithLogicalPos(itemID, amount, entity.getLogicalPos());\n            }\n        }\n    }\n\n\n    public getWorldPosForTarget(collectionID: CollectionID): cc.Vec2 {\n        return this._gameScene.getWorldPosForTarget(collectionID);\n    }\n    public getWorldPosForSupply(itemID: GameCurrencyType): cc.Vec2 {\n        return this._gameScene.getWorldPosForSupply(itemID);\n    }\n    public getWorldPosForStep(): cc.Vec2 {\n        return this._gameScene.getWorldPosForStep();\n    }\n    public getWorldPosForScore(): cc.Vec2 {\n        return this._gameScene.getWorldPosForScore();\n    }\n    public getWorldPosForGear(itemID: GameCurrencyType): cc.Vec2 {\n        return this._gameScene.getWorldPosForGear(itemID);\n    }\n    public getWorldAreas(type: number, data: string): cc.Rect[] {\n        let result: cc.Rect[] = [];\n\n        switch (type) {\n            case 1: {\n                let posStrings = data.split('|');\n                let positions: cc.Vec2[] = [];\n                for (let posString of posStrings) {\n                    let pos = GameMath.getVec2FromConfigString(posString);\n                    if (pos) {\n                        positions.push(pos);\n                    }\n                }\n                result = this.getWorldAreasWithPositions(positions);\n            }\n                break;\n            case 2: {\n                let names = data.split('|')\n                for (let name of names) {\n                    let areas = this.getWorldAreasWithName(name);\n                    for (let area of areas) {\n                        result.push(area);\n                    }\n                }\n\n            }\n                break;\n            default:\n                break;\n        }\n        return result;\n    }\n\n    public getWorldAreasWithPositions(positions: cc.Vec2[]): cc.Rect[] {\n\n        let result: cc.Rect[] = [];\n        for (let pos of positions) {\n            let area = this.getWorldAreaWithLogicalPos(pos);\n            if (area) {\n                result.push(area);\n            }\n        }\n        return result;\n    }\n\n    public getWorldAreaWithLogicalPos(logicalPos: cc.Vec2): cc.Rect {\n        let result: cc.Rect = null;\n\n        let originOffset = cc.v2(-this._cellSize.width * 0.5, -this._cellSize.height * 0.5);\n        let origin = this.getPixelPosFromLogicalPos(logicalPos).add(originOffset);\n        let conner = this.getPixelPosFromLogicalPos(logicalPos.add(cc.v2(1, 1))).add(originOffset);\n        let originWorld = this.node.convertToWorldSpaceAR(origin);\n        let connerWorld = this.node.convertToWorldSpaceAR(conner);\n\n        result = cc.rect(originWorld.x, originWorld.y,\n            connerWorld.x - originWorld.x, connerWorld.y - originWorld.y);\n        return result;\n    }\n\n    private getWorldAreasWithName(name: string): cc.Rect[] {\n        let result: cc.Rect[] = [];\n\n        if (name == 'popsicles') {\n            for (let key in this._popsiclesMap) {\n                let popsicle = this._popsiclesMap[key];\n                let occupyArea = popsicle.getOccupyArea();\n                for (let row = 0; row < occupyArea.height; row++) {\n                    for (let column = 0; column < occupyArea.width; column++) {\n                        let checkPos = cc.v2(occupyArea.x + column, occupyArea.y + row);\n                        let area = this.getWorldAreaWithLogicalPos(checkPos);\n                        if (area) {\n                            result.push(area);\n                        }\n                    }\n                }\n            }\n        } else if (name == 'unfilled_grass') {\n            for (let key in this._cellsMap) {\n                let cell = this._cellsMap[key];\n                let pos = cell.getLogicalPos();\n                if (!this.isGrassFloorAtLogicalPos(pos)) {\n                    let area = this.getWorldAreaWithLogicalPos(pos);\n                    if (area) {\n                        result.push(area);\n                    }\n                }\n            }\n        } else if (name == 'doughnut') {\n            for (let key in this._itemsMap) {\n                let item = this._itemsMap[key] as ItemBase;\n                if (item.getItemType() == ItemType.Doughnut) {\n                    let pos = item.getLogicalPos();\n                    let area = this.getWorldAreaWithLogicalPos(pos);\n                    if (area) {\n                        result.push(area);\n                    }\n                }\n            }\n        } else if (name == 'block') {\n            for (let key in this._itemsMap) {\n                let item = this._itemsMap[key] as ItemBase;\n                if (item.getItemType() == ItemType.Block) {\n                    let pos = item.getLogicalPos();\n                    let area = this.getWorldAreaWithLogicalPos(pos);\n                    if (area) {\n                        result.push(area);\n                    }\n                }\n            }\n        } else if (name == 'iceCube') {\n            for (let key in this._itemsMap) {\n                let item = this._itemsMap[key] as ItemBase;\n                let parasite = item.getTopParasite() as ParasiteBase;\n                if (parasite && parasite.getParasiteType() == ParasiteType.IceCube) {\n                    let pos = item.getLogicalPos();\n                    let area = this.getWorldAreaWithLogicalPos(pos);\n                    if (area) {\n                        result.push(area);\n                    }\n                }\n            }\n        } else if (name == 'nut') {\n            for (let key in this._itemsMap) {\n                let item = this._itemsMap[key] as ItemBase;\n                if (item.getItemType() == ItemType.Chestnut) {\n                    let pos = item.getLogicalPos();\n                    let area = this.getWorldAreaWithLogicalPos(pos);\n                    if (area) {\n                        result.push(area);\n                    }\n                }\n            }\n        } else if (name == 'paw') {\n            for (let key in this._itemsMap) {\n                let item = this._itemsMap[key] as ItemBase;\n                if (item.getItemType() == ItemType.DogPaw) {\n                    let pos = item.getLogicalPos();\n                    let area = this.getWorldAreaWithLogicalPos(pos);\n                    if (area) {\n                        result.push(area);\n                    }\n                }\n            }\n        } else if (name == 'red') {\n            for (let key in this._itemsMap) {\n                let item = this._itemsMap[key] as ItemBase;\n                if (item.getItemType() == ItemType.Normal && item.getEntityColor() == EntityColor.Red) {\n                    let pos = item.getLogicalPos();\n                    let area = this.getWorldAreaWithLogicalPos(pos);\n                    if (area) {\n                        result.push(area);\n                    }\n                }\n            }\n        } else if (name == 'green') {\n            for (let key in this._itemsMap) {\n                let item = this._itemsMap[key] as ItemBase;\n                if (item.getItemType() == ItemType.Normal && item.getEntityColor() == EntityColor.Green) {\n                    let pos = item.getLogicalPos();\n                    let area = this.getWorldAreaWithLogicalPos(pos);\n                    if (area) {\n                        result.push(area);\n                    }\n                }\n            }\n        } else if (name == 'butterfly') {\n            for (let key in this._itemsMap) {\n                let item = this._itemsMap[key] as ItemBase;\n                if (item.getItemType() == ItemType.EffectBomb) {\n                    let bombItem = item as ItemBombBase;\n                    if (bombItem.getBombType() == ItemBombType.Butterfly) {\n                        let pos = item.getLogicalPos();\n                        let area = this.getWorldAreaWithLogicalPos(pos);\n                        if (area) {\n                            result.push(area);\n                        }\n                    }\n                }\n            }\n        } else if (name == 'giftbox') {\n            for (let key in this._parasitesMap) {\n                let parasite = this._parasitesMap[key] as ParasiteBase;\n                if (parasite.getParasiteType() == ParasiteType.GiftBox) {\n                    let pos = parasite.getLogicalPos();\n                    let size = parasite.getLogicalSize();\n                    for (let row = 0; row < size.height; row++) {\n                        for (let column = 0; column < size.width; column++) {\n                            let checkPos = pos.add(cc.v2(column, row));\n                            let area = this.getWorldAreaWithLogicalPos(checkPos);\n                            if (area) {\n                                result.push(area);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return result;\n    }\n    public getPowerAmount(powerID: PowerID): number {\n        return this._gameScene.getPowerAmount(powerID);\n    }\n    public setPowerAmount(powerID: PowerID, amount: number) {\n        this._gameScene.setPowerAmount(powerID, amount);\n    }\n    public gainPower(powerID, amount: number) {\n        this._gameScene.gainPowerAmount(powerID, amount);\n    }\n    public lossPower(powerID, amount: number) {\n        this._gameScene.lossPowerAmount(powerID, amount);\n    }\n\n    public getTotalScore(): number {\n        return this._gameScene.getTotalScore()\n    }\n    public setTotalScore(score: number) {\n        this._gameScene.setTotalScore(score);\n    }\n    public gainScore(score: number) {\n        this._gameScene.gainTotalScore(score)\n    }\n    public lossScore(score: number) {\n        this._gameScene.lossTotalScore(score)\n    }\n    public gainScoreWithPixelPos(score: number, pos: cc.Vec2, floatScore: boolean = false) {\n        if (this._gameScene.canCountScore()) {\n            this.gainScore(score);\n            let flyer = FlyerScore.create(this, pos, score);\n            this.setFlyerAtLogicalPos(flyer, cc.v2(0, 0));\n            if (floatScore) {\n                let floatScore = FlyerScoreLabel.create(this, pos, score);\n                this.setFlyerAtLogicalPos(floatScore, cc.v2(0, 0));\n            }\n        }\n    }\n    public gainScoreWithEntity(entity: EntityBase, rate: number = 1) {\n        let score = entity.getScore() * rate;\n        let pixelPos = this.getPixelPosFromLogicalPos(entity.getLogicalPos());\n        this.gainScoreWithPixelPos(score, pixelPos);\n    }\n\n    public getBonusStepCount(): number {\n        return this._gameScene.getBonusStepCount();\n    }\n    public setBonusStepCount(count: number) {\n        this._gameScene.setBonusStepCount(count);\n    }\n    public gainBonusStepCount(delta: number) {\n        this.setBonusStepCount(this.getBonusStepCount() + delta);\n    }\n    public lossBonusStepCount(delta: number) {\n        this.setBonusStepCount(this.getBonusStepCount() - delta);\n    }\n\n    public requestUseGear(itemID: GameCurrencyType, amount: number) {\n        this._gameScene.requestUseGear(itemID, amount, this.onUseGearRespone, this);\n    }\n    public onUseGearRespone(object: Object) {\n        this._stateMachine.onRespone(object);\n    }\n\n    public getUsedGearAmount(itemID: GameCurrencyType): number {\n        return this._gameScene.getUsedGearAmount(itemID);\n    }\n    public setUsedGearAmount(itemID: GameCurrencyType, amount: number): void {\n        return this._gameScene.setUsedGearAmount(itemID, amount);\n    }\n    public getLaunchGearMap(): object {\n        return this._gameScene.getLaunchGearMap();\n    }\n    public clearLaunchGears() {\n        this._gameScene.clearLaunchGears();\n    }\n    private _gameScene: GameSceneBase = null;\n    public getDropEntityMap(): Object {\n        return this._gameScene.getDropEntityMap();\n    }\n    public resetDropConfig(): void {\n        this._gameScene.resetDropConfig();\n\n        for (let key in this._cellsMap) {\n            let cell = this._cellsMap[key] as CellBase;\n            if (cell.getGenerateType() != GenerateType.None) {\n                cell.setGenerateType(GenerateType.Default);\n            }\n        }\n    }\n    public getLimitedEntityMap(): Object {\n        return this._gameScene.getLimitedEntityMap();\n    }\n    public getLimitedGroupMap(): Object {\n        return this._gameScene.getLimitedGroupMap();\n    }\n    public getPuppyLeftSteps(): number {\n        let pathCount: number = 0;\n        for (let key in this._floorsMap) {\n            let floor: FloorBase = this._floorsMap[key];\n            if (floor.getFloorType() == FloorType.Road) {\n                pathCount += 1\n            }\n        }\n\n        let movedSteps = this.getPowerAmount(PowerID.PuppyMovedStep);\n        return pathCount - movedSteps - 1;\n    }\n\n    public canGenerateBomb(): boolean {\n        return this._gameScene.canGenerateBomb();\n    };\n    public canGenerateTrainSupply(): boolean {\n        return this._gameScene.canGenerateTrainSupply();\n    };\n\n    public canGetBonusFromLeftStep(): boolean {\n        return this._gameScene.canGetBonusFromLeftStep();\n    }\n    public beforePlayerOperated() {\n        this._gameScene.beforePlayerOperated();\n    }\n    public onPlayerOperated() {\n        this._gameScene.onPlayerOperated();\n    }\n    public canPauseGame() {\n        let currentState = this.getCurrentState();\n        return currentState.canPause();\n    }\n\n\n\n    // LIFE-CYCLE CALLBACKS:\n    // onLoad () {}\n    start() {\n\n    }\n    update(dt) {\n        dt = dt * cc.director.getScheduler().getTimeScale();\n        this.progressCommand(dt);\n        this._stateMachine.update(dt);\n    }\n    onDestroy() {\n        this.conveyerLayer = null;\n        this._stateMachine = null;\n        this._gridSize = null;\n        this._cellSize = null;\n        this._framesMap = null;\n        this._cellsMap = null;\n        this._popsiclesMap = null;\n        this._floorsMap = null;\n        this._rugsMap = null;\n        this._itemsMap = null;\n        this._fencesMap = null;\n        this._markersMap = null;\n        this._obstructs = null;\n        this._flyerObstructs = null;\n        this._attackePositions = null;\n        this._commandPairs = null;\n        this._gameScene = null;\n    }\n\n    private _lastTouchLogicalPos: cc.Vec2 = cc.Vec2.ZERO;\n    private onTouchStart(evt: cc.Event.EventTouch) {\n        let pixelPos = this.node.convertToNodeSpaceAR(evt.getLocation());\n        let logicalPos = this.getLogicalPosFromPixelPos(cc.v2(pixelPos.x, pixelPos.y));\n        this._stateMachine.onTapBegan(logicalPos);\n    }\n    private onTouchMove(evt: cc.Event.EventTouch) {\n        let pixelPos = this.node.convertToNodeSpaceAR(evt.getLocation());\n        let logicalPos = this.getLogicalPosFromPixelPos(cc.v2(pixelPos.x, pixelPos.y));\n        if (logicalPos.equals(this._lastTouchLogicalPos)) {\n            return;\n        }\n        this._lastTouchLogicalPos = logicalPos;\n        this._stateMachine.onTapMoved(logicalPos);\n    }\n    private onTouchEnd(evt: cc.Event.EventTouch) {\n        let pixelPos = this.node.convertToNodeSpaceAR(evt.getLocation());\n        let logicalPos = this.getLogicalPosFromPixelPos(cc.v2(pixelPos.x, pixelPos.y));\n        this._stateMachine.onTapEnded(logicalPos);\n    }\n    private onEvent(event: EntityEventBase) {\n        this._stateMachine.onEvent(event);\n    }\n\n\n}\n","import GridCommand from \"./GridCommand\";\n\nexport default class GridCommandPair {\n\n    public static create(TargetPos:cc.Vec2, Command:GridCommand, DelayTime:number, Index:number) : GridCommandPair {\n        return new GridCommandPair(TargetPos, Command, DelayTime, Index);\n    }\n    public targetPos:cc.Vec2 = cc.Vec2.ZERO;\n    public delayTime:number = 0;\n    public command:GridCommand = null;\n    public index:number = 0;\n    constructor(TargetPos:cc.Vec2, Command:GridCommand, DelayTime:number, Index:number) {\n        this.targetPos = TargetPos;\n        this.command = Command;\n        this.delayTime = DelayTime;\n        this.index = Index;\n    }\n}\n","import { EntityColor, EntityID } from \"../defines/EntityID\";\nimport { ItemBombType } from \"../entity/item/color/bomb/ItemBombBase\";\nimport { CollectionID } from \"../defines/CollectionID\";\n\n\n\nexport enum GridCommandType{\n    None = -1,\n// MARK: @操作命令\n    DoubleTabbed,\n    NeighbourSwap, //相邻交换\n    ForceSwap,\n    CheckMatch,\n    \n    Change,\n    Charge,\n// MARK: @消除命令\n    BombClean,\n    MatchClean,\n    NeighborClean,\n    FloorClean,\n    PopsicleClean,\n    SuicideClean,\n    ActivateClean,\n    LayoutGrass,\n    TerminateClean,\n};\n\nexport default class GridCommand {\n\n    public static DoubleTabbed() : GridCommand {\n        let command = new GridCommand(2004);\n        command.type = GridCommandType.DoubleTabbed;\n        return command;\n    }\n\n    public static NeighbourSwap(swapPos:cc.Vec2) : GridCommand {\n        let command = new GridCommand(2003);\n        command.type = GridCommandType.NeighbourSwap;\n        command.swapPos = swapPos;\n        return command;\n    }\n\n    public static ForceSwap(swapPos:cc.Vec2) : GridCommand {\n        let command = new GridCommand(2002);\n        command.type = GridCommandType.ForceSwap;\n        command.swapPos = swapPos;\n        return command;\n    }\n    \n    public static CheckMatch() : GridCommand {\n        let command = new GridCommand(2001);\n        command.type = GridCommandType.CheckMatch;\n        return command;\n    }\n    \n    public static Change(targetID:EntityID, collectOld:boolean) : GridCommand {\n        let command = new GridCommand(2001);\n        command.type = GridCommandType.Change;\n        command.targetID = targetID;\n        command.collectOld = collectOld;\n        return command;\n    }\n\n    public static Charge(collectionID:CollectionID, amount:number) : GridCommand {\n        let command = new GridCommand(2001);\n        command.type = GridCommandType.Charge;\n        command.chargeID = collectionID;\n        command.chargeAmount = amount;\n        return command;\n    }\n    \n    public static MatchClean(celanRoot:cc.Vec2, createBombType:ItemBombType, layoutGrass:boolean) : GridCommand {\n        let command = new GridCommand(1101);\n        command.type = GridCommandType.MatchClean;\n        command.cleanRoot = celanRoot;\n        command.createBombType = createBombType;\n        command.hitNeighbour = true;\n        command.hitFloor = true;\n        command.layoutGrass = layoutGrass;\n        return command;\n    }\n    \n    public static LayoutGrass() : GridCommand {\n        let command = new GridCommand(1004);\n        command.type = GridCommandType.LayoutGrass;\n        command.layoutGrass = true;\n        return command;\n    }\n    \n    public static BombClean(cleanRoot:cc.Vec2, cleanColor:EntityColor, layoutGrass:boolean, ignoreImmunity:boolean = false) : GridCommand {\n        let command = new GridCommand(1003);\n        command.type = GridCommandType.BombClean;\n        command.cleanRoot = cleanRoot;\n        command.cleanColor = cleanColor;\n        command.ignoreImmunity = ignoreImmunity;\n        command.layoutGrass = layoutGrass;\n        command.hitNeighbour = false;\n        command.hitFloor = true;\n        return command;\n    }\n    \n    public static ActivateClean(cleanRoot:cc.Vec2) : GridCommand {\n        let command = new GridCommand(1003);\n        command.type = GridCommandType.ActivateClean;\n        command.cleanRoot = cleanRoot;\n        command.cleanColor = EntityColor.None;\n        command.hitNeighbour = false;\n        command.hitFloor = false;\n        command.layoutGrass = false;\n        return command;\n    }\n    \n    public static SuicideClean(cleanRoot:cc.Vec2, cleanColor:EntityColor, layoutGrass:boolean) : GridCommand {\n        let command = new GridCommand(1003);\n        command.type = GridCommandType.SuicideClean;\n        command.cleanRoot = cleanRoot;\n        command.cleanColor = cleanColor;\n        command.hitNeighbour = true;\n        command.hitFloor = true;\n        command.layoutGrass = layoutGrass;\n        return command;\n    }\n    \n    public static NeighborClean(cleanRoot:cc.Vec2, cleanColor:EntityColor) : GridCommand {\n        let command = new GridCommand(1001);\n        command.type = GridCommandType.NeighborClean;\n        command.cleanRoot = cleanRoot;\n        command.cleanColor = cleanColor;\n        return command;\n    }\n    \n    public static FloorClean() : GridCommand {\n        let command = new GridCommand(1003);\n        command.type = GridCommandType.FloorClean;\n        return command;\n    }\n    \n    public static PopsicleClean() : GridCommand {\n        let command = new GridCommand(1002);\n        command.type = GridCommandType.PopsicleClean;\n        return command;\n    }\n\n    public static TerminateClean(cleanRoot:cc.Vec2, cleanColor:EntityColor, layoutGrass:boolean) : GridCommand {\n        let command = new GridCommand(1003);\n        command.type = GridCommandType.TerminateClean;\n        command.cleanRoot = cleanRoot;\n        command.cleanColor = cleanColor;\n        command.layoutGrass = layoutGrass;\n        return command;\n    }\n    \n    public type:GridCommandType = GridCommandType.None;\n    public swapPos:cc.Vec2 = cc.Vec2.ZERO;\n    public cleanRoot:cc.Vec2 = cc.Vec2.ZERO;\n    public cleanColor:EntityColor = EntityColor.None;\n    public ignoreImmunity:boolean = false;\n    public createBombType:ItemBombType = ItemBombType.None;\n    public hitNeighbour:boolean = false;\n    public hitFloor:boolean = false;\n    public layoutGrass:boolean = false;\n    public targetID:EntityID = EntityID.None;\n    public collectOld:boolean = false;\n    public chargeID:CollectionID = CollectionID.None;\n    public chargeAmount:number = 0;\n    private _priority:number = 0;\n    \n    public getPriority() : number {\n        return this._priority;\n    }\n\n    constructor(priority:number) {\n        this._priority = priority;\n    }\n    \n}\n","/**\n * 消除面版开场动画\n * （四周到中心渐变出现）\n */\n\nimport GridBase from \"../../GridBase\";\nimport GridStateBase, { GridState } from \"../GridStateBase\";\nimport GridStateDrop from \"./GridStateDrop\";\nimport { PowerID } from \"../../../defines/PowerID\";\n\nexport default class GridStateAppear extends GridStateBase {\n\n    public static create() : GridStateAppear {\n        return new GridStateAppear();\n    }\n    constructor() {\n        super(GridState.Appear);\n    }\n\n    enter(grid:GridBase):void {\n        this.appear(grid);\n    }\n\n    update(grid:GridBase, delta:number):void {\n\n        if (grid.isObstructsEmpty() && grid.isCommandListEmpty()){\n            let gridSize = grid.getGridSize();\n            let checkMatchPos:cc.Vec2[] = [];\n            for (let row = 0; row < gridSize.height; row++) {\n                for (let column = 0; column < gridSize.width; column++) {\n                    checkMatchPos.push(cc.v2(column, row));\n                }\n            }\n            grid.setCurrentState(GridStateDrop.create(checkMatchPos));\n        }\n    }\n}\n","/**\n * 自动激活炸弹\n */\n\nimport { PowerID } from \"../../../defines/PowerID\";\nimport GridBase from \"../../GridBase\";\nimport GridStateBase, { GridState } from \"../GridStateBase\";\nimport GridStateCollection from \"./GridStateCollection\";\nimport GridStateMatch from \"./GridStateMatch\";\n\n\nexport default class GridStateAutoActivateBomb extends GridStateBase {\n    public static create() : GridStateAutoActivateBomb {\n        return new GridStateAutoActivateBomb();\n    }\n    constructor() {\n        super(GridState.AutoActivatedBomb);\n    }\n\n    public enter(grid:GridBase) {\n        let activeIndex = grid.getPowerAmount(PowerID.ActivateBomb);\n        \n        if (activeIndex > 0) {\n            grid.setCurrentState(GridStateMatch.create());\n        }else{\n            grid.setCurrentState(GridStateCollection.create());\n        }\n    }\n}\n","import { Pair } from \"../../../../base/Pair\";\nimport GameMath from \"../../../../extend/utils/GameMath\";\nimport GridCommand from \"../../commond/GridCommand\";\nimport { EntityColor, EntityID, EntityType } from \"../../defines/EntityID\";\nimport EntityBase from \"../../entity/EntityBase\";\nimport FenceBase from \"../../entity/fence/FenceBase\";\nimport FencePos from \"../../entity/fence/FencePos\";\nimport ItemBombBase, { ItemBombType } from \"../../entity/item/color/bomb/ItemBombBase\";\nimport ItemBase, { ItemType } from \"../../entity/item/ItemBase\";\nimport EntityEventBase from \"../../event/EntityEventBase\";\nimport StateBase from \"../../fsm/StateBase\";\nimport AvailableSwapInfo, { AvailableSwapBaseValue } from \"../availableSwapInfo/AvailableSwapInfo\";\nimport GridBase from \"../GridBase\";\n\nexport enum GridState{\n    None = -1,\n    Null = 0,\n    Global,\n    Stalemate,\n    NoMoreStep,\n    Congratulation,\n    Create,\n    Appear,\n    Disappear,\n    DropItem,\n    DropItemTest,\n    SwapNeighbour,\n    ForceClean,\n    ForceSwap,\n    CrossBomb,\n    MatchItem,\n    Shuffle,\n    AutoActivatedBomb,\n    LaunchGears,\n    LaunchResidentGear,\n    GenerateRecordSupply,\n    ChangeColor,\n    Collection,            \n    Conveyer,\n    MagicCrystal,          \n    Complete,\n    CleanGridForReplay,\n    Prepare,\n    CompleteBanner,\n    Honey,\n    BousTime,\n    ComobWord,\n    Fail,\n    FailSummary,\n};\n\nexport default class GridStateBase implements  StateBase{\n\n    private static checkArrangeInfo:Object = {\n        '{1, 0}' : [\n            [cc.v2(2, 0),   cc.v2(3, 0)],\n            [cc.v2(1, 1),   cc.v2(1, 2)],\n            [cc.v2(1, -1),  cc.v2(1, -2)],\n            [cc.v2(1, 1),   cc.v2(2, 1),    cc.v2(2, 0)],\n            [cc.v2(1, -1),  cc.v2(2, -1),   cc.v2(2, 0)],\n        ],\n\n        '{-1, 0}' : [\n            [cc.v2(-2, 0),   cc.v2(-3, 0)],\n            [cc.v2(-1, 1),   cc.v2(-1, 2)],\n            [cc.v2(-1, -1),  cc.v2(-1, -2)],\n            [cc.v2(-1, 1),   cc.v2(-2, 1),  cc.v2(-2, 0)],\n            [cc.v2(-1, -1),  cc.v2(-2, -1), cc.v2(-2, 0)],\n        ],\n\n        '{0, 1}' : [\n            [cc.v2(0, 2),   cc.v2(0, 3)],\n            [cc.v2(-1, 1),  cc.v2(-2, 1)],\n            [cc.v2(1, 1),   cc.v2(2, 1)],\n            [cc.v2(-1, 1),  cc.v2(-1, 2),   cc.v2(0, 2)],\n            [cc.v2(1, 1),   cc.v2(1, 2),    cc.v2(0, 2)],\n        ],\n\n        '{0, -1}' : [\n            [cc.v2(0, -2),   cc.v2(0, -3)],\n            [cc.v2(-1, -1),  cc.v2(-2, -1)],\n            [cc.v2(1, -1),   cc.v2(2, -1)],\n            [cc.v2(-1, -1),  cc.v2(-1, -2), cc.v2(0, -2)],\n            [cc.v2(1, -1),   cc.v2(1, -2),  cc.v2(0, -2)],\n        ],\n    }\n\n    private _state:GridState = GridState.None;\n    constructor(state:GridState) {\n        this._state = state;\n    }\n\n    enter(entity:GridBase):void {\n        \n    }\n    update(entity:GridBase, delta:number):void {\n        \n    }\n    exit(entity:GridBase):void {\n        \n    }\n    public onTapBegan(grid:GridBase, logicalPos:cc.Vec2) : void {\n\n    }\n    public onTapMoved(grid:GridBase, logicalPos:cc.Vec2) : void {\n\n    }\n    public onTapEnded(grid:GridBase, logicalPos:cc.Vec2) : void {\n\n    }\n    public onEvent(grid:GridBase, event:EntityEventBase) : void {\n\n    }\n    public onRespone(grid:GridBase, event:Object) : void {\n\n    }\n    public canChangeState() : boolean {\n        return false;\n    }\n    public canPause() : boolean {\n        return false;\n    }\n    protected canSwapItem(grid:GridBase, logicalPosA:cc.Vec2, logicalPosB:cc.Vec2) : boolean {\n        \n        let offset = logicalPosB.sub(logicalPosA);\n        if (offset.magSqr() != 1) {\n            return false;\n        }\n        let fencePos = FencePos.create(logicalPosA, logicalPosB);\n        let fence = grid.getFenceAtFencePos(fencePos);\n        if (fence) {\n            return false;\n        }\n        let itemA = grid.getItemAtLogicalPos(logicalPosA);\n        let itemB = grid.getItemAtLogicalPos(logicalPosB);\n        if (itemA && itemB && itemA.canSwap() && itemB.canSwap()) {\n            return true;\n        }\n        return false;\n    }\n    \n    protected getAvailableSwapInfo(grid:GridBase, logicalPosA:cc.Vec2, logicalPosB:cc.Vec2) : AvailableSwapInfo {\n\n        let result = AvailableSwapInfo.create();\n        if (this.canSwapItem(grid, logicalPosA, logicalPosB)) {\n            let itemA = grid.getItemAtLogicalPos(logicalPosA);\n            let itemB = grid.getItemAtLogicalPos(logicalPosB);\n            grid.swapItem(logicalPosA, logicalPosB);\n\n            if (itemA.getItemType() == ItemType.EffectBomb && \n                itemB.getItemType() == ItemType.EffectBomb) {\n                if (itemA.canExcuteCommand(GridCommand.NeighbourSwap(logicalPosA)) ||\n                    itemB.canExcuteCommand(GridCommand.NeighbourSwap(logicalPosB))) {\n                    result.swapPair = new Pair<cc.Vec2, cc.Vec2>(logicalPosA, logicalPosB);\n                    let value:number = AvailableSwapBaseValue.MatchBomb;\n                    let bombA = itemA as ItemBombBase;\n                    let bombB = itemB as ItemBombBase;\n                    value += (bombA.getBombType() + bombB.getBombType()) * 100000;\n                    result.value = value;\n                }\n            }else {\n                result.linkedPositions = itemA.getLinkedPositions();\n                if (result.linkedPositions.length > 0) {\n                    result.swapPair = new Pair<cc.Vec2, cc.Vec2>(logicalPosA, logicalPosB);\n                    let createBombType = GameMath.getCreateBombType(result.linkedPositions);\n                    if (createBombType != ItemBombType.None) {\n                        let value = AvailableSwapBaseValue.MergerBomb;\n                        value += createBombType * 100000;\n                        value += result.linkedPositions.length * 1000;\n                        value += (grid.getGridSize().width - logicalPosA.x) * \n                                 (grid.getGridSize().height - logicalPosA.y);\n                        result.value = value;\n                    }else{\n                        let value = AvailableSwapBaseValue.MatchColor;\n                        value += result.linkedPositions.length * 1000;\n                        value += (grid.getGridSize().width - logicalPosA.x) * \n                                 (grid.getGridSize().height - logicalPosA.y);\n                        result.value = value;\n                    }\n                    \n                    for (let pos of result.linkedPositions) {\n                        let item = grid.getItemAtLogicalPos(pos);\n                        if (item.getItemType() == ItemType.EffectBomb) {\n                            result.value += 10000;\n                        }\n                    }\n\n                }else{\n                    if (itemA.getEntityID() == EntityID.ItemBombRainbow && itemB.getEntityColor() != EntityColor.None || \n                        itemB.getEntityID() == EntityID.ItemBombRainbow && itemA.getEntityColor() != EntityColor.None) {\n                        result.swapPair = new Pair<cc.Vec2, cc.Vec2>(logicalPosA, logicalPosB);\n                        result.value = Math.max(result.value - 100000, 1);\n                    }else{\n                        result.value = 0\n                    }\n                }\n            }\n            grid.swapItem(logicalPosA, logicalPosB);\n            if (result.value > 0) {\n                return result;\n            }\n        }\n        return null;\n    }\n    protected hasAvailableSwap(grid:GridBase) {\n\n        let itemMap = grid.getItemsMap();\n        let offsets:cc.Vec2[] = [cc.v2(1, 0), cc.v2(-1, 0), cc.v2(0, 1), cc.v2(0, -1),]\n        let positions:cc.Vec2[] = [];\n        \n        for (let key in itemMap) {\n            let item = itemMap[key] as ItemBase;\n            positions.push(item.getLogicalPos());\n        }\n\n        for (let pos of positions) {\n            for (let offset of offsets) {\n                let checkPos = pos.add(offset);\n                let result = this.getAvailableSwapInfo(grid, pos, checkPos);\n                if (result) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    public shuffleGrid(grid:GridBase, \n                       shufflePositions:cc.Vec2[], \n                       noMatch:boolean = true, \n                       hasSwap:boolean = true, \n                       isCreate:boolean = false) : Pair<ItemBase, Pair<cc.Vec2, cc.Vec2>>[]{\n        let result : Pair<ItemBase, Pair<cc.Vec2, cc.Vec2>>[] = [];\n        let itemsMap = grid.getItemsMap();\n\n        let sources:Object[] = [];// [{'item':item,'pos':cc.v2(0,0)}];\n        let sourceKeys:cc.Vec2[] = [];\n        let targetKeys:cc.Vec2[] = [];\n        for (let key in itemsMap) {\n            let item = itemsMap[key];\n            let pos = item.getLogicalPos();\n\n            let canShuffle = false;\n            if (GameMath.indexOf(shufflePositions, pos) != -1){\n                if (isCreate) {\n                    if (item.canShuffleWhenCreate()) {\n                        canShuffle = true;\n                    }\n                }else{\n                    if (item.canShuffle()) {\n                        canShuffle = true;\n                    }\n                }\n            }\n\n            if (canShuffle) {\n                sources.push({'item':item, 'pos':pos});\n                sourceKeys.push(pos);\n                targetKeys.push(pos);\n            }\n        }\n\n        let loopCount = 0;\n        do {\n            let noSolution = false;\n            GameMath.shuffleArray(targetKeys);\n            let count = sourceKeys.length;\n\n            for (let i = 0; i < count; i++) {\n                let posA = sourceKeys[i];\n            \n                let j = i;\n                for (; j < count; j++) {\n                    let posB = targetKeys[j];\n                    if (!posB.equals(posA)) {\n                        grid.swapItem(posA, posB);\n                        let itemA = grid.getItemAtLogicalPos(posA);\n                        let itemB = grid.getItemAtLogicalPos(posB);\n                        if (itemA.getLinkedPositions().length == 0 && itemB.getLinkedPositions().length == 0) {\n                            let temp = targetKeys[i];\n                            targetKeys[i] = targetKeys[j];\n                            targetKeys[j] = temp;\n                            break;\n                        }else{\n                            grid.swapItem(posA, posB);\n                        }\n                    }\n                }\n\n                if (j >= count) {\n                    noSolution = true;\n                    break;\n                }\n            }\n\n            if (noSolution == false) {\n                if (hasSwap) {\n                    if (this.hasAvailableSwap(grid)) {\n                        break\n                    }\n                }else{\n                    break;\n                }\n            }\n\n            loopCount++;\n            if (loopCount >= 50) {\n                break;\n            }\n\n        }while (1)\n        \n        if (loopCount < 50) {\n            let itemsMap = grid.getItemsMap();\n            for (let key in itemsMap) {\n                let item = itemsMap[key];\n                let pos = item.getLogicalPos();\n\n                if (GameMath.indexOf(shufflePositions, pos) != -1) {\n                    for (let object of sources) {\n                        if (object['item'] === item) {\n                            let swapPos = new Pair<cc.Vec2, cc.Vec2>(object['pos'], item.getLogicalPos());\n                            let pair = new Pair<ItemBase, Pair<cc.Vec2, cc.Vec2>>(item, swapPos);\n                            result.push(pair);\n                        }\n                    }\n                }\n            }\n        }\n        return result;\n    }\n    protected disappear(grid:GridBase) : void {\n\n        grid.disappearUI();\n        let duration = 1.0;\n        let types:EntityType[] = [\n            EntityType.Frame,\n            EntityType.Cell,\n            EntityType.Floor,\n            EntityType.Rug,\n            EntityType.Popsicle,\n            EntityType.Item,\n            EntityType.Parasite,\n            EntityType.Marker,\n        ];\n\n        let biggerThan1X1Entities:EntityBase[] = [];\n        \n        let gridSize = grid.getGridSize();\n        let cellSize = grid.getCellSize();\n\n        let origin = cc.v2(grid.node.getContentSize().width * 0.5, grid.node.getContentSize().height * 0.5);\n        let interval = duration / (gridSize.width * 0.5 + gridSize.height * 0.5 + 5);\n\n        for (let row = -1; row < gridSize.height + 1; row++) {\n            for (let column = -1; column < gridSize.width + 1; column++) {\n                let checkPos = cc.v2(column, row);\n                for (let type of types) {\n                    let entity = grid.getEntity(type, checkPos);\n                    if (entity && GameMath.indexOf(biggerThan1X1Entities, entity) == -1) {\n                        let offset = entity.node.getPosition().sub(origin);\n                        entity.removeFromGridAndAddToEffect();\n                        let actions:cc.FiniteTimeAction[] = [];\n                        let delayDuration = offset.mag() / cellSize.width * interval;\n                        if (delayDuration > 0) {\n                            actions.push(cc.delayTime(delayDuration));\n                        }\n                        actions.push(cc.fadeOut(interval * 3).easing(cc.easeIn(2)));\n                        actions.push(cc.callFunc(()=>{\n                            grid.removeObstructs(entity);\n                            entity.node.destroy();\n                        }))\n                        grid.addObstructs(entity);\n                        entity.runAction(cc.sequence(actions));\n\n                        if (entity.getLogicalSize().width * entity.getLogicalSize().height > 1) {\n                            GameMath.insertAsSet(biggerThan1X1Entities, entity);\n                        }\n                    }\n                }\n            }\n        }\n        \n\n        let fences:FenceBase[] = [];\n        let fencesMap = grid.getFencesMap();\n\n        for (let key in fencesMap) {\n            let fence = fencesMap[key];\n            fences.push(fence);\n        }\n        \n        for (let fence of fences) {\n            let offset = fence.node.getPosition().sub(origin);\n            fence.removeFromGridAndAddToEffect();\n\n            let actions:cc.FiniteTimeAction[] = [];\n            let delayDuration = offset.mag() / cellSize.width * interval;\n            if (delayDuration > 0) {\n                actions.push(cc.delayTime(delayDuration));\n            }\n            actions.push(cc.fadeOut(interval * 3).easing(cc.easeIn(2)));\n            actions.push(cc.callFunc(()=>{\n                grid.removeObstructs(fence);\n                fence.node.destroy();\n            }))\n            grid.addObstructs(fence);\n            fence.runAction(cc.sequence(actions));\n        }\n    }\n\n    protected appear(grid:GridBase) : void {\n        grid.appearUI();\n        let duration = 1.0;\n        let types:EntityType[] =[\n            EntityType.Frame,\n            EntityType.Cell,\n            EntityType.Floor,\n            EntityType.Rug,\n            EntityType.Popsicle,\n            EntityType.Item,\n            EntityType.Parasite,\n            EntityType.Marker,\n        ];\n   \n        let gridSize = grid.getGridSize();\n        let cellSize = grid.getCellSize();\n        \n        let conners:cc.Vec2[] = [\n            cc.v2(-1, -1),\n            cc.v2(-1, gridSize.height + 1),\n            cc.v2(gridSize.width + 1, -1),\n            cc.v2(gridSize.width + 1, gridSize.height + 1),\n        ];\n  \n        let biggerThan1X1Entities:EntityBase[] = [];\n        \n        let interval = duration / (gridSize.width * 0.5 + gridSize.height * 0.5 + 5);\n\n        for (let row = -1; row < gridSize.height + 1; row++) {\n            for (let column = -1; column < gridSize.width + 1; column++) {\n                let checkPos = cc.v2(column, row);\n                let minDistanceConner = conners[0];\n\n                \n                for (let conner of conners) {\n                    if (GameMath.getDistanceSQ(checkPos, conner) < GameMath.getDistanceSQ(checkPos, minDistanceConner)) {\n                        minDistanceConner = conner;\n                    }\n                }\n\n                for (let type of types) {\n                    let entity = grid.getEntity(type, checkPos);\n                    if (entity && GameMath.indexOf(biggerThan1X1Entities, entity) == -1 && entity.getVisible()) {\n                        \n                        let offset = entity.node.getPosition().sub(grid.getPixelPosFromLogicalPos(minDistanceConner));\n                        grid.addObstructs(entity);\n                        let actions:cc.FiniteTimeAction[] = [];\n                        let delayDuration = offset.mag() / cellSize.width * interval;\n                        if (delayDuration > 0) {\n                            actions.push(cc.delayTime(delayDuration));\n                        }\n                        entity.node.opacity = 0;\n                        actions.push(cc.fadeIn(interval * 3).easing(cc.easeIn(2)));\n                        actions.push(cc.callFunc(()=>{\n                            grid.removeObstructs(entity);\n                            entity.node.opacity = 255;\n                        }))\n\n                        entity.runAction(cc.sequence(actions));\n\n                        if (entity.getLogicalSize().width * entity.getLogicalSize().height > 1) {\n                            GameMath.insertAsSet(biggerThan1X1Entities, entity);\n                        }\n                    }\n                }\n            }\n        }\n        \n        let fencesMap = grid.getFencesMap();\n        \n        \n        for (let key in fencesMap) {\n            \n            let fence = fencesMap[key] as FenceBase;\n            if (fence.getVisible()) {\n                let minDistanceConner = conners[0];\n                let fenceRoot = fence.getFencePos().posA;\n                for (let conner of conners) {\n                    if (GameMath.getDistanceSQ(fenceRoot, conner) < GameMath.getDistanceSQ(fenceRoot, minDistanceConner)) {\n                        minDistanceConner = conner;\n                    }\n                }\n    \n                let offset = fence.node.getPosition().sub(grid.getPixelPosFromLogicalPos(minDistanceConner))\n                grid.addObstructs(fence);\n    \n                let actions:cc.FiniteTimeAction[] = [];\n                let delayDuration = offset.mag() / cellSize.width * interval;\n                if (delayDuration > 0) {\n                    actions.push(cc.delayTime(delayDuration));\n                }\n                fence.node.opacity = 0;\n                actions.push(cc.fadeIn(interval * 3).easing(cc.easeIn(2)));\n                actions.push(cc.callFunc(()=>{\n                    grid.removeObstructs(fence);\n                    fence.node.opacity = 255;\n                }));\n                fence.runAction(cc.sequence(actions)); \n            }\n        }\n    }\n}\n","import GridStateBase, { GridState } from \"../GridStateBase\";\nimport GridBase from \"../../GridBase\";\nimport ItemBase from \"../../../entity/item/ItemBase\";\nimport { PowerID } from \"../../../defines/PowerID\";\nimport GridCommand from \"../../../commond/GridCommand\";\nimport GridStateDrop from \"./GridStateDrop\";\nimport ItemStateReplace from \"../../../entity/item/state/ItemStateReplace\";\nimport { ItemBombType } from \"../../../entity/item/color/bomb/ItemBombBase\";\nimport { EntityColor } from \"../../../defines/EntityID\";\nimport ItemFactory from \"../../../entity/item/ItemFactory\";\nimport GridStateComplete from \"./GridStateComplete\";\nimport GameMath from \"../../../../../extend/utils/GameMath\";\nimport IGame from \"../../../../../base/IGame\";\nimport IdentifierManager from \"../../../defines/IdentifierManager\";\nimport { GameCurrencyType } from \"../../../../../define/GameCurrencyType\";\n\n\nexport default class GridStateBousTime extends GridStateBase {\n\n    private _curGrid:GridBase = null;\n    private _boomItems:ItemBase[] = [];\n    //发送爆炸\n    private _isSendBoomMsg:boolean = false;\n    private _delayTime:number = 0.0;\n\n    public static create() : GridStateBousTime{\n        return new GridStateBousTime();\n    }\n    constructor() {\n        super(GridState.BousTime);\n    }\n\n    public enter(grid:GridBase) {\n        this._curGrid = grid;\n\n        if (grid.canGetBonusFromLeftStep()) {\n            //是否有炸弹--no-》是否有步数--no-》结束\n            this.initAllBoomItem();\n            if(this._boomItems.length > 0){\n                //爆炸\n                this.sendBoomMsg();\n            }else if(grid.getPowerAmount(PowerID.AvailableSwap) > 0){\n                //步数\n                this.stepNumberToBoom();\n            }else{\n                //完成跳入胜利界面\n                this.onBousTimeDone();\n            }\n        }else{\n            this.onBousTimeDone();\n        }\n    }\n\n    public update(grid:GridBase, delta:number) {\n\n        if(this._isSendBoomMsg){\n            this._delayTime += delta;\n            if(this._delayTime >= 0.2){\n                this.initAllBoomItem();\n                if(this._boomItems.length > 0){\n                    let items:ItemBase = this._boomItems[0];\n                    let position = items.getLogicalPos();\n                    this._curGrid.dispatchCommand(position, GridCommand.ActivateClean(position), 0);\n                    this._delayTime = 0.0;\n                }else{\n                    if (grid.isObstructsEmpty() && grid.isCommandListEmpty()) {\n                        if(this._isSendBoomMsg && this._boomItems.length <= 0){\n                            this._isSendBoomMsg = false;\n                            this._curGrid.setCurrentState(GridStateDrop.create());\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    public exit(grid:GridBase) {\n        this._curGrid = null;\n        this._boomItems = null;\n    }\n    //获取所有炸弹\n    private initAllBoomItem():void{\n        this._boomItems = [];\n        let itemMap = this._curGrid.getItemsMap();\n        for(let key in itemMap){\n            let tmpItem:ItemBase = itemMap[key];\n            if(tmpItem.canCleanByActivate()){\n                this._boomItems.push(tmpItem);\n                break;\n            }\n        }\n    }\n\n    //发送炸弹清除炸弹\n    private sendBoomMsg():void{\n        this._isSendBoomMsg = true;\n    }\n\n    //步数随机炸弹\n    private stepNumberToBoom():void{\n\n        let grid = this._curGrid;\n\n        //剩余步数\n        let hasStep = grid.getPowerAmount(PowerID.AvailableSwap);\n\n        //获取可标记炸弹的元素,乱序\n        let setpItems:ItemBase[] = [];\n        let itemMap = grid.getItemsMap();\n        for(let key in itemMap){\n            let tmpItem:ItemBase = itemMap[key];\n            if(tmpItem && tmpItem.canUpgradeByRainbow()){\n                setpItems.push(tmpItem);\n            }\n        }\n\n        //打乱\n        GameMath.shuffleArray(setpItems);\n        \n        //TODO 标记\n        let stepLen = setpItems.length;\n        for(let i:number = 0; i < hasStep; i++){\n            if(i < stepLen){\n                let newItem:ItemBase = this.getOneRandBoom();\n                if(newItem){\n                    grid.gainBonusStepCount(1);\n                    newItem.node.setPosition(grid.node.convertToNodeSpace(grid.getWorldPosForStep()));\n                    grid.node.addChild(newItem.node, grid.getTopZOrder(newItem.getEntityType(), setpItems[i].getLogicalPos()));\n                    let gainScore = Math.min(grid.getBonusStepCount() * 1000 + 1000, 5000) ;\n                    let rewardSupply = {};\n                   \n                    newItem.setCurrentState(ItemStateReplace.create(setpItems[i].getLogicalPos(), i * 0.2,gainScore, rewardSupply));\n                    newItem.setVisible(false);\n                    newItem.runAction(cc.sequence(cc.delayTime(i * 0.2),\n                            cc.callFunc(()=>{\n                                IGame.playAudio(IdentifierManager.getInstance().getMatchAudioFilePath('bonus'));\n                                newItem.setVisible(true);\n                                grid.updateStepBarUIWithDelta(-1);\n                                grid.lossPower(PowerID.AvailableSwap, 1);\n                                if(i == Math.min(hasStep, stepLen) - 1){\n                                    this.initAllBoomItem();\n                                    this.sendBoomMsg();\n                                }\n                    })));\n                }\n            }else{\n                break;\n            }\n        }\n\n    }\n\n    //获取随机一个炸弹\n    private getOneRandBoom():ItemBase{\n\n        let m_bombType:ItemBombType[] = [];\n        m_bombType.push(ItemBombType.Row);\n        m_bombType.push(ItemBombType.Column);\n        GameMath.shuffleArray(m_bombType);\n        \n\n        let m_color:EntityColor[] = [];\n        m_color.push(EntityColor.Red);\n        m_color.push(EntityColor.Green);\n        m_color.push(EntityColor.Blue);\n        m_color.push(EntityColor.Yellow);\n        m_color.push(EntityColor.Orange);\n        m_color.push(EntityColor.Purple);\n        GameMath.shuffleArray(m_color);\n\n\n        let  newItem = ItemFactory.generateEffectBombItem(this._curGrid, m_bombType[0], m_color[0]);\n        if(newItem){\n            return newItem;\n        }\n\n        return null;\n    }\n\n    //结束\n    private onBousTimeDone():void{\n        this._curGrid.setCurrentState(GridStateComplete.create());\n    }\n}\n","import GridBase from \"../../GridBase\";\nimport GridStateBase, { GridState } from \"../GridStateBase\";\nimport GridStateHoney from \"./GridStateHoney\";\nimport GridStateMatch from \"./GridStateMatch\";\nimport { PowerID } from \"../../../defines/PowerID\";\nimport FloorBase, { FloorType } from \"../../../entity/floor/FloorBase\";\nimport ItemBase from \"../../../entity/item/ItemBase\";\nimport ItemStateChangeColor from \"../../../entity/item/state/ItemStateChangeColor\";\n\n\nexport default class GridStateChanger extends GridStateBase {\n\n    private _changeItems:cc.Vec2[] = [];\n\n    public static create() : GridStateChanger{\n        return new GridStateChanger();\n    }\n    constructor() {\n        super(GridState.ChangeColor);\n    }\n\n    public setChangerPowerPoints(grid:GridBase, count:number):void{\n        grid.setPowerAmount(PowerID.DyeingItem, count);\n    }\n\n    public getChangerPowerPoints(grid:GridBase):number{\n        return grid.getPowerAmount(PowerID.DyeingItem);\n    }\n\n    public checkGoToNextState(grid:GridBase):void{\n        if(this.getChangerPowerPoints(grid) > 0){\n            this.changeCurrentItemColor(grid);\n        }else{\n            grid.setCurrentState(GridStateMatch.create(this._changeItems));\n        }\n    }\n\n    public changeCurrentItemColor(grid:GridBase):void{\n        let floorMap = grid.getFloorsMap();\n        for(let key in floorMap){\n            let floorTemp:FloorBase = floorMap[key];\n            if(floorTemp.getFloorType() == FloorType.Changer){\n                let targetPos = floorTemp.getLogicalPos();\n                let itemTemp:ItemBase = grid.getItemAtLogicalPos(targetPos);\n                if(itemTemp && itemTemp.canChangeColor() && itemTemp.getEntityColor() != floorTemp.getEntityColor()){\n                    itemTemp.setCurrentState(ItemStateChangeColor.create(floorTemp.getEntityColor()));\n                    this._changeItems.push(itemTemp.getLogicalPos());\n                }\n            }\n        }\n        this.setChangerPowerPoints(grid, 0);\n    }\n\n    public enter(grid:GridBase) {\n        if(this.getChangerPowerPoints(grid) > 0){\n            this.changeCurrentItemColor(grid);\n        }else{\n            this.setChangerPowerPoints(grid, 0);\n            grid.setCurrentState(GridStateHoney.create());\n        }\n    }\n\n    public update(grid:GridBase, delta:number) {\n        if (grid.isObstructsEmpty() && grid.isCommandListEmpty()) {\n            this.checkGoToNextState(grid);\n        }\n    }\n\n    public exit(grid:GridBase) {\n        this._changeItems = null;\n    }\n}\n","/**\n * 控制小狗移动\n */\n\nimport GridCommand from \"../../../commond/GridCommand\";\nimport { EntityColor } from \"../../../defines/EntityID\";\nimport { PowerID } from \"../../../defines/PowerID\";\nimport FloorBase, { FloorType } from \"../../../entity/floor/FloorBase\";\nimport FloorRoad, { FloorRoadDirection } from \"../../../entity/floor/FloorRoad\";\nimport ItemBase, { ItemType } from \"../../../entity/item/ItemBase\";\nimport ItemBalloon from \"../../../entity/item/special/ItemBalloon\";\nimport ItemPuppy, { PuppyDirection } from \"../../../entity/item/special/ItemPuppy\";\nimport ItemStateSwap from \"../../../entity/item/state/ItemStateSwap\";\nimport GridBase from \"../../GridBase\";\nimport GridStateBase, { GridState } from \"../GridStateBase\";\nimport GridStateDrop from \"./GridStateDrop\";\nimport { GridStateMagicCrystal } from \"./GridStateMagicCrystal\";\nimport IGame from \"../../../../../base/IGame\";\nimport IdentifierManager from \"../../../defines/IdentifierManager\";\nimport GridCommandPair from \"../../../commond/GridCommandPair\";\n\n\nexport default class GridStateCollection extends GridStateBase {\n\n    private _walkedItemPos:cc.Vec2[] = [];\n\n    //小狗item\n    // private _curDogItem:ItemBase = null;\n\n    public static create() : GridStateCollection {\n        return new GridStateCollection();\n    }\n    constructor() {\n        super(GridState.Collection);\n    }\n\n    public static setCurDogPawCount(grid:GridBase, count:number):void{\n        grid.setPowerAmount(PowerID.PuppyVitality, count);\n    }\n\n    public static getCurDogPawCount(grid:GridBase):number{\n        return grid.getPowerAmount(PowerID.PuppyVitality);\n    }\n\n    public enter(grid:GridBase) {\n\n        //狗爪印\n        if(GridStateCollection.getCurDogPawCount(grid) > 0){\n            //走路径\n            this.moveToNextItem(grid);\n        }else{\n            GridStateCollection.setCurDogPawCount(grid, 0);\n            //没有步数进入魔法水晶\n            grid.setCurrentState(GridStateMagicCrystal.create());\n        }\n    }\n\n    public update(grid:GridBase, delta:number) {\n        if (grid.isObstructsEmpty() && grid.isCommandListEmpty()) {\n            if(GridStateCollection.getCurDogPawCount(grid) > 0){\n                this.moveToNextItem(grid);\n            }else{\n                //没有步数进入下个状态\n                this.CollectionDone(grid);\n            }\n        }\n    }\n\n    public exit(grid:GridBase) {\n        this._walkedItemPos = null;\n    }\n\n    //交换位置\n    public moveToItem(grid:GridBase, logicalPosA:cc.Vec2, logicalPosB:cc.Vec2):void{\n        GridStateCollection.setCurDogPawCount(grid, Math.max(GridStateCollection.getCurDogPawCount(grid) - 1, 0));\n\n        let itemA = grid.getItemAtLogicalPos(logicalPosA);\n        let itemB = grid.getItemAtLogicalPos(logicalPosB);\n\n        grid.swapItem(logicalPosA, logicalPosB);\n        \n        itemA.setCurrentState(ItemStateSwap.create(logicalPosA, logicalPosB, 0.5));\n\n        if(itemB){\n            itemB.setCurrentState(ItemStateSwap.create(logicalPosB, logicalPosA));\n        }\n\n        this._walkedItemPos.push(logicalPosA);\n        this._walkedItemPos.push(logicalPosB);\n\n        grid.gainPower(PowerID.PuppyMovedStep, 1);\n    }\n\n    //对不能交换的物品发动攻击\n    public attackPosition(grid:GridBase, pos:cc.Vec2):void{\n        GridStateCollection.setCurDogPawCount(grid, Math.max(GridStateCollection.getCurDogPawCount(grid) - 1, 0));\n\n        //消除冰块后不匹配问题\n        this._walkedItemPos.push(pos);\n\n        //攻击动作\n        grid.dispatchCommand(pos, GridCommand.BombClean(pos, EntityColor.None, false), 0.3);\n\n        //播放狗动画\n        let dogItem:ItemBase = this.getCurDogItem(grid);\n        if(dogItem){\n            grid.addObstructs(dogItem);\n\n            let func = cc.callFunc(()=>{\n                //获取小狗所在道路\n                let curRoad:FloorBase = grid.getFloorAtLogicalPos(dogItem.getLogicalPos());\n                //TODO FloorType\n                if(curRoad || curRoad.getType() == FloorType.Road){\n                        let temRoad:FloorRoad = curRoad as FloorRoad;\n                        let direction = PuppyDirection.None;\n\n                        switch(temRoad.getOutDirection()){\n                            case FloorRoadDirection.Up:{\n                                direction = PuppyDirection.Back;\n                                break;\n                            }\n                            case FloorRoadDirection.Right:{\n                                direction = PuppyDirection.Right;\n                                break;\n                            }\n                            case FloorRoadDirection.Down:{\n                                direction = PuppyDirection.Front;\n                                break;\n                            }\n                            case FloorRoadDirection.Left:{\n                                direction = PuppyDirection.Left;\n                                break;\n                            }\n\n                            default:{\n                                break;\n                            }\n                        }\n\n                        let puppy = dogItem as ItemPuppy;\n                        puppy.attack(direction);\n                }\n\n            });\n            \n            let sequence = cc.sequence(func, cc.delayTime(0.5), cc.callFunc(()=>{\n                grid.removeObstructs(dogItem);\n            }));\n\n            dogItem.runAction(sequence);\n        }\n    }\n\n    //获取小狗item\n    protected getCurDogItem(grid:GridBase):ItemBase{\n        // if(this._curDogItem ){\n        //     return this._curDogItem;\n        // }\n\n        let itemMap = grid.getItemsMap();\n        for(const key in itemMap){\n            let tmpItem:ItemBase = itemMap[key];\n            if(tmpItem.getItemType() == ItemType.Puppy){\n                //this._curDogItem = tmpItem;\n                return tmpItem;\n            }\n        }\n\n        return null;\n    }\n\n    //移动下一步\n    protected moveToNextItem(grid:GridBase):void{\n        //获取当前小狗item\n        let dogItem = this.getCurDogItem(grid);\n        if(!dogItem){\n            //没有找到小狗\n            this.CollectionDone(grid);\n            return;\n        }\n\n        //查找下一块路\n        let nextRoad:FloorBase = this.findNextRoadFloorItem(grid);\n        if(nextRoad){\n            let nextItem = grid.getItemAtLogicalPos(nextRoad.getLogicalPos());\n            let nextParasite = grid.getParasiteAtLogicalPos(nextRoad.getLogicalPos());\n\n            if (nextParasite && nextItem) {\n                if (nextParasite.hostCanSwap() && nextItem.canSwap()) {\n                    this.moveToItem(grid, dogItem.getLogicalPos(), nextRoad.getLogicalPos());\n                }else{\n                    nextParasite.setImmuneDamage(false);\n                    if(nextParasite.canCleanByBomb(EntityColor.None)){\n                        //(判断能否交换，不能交换发特效清除)\n                        this.attackPosition(grid, nextRoad.getLogicalPos());\n                    }else{\n                        //此路不通\n                        this.CollectionDone(grid);\n                    }\n                }\n            }else if (nextParasite && !nextItem) {\n                if(!nextParasite.hostCanSwap()){\n                    nextParasite.setImmuneDamage(false);\n                    if(nextParasite.canCleanByBomb(EntityColor.None)){\n                        //(判断能否交换，不能交换发特效清除)\n                        this.attackPosition(grid, nextRoad.getLogicalPos());\n                    }else{\n                        //此路不通\n                        this.CollectionDone(grid);\n                    }\n                }else{\n                    //走路径\n                    this.moveToItem(grid, dogItem.getLogicalPos(), nextRoad.getLogicalPos());\n                }\n            }else if (!nextParasite && nextItem) {\n\n                if(nextItem.getItemType() == ItemType.DogHouse){\n                    //判断是否是狗屋\n                    //TODO 删除自己，播放进入狗屋动画\n                    grid.addObstructs(dogItem);\n                    let sequence = cc.sequence(cc.moveTo(1.0, nextRoad.node.getPosition()), cc.callFunc(()=>{\n                        GridStateCollection.setCurDogPawCount(grid, 0);\n    \n                        dogItem.node.setPosition(0, 0);\n                        //狗移除网格\n                        dogItem.removeFromGrid();\n                        let size = nextItem.node.getContentSize();\n                        dogItem.node.parent = nextItem.node;\n        \n    \n                        let puppy = dogItem as ItemPuppy;\n                        puppy.win();\n                        grid.removeObstructs(dogItem);\n                        grid.setCurrentState(GridStateDrop.create(this._walkedItemPos));\n                        grid.gainPower(PowerID.PuppyMovedStep, 1);\n                    }))\n    \n                    dogItem.node.zIndex = GridBase.ZORDER_EFFECT;\n                    dogItem.runAction(sequence);\n                    // cc.log('dog win action!!' + nextRoad.node.getPosition().x + ',' + nextRoad.node.getPosition().y);\n                    dogItem.onCollected();\n                }else if(nextItem.getItemType() == ItemType.Balloon){\n                    //判断是否是气球\n                    //播放热气球动画->删除目标点物品->与空物品交换\n                    let flyFloor:FloorBase = grid.getFloorAtLogicalPos((nextItem as ItemBalloon).getCurPostal());\n                    if(!flyFloor || flyFloor.getType() != FloorType.Road){\n                        //不是道路结束移动\n                        this.CollectionDone(grid);\n                    }\n    \n                    //能清除\n                    grid.addObstructs(dogItem);\n                    dogItem.node.zIndex = GridBase.ZORDER_EFFECT;\n    \n                    let sequence = cc.sequence(cc.moveTo(1.0, nextItem.node.getPosition()),\n                    cc.callFunc(()=>{\n                        let puppy = dogItem as ItemPuppy;\n                        puppy.fly();\n                        IGame.playAudio(IdentifierManager.getInstance().getMatchAudioFilePath('balloon'));\n                        //清除气球\n                        this.clearOneItem(grid, nextItem.getLogicalPos(), 1.0);\n                    }),\n                    cc.moveTo(1.6, flyFloor.node.getPosition()),\n                    cc.delayTime(0.2),\n                    cc.callFunc(()=>{\n                        this.clearOneItem(grid, flyFloor.getLogicalPos(), 0);\n                        GridStateCollection.setCurDogPawCount(grid, GridStateCollection.getCurDogPawCount(grid) - 1);\n                        //只交换数据\n                        grid.swapItem(dogItem.getLogicalPos(), flyFloor.getLogicalPos());\n                        grid.removeObstructs(dogItem);\n    \n                        let puppy = dogItem as ItemPuppy;\n                        puppy.stay();\n                        grid.gainPower(PowerID.PuppyMovedStep, 1);\n                    })\n                    );\n    \n                    dogItem.runAction(sequence);\n                }else{\n                    if(!nextItem.canSwap()){\n                        nextItem.setImmuneDamage(false);\n                        if(nextItem.canCleanByBomb(EntityColor.None)){\n                            //(判断能否交换，不能交换发特效清除)\n                            this.attackPosition(grid, nextRoad.getLogicalPos());\n                        }else{\n                            //此路不通\n                            this.CollectionDone(grid);\n                        }\n                    }else{\n                        //走路径\n                        this.moveToItem(grid, dogItem.getLogicalPos(), nextRoad.getLogicalPos());\n                    }\n                }\n            }else{\n                this.moveToItem(grid, dogItem.getLogicalPos(), nextRoad.getLogicalPos());\n            }\n        }\n    }\n\n    //找到下一步的位置\n    protected findNextRoadFloorItem(grid:GridBase):FloorBase{\n        let dogItem:ItemBase = this.getCurDogItem(grid);\n        if(!dogItem){\n            return null;\n        }\n\n        //获取小狗所在道路\n        let curRoad:FloorBase = grid.getFloorAtLogicalPos(dogItem.getLogicalPos());\n        if(!curRoad || curRoad.getType() != FloorType.Road){\n            //所在的元素不是道路\n            return null;\n        }\n\n        //获取下一路径坐标\n        let nextRoadPos:cc.Vec2 = curRoad.getLogicalPos();\n        let temRoad:FloorRoad = curRoad as FloorRoad;\n\n        let dogAction:string = '';\n        let direction:PuppyDirection = PuppyDirection.None;\n        switch(temRoad.getOutDirection()){\n            case FloorRoadDirection.Up:{\n                nextRoadPos = nextRoadPos.add(cc.v2(0,1));\n                direction = PuppyDirection.Back;\n                break;\n            }\n            case FloorRoadDirection.Right:{\n                nextRoadPos = nextRoadPos.add(cc.v2(1, 0));\n                direction = PuppyDirection.Right;\n                break;\n            }\n            case FloorRoadDirection.Down:{\n                nextRoadPos = nextRoadPos.add(cc.v2(0, -1));\n                direction = PuppyDirection.Front;\n                break;\n            }\n            case FloorRoadDirection.Left:{\n                nextRoadPos = nextRoadPos.add(cc.v2(-1, 0));\n                direction = PuppyDirection.Left;\n                break;\n            }\n            default:{\n                nextRoadPos = nextRoadPos.add(cc.v2(-1, 0));\n                break;\n            }\n        }\n\n        let nextRoad:FloorBase = grid.getFloorAtLogicalPos(nextRoadPos);\n        if(nextRoad && nextRoad.getType() == FloorType.Road){\n            let puppy:ItemPuppy = dogItem as ItemPuppy;\n            puppy.move(direction);\n            return nextRoad;\n        }\n\n        return null;\n\n    }\n\n    //结束\n    protected CollectionDone(grid:GridBase):void{\n        GridStateCollection.setCurDogPawCount(grid, 0);\n\n        let puppy:ItemPuppy = this.getCurDogItem(grid) as ItemPuppy;\n        if(puppy){\n            puppy.stay();\n        }\n\n        grid.setCurrentState(GridStateDrop.create(this._walkedItemPos));\n    }\n\n    protected clearOneItem(grid:GridBase, pos:cc.Vec2, delayTime:number):boolean{\n        this._walkedItemPos.push(pos);\n        let commandPair = GridCommandPair.create(pos, GridCommand.TerminateClean(pos, EntityColor.None, false), 0 , 0);\n        grid.excuteCommandPair(commandPair);\n        return true;\n    }\n}\n","/**\n * 检测comber状态\n * 消除达到一定连击数会显示combo特效\n */\n\nimport GridStateBase, { GridState } from \"../GridStateBase\";\nimport GridBase from \"../../GridBase\";\nimport GridStateSwapNeighbour from \"./GridStateSwapNeighbour\";\nimport { PowerID } from \"../../../defines/PowerID\";\nimport FlyerComboWord from \"../../../entity/flyer/FlyerComboWord\";\n\n\nexport default class GridStateComboWord extends GridStateBase {\n\n    public static create() : GridStateComboWord{\n        return new GridStateComboWord();\n    }\n    constructor() {\n        super(GridState.ComobWord);\n    }\n\n    public enter(grid:GridBase) {\n\n        if (!grid.hasShowCompleteBanner()) {\n            let comboCount = grid.getPowerAmount(PowerID.MatchCombo);\n            if (comboCount >= 3) {\n                let needObstruct = false;\n                if (grid.isComplete()) {\n                    needObstruct = true;\n                }else {\n                    if (grid.isFailed()) {\n                        needObstruct = true;\n                    }\n                }\n                let flyer = FlyerComboWord.create(grid, comboCount, needObstruct);\n                grid.setFlyerAtLogicalPos(flyer, cc.Vec2.ZERO);\n            }\n        }\n        \n        this.gainComboScore(grid);\n        \n        if (grid.isObstructsEmpty() && grid.isCommandListEmpty()) {\n            grid.setCurrentState(GridStateSwapNeighbour.create());\n        }\n    }\n\n    private gainComboScore(grid:GridBase){\n        let comboCount = grid.getPowerAmount(PowerID.MatchCombo);\n        let scoreMap = {\n            '1' : 500,\n            '2' : 500,\n            '3' : 500,\n            '4' : 750,\n            '5' : 750,\n            '6' : 750,\n            '7' : 1000,\n            '8' : 1000,\n            '9' : 1000,\n            '10' : 1500\n        }\n        let score = 0;\n        for (let i = 0; i < comboCount - 1; i++) {\n            let delta = 0\n            if (i < 10) {\n                delta = scoreMap[(i + 1)]\n            }else{\n                delta = 1500\n            }\n            score += delta\n        }\n\n        if (score > 0) {\n            let size = grid.node.getContentSize();\n            let pixelPos = cc.v2(size.width * 0.5, size.height * 0.5 + 60);\n            grid.gainScoreWithPixelPos(score, pixelPos)\n        }\n    }\n\n    public update(grid:GridBase, delta:number) {\n        if (grid.isObstructsEmpty() && grid.isCommandListEmpty()) {\n            grid.setCurrentState(GridStateSwapNeighbour.create());\n        }\n    }\n}\n","import GridStateBase, { GridState } from \"../GridStateBase\";\nimport GridBase from \"../../GridBase\";\nimport GridStateBousTime from \"./GridStateBousTime\";\n\n\nexport default class GridStateCompleteBanner extends GridStateBase {\n\n    public static create() : GridStateCompleteBanner {\n        return new GridStateCompleteBanner();\n    }\n\n    constructor() {\n        super(GridState.CompleteBanner);\n    }\n\n    public enter(grid:GridBase) {\n\n        if (grid.hasShowCompleteBanner()) {\n            grid.setCurrentState(GridStateBousTime.create());\n        }else{\n            grid.resetDropConfig();\n            grid.showCompleteBanner();\n        }\n    }\n\n    public update(grid:GridBase, delta:number) {\n        if (grid.isObstructsEmpty() && grid.isCommandListEmpty()) {\n        \n            if (grid.hasShowCompleteBanner()) {\n                grid.setCurrentState(GridStateBousTime.create());\n            }\n        }\n    }\n}\n","import GridStateBase, { GridState } from \"../GridStateBase\";\nimport GridBase from \"../../GridBase\";\nimport GridStateCongratulation from \"./GridStateCongratulation\";\n\nexport default class GridStateComplete extends GridStateBase {\n\n    private _hadDisappearUI = false;\n    public static create() : GridStateComplete{\n        return new GridStateComplete();\n    }\n    constructor() {\n        super(GridState.Complete);\n    }\n\n    public enter(grid:GridBase) {\n    }\n\n    public update(grid:GridBase, delta:number) {\n        if (grid.isObstructsEmpty() && grid.isCommandListEmpty() && grid.isFlyerObstructsEmpty()) {\n            if (this._hadDisappearUI){\n                grid.setCurrentState(GridStateCongratulation.create());\n            }else{\n                this.disappear(grid);    \n                this._hadDisappearUI = true;\n            }\n        }\n    }\n}\n","import GridStateBase, { GridState } from \"../GridStateBase\";\nimport GridBase from \"../../GridBase\";\n\nexport default class GridStateCongratulation extends GridStateBase {\n\n    public static create() : GridStateCongratulation{\n        return new GridStateCongratulation();\n    }\n    constructor() {\n        super(GridState.Congratulation);\n    }\n\n    public enter(grid:GridBase) {\n        grid.congratulation();\n    }\n}\n","import GridBase from \"../../GridBase\";\nimport GridStateBase, { GridState } from \"../GridStateBase\";\nimport GridStateChanger from \"./GridStateChanger\";\nimport GridStateDrop from \"./GridStateDrop\";\nimport { PowerID } from \"../../../defines/PowerID\";\nimport CellBase from \"../../../entity/cell/CellBase\";\nimport GameMath from \"../../../../../extend/utils/GameMath\";\n\nexport default class GridStateConveyer extends GridStateBase {\n\n    public static create() : GridStateConveyer{\n        return new GridStateConveyer();\n    }\n    constructor() {\n        super(GridState.Conveyer);\n    }\n\n    private _conveyerPosions:cc.Vec2[] = [];\n\n    public enter(grid:GridBase) {\n        if (grid.getPowerAmount(PowerID.ConveyerMove)) {\n            let cells:CellBase[] = [];\n            let cellsMap = grid.getCellsMap();\n            for (const key in cellsMap) {\n                let cell = cellsMap[key];\n                cells.push(cell);\n            }\n\n            for (let cell of cells) {\n                let conveyPos = cell.onConvey();\n                if (!conveyPos.equals(GameMath.INVALID_LOGICAL_POSITION)) {\n                    GameMath.insertAsSet(this._conveyerPosions, conveyPos);\n                }\n            }\n\n            grid.lossPower(PowerID.ConveyerMove, 1);\n\n            if (this._conveyerPosions.length <= 0) {\n                grid.setCurrentState(GridStateChanger.create());\n            }\n        }else{\n            grid.setCurrentState(GridStateChanger.create());\n        }\n    }\n\n    public update(grid:GridBase, delta:number) {\n        if (grid.isObstructsEmpty() && grid.isCommandListEmpty()) {\n            grid.setCurrentState( GridStateDrop.create(this._conveyerPosions));\n        }\n    }\n    public exit(grid:GridBase) {\n        this._conveyerPosions = null;\n    }\n}\n","/**\n * 初始化消除面板\n */\n\nimport GameMath from \"../../../../../extend/utils/GameMath\";\nimport TMXJsonPhraser from \"../../../../../extend/utils/TMXJsonPhraser\";\nimport { EntityID, EntityDropStepType } from \"../../../defines/EntityID\";\nimport { KindID } from \"../../../defines/KindID\";\nimport TMXConfigInfoKeys from \"../../../defines/TMXConfigInfoKeys\";\nimport CellBase, { CellType } from \"../../../entity/cell/CellBase\";\nimport CellFactory from \"../../../entity/cell/CellFactory\";\nimport FenceFactory from \"../../../entity/fence/FenceFactory\";\nimport { FloorType } from \"../../../entity/floor/FloorBase\";\nimport FloorFactory from \"../../../entity/floor/FloorFactory\";\nimport FloorRoad from \"../../../entity/floor/FloorRoad\";\nimport FrameNormal from \"../../../entity/frame/FrameNormal\";\nimport ItemBase, { ItemType } from \"../../../entity/item/ItemBase\";\nimport ItemFactory from \"../../../entity/item/ItemFactory\";\nimport ItemBalloon from \"../../../entity/item/special/ItemBalloon\";\nimport MarkerNormal from \"../../../entity/marker/MarkerNormal\";\nimport ParasiteFactory from \"../../../entity/parasite/ParasiteFactory\";\nimport PopsicleFactory from \"../../../entity/popsicle/PopsicleFactory\";\nimport RugFactory from \"../../../entity/rug/RugFactory\";\nimport GridBase from \"../../GridBase\";\nimport { GridState } from \"../GridStateBase\";\nimport GridStateDrop from \"./GridStateDrop\";\n\nexport default class GridStateCreate extends GridStateDrop {\n\n    public static createState(viewSize:cc.Size, mapData:Object) : GridStateCreate {\n        return new GridStateCreate(viewSize, mapData);\n    }\n    constructor(viewSize:cc.Size, mapData:Object){\n        super([], GridState.Create);\n        this._viewSize = viewSize;\n        this._tmxPhraser = TMXJsonPhraser.create(mapData);\n        this._gridSize = this._tmxPhraser.getMapSize();\n        this._cellSize = cc.size(75, 75);\n    }\n    private _viewSize:cc.Size = cc.Size.ZERO;\n    private _tmxPhraser:TMXJsonPhraser = null;\n    private _gridSize:cc.Size = cc.size(9, 10);\n    private _cellSize:cc.Size = cc.size(75, 75);\n    enter(grid:GridBase):void {\n        grid.setGridSize(this._gridSize);\n        grid.setCellSize(this._cellSize);\n        let viewFixSize = cc.size(grid.getGridSize().width * grid.getCellSize().width, \n                                  grid.getGridSize().height * grid.getCellSize().height);\n        grid.node.setContentSize(viewFixSize);\n\n        let scale = GameMath.getScaleFromViewSize(this._viewSize, \n            cc.size(viewFixSize.width + grid.getCellSize().width * 0.5,\n                    viewFixSize.height + grid.getCellSize().height * 0.5),\n             0.5, 1);\n        grid.node.setScale(scale);\n\n        this.initCells(grid);\n        this.initPopsicle(grid);\n        this.initFloors(grid);\n        this.initRugs(grid);\n        this.initItems(grid);\n        this.initFences(grid);\n        this.initFrames(grid);\n\n        this.markFences(grid);\n        let shufflePositions = this.getShufflePositions();\n        if (this.someItemCanDrop(grid)) {\n            this.shuffleGrid(grid, shufflePositions, true, false, true);\n        }else{\n            this.shuffleGrid(grid, shufflePositions, true, true, true);\n        }\n\n        this.initParasites(grid);\n        this.initConveyer(grid);\n        this.initMarker(grid);\n        this.initPath(grid);\n    }\n    public update(grid:GridBase, delta:number) {\n    }\n    public exit(grid:GridBase) {\n        this._viewSize = null;\n        this._tmxPhraser = null;\n        this._gridSize = null;\n        this._cellSize = null;\n    }\n    private initCells(grid:GridBase) : void {\n        let cellTiles = this._tmxPhraser.getTileLayerWithName(TMXConfigInfoKeys.CELLS_LAYER_KEY);\n        if (!cellTiles || cellTiles.length <= 0) {\n            return;\n        }\n        let conveyersTiles = this._tmxPhraser.getTileLayerWithName(TMXConfigInfoKeys.CONVEYERS_LAYER_KEY);\n        let mapSize = this._tmxPhraser.getMapSize();\n        let tileSize = this._tmxPhraser.getTileSize();\n\n        for (let column = 0; column < mapSize.width; column++) {\n            let foundTopCell = false;\n            for (let row = 0; row < mapSize.height; row++) {\n                let cellGid = cellTiles[row * mapSize.width + column];\n                let conveyerGid = conveyersTiles[row * mapSize.width + column];\n                if (conveyerGid != 0) {\n                    cellGid = conveyerGid;\n                }\n\n                let propertie = this._tmxPhraser.getPropertieFromGID(cellGid);\n                if (propertie) {\n                    let kindID = propertie['Kind'];\n                    let cell = CellFactory.generateCellWithKindID(grid, kindID);\n                    if (cell) {\n                        let cellConfigMap = this.getConfigMap(TMXConfigInfoKeys.CELLS_LAYER_KEY, cc.v2(column, row));\n                        let conveyerConfigMap = this.getConfigMap(TMXConfigInfoKeys.CONVEYERS_LAYER_KEY, cc.v2(column, row));\n\n                        if (!GameMath.isEmptyObject(conveyerConfigMap)) {\n                            for (let key in conveyerConfigMap) {\n                                cellConfigMap[key] = conveyerConfigMap[key];\n                            }\n                            cellConfigMap[TMXConfigInfoKeys.CFG_CONVEYER_POSTAL_KEY_TYPE] = true;\n                        }\n                        \n\n                        if (foundTopCell == false) {\n                            cellConfigMap[TMXConfigInfoKeys.CFG_DROP_KEY_IS_TOP] = true;\n                            foundTopCell = true;\n                        }\n\n                        grid.setCellAtLogicalPos(cell, cc.v2(column, mapSize.height - 1 - row));\n                        cell.dealWithConfigMap(cellConfigMap);\n                    }\n                }\n            }\n        }\n    \n        let markerInfos = this._tmxPhraser.getObjectLayerWithName(TMXConfigInfoKeys.MARKS_LAYER_KEY);\n        for (let info of markerInfos) {\n            let valueMap = this._tmxPhraser.getPropertieFromGID(info.gid);\n\n            if (!GameMath.isEmptyObject(valueMap)) {\n                let centerPixelPos = cc.v2(info.rect.center.x, mapSize.height * tileSize.height - info.rect.center.y);\n                let centerLogicalPos = cc.v2(Math.floor(centerPixelPos.x / tileSize.width), Math.floor(centerPixelPos.y / tileSize.height));\n\n                let kindID = valueMap['Kind'];\n                if (kindID) {\n                    switch (kindID) {\n                        case KindID.MarkWormholeEntrance:{\n                            let entranceConfigMap = this.getConfigMap(TMXConfigInfoKeys.MARKS_LAYER_KEY, \n                                                                      cc.v2(centerLogicalPos.x, mapSize.height - 1 - centerLogicalPos.y));\n                            entranceConfigMap[TMXConfigInfoKeys.CFG_WORMHOLE_KEY_TYPE] = TMXConfigInfoKeys.CFG_WORMHOLE_VALUE_ENTRANCE;\n                            let entrance = grid.getCellAtLogicalPos(centerLogicalPos);\n                            if (entrance) {\n                                entrance.dealWithConfigMap(entranceConfigMap);\n                            }\n\n                            let exitConfigMap:Object = {};\n                            exitConfigMap[TMXConfigInfoKeys.CFG_WORMHOLE_KEY_TYPE] = TMXConfigInfoKeys.CFG_WORMHOLE_VALUE_EXIT;\n                            exitConfigMap[TMXConfigInfoKeys.CFG_WORMHOLE_POSTAL_KEY_TYPE] = GameMath.getConfigStringFromVec2(centerLogicalPos);\n                            let postalPos = entranceConfigMap[TMXConfigInfoKeys.CFG_WORMHOLE_POSTAL_KEY_TYPE];\n\n                            let pos = GameMath.getVec2FromConfigString(postalPos);\n                            let exit = grid.getCellAtLogicalPos(pos);\n                            if (exit) {\n                                exit.dealWithConfigMap(exitConfigMap);\n                            }\n                        }\n                            break;\n                    \n                        default:\n                            break;\n                    }\n                }\n\n            }\n        }\n    }\n    private initPopsicle(grid:GridBase) : void {\n\n        let layerKey = TMXConfigInfoKeys.POPSICLES_LAYER_KEY;\n        let objectInfos = this._tmxPhraser.getObjectLayerWithName(layerKey);\n        if (!objectInfos || objectInfos.length <= 0) {\n            return;\n        }\n        let mapSize = this._tmxPhraser.getMapSize();\n        let tileSize = this._tmxPhraser.getTileSize();\n\n        for (let info of objectInfos) {\n            let width = Math.ceil(info.rect.size.width / tileSize.width);\n            let height = Math.ceil(info.rect.size.height / tileSize.height);\n\n            let x = Math.floor(info.rect.origin.x / tileSize.width);\n            let y = Math.floor((mapSize.height - 1) - info.rect.origin.y / tileSize.height - height + 1);\n            let typeString = info.properties[TMXConfigInfoKeys.CFG_POPSICLE_KEY_TYPE];\n\n            let kindID = KindID.PopsicleNormal;\n            if (typeString) {\n                if (typeString == TMXConfigInfoKeys.CFG_POPSICLE_VALUE_LINE) {\n                    kindID = KindID.PopsicleLine;\n                }else if(typeString == TMXConfigInfoKeys.CFG_POPSICLE_VALUE_BOOM) {\n                    kindID = KindID.PopsicleBoom;\n                }\n            }\n\n            let popsicle = PopsicleFactory.generatePopsicleWithKindID(grid, width, height, kindID);\n            if (popsicle) {\n                grid.setPopsicleAtLogicalPos(popsicle, cc.v2(x, y));\n            }\n        }\n    }\n    private initFloors(grid:GridBase) : void {\n        let layerKey = TMXConfigInfoKeys.FLOORS_LAYER_KEY;\n        let tiles = this._tmxPhraser.getTileLayerWithName(layerKey);\n        if (!tiles || tiles.length <= 0) {\n            return;\n        }\n        let mapSize = this._tmxPhraser.getMapSize();\n        let needGrass = false;\n\n        for (let row = 0; row < mapSize.height; row++) {\n            for (let column = 0; column < mapSize.width; column++) {\n                let gid = tiles[row * mapSize.width + column];\n                let valueMap = this._tmxPhraser.getPropertieFromGID(gid);\n                if (!GameMath.isEmptyObject(valueMap)) {\n                    let kindID = valueMap['Kind'];\n                    if (kindID) {\n                        let floor = FloorFactory.generateFloorWithKindID(grid,kindID);    \n                        if (floor) {\n                            let configMap = this.getConfigMap(layerKey, cc.v2(column, row));\n                            grid.setFloorAtLogicalPos(floor, cc.v2(column, mapSize.height - 1 - row));\n                            floor.dealWithConfigMap(configMap);\n                            if (floor.getEntityID() == EntityID.FloorGrass) {\n                                needGrass = true;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        if (needGrass) {\n            let cellsMap = grid.getCellsMap();\n            for (let key in cellsMap) {\n                let cell = cellsMap[key] as CellBase;\n                cell.setNeedGrass(true);    \n            }\n        }\n    }\n    private initRugs(grid:GridBase) {\n\n        let layerKey = TMXConfigInfoKeys.JAM_LAYER_KEY;\n        let tiles = this._tmxPhraser.getTileLayerWithName(layerKey);\n        if (!tiles || tiles.length <= 0) {\n            return;\n        }\n        \n        let mapSize = this._tmxPhraser.getMapSize();\n\n        for (let row = 0; row < mapSize.height; row++) {\n            for (let column = 0; column < mapSize.width; column++) {\n                let gid = tiles[row * mapSize.width + column];\n                let valueMap = this._tmxPhraser.getPropertieFromGID(gid);\n                if (!GameMath.isEmptyObject(valueMap)) {\n                    let kindID = valueMap['Kind'];\n                    if (kindID) {\n                        let rug = RugFactory.generatePolishWithKindID(grid, kindID);\n                        if (rug) {\n                            grid.setRugAtLogicalPos(rug, cc.v2(column, mapSize.height - 1 - row));\n                            let configMap = this.getConfigMap(layerKey, cc.v2(column, row));\n                            rug.dealWithConfigMap(configMap);\n                        }    \n                    }\n                }\n            }\n        }\n    }\n    private initItems(grid:GridBase) : void {\n\n        let layerKey = TMXConfigInfoKeys.ITEMS_LAYER_KEY;\n        let tiles = this._tmxPhraser.getTileLayerWithName(layerKey);\n        if (!tiles || tiles.length <= 0) {\n            return;\n        }\n        let mapSize = this._tmxPhraser.getMapSize();\n\n        let totalRandomCount = 0; \n        for (let row = 0; row < mapSize.height; row++) {\n            for (let column = 0; column < mapSize.width; column++) {\n                let gid = tiles[row * mapSize.width + column];\n                let valueMap = this._tmxPhraser.getPropertieFromGID(gid);\n                if (!GameMath.isEmptyObject(valueMap)) {\n                    let cell = grid.getCellAtLogicalPos(cc.v2(column, mapSize.height - 1 - row));\n                    if (cell && cell.canHoldItem()) {\n                        let kindID = valueMap['Kind'];\n                        if (kindID && kindID != KindID.ItemNormalRandom) {\n                            let item = ItemFactory.generateItemWithKindID(grid, kindID);\n                            if (item) {\n                                grid.setItemAtLogicalPos(item, cc.v2(column, mapSize.height - 1 - row));\n                                let configMap = this.getConfigMap(layerKey, cc.v2(column, row));\n                                item.dealWithConfigMap(configMap);\n                            }\n                        }else{\n                            totalRandomCount += 1\n                        }\n                    }\n                }\n            }\n        }\n        \n        for (let row = 0; row < mapSize.height; row++) {\n            for (let column = 0; column < mapSize.width; column++) {\n                let gid = tiles[row * mapSize.width + column];\n                let valueMap = this._tmxPhraser.getPropertieFromGID(gid);\n                if(!GameMath.isEmptyObject(valueMap)) {\n                    let cell = grid.getCellAtLogicalPos(cc.v2(column, mapSize.height - 1 - row));\n                    if (cell && cell.canHoldItem()) {\n                        let kindID = valueMap['Kind'];\n                        if (kindID && kindID == KindID.ItemNormalRandom) {\n                            let item = ItemFactory.generateItemWithKindID(grid, kindID);\n                            if (item) {\n                                grid.setItemAtLogicalPos(item, cc.v2(column, mapSize.height - 1 - row));\n                                let configMap = this.getConfigMap(layerKey, cc.v2(column, row));\n                                item.dealWithConfigMap(configMap);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    private initFences(grid:GridBase) : void {\n        let fenceInfos = this._tmxPhraser.getObjectLayerWithName(TMXConfigInfoKeys.MARKS_LAYER_KEY);\n        if (!fenceInfos || fenceInfos.length <= 0) {\n            return;\n        }\n        let mapSize = this._tmxPhraser.getMapSize();\n        let tileSize = this._tmxPhraser.getTileSize();\n        \n        for (let info of fenceInfos) {\n            let valueMap = this._tmxPhraser.getPropertieFromGID(info.gid);\n            if (!GameMath.isEmptyObject(valueMap)) {\n                let centerPixelPos = cc.v2(info.rect.center.x, mapSize.height * tileSize.height - info.rect.center.y);\n                let centerLogicalPos = cc.v2(Math.floor(centerPixelPos.x / tileSize.width), Math.floor(centerPixelPos.y / tileSize.height));\n                let kindID = valueMap['Kind'];\n                let fence = FenceFactory.generateItemWithKindID(grid, centerLogicalPos, kindID);\n                if (fence) {\n                    grid.setFenceAtFencePos(fence, fence.getFencePos());\n                }\n            }\n        }\n    }\n    private initParasites(grid:GridBase) :void {\n        let layerKey = TMXConfigInfoKeys.PARASITES_LAYER_KEY;\n        let tiles = this._tmxPhraser.getTileLayerWithName(layerKey);\n        if (!tiles || tiles.length <= 0) {\n            return;\n        }\n        let mapSize = this._tmxPhraser.getMapSize();\n        \n        for (let row = 0; row < mapSize.height; row++) {\n            for (let column = 0; column < mapSize.width; column++) {\n                let gid = tiles[row * mapSize.width + column];\n                let valueMap = this._tmxPhraser.getPropertieFromGID(gid);\n                if (!GameMath.isEmptyObject(valueMap)) {\n                    let kindID = valueMap['Kind'];\n                    let parasite = ParasiteFactory.generateParasiteWithKindID(grid, kindID);\n                    if (parasite) {\n                        let configMap = this.getConfigMap(layerKey, cc.v2(column, row));\n                        parasite.dealWithConfigMap(configMap);\n                        grid.setParasiteAtLogicalPos(parasite, cc.v2(column, mapSize.height - 1 - row));\n                    }\n                }\n            }\n            \n        }\n    }\n    private initFrames(grid:GridBase) : void {\n\n        for (let row = -1; row < this._gridSize.height + 1; row++) {\n            for (let column = -1; column < this._gridSize.width + 1; column++) {\n                let checkPos = cc.v2(column, row);\n                \n                let needFrame = false;\n                let cell = grid.getCellAtLogicalPos(checkPos);\n                if (cell) {\n                    if (cell.getCellType() == CellType.MovablePlate) {\n                        needFrame = true;    \n                    }\n                }else{\n                    needFrame = true;\n                }\n                if (needFrame) {\n                    let frame = FrameNormal.create(grid);    \n                    if (frame) {\n                        grid.setFrameAtLogicalPos(frame,checkPos);\n                    }\n                }\n            }\n        }\n    }\n    private initConveyer(grid:GridBase) : void {\n        let cellsMap = grid.getCellsMap();\n        let cropPositions:cc.Vec2[] = [];\n        for (let key in cellsMap) {\n            let cell = cellsMap[key] as CellBase;\n            if (cell.getCellType() == CellType.Conveyer) {\n                cropPositions.push(cell.getLogicalPos());\n            }\n        }\n        grid.setConveyerLayerVisiblePos(cropPositions);\n    }\n    private initMarker(grid:GridBase) : void {\n        let fenceInfos = this._tmxPhraser.getObjectLayerWithName(TMXConfigInfoKeys.MARKS_LAYER_KEY);\n        if (!fenceInfos) {\n            return;\n        }\n        let mapSize = this._tmxPhraser.getMapSize();\n        let tileSize = this._tmxPhraser.getTileSize();\n\n        for (let info of fenceInfos) {\n            let valueMap = this._tmxPhraser.getPropertieFromGID(info.gid);\n            if (!GameMath.isEmptyObject(valueMap)) {\n                let centerPixelPos = cc.v2(info.rect.center.x, mapSize.height * tileSize.height - info.rect.center.y);\n                let centerLogicalPos = cc.v2(Math.floor(centerPixelPos.x / tileSize.width), Math.floor(centerPixelPos.y / tileSize.height));\n\n                let marker = grid.getMarkerAtLogicalPos(centerLogicalPos);\n                if (!marker) {\n                    marker = MarkerNormal.create(grid);\n                    grid.setMarkerAtLogicalPos(marker, centerLogicalPos);\n                }\n\n                let configMap = this.getConfigMap(TMXConfigInfoKeys.MARKS_LAYER_KEY, cc.v2(centerLogicalPos.x, mapSize.height - 1 - centerLogicalPos.y));\n                \n                let kindID = valueMap['Kind'];\n                if (kindID) {\n                    switch (kindID) {\n                        case KindID.MarkBoneCollector:{\n                            configMap[TMXConfigInfoKeys.CFG_MARK_BONE_COLLECTOR_KEY_TYPE] = \n                                TMXConfigInfoKeys.CFG_MARK_BONE_COLLECTOR_VALUE_DEFAULT;\n                        }\n                            break;\n                        case KindID.MarkWormholeEntrance:{\n                            configMap[TMXConfigInfoKeys.CFG_WORM_HOLE_ENTRANCE_KEY_TYPE] = \n                                TMXConfigInfoKeys.CFG_WORM_HOLE_ENTRANCE_VALUE_DEFAULT;\n                        }   \n                            break;\n                        case KindID.MarkWormholeExit:{\n                            configMap[TMXConfigInfoKeys.CFG_WORM_HOLE_EXIT_KEY_TYPE] = \n                                TMXConfigInfoKeys.CFG_WORM_HOLE_EXIT_VALUE_DEFAULT;\n                        }   \n                            break;\n                    \n                        default:\n                            break;\n                    }\n                }\n                marker.dealWithConfigMap(configMap);\n            }\n        }\n    }\n    private initPath(grid:GridBase) : void {\n\n        let startPositions:cc.Vec2[] = [];\n        let itemsMap = grid.getItemsMap();\n        for (let key in itemsMap) {\n            let item = itemsMap[key] as ItemBase;\n            if (item.getItemType() == ItemType.Puppy) {\n                startPositions.push(item.getLogicalPos());\n            }else if (item.getItemType() == ItemType.DogHouse) {\n                startPositions.push(item.getLogicalPos());\n            }else if (item.getItemType() == ItemType.Balloon) {\n                startPositions.push(item.getLogicalPos());\n                let ballon = item as ItemBalloon;\n                if (ballon) {\n                    let flyPos = ballon.getCurPostal();\n                    startPositions.push(flyPos);\n                }\n            }\n        }\n\n        for (let pos of startPositions) {\n            let floor = grid.getFloorAtLogicalPos(pos);\n            if (floor && floor.getFloorType() == FloorType.Road) {\n                let road = floor as FloorRoad;\n                if (road) {\n                    road.setIsStartPoint(true);\n                }\n            }\n        }\n    }\n    private getShufflePositions() : cc.Vec2[] {\n        let result:cc.Vec2[] = [];\n        let items = this._tmxPhraser.getTileLayerWithName(TMXConfigInfoKeys.ITEMS_LAYER_KEY);\n\n        for (let row = 0; row < this._gridSize.height; row++) {\n            for (let column = 0; column < this._gridSize.width; column++) {\n                let gid = items[row * this._gridSize.width + column];\n                let valueMap = this._tmxPhraser.getPropertieFromGID(gid);\n                if (!GameMath.isEmptyObject(valueMap)) {\n                    let kindID = valueMap['Kind'];\n                    if (kindID && ItemFactory.isShuffleKindID(kindID)) {\n                        result.push(cc.v2(column, this._gridSize.height - 1 - row));\n                    }    \n                }\n            }\n        }\n        return result;\n    }\n    private someItemCanDrop(grid:GridBase) : boolean {\n        \n        let itemsMap = grid.getItemsMap();\n        for (let key in itemsMap) {\n            let item = itemsMap[key];\n            let result = this.tryDropItem(grid, item);\n            if (result.type != EntityDropStepType.Stay) {\n                return true;\n            }\n            result = this.tryDiagonalItem(grid, item);\n            if (result.type != EntityDropStepType.Stay) {\n                return true;\n            }\n        }\n\n        let cellsMap = grid.getCellsMap();\n        for (let key in cellsMap) {\n            let cell = cellsMap[key];\n            let bornPos = cell.getLogicalPos();\n            if (grid.getItemAtLogicalPos(bornPos) == null) {\n                return true;\n            }\n        }\n        return false;\n    }\n    private getConfigMap(layerName:string, pos:cc.Vec2) : Object {\n\n        let objectInfos = this._tmxPhraser.getObjectInfos(layerName, pos);\n        let tileSize = this._tmxPhraser.getTileSize();\n        let mapSize = this._tmxPhraser.getMapSize();\n        \n        let configMap:Object = {};\n        \n        for (let info of objectInfos) {\n            for (const key in info.properties) {\n                configMap[key] = info.properties[key];\n            }\n\n            if (info.path.length > 0) {\n                let path:cc.Vec2[] = [];\n                let count = info.path.length;\n\n                for (let i = 0; i < count; i++) {\n                    let pos = info.path[i];\n                    pos.x = Math.floor(pos.x / tileSize.width);\n                    pos.y = (mapSize.height - 1) - Math.floor(pos.y / tileSize.height);\n                    path.push(pos);\n                }\n                configMap[TMXConfigInfoKeys.CFG_MOVABLE_PLATE_PATH_KEY_TYPE] = path;\n            }\n        }\n\n        if (layerName == TMXConfigInfoKeys.CELLS_LAYER_KEY) {\n            let objectInfos = this._tmxPhraser.getObjectInfos(TMXConfigInfoKeys.MARKS_LAYER_KEY, pos);\n            for (let info of objectInfos) {\n                let valueMap = this._tmxPhraser.getPropertieFromGID(info.gid);\n                let kindID = valueMap['Kind'];\n                if (kindID && kindID == KindID.MarkBoneCollector) {\n                    configMap[TMXConfigInfoKeys.CFG_MARK_BONE_COLLECTOR_KEY_TYPE] = TMXConfigInfoKeys.CFG_MARK_BONE_COLLECTOR_VALUE_DEFAULT;\n                }\n            }\n        }\n        return configMap;\n    }\n    \n}\n","import GridStateBase, { GridState } from \"../GridStateBase\";\nimport GridBase, { GridMode } from \"../../GridBase\";\nimport { GameCurrencyType } from \"../../../../../define/GameCurrencyType\";\nimport GridCommand from \"../../../commond/GridCommand\";\nimport GridStateMatch from \"./GridStateMatch\";\nimport { EntityColor } from \"../../../defines/EntityID\";\nimport { Pair } from \"../../../../../base/Pair\";\nimport FlyerCannon from \"../../../entity/flyer/FlyerCannon\";\nimport IGame from \"../../../../../base/IGame\";\nimport IdentifierManager from \"../../../defines/IdentifierManager\";\nimport BehaviourID, { BehaviourEvent } from \"../../../../../extend/identify/behaviourIdentify/BehaviourDefines\";\n\nexport default class GridStateCrossBomb extends GridStateBase {\n    public static create() : GridStateCrossBomb {\n        return new GridStateCrossBomb();\n    }\n    constructor(){\n        super(GridState.CrossBomb);\n    }\n\n    enter(grid:GridBase):void {\n        \n    }\n    public exit(grid:GridBase) {\n        this._targetPos = null;\n    }\n\n    public canChangeState() : boolean {\n        return true;\n    }\n    public canPause() : boolean {\n        return true;\n    }\n\n    private _targetPos:cc.Vec2 = cc.Vec2.ZERO;\n\n    public onTapBegan(grid:GridBase, logicalPos:cc.Vec2) {\n        let cell = grid.getCellAtLogicalPos(logicalPos);\n        if (cell) {\n            this._targetPos = logicalPos;\n            grid.requestUseGear(GameCurrencyType.AidBomb, 1);\n        }else{\n            grid.setMode(GridMode.Normal);\n        }\n    }\n\n    public onRespone(grid:GridBase, event:Object) : void {\n\n        IGame.playAudio(IdentifierManager.getInstance().getMatchAudioFilePath('prop_crossbomb'));\n        let rayDirections:Pair<cc.Vec2, boolean>[] = [\n            new Pair<cc.Vec2, boolean>(cc.v2(1, 0), true),\n            new Pair<cc.Vec2, boolean>(cc.v2(-1, 0), false),\n            new Pair<cc.Vec2, boolean>(cc.v2(0, 1), false),\n            new Pair<cc.Vec2, boolean>(cc.v2(0, -1), false),\n        ];\n\n        let layoutGrass = grid.isGrassFloorAtLogicalPos(this._targetPos);\n        for (let ray of rayDirections) {\n            let cannon = FlyerCannon.create(grid, \n                                            EntityColor.None, \n                                            layoutGrass, \n                                            this._targetPos, \n                                            ray.first, \n                                            ray.second);\n            grid.setFlyerAtLogicalPos(cannon, this._targetPos);\n        }\n  \n        \n        grid.setCurrentState(GridStateMatch.create());\n        grid.setMode(GridMode.Normal);\n    }\n}","import GridStateBase, { GridState } from \"../GridStateBase\";\nimport GridBase from \"../../GridBase\";\nimport GridStatePrepare from \"./GridStatePrepare\";\n\n\nexport default class GridStateDisappear extends GridStateBase {\n\n    public static create() : GridStateDisappear {\n        return new GridStateDisappear();\n    }\n    constructor() {\n        super(GridState.Disappear);\n    }\n\n    enter(grid:GridBase):void {\n        this.disappear(grid);\n    }\n\n    update(grid:GridBase, delta:number):void {\n        if (grid.isObstructsEmpty() && grid.isCommandListEmpty()){\n            grid.setCurrentState(GridStatePrepare.create());\n        }\n    }\n}\n\n","/**\n * 判断下落\n * 空格子上面的元素会按循序掉落下来\n */\n\nimport GameMath from \"../../../../../extend/utils/GameMath\";\nimport { EntityDropStep, EntityDropStepType } from \"../../../defines/EntityID\";\nimport { PowerID } from \"../../../defines/PowerID\";\nimport FencePos, { FencePosType } from \"../../../entity/fence/FencePos\";\nimport ItemBase from \"../../../entity/item/ItemBase\";\nimport ItemFactory from \"../../../entity/item/ItemFactory\";\nimport ItemStateDrop from \"../../../entity/item/state/ItemStateDrop\";\nimport { EntityStateType } from \"../../../entity/state/EntityStateBase\";\nimport GridBase from \"../../GridBase\";\nimport GridStateBase, { GridState } from \"../GridStateBase\";\nimport GridStateMatch from \"./GridStateMatch\";\nimport FlyerCollectedSupply from \"../../../entity/flyer/FlyerCollectedSupply\";\nimport { GameCurrencyType } from \"../../../../../define/GameCurrencyType\";\nimport CellBase from \"../../../entity/cell/CellBase\";\nimport FenceBase from \"../../../entity/fence/FenceBase\";\n\nexport default class GridStateDrop extends GridStateBase {\n\n    private _checkMatchPositions:cc.Vec2[] = [];\n    public static create(checkMatchPositions:cc.Vec2[] = []) : GridStateDrop {\n        return new GridStateDrop(checkMatchPositions);\n    }\n    constructor(checkMatchPositions:cc.Vec2[], gridState:GridState = GridState.DropItem) {\n        super(gridState);\n        this._checkMatchPositions = checkMatchPositions;\n    }\n\n    protected _deadCellsPositions:cc.Vec2[] = [];\n    protected _livingCellsPositions:cc.Vec2[] = [];\n    protected clearDeadAndLivingCellRecord(grid:GridBase) : void {\n        GameMath.clearArray(this._deadCellsPositions);\n        GameMath.clearArray(this._livingCellsPositions);\n    }\n    protected isDeadCell(grid:GridBase, pos:cc.Vec2) : boolean {\n\n        if (GameMath.indexOf(this._livingCellsPositions, pos) != -1) {\n            return false;\n        }\n\n        if (GameMath.indexOf(this._deadCellsPositions, pos) != -1) {\n            return true;\n        }\n\n        let cell = grid.getCellAtLogicalPos(pos);\n        \n        if (!cell) {\n            GameMath.insertAsSet(this._deadCellsPositions, pos);\n            return true;\n        }\n\n        if (this.canGenerateItemAtPos(grid, pos)) {\n            GameMath.insertAsSet(this._livingCellsPositions, pos);\n            return false\n        }\n\n        if (cell.getIsWormholeExit()) {\n            if (!this.isDeadCell(grid, cell.getWormholeSource())) {\n                GameMath.insertAsSet(this._livingCellsPositions, pos);\n                return false;\n            }\n        }\n\n        let availableMoveOffsets:cc.Vec2[] = [cc.v2(0, 1), cc.v2(-1, 1), cc.v2(1, 1)];\n        for (let offset of availableMoveOffsets) {\n            let fromPos = pos.add(offset);\n            if (this.canPassThrough(grid, fromPos, pos)) {\n                if (!this.isDeadCell(grid, fromPos)) {\n                    GameMath.insertAsSet(this._livingCellsPositions, pos);\n                    return false;\n                }\n            }\n        }\n        \n        GameMath.insertAsSet(this._deadCellsPositions, pos);\n        return true;\n    }\n\n    protected _fencesPositions:FencePos[] = [];\n    protected _fencesMap:Object = {};\n    protected markFences(grid:GridBase) : void {\n        GameMath.clearArray(this._fencesPositions);\n        GameMath.clearObject(this._fencesMap);\n\n        let horizontalOffsets:cc.Vec2[] = [cc.v2(-1, 0), cc.v2(0, 0), cc.v2(1, 0),];\n        let verticalOffsets:cc.Vec2[] = [cc.v2(0, 1), cc.v2(0, 0), cc.v2(0, -1),];\n        let wallOffsets:cc.Vec2[] = [cc.v2(0, 1), cc.v2(0, -1), cc.v2(1, 0), cc.v2(-1, 0),];\n            \n        let fencesMap = grid.getFencesMap();\n\n        for (const key in fencesMap) {\n            let fence = fencesMap[key] as FenceBase \n            let fencePos = fence.getFencePos();\n            let fencePosType = fencePos.getFencePosType();\n            GameMath.insertAsSet(this._fencesPositions, fencePos);\n\n            switch (fencePosType) {\n                case FencePosType.Horizontal:{\n                    for (let offset of horizontalOffsets) {\n                        let checkPos = fencePos.posA.add(offset);\n                        let cell = grid.getCellAtLogicalPos(checkPos);\n                        if (!cell) {\n                            for (let wallOffset of wallOffsets) {\n                                let wallPos = FencePos.create(checkPos, checkPos.add(wallOffset));\n                                GameMath.insertAsSet(this._fencesPositions, wallPos);\n                            }\n                        }\n\n                        checkPos = fencePos.posB.add(offset);\n                        cell = grid.getCellAtLogicalPos(checkPos);\n                        if (!cell) {\n                            for (let wallOffset of wallOffsets) {\n                                let wallPos = FencePos.create(checkPos, checkPos.add(wallOffset));\n                                GameMath.insertAsSet(this._fencesPositions, wallPos);\n                            }\n                        }\n                    }\n                }\n                    break;\n                case FencePosType.Vertical:{\n                    for (let offset of verticalOffsets) {\n                        let checkPos = fencePos.posA.add(offset);\n                        let cell = grid.getCellAtLogicalPos(checkPos);\n                        if (!cell) {\n                            for (const wallOffset of wallOffsets) {\n                                let wallPos = FencePos.create(checkPos, checkPos.add(wallOffset));\n                                GameMath.insertAsSet(this._fencesPositions, wallPos);\n                            }\n                        }\n\n                        checkPos = fencePos.posB.add(offset);\n                        cell = grid.getCellAtLogicalPos(checkPos);\n                        if (!cell) {\n                            for (const wallOffset of wallOffsets) {\n                                let wallPos = FencePos.create(checkPos, checkPos.add(wallOffset));\n                                GameMath.insertAsSet(this._fencesPositions, wallPos);\n                            }\n                        }\n                    }\n                }\n            \n                default:\n                    break;\n            }\n        }\n    }\n    protected hasFence(grid:GridBase, fromPos:cc.Vec2, toPos:cc.Vec2) : boolean {\n        let fencePos = FencePos.create(fromPos, toPos);\n        if (GameMath.indexOf(this._fencesPositions, fencePos) == -1) {\n            return false;\n        }\n        return true;\n    }\n    protected blockByFence(grid:GridBase, fromPos:cc.Vec2, toPos:cc.Vec2) : boolean {\n        let offset = toPos.sub(fromPos);\n        if (offset.equals(cc.v2(0,1)) || offset.equals(cc.v2(0, -1))) {\n            if (this.hasFence(grid, fromPos, toPos)) {\n                return true;\n            }\n        }else if (offset.equals(cc.v2(1, -1))  || offset.equals(cc.v2(-1, 1))) {\n            //     /*\n            //     F\n            //     - -\n            //     T\n            //     */\n            //     // 判断是否有水平方向栅栏阻挡\n            {\n                let fenceA = this.hasFence(grid, fromPos, fromPos.add(cc.v2(0, -1)));\n                let fenceB = this.hasFence(grid, toPos, toPos.add(cc.v2(0, 1)));\n                if (fenceA && fenceB) {\n                    return true;\n                }\n            }\n            //     /*\n            //     F |\n            //     | T\n            //     */\n            //     // 判断是否有右侧垂直方向栅栏阻挡\n            {\n                let fenceA = this.hasFence(grid, fromPos, fromPos.add(cc.v2(1, 0)));\n                let fenceB = this.hasFence(grid, toPos, toPos.add(cc.v2(-1, 0)));\n                if (fenceA && fenceB) {\n                    return true;\n                }\n            }\n\n            //     /*\n            //     F |\n            //     --\n            //         T\n            //     */\n            //     // 判断是否有右侧垂直方向栅栏阻挡\n            {\n                let fenceA = this.hasFence(grid, fromPos, fromPos.add(cc.v2(1, 0)));\n                let fenceB = this.hasFence(grid, fromPos, fromPos.add(cc.v2(0, -1)));\n                if (fenceA && fenceB) {\n                    return true;\n                }\n            }\n\n            //     /*\n            //     F\n            //         --\n            //     | T\n            //     */\n            //     // 判断是否有右侧垂直方向栅栏阻挡\n            {\n                let fenceA = this.hasFence(grid, toPos, toPos.add(cc.v2(0, 1)));\n                let fenceB = this.hasFence(grid, toPos, toPos.add(cc.v2(-1, 0)));\n                if (fenceA && fenceB) {\n                    return true;\n                }\n            }\n\n        }else if (offset.equals(cc.v2(-1, -1))  || offset.equals(cc.v2(1, 1))) {\n            //     /*\n            //         F\n            //     - -\n            //     T\n            //     */\n            //     // 判断是否有水平方向栅栏阻挡\n            {\n                let fenceA = this.hasFence(grid, fromPos, fromPos.add(cc.v2(0, -1)));\n                let fenceB = this.hasFence(grid, toPos, toPos.add(cc.v2(0, 1)));\n                if (fenceA && fenceB) {\n                    return true;\n                }\n            }\n\n            //     /*\n            //     | F\n            //     T |\n            //     */\n            //     // 判断是否有左侧垂直方向栅栏阻挡\n            {\n                let fenceA = this.hasFence(grid, fromPos, fromPos.add(cc.v2(-1, 0)));\n                let fenceB = this.hasFence(grid, toPos, toPos.add(cc.v2(1, 0)));\n                if (fenceA && fenceB) {\n                    return true;\n                }\n            }\n\n            //     /*\n            //     | F\n            //     __\n            //     T\n            //     */\n            //     // 判断是否有右侧垂直方向栅栏阻挡\n            {\n                let fenceA = this.hasFence(grid, fromPos, fromPos.add(cc.v2(-1, 0)));\n                let fenceB = this.hasFence(grid, fromPos, fromPos.add(cc.v2(0, -1)));\n                if (fenceA && fenceB) {\n                    return true;\n                }\n            }\n\n            //     /*\n            //         F\n            //     --\n            //     T |\n            //     */\n            //     // 判断是否有右侧垂直方向栅栏阻挡\n            {\n                let fenceA = this.hasFence(grid, toPos, toPos.add(cc.v2(0, 1)));\n                let fenceB = this.hasFence(grid, toPos, toPos.add(cc.v2(1, 0)));\n                if (fenceA && fenceB) {\n                    return true;\n                }\n            }\n        }\n\n        return false;\n    }\n\n    protected canGenerateItemAtPos(grid:GridBase, pos:cc.Vec2) : boolean {\n\n        let cell = grid.getCellAtLogicalPos(pos);\n        if (cell) {\n            if(cell.canGenerateItem() && !(this.canPassThrough(grid, pos.add(cc.v2(0, 1)), pos))){\n                return true;\n            }\n        }\n        return false;\n    }\n    protected isCellAvailableForDrop(grid:GridBase, pos:cc.Vec2) : boolean {\n        let cell = grid.getCellAtLogicalPos(pos);\n        if (cell) {\n            let parasite = grid.getParasiteAtLogicalPos(pos);\n            let item = grid.getItemAtLogicalPos(pos);\n            if ((item && !item.canDrop() || (parasite && !parasite.hostCanDrop()))) {\n                return false;\n            }else{\n                return true\n            }\n        }else{\n            return false;\n        }\n    }\n    protected canPassThrough(grid:GridBase, fromPos:cc.Vec2, toPos:cc.Vec2) : boolean {\n\n        if (Math.abs(fromPos.x - toPos.x) > 1) {\n            return false;\n        }\n        \n        if (Math.abs(fromPos.y - toPos.y) > 1) {\n            return false;\n        }\n        \n        if (this.blockByFence(grid, fromPos, toPos)) {\n            return false;\n        }\n        \n        if (this.isCellAvailableForDrop(grid, fromPos)) {\n            return this.isCellAvailableForDrop(grid, toPos);\n        }else{\n            return false;\n        }\n    }\n    protected canArrive(grid:GridBase, fromPos:cc.Vec2, toPos:cc.Vec2) : boolean {\n\n        if (Math.abs(fromPos.x - toPos.x) > 1) {\n            return false;\n        }\n        \n        if (Math.abs(fromPos.y - toPos.y) > 1) {\n            return false;\n        }\n        \n        if (this.blockByFence(grid, fromPos, toPos)) {\n            return false;\n        }\n        \n        if (this.canGenerateItemAtPos(grid, toPos)){\n            return false;\n        }\n    \n        if (this.isCellAvailableForDrop(grid, fromPos)) {\n\n            let cell = grid.getCellAtLogicalPos(toPos);\n            if (cell) {\n                return cell.canPassThrough();\n            }else{\n                return false;\n            }\n        }else{\n            return false;\n        }\n        return false;\n    }\n    protected tryDropItem(grid:GridBase, item:ItemBase) : EntityDropStep {\n        let result:EntityDropStep = EntityDropStep.create(EntityDropStepType.Stay, item.getLogicalPos());\n        if (item.canDrop()) {\n            let cell = grid.getCellAtLogicalPos(item.getLogicalPos());\n            if (cell.getIsWormholeEntrance()) {\n                let targetItem = grid.getItemAtLogicalPos(cell.getWormholeDestination());\n                let targetParasite = grid.getParasiteAtLogicalPos(cell.getWormholeDestination());\n                if (!targetItem && ! targetParasite) {\n                    result.type = EntityDropStepType.Wormhole;\n                    result.logicalPos = cell.getWormholeDestination();\n                }\n            }else{\n                let currentPos = item.getLogicalPos();\n                let checkPos = currentPos.add(cc.v2(0, -1));\n                if (this.canArrive(grid, currentPos, checkPos)) {\n                    result.type = EntityDropStepType.Drop;\n                    result.logicalPos = checkPos;\n                }\n            }\n        }\n        return result;\n    }\n    protected tryDiagonalItem(grid:GridBase, item:ItemBase) : EntityDropStep {\n        let result:EntityDropStep = EntityDropStep.create(EntityDropStepType.Stay, item.getLogicalPos());\n        let dropResult = this.tryDropItem(grid, item);\n        switch (dropResult.type) {\n            case EntityDropStepType.Stay:{\n                let currentPos = item.getLogicalPos();\n                let moveOffsets:cc.Vec2[] = [cc.v2(-1, -1), cc.v2(1, -1),];\n\n                for (let offset  of moveOffsets) {\n                    let checkPos = currentPos.add(offset);\n                    let checkBlockPos = checkPos.add(cc.v2(0, 1));\n                    let isBlockPosDead = this.isDeadCell(grid, checkBlockPos);\n                    let canNotPassThrough = !(this.canPassThrough(grid, checkBlockPos, checkPos));\n\n                    if (isBlockPosDead || canNotPassThrough) {\n                        if (this.canArrive(grid, currentPos, checkPos)) {\n                            result.type = EntityDropStepType.Drop;\n                            result.logicalPos = checkPos;\n                        }\n                    }\n                }\n                return result;\n            }\n                break;\n            case EntityDropStepType.Drop:\n            case EntityDropStepType.Wormhole:{\n                result.type = dropResult.type;\n                result.logicalPos = dropResult.logicalPos;\n                return result;\n            }\n                break;\n                \n            default:\n                break;\n        }\n        return result;\n    }\n    \n    protected _dropedItems:ItemBase[] = [];\n    protected tryDropPos(grid:GridBase, pos:cc.Vec2, canSlide:boolean) : boolean {\n        let droped = false;\n\n        let item = grid.getItemAtLogicalPos(pos);\n        if (!item) {\n            return droped;\n        }\n    \n        if (!item.canDrop()) {\n            return droped;\n        }    \n        \n        if (GameMath.indexOf(this._dropedItems, item) != -1) {\n            droped = true;\n            return droped;\n        }\n\n        let result:EntityDropStep = EntityDropStep.create(EntityDropStepType.Stay, item.getLogicalPos());\n        \n        if (droped == false) {\n            let cell = grid.getCellAtLogicalPos(item.getLogicalPos());\n            if (cell.getIsWormholeEntrance()) {\n\n                let destinationCell = grid.getCellAtLogicalPos(cell.getWormholeDestination());\n                if (destinationCell && destinationCell.canPassThrough()) {\n                    result.type = EntityDropStepType.Wormhole;\n                    result.logicalPos = cell.getWormholeDestination();\n                    droped = true;\n                }\n                // let targetItem = grid.getItemAtLogicalPos(cell.getWormholeDestination());\n                // let targetParasite = grid.getParasiteAtLogicalPos(cell.getWormholeDestination());\n                // if (!targetItem && !targetParasite) {\n                //     result.type = EntityDropStepType.Wormhole;\n                //     result.logicalPos = cell.getWormholeDestination();\n                //     droped = true;\n                // }\n            }\n        }\n\n        if (droped == false) {\n            let checkPos = pos.add(cc.v2(0, -1));\n            if (this.canArrive(grid, pos, checkPos)) {\n                result.type = EntityDropStepType.Drop;\n                result.logicalPos = checkPos;\n            }else{\n                if (canSlide) {\n                    let moveOffsets:cc.Vec2[] = [cc.v2(-1, -1), cc.v2(1, -1),];\n                    for (let offset of moveOffsets) {\n                        let checkPos = pos.add(offset);\n                        let checkBlockPos = checkPos.add(cc.v2(0, 1));\n\n                        let isBlockPosDead = this.isDeadCell(grid, checkBlockPos);\n                        let canNotPassThrough = !(this.canPassThrough(grid, checkBlockPos, checkPos));\n\n                        if (isBlockPosDead || canNotPassThrough) {\n                            if (this.canArrive(grid, pos, checkPos)) {\n                                result.type = EntityDropStepType.Drop;\n                                result.logicalPos = checkPos;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        switch (result.type) {\n            case EntityDropStepType.Wormhole:\n            case EntityDropStepType.Drop: {\n                grid.swapItem(pos, result.logicalPos);\n\n                if (item.getPath().length <= 0) {\n                    item.addStepToPath(EntityDropStep.create(EntityDropStepType.Stay, pos));\n                }\n                item.addStepToPath(result);\n                let path = item.getPath();\n                item.setPixelPos(path[0].logicalPos);\n                GameMath.insertAsSet(this._dropedItems, item);\n\n                let cell = grid.getCellAtLogicalPos(pos);\n                if (cell.getIsWormholeExit()) {\n                    this.tryDropPos(grid, cell.getWormholeSource(), canSlide);\n                }\n                let affectOffsets:cc.Vec2[] = [cc.v2(0, 1), cc.v2(-1, 1), cc.v2(1, 1)];\n                for (let offset of affectOffsets) {\n                    this.tryDropPos(grid, pos.add(offset), canSlide);\n                }\n            }\n                break;\n        \n            default:\n                break;\n        }\n        return droped;\n    }\n    \n    protected dropAllItemsByStep(grid:GridBase, step:number) : boolean {\n        this._dropedItems.length = 0;\n\n        let someItemMoved = false;\n        let gridSize = grid.getGridSize();\n    \n        for (let row = 0; row < gridSize.height; row++) {\n            for (let column = 0; column < gridSize.width; column++) {\n                if (this.tryDropPos(grid, cc.v2(column, row), false)) {\n                    someItemMoved = true;\n                }\n            }\n        }\n\n        for (let row = 0; row < gridSize.height; row++) {\n            for (let column = 0; column < gridSize.width; column++) {\n                if (this.tryDropPos(grid, cc.v2(column, row), true)) {\n                    someItemMoved = true;\n                }\n            }\n        }\n\n        let itemsMap = grid.getItemsMap();\n\n        for (let key in itemsMap) {\n            let item = itemsMap[key] as ItemBase;\n            let pos = item.getLogicalPos();\n            if (GameMath.indexOf(this._dropedItems, item) == -1) {\n                if (item.getPath().length <= 0) {\n                    item.addStepToPath(EntityDropStep.create(EntityDropStepType.Stay, pos));\n                }\n                item.addStepToPath(EntityDropStep.create(EntityDropStepType.Stay, pos));\n            }\n        }\n\n        let someItemBorned = false;\n\n        let cellsMap = grid.getCellsMap();\n        for (let key in cellsMap) {\n            let cell = cellsMap[key] as CellBase;\n            let pos = cell.getLogicalPos();\n            if (this.canGenerateItemAtPos(grid, pos)) {\n                let item = grid.getItemAtLogicalPos(pos);\n                if (item) {\n                    continue;\n                }\n\n                let entityID = cell.nextItemID();\n                let bornPos = pos;\n                let newItem:ItemBase = ItemFactory.generateItemWithEntityID(grid, entityID);\n                if (newItem) {\n                    newItem.setVisible(false);\n                    someItemBorned = true;\n                    grid.setItemAtLogicalPos(newItem, bornPos);\n\n                    for (let i = 0; i <= step; i++) {\n                        newItem.addStepToPath(EntityDropStep.create(EntityDropStepType.Hide, bornPos)); \n                    }\n                    newItem.addStepToPath(EntityDropStep.create(EntityDropStepType.Born, bornPos));\n                }\n            } \n        }\n        return someItemMoved || someItemBorned;\n    }\n\n    protected _stepCount:number = 0;\n    private _finishDrop:boolean = false;\n    protected runNextStep(grid:GridBase) : void {\n        if (this.dropAllItemsByStep(grid, this._stepCount)) {\n            this._stepCount++;\n        }else{\n            cc.log(\"Finish Drop\");\n        }\n    }\n\n    protected caculatePathForItems(grid:GridBase) : void {\n        let itemsMap = grid.getItemsMap();\n        for (let key in itemsMap) {\n            const item = itemsMap[key];\n            item.clearPath();\n        }\n        \n        this.markFences(grid);\n        this.clearDeadAndLivingCellRecord(grid);\n\n        let stepCount:number = 0;\n        while (1) {\n            if (!this.dropAllItemsByStep(grid, stepCount)) {\n                break;\n            }\n            stepCount++;\n        }\n    }\n\n    protected runPathForAllItems(grid:GridBase) : void {\n\n        let itemsMap = grid.getItemsMap();\n        for (let key in itemsMap) {\n            let item = itemsMap[key] as ItemBase;\n            let pos = item.getLogicalPos();\n            item.setCurrentState(ItemStateDrop.create());\n            if (item.getCurrentStateType() != EntityStateType.Wait) {\n                GameMath.insertAsSet(this._checkMatchPositions, pos);\n            }\n        }\n    }\n    \n    protected tryDropItemsForStep(grid:GridBase, step:number) : boolean {\n        return this.dropAllItemsByStep(grid, step);\n    }\n    \n    public enter(grid:GridBase) {\n        grid.unimmuneAllEntities();\n        this.markFences(grid);\n        this.clearDeadAndLivingCellRecord(grid);\n        this._stepCount = 0;\n        this._finishDrop = false;\n        this.update(grid, 0);\n    }\n\n    public update(grid:GridBase, delta:number) {\n        if (this._finishDrop == false) {\n\n            let stateDate = new Date();\n            let startTime = stateDate.getTime();\n            let caculateCount = 0;\n\n            while (1) {\n                let currentDate = new Date();\n                let timeDelta = currentDate.getTime() - startTime;\n                if (timeDelta > 20 && caculateCount > 0) {\n                    break;\n                }\n                caculateCount += 1;\n                this._finishDrop = !this.tryDropItemsForStep(grid, this._stepCount);\n                \n                if (this._finishDrop) {\n                    this.runPathForAllItems(grid);\n                    break;\n                }else{\n                    this._stepCount++;\n                }\n            }\n        }else{\n            if (grid.isObstructsEmpty() && grid.isCommandListEmpty()) {\n                grid.setCurrentState(GridStateMatch.create(this._checkMatchPositions));\n            }\n        }\n    }\n    public exit(grid:GridBase) {\n        this._checkMatchPositions = null;\n        this._deadCellsPositions = null;\n        this._livingCellsPositions = null;\n        this._fencesPositions = null;\n        this._fencesMap = null;\n        this._dropedItems = null;\n    }\n}\n","import GridStateBase, { GridState } from \"../GridStateBase\";\nimport GridBase from \"../../GridBase\";\n\nexport default class GridStateFailSummary extends GridStateBase {\n\n    public static create() : GridStateFailSummary{\n        return new GridStateFailSummary();\n    }\n    constructor() {\n        super(GridState.FailSummary);\n    }\n\n    public enter(grid:GridBase) {\n        grid.showGameFail();\n    }\n}\n","import GridStateBase, { GridState } from \"../GridStateBase\";\nimport GridBase from \"../../GridBase\";\nimport GridStateFailSummary from \"./GridStateFailSummary\";\n\nexport default class GridStateFail extends GridStateBase {\n\n    public static create() : GridStateFail{\n        return new GridStateFail();\n    }\n    constructor() {\n        super(GridState.Fail);\n    }\n\n    public enter(grid:GridBase) {\n        this.disappear(grid);\n    }\n\n    public update(grid:GridBase, delta:number) {\n        if (grid.isObstructsEmpty() && grid.isCommandListEmpty()) {\n            grid.setCurrentState(GridStateFailSummary.create());\n        }\n    }\n}\n","import { GameCurrencyType } from \"../../../../../define/GameCurrencyType\";\nimport GridCommand from \"../../../commond/GridCommand\";\nimport { EntityColor, EntityType } from \"../../../defines/EntityID\";\nimport GridBase, { GridMode } from \"../../GridBase\";\nimport GridStateBase, { GridState } from \"../GridStateBase\";\nimport GridStateMatch from \"./GridStateMatch\";\nimport FlyerHammer from \"../../../entity/flyer/FlyerHammer\";\nimport BehaviourID, { BehaviourEvent } from \"../../../../../extend/identify/behaviourIdentify/BehaviourDefines\";\nimport IGame from \"../../../../../base/IGame\";\n\nexport default class GridStateForceClean extends GridStateBase {\n    public static create() : GridStateForceClean {\n        return new GridStateForceClean();\n    }\n    constructor(){\n        super(GridState.ForceClean);\n    }\n\n    enter(grid:GridBase):void {\n        \n    }\n\n    public exit(grid:GridBase) {\n        this._targetPos = null;\n    }\n\n    public canChangeState() : boolean {\n        return true;\n    }\n    public canPause() : boolean {\n        return true;\n    }\n\n    private _targetPos:cc.Vec2 = cc.Vec2.ZERO;\n\n    public onTapBegan(grid:GridBase, logicalPos:cc.Vec2) {\n\n        let cell = grid.getCellAtLogicalPos(logicalPos);\n        if (!cell) {\n            //取消道具选中\n            grid.setMode(GridMode.Normal);\n            return;\n        }\n\n        let entityTypes:EntityType[] = [\n            EntityType.Parasite,\n            EntityType.Item,\n            EntityType.Rug,\n            EntityType.Floor,\n            EntityType.Popsicle,\n            EntityType.Cell,\n        ];\n\n        let canUseHammer = false;\n        for (let entityType of entityTypes) {\n            let entity = grid.getEntity(entityType, logicalPos);\n            if (entity) {\n                canUseHammer = entity.canExcuteCommand(GridCommand.BombClean(logicalPos, EntityColor.None, false));\n                break;\n            }\n        }\n\n        if (!canUseHammer) {\n            return;\n        }\n\n        this._targetPos = logicalPos;\n        grid.requestUseGear(GameCurrencyType.AidHammer, 1);\n    }\n\n    public onRespone(grid:GridBase, event:Object) : void {\n       \n        let hammer = FlyerHammer.create(grid, this._targetPos);\n        grid.setFlyerAtLogicalPos(hammer,cc.Vec2.ZERO);\n\n       \n        grid.setCurrentState(GridStateMatch.create());\n        grid.setMode(GridMode.Normal);\n    }\n}","import { GameCurrencyType } from \"../../../../../define/GameCurrencyType\";\nimport GridCommand from \"../../../commond/GridCommand\";\nimport ItemBase from \"../../../entity/item/ItemBase\";\nimport ItemStateSwap from \"../../../entity/item/state/ItemStateSwap\";\nimport GridBase, { GridMode } from \"../../GridBase\";\nimport GridStateBase, { GridState } from \"../GridStateBase\";\nimport GridStateMatch from \"./GridStateMatch\";\nimport IGame from \"../../../../../base/IGame\";\nimport IdentifierManager from \"../../../defines/IdentifierManager\";\nimport FlyerAnimation, { FlyerAnimationType } from \"../../../entity/flyer/FlyerAnimation\";\nimport BehaviourID, { BehaviourEvent } from \"../../../../../extend/identify/behaviourIdentify/BehaviourDefines\";\n\nexport default class GridStateForceSwap extends GridStateBase {\n    public static create() : GridStateForceSwap {\n        return new GridStateForceSwap();\n    }\n    constructor(){\n        super(GridState.ForceSwap);\n    }\n\n    enter(grid:GridBase):void {\n        \n    }\n    public canChangeState() : boolean {\n        if (this._itemSwaped) {\n            return false;\n        }\n        return true;\n    }\n    public canPause() : boolean {\n        return true;\n    }\n\n    private _itemSwaped:boolean = false;\n    private _swapPosA:cc.Vec2 = cc.Vec2.ZERO;\n    private _swapPosB:cc.Vec2 = cc.Vec2.ZERO;\n    private _focusFrame:FlyerAnimation = null;\n    public update(grid:GridBase, delta:number) : void {\n        if (this._itemSwaped == false) {\n            return;\n        }\n\n        if (grid.isObstructsEmpty() && grid.isCommandListEmpty()) {\n            let commandA = GridCommand.ForceSwap(this._swapPosB);\n            let commandB = GridCommand.ForceSwap(this._swapPosA);\n\n            grid.dispatchCommand(this._swapPosA, commandA, 0);\n            grid.dispatchCommand(this._swapPosB, commandB, 0);\n            grid.setCurrentState(GridStateMatch.create());\n        }\n    }\n    private _selectedItem:ItemBase = null;\n    public exit(grid:GridBase) {\n        if (this._selectedItem) {\n            this._selectedItem.unselected();\n        }\n\n        if (this._focusFrame) {\n            this._focusFrame.destoryWithRecycle();\n        }\n\n        this._swapPosA = null;\n        this._swapPosB = null;\n        this._focusFrame = null;\n        this._targetPos = null;\n    }\n    \n    private trySwapItem(grid:GridBase, logicalPosA:cc.Vec2, logicalPosB:cc.Vec2) : boolean {\n        let itemA = grid.getItemAtLogicalPos(logicalPosA);\n        let itemB = grid.getItemAtLogicalPos(logicalPosB);\n\n        if (itemA && itemB && itemA.canSwap() && itemB.canSwap()) {\n            this._swapPosA = logicalPosA;\n            this._swapPosB = logicalPosB;\n            grid.requestUseGear(GameCurrencyType.AidSwap, 1);\n            return true;\n        }else{\n            //不可交换\n            return false;\n        }\n    }\n\n    private _targetPos:cc.Vec2 = cc.Vec2.ZERO;\n    public onTapBegan(grid:GridBase, logicalPos:cc.Vec2) {\n        if (this._itemSwaped) {\n            return;\n        }\n\n        let item = grid.getItemAtLogicalPos(logicalPos);\n        if (!item) {\n            grid.setMode(GridMode.Normal);\n            return;\n        }\n        \n        if (item == this._selectedItem) {\n            return;\n        }\n\n        if (this._selectedItem) {\n            this.trySwapItem(grid, this._selectedItem.getLogicalPos(), logicalPos);\n        }else{\n            if (item.canForceSwap()) {\n                item.selected();\n                this._selectedItem = item;\n\n\n                if (!this._focusFrame) {\n                    this._focusFrame = FlyerAnimation.createAnimationWithType(grid, FlyerAnimationType.FocusFrame, false);\n                    grid.setFlyerAtLogicalPos(this._focusFrame, logicalPos)\n                }\n                IGame.playAudio(IdentifierManager.getInstance().getMatchAudioFilePath('prop_switch1'));\n                \n            }else{\n                //不可交换\n            }\n        }\n    }\n\n    public onRespone(grid:GridBase, event:Object) : void {\n        \n        grid.swapItem(this._swapPosA, this._swapPosB);\n        let itemA = grid.getItemAtLogicalPos(this._swapPosB);\n        let itemB = grid.getItemAtLogicalPos(this._swapPosA);\n        itemA.setCurrentState(ItemStateSwap.create(this._swapPosA, this._swapPosB));\n        itemB.setCurrentState(ItemStateSwap.create(this._swapPosB, this._swapPosA));\n\n        this._selectedItem.unselected();\n        this._selectedItem = null;\n        this._itemSwaped = true;\n        grid.setMode(GridMode.Normal);\n\n        IGame.playAudio(IdentifierManager.getInstance().getMatchAudioFilePath('prop_switch2'));\n\n        \n    }\n}\n","import GridBase from \"../../GridBase\";\nimport GridStateBase, { GridState } from \"../GridStateBase\";\nimport GridStateSwapNeighbour from \"./GridStateSwapNeighbour\";\nimport { PowerID } from \"../../../defines/PowerID\";\nimport ItemBase, { ItemType } from \"../../../entity/item/ItemBase\";\nimport { ParasiteType } from \"../../../entity/parasite/ParasiteBase\";\nimport GameMath from \"../../../../../extend/utils/GameMath\";\nimport ParasiteHoney from \"../../../entity/parasite/ParasiteHoney\";\nimport ParasiteFactory from \"../../../entity/parasite/ParasiteFactory\";\nimport ItemHoneyComb from \"../../../entity/item/special/ItemHoneyComb\";\nimport GridStateComboWord from \"./GridStateComboWord\";\nimport FencePos from \"../../../entity/fence/FencePos\";\n\n\nexport default class GridStateHoney extends GridStateBase {\n\n    public static create() : GridStateHoney {\n        return new GridStateHoney();\n    }\n    constructor() {\n        super(GridState.Honey);\n    }\n\n    protected spreadHoney(grid:GridBase) {\n        grid.lossPower(PowerID.SpreadHoney, 1);\n        let itemsMap = grid.getItemsMap();\n\n        let honeyPositions:Object[] = [];\n        let offsets:cc.Vec2[] = [\n            cc.v2(1, 0),\n            cc.v2(-1, 0),\n            cc.v2(0, 1),\n            cc.v2(0, -1),\n        ];\n\n        for (let key in itemsMap) {\n            let item = itemsMap[key] as ItemBase;            \n            let canSpreadHoney = false;\n            if (item.getItemType() == ItemType.HoneyComb) {\n                canSpreadHoney = true;\n            }\n            let parasite = item.getTopParasite();\n            if (parasite && parasite.getParasiteType() == ParasiteType.Honey) {\n                canSpreadHoney = true;\n            }\n\n            if (canSpreadHoney) {\n                let origin = item.getLogicalPos();\n                for (let offset of offsets) {\n                    let checkPos = origin.add(offset);\n                    let item = grid.getItemAtLogicalPos(checkPos);\n                    let fence = grid.getFenceAtFencePos(FencePos.create(origin, checkPos))\n                    if (!fence) {\n                        if (item && item.canCoveredByHoney()) {\n                            honeyPositions.push({\n                                'Source' : origin,\n                                'Target' : checkPos,\n                            });\n                        }\n                    }\n                }\n            }\n        }\n\n\n        if (honeyPositions.length > 0) {\n            let randomIndex = GameMath.randomInt(0, honeyPositions.length - 1);\n            let spreadInfo = honeyPositions[randomIndex];\n            let spreadSource = spreadInfo['Source'];\n            let spreadTarget = spreadInfo['Target'];\n            let spreadHp = GameMath.randomInt(1, 2);\n\n            let sourceItem = grid.getItemAtLogicalPos(spreadSource);\n            let sourceHoney = sourceItem.getTopParasite() as ParasiteHoney;\n            if (sourceHoney) {\n                spreadHp = sourceHoney.getHealthPoint();\n            }else{\n                let honeyComb = sourceItem as ItemHoneyComb;\n                spreadHp = honeyComb.getSpreadHoneyHp();\n            }\n\n            let targetItem = grid.getItemAtLogicalPos(spreadTarget);\n            let newHoney = ParasiteHoney.create(grid, spreadHp);\n            newHoney.grow();\n            grid.setParasiteAtLogicalPos(newHoney, spreadTarget);\n        }\n    }\n\n    public enter(grid:GridBase) {\n        \n        if(grid.getPowerAmount(PowerID.SpreadHoney) > 0){\n            if(grid.getPowerAmount(PowerID.HoneyResist) <= 0){\n                this.spreadHoney(grid);\n            }\n        }\n        if (grid.isObstructsEmpty() && grid.isCommandListEmpty()) {\n            grid.setCurrentState(GridStateComboWord.create());\n        }\n    }\n\n    public update(grid:GridBase, delta:number) {\n        if (grid.isObstructsEmpty() && grid.isCommandListEmpty()) {\n            grid.setCurrentState(GridStateComboWord.create());\n        }\n    }\n}\n","import { PowerID } from \"../../../defines/PowerID\";\nimport GridBase from \"../../GridBase\";\nimport GridStateBase, { GridState } from \"../GridStateBase\";\nimport GridStateAutoActivateBomb from \"./GridStateAutoActivateBomb\";\nimport ItemBase from \"../../../entity/item/ItemBase\";\nimport { EntityColor } from \"../../../defines/EntityID\";\nimport GameMath from \"../../../../../extend/utils/GameMath\";\nimport { GameCurrencyType } from \"../../../../../define/GameCurrencyType\";\nimport { ItemBombType } from \"../../../entity/item/color/bomb/ItemBombBase\";\nimport ItemFactory from \"../../../entity/item/ItemFactory\";\nimport ItemStateReplace from \"../../../entity/item/state/ItemStateReplace\";\n\n\n\nexport default class GridStateLaunchGears extends GridStateBase {\n\n    public static create() : GridStateLaunchGears {\n        return new GridStateLaunchGears();\n    }\n    constructor() {\n        super(GridState.LaunchGears);\n    }\n\n    private _availablePositions:cc.Vec2[] = [];\n    public enter(grid:GridBase) {\n\n        if (grid.getPowerAmount(PowerID.LaunchGears) > 0) {\n            grid.setPowerAmount(PowerID.LaunchGears, 0);\n\n            let itemsMap = grid.getItemsMap();\n            for (let key in itemsMap) {\n                let item = itemsMap[key] as ItemBase;\n                if (item.canUpgradeByRainbow()) {\n                    this._availablePositions.push(item.getLogicalPos());\n                }\n            }\n            GameMath.shuffleArray(this._availablePositions);\n            let gearMap = grid.getLaunchGearMap();\n\n            for (let key in gearMap) {\n                let gearID = Number(key) as GameCurrencyType;\n                let amount = gearMap[key];\n                this.progressGear(grid, gearID, amount);\n            }\n            \n            grid.clearLaunchGears();\n        }else{\n            grid.setCurrentState(GridStateAutoActivateBomb.create());\n        }\n    }\n    \n    public update(grid:GridBase, delta:number) {\n        if (grid.isObstructsEmpty() && grid.isCommandListEmpty()) {\n            grid.setCurrentState(GridStateAutoActivateBomb.create());\n        }\n    }\n\n    public exit(grid:GridBase) {\n        this._availablePositions = null;\n    }\n\n    public progressGear(grid:GridBase, gearID:GameCurrencyType, amount:number) : void {\n        for (let index = 0; index < amount; index++) {\n            switch (gearID) {\n                case GameCurrencyType.BeginLine:\n                case GameCurrencyType.InfiniteBeginLine:\n                case GameCurrencyType.OneRoundBeginLine:\n                    grid.setUsedGearAmount(gearID, grid.getUsedGearAmount(gearID) + 1);\n                    this.createBomb(grid, ItemBombType.Row);\n                    this.createBomb(grid, ItemBombType.Column);\n                    break;\n                case GameCurrencyType.BeginRange:\n                case GameCurrencyType.InfiniteBeginRange:\n                case GameCurrencyType.OneRoundBeginRange:\n                    grid.setUsedGearAmount(gearID, grid.getUsedGearAmount(gearID) + 1);\n                    this.createBomb(grid, ItemBombType.Range);\n                    this.createBomb(grid, ItemBombType.Cross);\n                    break;\n                case GameCurrencyType.BeginRainbow:\n                case GameCurrencyType.InfiniteBeginRainbow:\n                case GameCurrencyType.OneRoundBeginRainbow:\n                    grid.setUsedGearAmount(gearID, grid.getUsedGearAmount(gearID) + 1);\n                    this.createBomb(grid, ItemBombType.Rainbow);\n                    break;\n                case GameCurrencyType.ExtraStep1:\n                case GameCurrencyType.ExtraStep2:\n                case GameCurrencyType.ExtraStep3:\n                case GameCurrencyType.ExtraStep5:{\n                    grid.setUsedGearAmount(gearID, grid.getUsedGearAmount(gearID) + 1);\n                    this.createExtraStep(grid, gearID); \n                }\n                    break;\n                case GameCurrencyType.LuckyWheelRow:{\n                    grid.setUsedGearAmount(gearID, grid.getUsedGearAmount(gearID) + 1);\n                    this.createBomb(grid, ItemBombType.Row);\n                }   break;\n                case GameCurrencyType.LuckyWheelColumn:{\n                    grid.setUsedGearAmount(gearID, grid.getUsedGearAmount(gearID) + 1);\n                    this.createBomb(grid, ItemBombType.Column);\n                }   break;\n                case GameCurrencyType.LuckyWheelCross:{\n                    grid.setUsedGearAmount(gearID, grid.getUsedGearAmount(gearID) + 1);\n                    this.createBomb(grid, ItemBombType.Cross);\n                }   break;\n                case GameCurrencyType.LuckyWheelRange:{\n                    grid.setUsedGearAmount(gearID, grid.getUsedGearAmount(gearID) + 1);\n                    this.createBomb(grid, ItemBombType.Range);\n                }   break;\n                case GameCurrencyType.LuckyWheelMissile_Row:{\n                    grid.setUsedGearAmount(gearID, grid.getUsedGearAmount(gearID) + 1);\n                    this.createBomb(grid, ItemBombType.Row);\n                    this.createBomb(grid, ItemBombType.Butterfly);\n                }   break;\n                case GameCurrencyType.LuckyWheelMissile_Column:{\n                    grid.setUsedGearAmount(gearID, grid.getUsedGearAmount(gearID) + 1);\n                    this.createBomb(grid, ItemBombType.Column);\n                    this.createBomb(grid, ItemBombType.Butterfly);\n                }   break;\n                case GameCurrencyType.LuckyWheelMissile_Cross:{\n                    grid.setUsedGearAmount(gearID, grid.getUsedGearAmount(gearID) + 1);\n                    this.createBomb(grid, ItemBombType.Cross);\n                    this.createBomb(grid, ItemBombType.Butterfly);\n                }   break;\n                case GameCurrencyType.LuckyWheelMissile_Range:{\n                    grid.setUsedGearAmount(gearID, grid.getUsedGearAmount(gearID) + 1);\n                    this.createBomb(grid, ItemBombType.Range);\n                    this.createBomb(grid, ItemBombType.Butterfly);\n                }   break;\n    \n                case GameCurrencyType.LuckyWheelRow_Cross:{\n                    grid.setUsedGearAmount(gearID, grid.getUsedGearAmount(gearID) + 1);\n                    this.createBomb(grid, ItemBombType.Row);\n                    this.createBomb(grid, ItemBombType.Cross);\n                }   break;\n                case GameCurrencyType.LuckyWheelColumn_Cross:{\n                    grid.setUsedGearAmount(gearID, grid.getUsedGearAmount(gearID) + 1);\n                    this.createBomb(grid, ItemBombType.Column);\n                    this.createBomb(grid, ItemBombType.Cross);\n                }   break;\n                case GameCurrencyType.LuckyWheelRow_Range:{\n                    grid.setUsedGearAmount(gearID, grid.getUsedGearAmount(gearID) + 1);\n                    this.createBomb(grid, ItemBombType.Row);\n                    this.createBomb(grid, ItemBombType.Range);\n                }   break;\n                case GameCurrencyType.LuckyWheelColumn_Range:{\n                    grid.setUsedGearAmount(gearID, grid.getUsedGearAmount(gearID) + 1);\n                    this.createBomb(grid, ItemBombType.Column);\n                    this.createBomb(grid, ItemBombType.Range);\n                }   break;\n                case GameCurrencyType.LuckyWheelMissile_Row_Column:{\n                    grid.setUsedGearAmount(gearID, grid.getUsedGearAmount(gearID) + 1);\n                    this.createBomb(grid, ItemBombType.Butterfly);\n                    this.createBomb(grid, ItemBombType.Row);\n                    this.createBomb(grid, ItemBombType.Column);\n                }   break;\n                case GameCurrencyType.LuckyWheelMissile_Rainbow:{\n                    grid.setUsedGearAmount(gearID, grid.getUsedGearAmount(gearID) + 1);\n                    this.createBomb(grid, ItemBombType.Butterfly);\n                    this.createBomb(grid, ItemBombType.Rainbow);\n                }   break;\n                case GameCurrencyType.LuckyWheelMissile_Row_Cross:{\n                    grid.setUsedGearAmount(gearID, grid.getUsedGearAmount(gearID) + 1);\n                    this.createBomb(grid, ItemBombType.Butterfly);\n                    this.createBomb(grid, ItemBombType.Row);\n                    this.createBomb(grid, ItemBombType.Cross);\n                }   break;\n                case GameCurrencyType.LuckyWheelMissile_Column_Range:{\n                    grid.setUsedGearAmount(gearID, grid.getUsedGearAmount(gearID) + 1);\n                    this.createBomb(grid, ItemBombType.Butterfly);\n                    this.createBomb(grid, ItemBombType.Column);\n                    this.createBomb(grid, ItemBombType.Range);\n                }   break;\n    \n                default:\n                    break;\n            }\n        }\n    }\n\n    private createBomb(grid:GridBase, bombType:ItemBombType) {\n        if (this._availablePositions.length > 0) {\n            let targetPos = this._availablePositions[0];\n            let color = EntityColor.None;\n            if (bombType != ItemBombType.Rainbow) {\n                let item = grid.getItemAtLogicalPos(targetPos);\n                color = item.getEntityColor();\n            }\n\n            let bomb = ItemFactory.generateEffectBombItem(grid, bombType, color);\n            if (bomb) {\n                this._availablePositions.splice(0, 1); \n                bomb.node.setPosition(cc.v2(-100, grid.node.getContentSize().height * 0.5));\n                grid.node.addChild(bomb.node, grid.getTopZOrder(bomb.getEntityType(), targetPos));\n                bomb.setCurrentState(ItemStateReplace.create(targetPos));\n            }\n        }\n    }\n\n    private createExtraStep(grid:GridBase, itemID:GameCurrencyType) {\n        let startPos = cc.v2(-2, Math.round(grid.getGridSize().height / 2));\n        grid.gainStepWithItemID(itemID, true, startPos);\n    }\n}\n","import GridBase from \"../../GridBase\";\nimport GridStateBase, { GridState } from \"../GridStateBase\";\nimport GridStateLaunchGears from \"./GridStateLaunchGears\";\n\nexport default class GridStateLaunchResidentGear extends GridStateBase {\n\n    public static create() : GridStateLaunchResidentGear {\n        return new GridStateLaunchResidentGear();\n    }\n    constructor() {\n        super(GridState.LaunchResidentGear);\n    }\n    public enter(grid:GridBase) {\n        grid.setCurrentState(GridStateLaunchGears.create());\n    }\n}\n","import EntityEventBase from \"../../event/EntityEventBase\";\nimport StateMachineBase from \"../../fsm/StateMachineBase\";\nimport GridBase from \"../GridBase\";\nimport GridStateBase from \"./GridStateBase\";\n\n\nexport default class GridStateMachine extends StateMachineBase {   \n\n    public static create(grid:GridBase) : GridStateMachine {\n        return new GridStateMachine(grid);\n    }\n\n    public onTapBegan(logicalPos:cc.Vec2):void{\n        if (this._currentState) {\n            if (this._currentState instanceof GridStateBase) {\n                let currentState = this._currentState as GridStateBase;\n\n                if(this._owner instanceof GridBase) {\n                    let onwer = this._owner as GridBase;\n                    currentState.onTapBegan(onwer, logicalPos)\n                }\n            }\n        }\n\n        if (this._globalState) {\n            if (this._globalState instanceof GridStateBase) {\n                let globalState = this._globalState as GridStateBase;\n\n                if(this._owner instanceof GridBase) {\n                    let onwer = this._owner as GridBase;\n                    globalState.onTapBegan(onwer, logicalPos)\n                }\n            }\n        }\n    }\n\n    public onTapMoved(logicalPos:cc.Vec2):void{\n        if (this._currentState) {\n            if (this._currentState instanceof GridStateBase) {\n                let currentState = this._currentState as GridStateBase;\n\n                if(this._owner instanceof GridBase) {\n                    let onwer = this._owner as GridBase;\n                    currentState.onTapMoved(onwer, logicalPos)\n                }\n            }\n        }\n\n        if (this._globalState) {\n            if (this._globalState instanceof GridStateBase) {\n                let globalState = this._globalState as GridStateBase;\n\n                if(this._owner instanceof GridBase) {\n                    let onwer = this._owner as GridBase;\n                    globalState.onTapMoved(onwer, logicalPos)\n                }\n            }\n        }\n    }\n\n    public onTapEnded(logicalPos:cc.Vec2):void{\n        if (this._currentState) {\n            if (this._currentState instanceof GridStateBase) {\n                let currentState = this._currentState as GridStateBase;\n\n                if(this._owner instanceof GridBase) {\n                    let onwer = this._owner as GridBase;\n                    currentState.onTapEnded(onwer, logicalPos)\n                }\n            }\n        }\n\n        if (this._globalState) {\n            if (this._globalState instanceof GridStateBase) {\n                let globalState = this._globalState as GridStateBase;\n\n                if(this._owner instanceof GridBase) {\n                    let onwer = this._owner as GridBase;\n                    globalState.onTapEnded(onwer, logicalPos)\n                }\n            }\n        }\n    }\n\n    public onEvent(event:EntityEventBase):void{\n        if (this._currentState) {\n            if (this._currentState instanceof GridStateBase) {\n                let currentState = this._currentState as GridStateBase;\n\n                if(this._owner instanceof GridBase) {\n                    let onwer = this._owner as GridBase;\n                    currentState.onEvent(onwer, event)\n                }\n            }\n        }\n\n        if (this._globalState) {\n            if (this._globalState instanceof GridStateBase) {\n                let globalState = this._globalState as GridStateBase;\n\n                if(this._owner instanceof GridBase) {\n                    let onwer = this._owner as GridBase;\n                    globalState.onEvent(onwer, event)\n                }\n            }\n        }\n    }\n\n    public onRespone(event:Object):void{\n        if (this._currentState) {\n            if (this._currentState instanceof GridStateBase) {\n                let currentState = this._currentState as GridStateBase;\n\n                if(this._owner instanceof GridBase) {\n                    let onwer = this._owner as GridBase;\n                    currentState.onRespone(onwer, event)\n                }\n            }\n        }\n\n        if (this._globalState) {\n            if (this._globalState instanceof GridStateBase) {\n                let globalState = this._globalState as GridStateBase;\n\n                if(this._owner instanceof GridBase) {\n                    let onwer = this._owner as GridBase;\n                    globalState.onRespone(onwer, event)\n                }\n            }\n        }\n    }\n}\n","import { EntityColor } from \"../../../defines/EntityID\";\nimport ItemBase, { ItemType } from \"../../../entity/item/ItemBase\";\nimport ItemFactory from \"../../../entity/item/ItemFactory\";\nimport ItemMagicCrystal from \"../../../entity/item/special/ItemMagicCrystal\";\nimport ItemStateReplace from \"../../../entity/item/state/ItemStateReplace\";\nimport GridBase from \"../../GridBase\";\nimport GridStateBase, { GridState } from \"../GridStateBase\";\nimport GridStateConveyer from \"./GridStateConveyer\";\nimport GridStateMatch from \"./GridStateMatch\";\nimport CellBase from \"../../../entity/cell/CellBase\";\nimport GameMath from \"../../../../../extend/utils/GameMath\";\nimport IGame from \"../../../../../base/IGame\";\nimport IdentifierManager from \"../../../defines/IdentifierManager\";\n\nexport class AtkPointData{\n    priority:number = 1;\n    x:number = 0;\n    y:number = 0;\n    beAttacked:boolean = false; //是否被攻击过\n}\n\nexport class GridStateMagicCrystal extends GridStateBase {\n\n    private _magicCrystalVec:ItemMagicCrystal[] = [];\n    // private _atkPoints:\n    \n    private _atkPoints:AtkPointData[] = [];\n\n    private _changeItemPos:cc.Vec2[] = [];\n\n    private _outputIng:boolean = false;\n\n    private _curGrid:GridBase = null;\n\n    public static create() : GridStateMagicCrystal {\n        return new GridStateMagicCrystal();\n    }\n    constructor(){\n        super(GridState.MagicCrystal);\n    }\n\n    public getCurGrid():GridBase{\n        return this._curGrid;\n    }\n\n    \n    public enter(grid:GridBase) {\n        this._curGrid = grid;\n\n        this.initMagicCryStalItems();\n        this.initAtkPotins();\n\n        //小狗->魔法状态\n        //是否有魔法水晶触发: 有->触发魔法水晶  无->进入下一状态\n        if(this._magicCrystalVec.length > 0){\n            //TODO 魔法水晶攻击\n            this.doOutput();\n        }else{\n            //稳定进入下一步\n            grid.setCurrentState(GridStateConveyer.create());\n        }\n\n        \n    }\n\n    public update(grid:GridBase, delta:number) {\n        if (grid.isObstructsEmpty() && grid.isCommandListEmpty()) {\n            if(this._outputIng){\n                this._outputIng = false;\n                this.onMagicCrystalDone();\n            }\n            // grid.setCurrentState( GridStateMatch.create(this._changeItemPos));\n        }\n    }\n\n    public eixt(grid:GridBase) {\n        this._magicCrystalVec = null;\n        this._atkPoints = null;\n        this._changeItemPos = null;\n        this._curGrid = null;\n    }\n\n    //获取能攻击的魔法水晶\n    private initMagicCryStalItems():void{\n        this._magicCrystalVec = [];\n        let itemMap = this.getCurGrid().getItemsMap();\n        for(let key in itemMap){\n            let tmpItem:ItemBase = itemMap[key];\n            if(tmpItem.getItemType() == ItemType.MagicCrystal){\n                let magicItem:ItemMagicCrystal = tmpItem as ItemMagicCrystal;\n                if(magicItem.isCanOutput()){\n                    //能输出的魔法水晶\n                    this._magicCrystalVec.push(magicItem);\n                }\n            }\n        }\n    }\n\n    //获取攻击点优先级\n    private initAtkPotins():void{\n        this._atkPoints = [];\n\n        let cellMap = this.getCurGrid().getCellsMap();\n        for(let key in cellMap){\n            let tmpItem:CellBase = cellMap[key];\n            let ptData:AtkPointData = new AtkPointData();\n            ptData.x = tmpItem.getLogicalPos().x;\n            ptData.y = tmpItem.getLogicalPos().y;\n            ptData.priority = tmpItem.getCrystalAttackPriority();\n            ptData.beAttacked = false;\n            this._atkPoints.push(ptData);\n        }\n\n        //打乱->按优先级排序\n        //打乱\n        GameMath.shuffleArray(this._atkPoints)\n\n        //排序（优先级越小越高）\n        this._atkPoints.sort((v1:AtkPointData, v2:AtkPointData):number=>{\n            if(v1.priority < v2.priority){\n                return -1;\n            }else{\n                return 1;\n            }\n        })\n    }\n\n    //魔法水晶发起产出（替换元素）\n    private doOutput():void{\n        this._outputIng = true;\n        for(let i:number = 0; i < this._magicCrystalVec.length; i++){\n            let magicItem:ItemMagicCrystal = this._magicCrystalVec[i];\n            //test 播放魔法水晶攻击动画\n            if(magicItem){\n                let sequence = cc.sequence(cc.scaleTo(0.2, 1.2), cc.scaleTo(0.1, 1.0));\n                magicItem.runAction(sequence);\n            }\n\n            //每次产出个数\n            for(let j:number = 0; j < magicItem.getAttrNum(); j++){\n                let newItem = ItemFactory.generateItemWithEntityID(this.getCurGrid(), magicItem.getOutputEntityId());\n                if(newItem){\n                    let nextPoint:AtkPointData = this.getNextAtkPoint(newItem.getEntityColor());\n                    if(nextPoint == null){\n                        break;\n                    }\n\n                    this._changeItemPos.push(cc.v2(nextPoint.x, nextPoint.y));\n\n                    newItem.node.setPosition(magicItem.node.getPosition());\n                    this.getCurGrid().node.addChild(newItem.node, this.getCurGrid().getTopZOrder(newItem.getEntityType(), cc.v2(nextPoint.x, nextPoint.y)));\n                    newItem.setCurrentState(ItemStateReplace.create(cc.v2(nextPoint.x, nextPoint.y)));\n                    IGame.playAudio(IdentifierManager.getInstance().getMatchAudioFilePath('magiccrystal'));\n                }\n            }\n        }\n    }\n\n    //移除攻击过的点\n    private removeAttackedPoints():void{\n        //优先点\n        let index:number = 0;\n        let len:number = this._atkPoints.length;\n        for(let i:number = 0; i < len; i++){\n            let atkPoint:AtkPointData = this._atkPoints[index];\n            if(!atkPoint){\n                break;\n            }\n            if(atkPoint.beAttacked){\n                this._atkPoints.splice(index, 0);\n            }else{\n                index += 1;\n            }\n        }\n    }\n\n    private getNextAtkPoint(color:EntityColor):AtkPointData{\n        //移除已经攻击过的位置\n        this.removeAttackedPoints();\n        //优先找定义好的位置\n        if(this._atkPoints.length > 0){\n            for(let i:number = 0; i < this._atkPoints.length; i++){\n                if(!this._atkPoints[i].beAttacked){\n                    let tempItem:ItemBase = this.getCurGrid().getItemAtLogicalPos(cc.v2(this._atkPoints[i].x, this._atkPoints[i].y));\n                    if(tempItem){\n                        if(tempItem.canTransformByMagicCrystal()){\n                            if(color != EntityColor.None){\n                                if(tempItem.getEntityColor() != color){\n                                    this._atkPoints[i].beAttacked = true;\n                                    return this._atkPoints[i];\n                                }\n                            }else{\n                                this._atkPoints[i].beAttacked = true;\n                                return this._atkPoints[i];\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return null;\n    }\n\n    private onMagicCrystalDone():void{\n        this.getCurGrid().setCurrentState(GridStateMatch.create(this._changeItemPos));\n    }\n}\n","/**\n * 检测消除规则\n * 符合消除算法规则会消除掉\n */\n\nimport GameMath from \"../../../../../extend/utils/GameMath\";\nimport GridCommand from \"../../../commond/GridCommand\";\nimport EntityEventBase, { EntityEventType } from \"../../../event/EntityEventBase\";\nimport EntityEventChanged from \"../../../event/EntityEventChanged\";\nimport GridBase from \"../../GridBase\";\nimport GridStateBase, { GridState } from \"../GridStateBase\";\nimport GridStateDrop from \"./GridStateDrop\";\nimport GridStateLaunchGears from \"./GridStateLaunchGears\";\nimport FlyerComboWord from \"../../../entity/flyer/FlyerComboWord\";\nimport { PowerID } from \"../../../defines/PowerID\";\nimport GridStateLaunchResidentGear from \"./GridStateLaunchResidentGear\";\n\nexport default class GridStateMatch extends GridStateBase {\n\n    private _checkMatchPositions:cc.Vec2[] = [];\n    public static create(checkMatchPositions:cc.Vec2[] = []) : GridStateMatch {\n        return new GridStateMatch(checkMatchPositions);\n    }\n    constructor(checkMatchPositions:cc.Vec2[]) {\n        super(GridState.MatchItem);\n        this._checkMatchPositions = checkMatchPositions;\n    }\n\n    public enter(grid:GridBase) {\n        grid.clearAttackedPostionRecord();\n        for (let pos of this._checkMatchPositions) {\n            grid.dispatchCommand(pos, GridCommand.CheckMatch(), 0);\n        }\n        GameMath.clearArray(this._checkMatchPositions);\n        grid.progressCommand(0.001);\n        if (grid.isObstructsEmpty() && grid.isCommandListEmpty()) {\n            grid.setCurrentState(GridStateLaunchResidentGear.create());\n        }else{\n            grid.gainPower(PowerID.MatchCombo, 1);\n        }\n    }\n\n    public update(grid:GridBase, delta:number) {\n        if (grid.isObstructsEmpty() && grid.isCommandListEmpty()) {\n            grid.setCurrentState(GridStateDrop.create(this._checkMatchPositions));\n        }\n    }\n\n    public exit(grid:GridBase) {\n        this._checkMatchPositions = null;\n    }\n\n    public onEvent(grid:GridBase, event:EntityEventBase) : void {\n        if (event.getEventName() == EntityEventBase.ENTITY_EVENT_KEY) {\n            if (event.getEventType() == EntityEventType.EntityChanged) {\n                let changeEvent = event as EntityEventChanged;\n                if (changeEvent) {\n                    let checkPos = changeEvent.getEntity().getLogicalPos();\n                    let checkSize = changeEvent.getEntity().getLogicalSize();\n                    for (let row = 0; row < checkSize.height; row++) {\n                        for (let column = 0; column < checkSize.width; column++) {\n                            let changedPos = checkPos.add(cc.v2(column, row))\n                            GameMath.insertAsSet(this._checkMatchPositions, changedPos);        \n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n","import GridStateBase, { GridState } from \"../GridStateBase\";\nimport GridBase from \"../../GridBase\";\n\n\nexport default class GridStateNoMoreStep extends GridStateBase {\n\n    public static create() : GridStateNoMoreStep {\n        return new GridStateNoMoreStep();\n    }\n    constructor() {\n        super(GridState.NoMoreStep);\n    }\n    \n    public enter(grid:GridBase) {\n        grid.noMoreStep();\n    }\n}\n","/**\n * 空状态\n * 屏蔽触控\n */\n\nimport GridBase from \"../../GridBase\";\nimport GridStateBase, { GridState } from \"../GridStateBase\";\n\nexport default class GridStateNull extends GridStateBase {\n\n    public static create() : GridStateNull {\n        return new GridStateNull();\n    }\n    constructor() {\n        super(GridState.Null);\n    }\n\n    enter(entity:GridBase):void {\n        cc.log(\"onEnter\");\n    }\n\n    update(entity:GridBase, delta:number):void {\n        cc.log(\"Update:\");\n    }\n    \n    exit(entity:GridBase):void {\n        cc.log(\"Exit:\");\n    }\n\n    public onTapBegan(grid:GridBase, logicalPos:cc.Vec2) : void {\n        cc.log(\"onTapBegan:\");\n        cc.log(logicalPos);\n    }\n    \n    public onTapMoved(grid:GridBase, logicalPos:cc.Vec2) : void {\n        cc.log(\"onTapMoved:\");\n        cc.log(logicalPos);\n    }\n\n    public onTapEnded(grid:GridBase, logicalPos:cc.Vec2) : void {\n        cc.log(\"onTapEnded:\");\n        cc.log(logicalPos);\n    }\n\n    public onEvent(grid:GridBase, event:Object) : void {\n\n    }\n\n    public onRespone(grid:GridBase, event:Object) : void {\n\n    }\n\n    \n}\n","import GridStateBase, { GridState } from \"../GridStateBase\";\nimport GridBase from \"../../GridBase\";\n\nexport default class GridStatePrepare extends GridStateBase {\n\n    public static create() : GridStatePrepare {\n        return new GridStatePrepare();\n    }\n    constructor() {\n        super(GridState.Prepare);\n    }\n\n    enter(grid:GridBase):void {\n        grid.showReplayPrepareUI();\n    }\n\n    // LIFE-CYCLE CALLBACKS:\n\n    // onLoad () {}\n\n    start () {\n\n    }\n\n    // update (dt) {}\n}\n","import GridStateBase, { GridState } from \"../GridStateBase\";\nimport GridBase from \"../../GridBase\";\nimport GameMath from \"../../../../../extend/utils/GameMath\";\nimport GridStateStalemate from \"./GridStateStalemate\";\nimport ItemStateShuffle from \"../../../entity/item/state/ItemStateShuffle\";\nimport GridStateSwapNeighbour from \"./GridStateSwapNeighbour\";\nimport ItemBase from \"../../../entity/item/ItemBase\";\n\nexport default class GridStateShuffle extends GridStateBase {\n    public static create() : GridStateShuffle {\n        return new GridStateShuffle();\n    }\n\n    constructor() {\n        super(GridState.Shuffle);\n    }\n\n    public enter(grid:GridBase) {\n        let positions:cc.Vec2[] = [];\n        let itemsMap = grid.getItemsMap();\n\n        for (let key in itemsMap) {\n            let item = itemsMap[key] as ItemBase;\n            positions.push(item.getLogicalPos());\n        }\n        \n        let result = this.shuffleGrid(grid,positions);\n        \n        if (result.length <= 0) {\n            grid.setCurrentState(GridStateStalemate.create());\n        }else{\n\n            for (let info of result) {\n                let item = info.first;\n                let swapPair = info.second;\n                let fromPos = swapPair.first;\n                let toPos = swapPair.second;\n                item.setCurrentState(ItemStateShuffle.create(fromPos, toPos));\n            }\n        }\n    }\n\n    public update(grid:GridBase, delta:number) {\n        if (grid.isObstructsEmpty() && grid.isCommandListEmpty()) {\n            grid.setCurrentState(GridStateSwapNeighbour.create());\n        }\n    }\n}\n","import GridStateBase, { GridState } from \"../GridStateBase\";\nimport GridBase from \"../../GridBase\";\n\nexport default class GridStateStalemate extends GridStateBase {\n\n    public static create() : GridStateStalemate{\n        return new GridStateStalemate();\n    }\n    constructor() {\n        super(GridState.Stalemate);\n    }\n\n    public enter(grid:GridBase) {\n        grid.stalemate();\n    }\n\n}\n","import IGame from \"../../../../../base/IGame\";\nimport GameConfig from \"../../../../../define/GameConfig\";\nimport GameMath from \"../../../../../extend/utils/GameMath\";\nimport GridCommand from \"../../../commond/GridCommand\";\nimport IdentifierManager from \"../../../defines/IdentifierManager\";\nimport { PowerID } from \"../../../defines/PowerID\";\nimport ItemBase from \"../../../entity/item/ItemBase\";\nimport ItemStateSwap from \"../../../entity/item/state/ItemStateSwap\";\nimport EntityEventBase from \"../../../event/EntityEventBase\";\nimport AvailableSwapInfo from \"../../availableSwapInfo/AvailableSwapInfo\";\nimport GridBase, { GridMode } from \"../../GridBase\";\nimport GridStateBase, { GridState } from \"../GridStateBase\";\nimport GridStateCompleteBanner from \"./GridStateCompleteBanner\";\nimport GridStateMatch from \"./GridStateMatch\";\nimport GridStateNoMoreStep from \"./GridStateNoMoreStep\";\nimport GridStateShuffle from \"./GridStateShuffle\";\n\n\nexport default class GridStateSwapNeighbour extends GridStateBase {\n\n    \n    \n    public static create() : GridStateSwapNeighbour{\n        return new GridStateSwapNeighbour();\n    }\n    constructor(){\n        super(GridState.SwapNeighbour);\n    }\n    private _AIOpratedWaitDuration:number = 0;\n    private _checkPositions:cc.Vec2[] = [];\n    private _checkIndex:number = 0;\n\n    private _availableSwaps:AvailableSwapInfo[] = [];\n    private _availableSwapsSorted = false;\n    private _tipSwapIndex = 0;\n    \n    private _swapPosA:cc.Vec2 = GameMath.INVALID_LOGICAL_POSITION.clone();\n    private _swapPosB:cc.Vec2 = GameMath.INVALID_LOGICAL_POSITION.clone();\n    \n    private _itemSwaped:boolean = true;\n    private _selectedItem:ItemBase = null;\n    private _touchInterval:number = 0;\n    private _tipInterval:number = 0;\n\n    private static DOUBLE_CLICK_INTERVAL:number = 0.25;\n    private static TIP_SWAP_INTERVAL:number = 5.0;\n    private static MAX_TIP_SWAP_COUNT:number = 3;\n    \n    enter(grid:GridBase):void {\n        grid.setPowerAmount(PowerID.MatchCombo, 0);\n        if (grid.isComplete()) {\n            grid.setCurrentState(GridStateCompleteBanner.create());\n        }else {\n            if (grid.isFailed()) {\n                grid.setCurrentState(GridStateNoMoreStep.create());\n            }else{\n                let mode = grid.getMode();\n                switch (mode) {\n                    case GridMode.Normal:{\n                        if (!this.hasAvailableSwap(grid)) {\n                            grid.setCurrentState(GridStateShuffle.create());\n                        }else{\n                            this.statisticsCheckPositions(grid);\n                        }\n                    }\n                        break;\n                    case GridMode.ForceClean:\n                    case GridMode.ForceSwap:\n                    case GridMode.CrossBomb:{\n                        grid.tryEnableMode(mode);\n                        \n                    }\n                        break\n                \n                    default:\n                        break;\n                }\n                this._itemSwaped = false;\n                grid.beforePlayerOperated();\n            }\n            \n        }\n    }\n    protected statisticsCheckPositions(grid:GridBase) : void {\n        let itemsMap = grid.getItemsMap();\n        GameMath.clearArray(this._availableSwaps);\n        for (const key in itemsMap) {\n            let item = itemsMap[key] as ItemBase;\n            this._checkPositions.push(item.getLogicalPos());\n        }\n        this._checkIndex = 0;\n        this._tipSwapIndex = -1;\n        this._tipInterval = 0;\n        this._availableSwapsSorted = false;\n    }\n    protected checkAvailableSwap(grid:GridBase, pos:cc.Vec2) : void {\n        let offsets:cc.Vec2[] = [cc.v2(1, 0), cc.v2(-1, 0), cc.v2(0, 1), cc.v2(0, -1),];\n        for (let offset of offsets) {\n            let answer = this.getAvailableSwapInfo(grid, pos, pos.add(offset));\n            if (answer) {\n                this._availableSwaps.push(answer);\n            }\n        }\n    }\n\n    protected statisticsAvailableSwap(grid:GridBase) : void {\n        if (!this._itemSwaped) {\n            let startTime = new Date().getTime();\n            let checkPosCount = 0;\n            while(1) {\n                let timeDelta = new Date().getTime() - startTime;\n                if (timeDelta >= 40 && checkPosCount > 0) {\n                    break;\n                }\n\n                if (this._checkIndex >= this._checkPositions.length) {\n                    if (!this._availableSwapsSorted) {\n                        this._availableSwaps.sort(function(lhs:AvailableSwapInfo, rhs:AvailableSwapInfo):number{\n                            if (lhs.value > rhs.value) {\n                                return -1;\n                            }else{\n                                return 1;\n                            }\n                        });\n                        this._availableSwapsSorted = true;\n                    }\n                    break;\n                }\n\n                this.checkAvailableSwap(grid, this._checkPositions[this._checkIndex]);\n                this._checkIndex += 1;\n                checkPosCount += 1;\n            }\n        }\n    }\n    private tipSwap(grid:GridBase) : void {\n        this._tipInterval = 0;\n        if (this._availableSwaps.length <= 0) {\n            return;\n        }\n        \n        IGame.playAudio(IdentifierManager.getInstance().getMatchAudioFilePath('hint'));\n        let newIndex = ((this._tipSwapIndex + 1) % GridStateSwapNeighbour.MAX_TIP_SWAP_COUNT) % this._availableSwaps.length;\n        this.unTipSwap(grid);\n        this._tipSwapIndex = newIndex;\n        let swapInfo = this._availableSwaps[this._tipSwapIndex];\n        let item = grid.getItemAtLogicalPos(swapInfo.swapPair.first);\n        item.tipSlide(swapInfo.swapPair.second);\n\n        for (let pos of swapInfo.linkedPositions) {\n            if (!pos.equals(swapInfo.swapPair.second)) {\n                let item = grid.getItemAtLogicalPos(pos);\n                if (item) {\n                    item.shake();\n                }\n            }\n        }\n    }\n    private unTipSwap(grid:GridBase) {\n        if (this._availableSwaps.length <= 0) {\n            return;\n        }\n\n        if (this._tipSwapIndex < 0) {\n            return;\n        }\n\n        let swapInfo = this._availableSwaps[this._tipSwapIndex];\n        let item = grid.getItemAtLogicalPos(swapInfo.swapPair.first);\n        if (item) {\n            item.untipSlide();\n        }\n        for (let pos of swapInfo.linkedPositions) {\n            if (!pos.equals(swapInfo.swapPair.second)) {\n                let item = grid.getItemAtLogicalPos(pos);\n                if (item) {\n                    item.unshake();\n                }\n            }\n        }\n        this._tipInterval = 0;\n\n    }\n    protected canEliminateBySwapAtPos(grid:GridBase, logicalPosA:cc.Vec2, logicalPosB:cc.Vec2) {\n        let rootItem = grid.getItemAtLogicalPos(logicalPosA);\n        if (!rootItem) {\n            return false;\n        }\n        return rootItem.canExcuteCommand(GridCommand.NeighbourSwap(logicalPosB));\n    }\n\n    private trySwapItem(grid:GridBase, logicalPosA:cc.Vec2, logicalPosB:cc.Vec2) : boolean {\n        if (this._itemSwaped || !grid.isObstructsEmpty()) {\n            return false;\n        }\n\n        if (this.canSwapItem(grid, logicalPosA, logicalPosB)) {\n            this.unTipSwap(grid);\n            this._swapPosA = logicalPosA;\n            this._swapPosB = logicalPosB;\n\n            let itemA = grid.getItemAtLogicalPos(this._swapPosA);\n            let itemB = grid.getItemAtLogicalPos(this._swapPosB);\n            grid.swapItem(this._swapPosA, this._swapPosB);\n\n            itemA.setCurrentState(ItemStateSwap.create(this._swapPosA, this._swapPosB));\n            itemB.setCurrentState(ItemStateSwap.create(this._swapPosB, this._swapPosA));\n\n            if (this._selectedItem) {\n                this._selectedItem.unselected();\n                this._selectedItem = null;\n            }\n            this._touchInterval = 0;\n            this._itemSwaped = true;\n            return true;\n        }\n        return false;\n    }\n    protected afterSwap(grid:GridBase) {\n        if (!this._itemSwaped) {\n            return;\n        }\n\n        if (this.canEliminateBySwapAtPos(grid, this._swapPosA, this._swapPosB) || \n            this.canEliminateBySwapAtPos(grid, this._swapPosB, this._swapPosA)) {\n                grid.setPowerAmount(PowerID.DyeingItem, 1);\n                grid.setPowerAmount(PowerID.SpreadHoney, 1);\n                grid.setPowerAmount(PowerID.ConveyerMove, 1);\n                \n                grid.setPowerAmount(PowerID.HoneyResist, 0);\n                grid.gainPower(PowerID.UsedSwap, 1);\n                grid.updateStepBarUIWithDelta(-1);\n                grid.lossPower(PowerID.AvailableSwap, 1);\n\n                let commandA = GridCommand.NeighbourSwap(this._swapPosB);\n                let commandB = GridCommand.NeighbourSwap(this._swapPosA);\n                \n                grid.dispatchCommand(this._swapPosB, commandB, 0);\n                grid.dispatchCommand(this._swapPosA, commandA, 0);\n                \n                grid.onPlayerOperated();\n                grid.setCurrentState(GridStateMatch.create());\n                \n        }else{\n            let itemA = grid.getItemAtLogicalPos(this._swapPosA);\n            let itemB = grid.getItemAtLogicalPos(this._swapPosB);\n            grid.swapItem(this._swapPosA, this._swapPosB);\n\n            itemA.setCurrentState(ItemStateSwap.create(this._swapPosA, this._swapPosB));\n            itemB.setCurrentState(ItemStateSwap.create(this._swapPosB, this._swapPosA));\n            IGame.playAudio(IdentifierManager.getInstance().getMatchAudioFilePath('prohibition_exchange'));\n\n            this._selectedItem = null;\n            this._touchInterval = 0;\n            this._itemSwaped = false;\n        }\n    }\n    update(grid:GridBase, delta:number):void {\n\n        \n        this.statisticsAvailableSwap(grid);\n        if (!this._itemSwaped && this._tipInterval < GridStateSwapNeighbour.TIP_SWAP_INTERVAL) {\n            this._tipInterval += delta;\n            if (this._tipInterval >= GridStateSwapNeighbour.TIP_SWAP_INTERVAL) {\n                this.tipSwap(grid);\n            }\n        }\n        \n        if (this._itemSwaped && grid.isObstructsEmpty()) {\n            this.afterSwap(grid);    \n        }\n\n        this._AIOpratedWaitDuration += delta;\n        if (this._AIOpratedWaitDuration >= 0 && GameConfig.EnableAutoPilot && !this._itemSwaped && grid.isObstructsEmpty()) {\n            if (this._availableSwapsSorted) {\n                let swapIndex = GameMath.randomInt(0, this._availableSwaps.length - 1);\n                let swapInfo = this._availableSwaps[swapIndex];\n                let swapPosA = swapInfo.swapPair.first;\n                let swapPosB = swapInfo.swapPair.second;\n                this.trySwapItem(grid, swapPosA, swapPosB);\n            }\n        }\n\n    }\n    exit(grid:GridBase):void {\n        this._checkPositions = null;\n        this._availableSwaps = null;\n        this._swapPosA = null;\n        this._swapPosB = null;\n        this._selectedItem = null;\n    }\n    \n    public onTapBegan(grid:GridBase, logicalPos:cc.Vec2) : void {\n\n        if (this._itemSwaped || !grid.isObstructsEmpty()) {\n            return;\n        }\n\n        let item = grid.getItemAtLogicalPos(logicalPos);\n        if (!item) {\n            return;\n        }\n        \n        if (item === this._selectedItem) {\n            if (this._touchInterval <= GridStateSwapNeighbour.DOUBLE_CLICK_INTERVAL) {\n                \n            }else{\n                this._touchInterval = 0;\n            }\n        }else{\n            if (this._selectedItem) {\n                let fromPos = this._selectedItem.getLogicalPos();\n                if (!this.trySwapItem(grid, fromPos, logicalPos)) {\n                    if (item.canSwap()) {\n                        this._selectedItem.unselected();\n                        item.selected();\n                        this._selectedItem = item;\n                        this._touchInterval = 0;\n                    }\n                }\n            }else{\n                if (item.canSwap()) {\n                    item.selected();\n                    this._selectedItem = item;\n                    this._touchInterval = 0;\n                }\n            }\n        }\n    }\n    public onTapMoved(grid:GridBase, logicalPos:cc.Vec2) : void {\n        if (this._selectedItem == null) {\n            return;\n        }\n\n        if (this._itemSwaped || !grid.isObstructsEmpty()) {\n            return;\n        }\n        \n        let fromPos = this._selectedItem.getLogicalPos();\n        this.trySwapItem(grid, fromPos, logicalPos);\n        \n    }\n    public onTapEnded(grid:GridBase, logicalPos:cc.Vec2) : void {\n\n    }\n    public onEvent(grid:GridBase, event:EntityEventBase) : void {\n\n    }\n    public onRespone(grid:GridBase, event:Object) : void {\n\n    }\n    public canChangeState() : boolean {\n        return true;\n    }\n    public canPause() : boolean {\n        return true;\n    }\n}\n","\n\n\nexport default class Heap<T>  {\n    private elements:T[] = [];\n    private compareFunc:(a: T, b: T) => boolean = null;\n    private equalsFunc:(a: T, b: T) => boolean = null;\n    \n    constructor(compareFunc:(a: T, b: T) => boolean, equalsFunc:(a: T, b: T) => boolean){\n        this.compareFunc = compareFunc;\n        this.equalsFunc = equalsFunc;\n    }\n\n    public getElements():T[]{\n        return this.elements\n    }\n\n    public isEmpty():boolean{\n        return this.elements.length <= 0;\n    }\n\n    public length():number{\n        return this.elements.length;\n    }\n\n    public peek():T{\n        return this.elements[0];\n    }\n\n    public leftChildIndexFromIndex(index:number):number{\n        return index * 2 + 1\n    }\n\n    public rightChildIndexFromIndex(index:number):number{\n        return index * 2 + 2\n    }\n\n    public parentIndexFormIndex(index:number):number{\n        return Math.floor((index - 1) / 2); \n    }\n\n    public indexOf(element:T):number{\n        return this._indexOf(element,0);\n    }\n\n    public push(element:T):void{\n        this.elements.push(element);\n        this.shiftUpFromIndex(this.length() - 1);\n    }\n\n    public pop():T{\n        if (!this.isEmpty()) {\n            let temp = this.elements[0];\n            this.elements[0] = this.elements[this.length() - 1];\n            this.elements[this.length() - 1] = temp;\n            let result = this.elements.pop();\n            this.shiftDownFormIndex(0);\n            return result;\n        }\n        return null\n    }\n\n    public removeAtIndex(index:number):T{\n        if (index < this.length()){\n            let temp = this.elements[index];\n            this.elements[index] = this.elements[this.length() - 1];\n            this.elements[this.length() - 1] = temp;\n            let removeElement = this.elements.pop();\n            this.shiftDownFormIndex(index);\n            this.shiftUpFromIndex(index);\n            return removeElement;\n        }\n        return null;\n    }\n\n//     func setValue(of element:Element, at index:Int) {\n//         guard index < self.count - 1 else {\n//             return\n//         }\n        \n        \n//         let oldValue = self.elements[index]\n//         self.elements[index] = element\n//         print(self)\n//         if self.compareFunc(oldValue, element) {\n//             self.shiftDown(from: index)\n//         }else{\n//             self.shiftUp(from: index)\n//         }\n//         print(self)\n//     }\n\n    private _indexOf(element:T, fromIndex:number):number{\n        if (fromIndex >= this.length()) {\n            return -1;\n        }\n\n        if (this.compareFunc(element, this.elements[fromIndex])) {\n            return - 1;\n        }\n        \n        if (this.equalsFunc(element, this.elements[fromIndex])){\n            return fromIndex;\n        }\n        \n        let leftSearchIndex = this._indexOf(element, this.leftChildIndexFromIndex(fromIndex))\n        if (leftSearchIndex != -1) {\n            return leftSearchIndex\n        }\n\n        let rightSearchIndex = this._indexOf(element, this.rightChildIndexFromIndex(fromIndex))\n        if (rightSearchIndex != -1) {\n            return rightSearchIndex\n        }\n        return -1;\n    }\n\n    private shiftUpFromIndex(index:number){\n        let parentIndex = this.parentIndexFormIndex(index);\n        if (parentIndex >= 0 && this.compareFunc(this.elements[index], this.elements[parentIndex])) {\n            let temp = this.elements[index];\n            this.elements[index] = this.elements[parentIndex];\n            this.elements[parentIndex] = temp;\n            this.shiftUpFromIndex(parentIndex);\n        }\n    }\n\n    private shiftDownFormIndex(index:number){\n        let candidate = index;\n        let leftChildIndex = this.leftChildIndexFromIndex(index);\n        if (leftChildIndex < this.length() && this.compareFunc(this.elements[leftChildIndex], this.elements[candidate])) {\n            candidate = leftChildIndex\n        }\n\n        let rightChildIndex = this.rightChildIndexFromIndex(index);\n        if (rightChildIndex < this.length() && this.compareFunc(this.elements[rightChildIndex], this.elements[candidate])) {\n            candidate = rightChildIndex\n        }\n\n        if (candidate == index) {\n            return\n        }\n        let temp = this.elements[index];\n        this.elements[index] = this.elements[candidate];\n        this.elements[candidate] = temp;\n        this.shiftDownFormIndex(candidate);\n    }\n\n}\n","import AudioManager from \"../extend/audio/AudioManager\";\n\n/***\n * [static]init()                   #游戏启动加载\n * [static]getLanguage()            #根据语言包里的键值取语言\n * [static]startAudio()             #开启报放\n * [static]startAudio()             #停止报放\n * [static]showTip()                #弹出tis提示\n * [static]HttpTo()                 #http请求\n * [static]ShowPanel()              #弹出面板\n */\n\n\n/**\n * Created by Goku on 2018/07/27.\n * 通用方法\n */\nexport default class IGame{\n\n    /*\n    * 游戏启动加载\n    * @key：键值\n    * @replaceArry：要替换的内容，格式为：[\"你好\"，100]\n    */\n    public static init():boolean{\n        return true;\n    }\n\n    /*\n    * 播放普通音效\n    * @key：键值\n    * @replaceArry：要替换的内容，格式为：[\"你好\"，100]\n    */\n    public static playAudio( Music:string, Volume:number = 1 , loop:boolean = false, succFunc:Function = null){\n        return AudioManager.getInstance().play( Music, Volume, loop, false, succFunc);\n    }\n\n    /*\n    * 播放背景音效\n    * @key：键值\n    * @replaceArry：要替换的内容，格式为：[\"你好\"，100]\n    */\n    public static playAudioBGM( Music:string, Volume:number = 1, succFunc:Function = null){\n        AudioManager.getInstance().play( Music, 1, true, true , succFunc);\n    }\n\n    public static stopBGM() {\n        return AudioManager.getInstance().stopBGM();\n    }\n\n    /*\n    * 结束报放\n    * @key：键值\n    * @replaceArry：要替换的内容，格式为：[\"你好\"，100]\n    */\n    public static stopAudio( MusicId:number ):boolean{\n        return AudioManager.getInstance().stop( MusicId );\n    }\n\n    /*\n    * 结束报放\n    * @key：键值\n    * @replaceArry：要替换的内容，格式为：[\"你好\"，100]\n    */\n    public static stopAudioAll( ):boolean{\n        return AudioManager.getInstance().stopAll();\n    }\n\n}","import { GameCurrencyType } from \"../../../define/GameCurrencyType\";\nimport { CollectionID, CollectionIDManager } from \"./CollectionID\";\nimport EntityGroupIDManager, { EntityGroupID } from \"./EntityGroupID\";\nimport { EntityColor, EntityID, EntityIDManager, HurtAnimationInfo } from \"./EntityID\";\nimport ItemInfo from \"./ItemInfo\";\nimport ItemInfoManager from \"./ItemInfoManager\";\nimport { KindID, KindIDManager } from \"./KindID\";\nimport CollectionGroupIDManager, { CollectionGroupID } from \"./CollectionGroupID\";\n\nexport default class IdentifierManager {\n    //单例对象\n    private static instance:IdentifierManager = null;\n    public static getInstance():IdentifierManager{\n        if(this.instance == null){\n            this.instance = new IdentifierManager();\n        }\n        return this.instance;\n    }\n\n    constructor(){\n        CollectionIDManager.getInstance();\n        EntityIDManager.getInstance();\n        EntityGroupIDManager.getInstance();\n        KindIDManager.getInstance();\n        ItemInfoManager.getInstance();\n    }\n\n    public getColorWithEntityColor(color:EntityColor) : cc.Color {\n        let result = cc.Color.WHITE;\n        switch (color) {\n            case EntityColor.Red:\n                result = cc.color(0xFF, 0x00, 0x00, 0xFF);\n                break;\n            case EntityColor.Green:\n                result = cc.color(0x00, 0xFF, 0x07, 0xFF);\n                break;\n            case EntityColor.Blue:\n                result = cc.color(0x00, 0x89, 0xFF, 0xFF);\n                break;\n            case EntityColor.Yellow:\n                result = cc.color(0xFF, 0xFF, 0x00, 0xFF);\n                break;\n            case EntityColor.Orange:\n                result = cc.color(0xFF, 0x7C, 0x00, 0xFF);\n                break;\n            case EntityColor.Purple:\n                result = cc.color(0xFF, 0x19, 0xC1, 0xFF);\n                break;\n            default:\n                break;\n        }\n        return result;\n    }\n\n    public getCollectionIDFromString(name:string) : CollectionID {\n        return CollectionIDManager.getInstance().getCollectionIDFromString(name);\n    }\n\n    public getCollectionNameFromID(collectionID:CollectionID) : string {\n        return CollectionIDManager.getInstance().getCollectionNameFromID(collectionID);\n    }\n\n    public getFrameNameFromCollectionID(collectionID:CollectionID) : string {\n        return CollectionIDManager.getInstance().getFrameNameFromCollectionID(collectionID);\n    }\n\n    public getCollectionGroupIDFromString(name:string) : CollectionGroupID {\n        return CollectionGroupIDManager.getInstance().getCollectionGroupIDFromString(name);\n    }\n\n    public getCollectionIDsFromCollectionGroupID(collectionGroupID:CollectionGroupID) : CollectionID[] {\n        return CollectionGroupIDManager.getInstance().getCollectionIDsFromCollectionGroupID(collectionGroupID);\n    }\n\n    public getEntityIDFromString(name:string) : EntityID {\n        return EntityIDManager.getInstance().getEntityIDFromString(name);\n    }\n\n    public getFrameNameFromEntityID(entityID:EntityID) : string {\n        return EntityIDManager.getInstance().getFrameNameFromEntityID(entityID);\n    }\n\n    public getHurtAnimationInfoPathFromEntityID(entityID:EntityID) : HurtAnimationInfo {\n        return EntityIDManager.getInstance().getHurtAnimationInfoFromEntityID(entityID);\n    }\n    \n    public getEntityIDFromKindID(kindID:KindID) : EntityID {\n        return KindIDManager.getInstance().getEntityIDFromKindID(kindID);\n    }\n\n    public getEntityColorWithEntityID(entityID:EntityID) : EntityColor {\n        return EntityIDManager.getInstance().getEntityColorWithEntityID(entityID);\n    }\n    \n    public needLayoutGrassFromKindID(kindID:KindID) : boolean {\n        return KindIDManager.getInstance().needLayoutGrassFromKindID(kindID);\n    }\n\n    public getEntityGroupIDFromString(name:string) : EntityGroupID {\n        return EntityGroupIDManager.getInstance().getEntityGroupIDFromString(name);\n    }\n    \n    public getFrameNameFromEntityGroupID(groupID:EntityGroupID) : string {\n        return EntityGroupIDManager.getInstance().getFrameNameFromEntityGroupID(groupID);\n    }\n\n    public getEntityIDsFromEntityGroupID(groupID:EntityGroupID) : EntityID[] {\n        return EntityGroupIDManager.getInstance().getEntityIDsFromEntityGroupID(groupID);\n    }\n   \n    public getEntityGroupIDFromEntityID(entityID:EntityID) : EntityGroupID {\n        return EntityGroupIDManager.getInstance().getEntityGroupIDFromEntityID(entityID);\n    }\n\n    public getItemInfoFromItemID(itemID:GameCurrencyType) : ItemInfo {\n        return ItemInfoManager.getInstance().getItemInfoFromItemID(itemID);\n    }\n\n    public getItemIDFromName(name:string) : GameCurrencyType {\n        return ItemInfoManager.getInstance().getItemIDFromName(name);\n    }\n\n    public getDefaultButterflyPriorityFromEntityID(entityID:EntityID) : number {\n        return EntityIDManager.getInstance().getDefaultButterflyPriorityFromEntityID(entityID);\n    }\n\n    public getCorrespondingNormlaEntityID(entityID:EntityID) : EntityID {\n        return EntityIDManager.getInstance().getCorrespondingNormlaEntityID(entityID);\n    }\n\n    public phraseTokens(types:string) : string[] {\n        let result = types.split('|');\n        return result;\n    }\n\n    public phraseKeyValuePairs(keyString:string, valueString:string) : Object {\n        let result:Object = {};\n        let keys = this.phraseTokens(keyString);\n        let values = this.phraseTokens(valueString);\n        let count = keys.length;\n        for (let index = 0; index < count; index++) {\n            let key = keys[index];\n            let value = values[index];\n            result[key] = value;\n        }\n        return result;\n    }\n\n    public getMatchAudioFilePath(fileName:string) : string{\n        return 'audio/match/' + fileName;\n    }\n\n}\n","\nexport class NodeID  {\n\n    // 全屏\n    public static WholeWindow:string = 'WholeWindow';\n\n    //货币栏\n    public static Common_CurrencyBar:string  = 'Common_CurrencyBar';\n    // 主界面-准备游戏按钮\n    public static MainScene_PrepareButton:string  = 'MainScene_PrepareButton';\n    // 主界面-宠物养成条\n    public static MainScene_PetTrainBar:string  = 'MainScene_PetTrainBar';\n    // 主界面-喂食按钮\n    public static MainScene_FeedButton:string  = 'MainScene_FeedButton';\n    // 主界面-洗澡按钮\n    public static MainScene_BathButton:string  = 'MainScene_BathButton';\n    // 主界面-睡觉按钮\n    public static MainScene_SleepButton:string  = 'MainScene_SleepButton';\n    // 主界面-掘金按钮\n    public static MainScene_DigGoldButton:string  = 'MainScene_DigGoldButton';\n    // 主界面-宠物信息面板\n    public static MainScene_PetInformationPanel:string  = 'MainScene_PetInformationPanel';\n    // 主界面-宠物升级按钮\n    public static MainScene_UpgradeButton:string  = 'MainScene_UpgradeButton';\n    // 主界面-宠物列表按钮\n    public static MainScene_PetHouseButton:string  = 'MainScene_PetHouseButton';\n\n\n    // 宠物列表面板-喂食按钮\n    public static PetListPanel_FeedButton:string  = 'PetListPanel_FeedButton';\n    // 宠物列表面板-洗澡按钮\n    public static PetListPanel_BathButton:string  = 'PetListPanel_BathButton';\n    // 宠物列表面板-睡觉按钮\n    public static PetListPanel_SleepButton:string  = 'PetListPanel_SleepButton';\n    // 宠物列表面板-关闭按钮\n    public static PetListPanel_CloseButton:string  = 'PetListPanel_CloseButton';\n\n\n    // 准备面板-开始游戏按钮 \n    public static StartGamePanel_StartButton:string  = 'StartGamePanel_StartButton';\n    // 准备面板-增强道具 一横向一竖向\n    public static StartGamePanel_PowerupBeginLine:string  = 'StartGamePanel_PowerupBeginLine';\n    // 准备面板-增强道具 一交叉一范围\n    public static StartGamePanel_PowerupBeginRange:string  = 'StartGamePanel_PowerupBeginRange';\n    // 准备面板-增强道具3\n    public static StartGamePanel_PowerupBeginRainbow:string  = 'StartGamePanel_PowerupBeginRainbow';\n\n\n    // 三消界面-锤子道具按钮 \n    public static MatchScene_HammerButton:string  = 'MatchScene_HammerButton';\n    // 三消界面-炸弹道具按钮 \n    public static MatchScene_BombButton:string  = 'MatchScene_BombButton';\n    // 三消界面-交换道具按钮 \n    public static MatchScene_SwapButton:string  = 'MatchScene_SwapButton';\n    // 三消界面-目标栏\n    public static MatchScene_TargetBar:string  = 'MatchScene_TargetBar';\n    // 三消界面-狗粮图标\n    public static MatchScene_FoodIcon:string  = 'MatchScene_FoodIcon';\n    // 三消界面-香皂图标\n    public static MatchScene_SoapIcon:string  = 'MatchScene_SoapIcon';\n    // 三消界面-眼罩图标\n    public static MatchScene_EyepatchIcon:string  = 'MatchScene_EyepatchIcon';\n    // 三消界面-锄头图标\n    public static MatchScene_HoeIcon:string  = 'MatchScene_HoeIcon';\n    // 三消界面-金币图标\n    public static MatchScene_CoinIcon:string  = 'MatchScene_CoinIcon';\n    // 三消界面-香皂和眼罩图标\n    public static MatchScene_SoapAndEyepatchIcon:string  = 'MatchScene_SoapAndEyepatchIcon';\n    \n    // 喂食界面-退出按钮\n    public static FeedScene_QuitButton:string  = 'FeedScene_QuitButton';\n    // 主界面-宠物信息面板\n    public static FeedScene_PetInformationPanel:string  = 'FeedScene_PetInformationPanel';\n\n\n    // 洗澡界面-退出按钮\n    public static BathScene_QuitButton:string  = 'BathScene_QuitButton';\n    // 主界面-宠物信息面板\n    public static BathScene_PetInformationPanel:string  = 'BathScene_PetInformationPanel';\n\n\n    // 睡觉界面-退出按钮\n    public static SleepScene_QuitButton:string  = 'SleepScene_QuitButton';\n    // 主界面-宠物信息面板\n    public static SleepScene_PetInformationPanel:string  = 'SleepScene_PetInformationPanel';\n    \n\n    // 掘金界面-锄头数量条\n    public static DigGoldScene_HoeAmountBar:string  = 'DigGoldScene_HoeAmountBar';\n    // 掘金界面-掘金列表第一项\n    public static DigGoldScene_GoldListItem1:string  = 'DigGoldScene_GoldListItem1';\n    // 掘金界面-宠物列表第一项\n    public static DigGoldScene_DogListItem1:string  = 'DigGoldScene_DogListItem1';\n    // 掘金界面-选择宠物列表第一项花费详细条\n    public static DigGoldScene_SelectDogCostBar:string  = 'DigGoldScene_SelectDogCostBar';\n    // 掘金界面-选择宠物列表第一项掘金按钮\n    public static DigGoldScene_SelectDogDigButton:string  = 'DigGoldScene_SelectDogDigButton';\n    // 掘金界面-退出按钮\n    public static DigGoldScene_QuitButton:string  = 'DigGoldScene_QuitButton';\n    // 掘金界面-领取奖励按钮\n    public static DigGoldScene_ReceiveRewardButton:string  = 'DigGoldScene_ReceiveRewardButton';\n\n\n\n    // 升级面板-宠物属性提升\n    public static UpgradePanel_PropertyBar:string  = 'UpgradePanel_PropertyBar';\n    // 升级面板-关闭按钮\n    public static UpgradePanel_TerminateButton:string  = 'UpgradePanel_TerminateButton';\n}\n\nexport class IdentifyNodeRegistData{\n    public retainCount:number = 0;\n    public node:cc.Node = null\n\n    public static create(count:number, node:cc.Node){\n        let result = new IdentifyNodeRegistData()\n        result.retainCount = count;\n        result.node = node;\n        return result;\n    }\n}\n\nexport default class IdentifyNodeManager  {\n\n    private static instance:IdentifyNodeManager = null;\n    public static getInstance():IdentifyNodeManager{\n        if(this.instance == null){\n            this.instance = new IdentifyNodeManager();\n        }\n        return this.instance;\n    }\n    private _nodeMap:Object = {};\n    constructor(){   \n       \n    }\n\n    public regist(identifier:string, node:cc.Node) {\n        if (identifier && identifier != '') {\n            if (this._nodeMap.hasOwnProperty(identifier)) {\n                let oldData = this._nodeMap[identifier] as IdentifyNodeRegistData;\n                oldData.retainCount += 1\n            }else{\n                this._nodeMap[identifier] = IdentifyNodeRegistData.create(1, node);\n            }\n        }\n    }\n\n    public logout(identifier:string) {\n        if (identifier != '') {\n            let data = this._nodeMap[identifier] as IdentifyNodeRegistData\n            if (data) {\n                data.retainCount -= 1\n                if (data.retainCount <= 0) {\n                    delete this._nodeMap[identifier]; \n                }\n            }\n        }\n    }\n\n    public getNode(identifier:string) : cc.Node {\n        if (identifier == NodeID.WholeWindow) {\n            return cc.find(\"Canvas\");\n        }else{\n            let data = this._nodeMap[identifier] as IdentifyNodeRegistData\n            if (data) {\n                return data.node\n            }else{\n                return null\n            }\n        }\n    }\n}\n","import GameMath from \"../../../../../extend/utils/GameMath\";\nimport { CollectionID } from \"../../../defines/CollectionID\";\nimport { EntityID, EntityColor, EntityCleanOption } from \"../../../defines/EntityID\";\nimport TMXConfigInfoKeys from \"../../../defines/TMXConfigInfoKeys\";\nimport GridBase from \"../../../grid/GridBase\";\nimport ItemBase, { ItemType } from \"../ItemBase\";\nimport EntityPrefabNodePool from \"../../EntityPrefabNodePool\";\nimport FlyerAnimation, { FlyerAnimationType } from \"../../flyer/FlyerAnimation\";\nimport { GameCurrencyType } from \"../../../../../define/GameCurrencyType\";\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class ItemBalloon extends ItemBase {\n\n    private _curPostal:cc.Vec2 = cc.v2(-1, -1);\n    private _nextLevelId:string = '';\n\n    public static create(grid:GridBase):ItemBalloon{\n\n        let className = 'ItemBalloon';\n        let prefabFileName = 'match_scene/prefab/entity/item/ItemBalloon';\n        let pool = EntityPrefabNodePool.getInstance();\n        let component = pool.getPrefabNodeWithFileNameAndClassName(prefabFileName, className) as ItemBalloon;\n        if (component) {\n            component.init(grid); \n            return component;       \n        }\n        return null;\n    }\n\n    public clone():ItemBalloon {\n        let item = ItemBalloon.create(this.getGrid());\n        return item;\n    }\n\n    public setCurPostal(val:cc.Vec2):void{\n        this._curPostal = val;\n    }\n\n    public getCurPostal():cc.Vec2{\n        return this._curPostal;\n    }\n\n    public setNextLevelId(val:string):void{\n        this._nextLevelId = val;\n    }\n\n    public getNextLevelId():string{\n        return this._nextLevelId;\n    }\n    \n    public getProducedTrainSupplyMaps() : Object {\n        return {};\n    }\n\n    public getCollectionID():CollectionID{\n        return CollectionID.ItemBalloon;\n    }\n\n    public getEntityID():EntityID{\n        return EntityID.ItemBalloon;\n    }\n\n    public getScore():number{\n        return 100;\n    }\n\n    public dealWithConfigMap(configMap:Object):void{\n        super.dealWithConfigMap(configMap);\n        if(configMap[TMXConfigInfoKeys.CFG_POSTAL_VEC]){\n            this.setCurPostal(GameMath.getVec2FromConfigString(configMap[TMXConfigInfoKeys.CFG_POSTAL_VEC]));\n        }\n\n        if(configMap[TMXConfigInfoKeys.CFG_NEXT_MAP_ID]){\n            this.setNextLevelId(configMap[TMXConfigInfoKeys.CFG_NEXT_MAP_ID]);\n        }\n    }\n\n    protected init(grid:GridBase){\n        super.initItem(grid, ItemType.Balloon);\n        this._curPostal = cc.v2(-1, -1);\n        this._nextLevelId = '';\n    }\n\n    \n\n    protected _canDrop():boolean{\n        return  false;\n    }\n\n    protected _canSwap():boolean{\n        return false;\n    }\n\n    protected _canMatch():boolean{\n        return false;\n    }\n\n    protected _canCleanByNeighbour(color:EntityColor):boolean{\n        return false;\n    }\n\n    protected _canCleanByBomb(cleanColor:EntityColor):boolean{\n        return false;\n    }\n\n    protected _canCleanByTerminate(cleanColor:EntityColor):boolean{\n        return true;\n    }\n\n    protected _onClean(cleanOption:EntityCleanOption) : void {\n        this.getGrid().gainScoreWithEntity(this);\n        this.setVisible(false);\n        this.progressDeathWish(cleanOption);\n        this.selfDestory();\n        let flyer = FlyerAnimation.createAnimationWithType(this.getGrid(), FlyerAnimationType.CommonHurt);\n        this.getGrid().setFlyerAtLogicalPos(flyer, this.getLogicalPos());\n        flyer.node.zIndex = this.getTopZOrder();\n    }\n\n    onDestroy() {\n        super.onDestroy();\n        this._curPostal = null;\n        this._nextLevelId = null;\n    }\n}\n","import GameMath from \"../../../../extend/utils/GameMath\";\nimport GridCommand, { GridCommandType } from \"../../commond/GridCommand\";\nimport { EntityChangeOption, EntityCleanOption, EntityCleanType, EntityColor, EntityID, EntityType, EntityChargeOption } from \"../../defines/EntityID\";\nimport GridBase from \"../../grid/GridBase\";\nimport EntityBase from \"../EntityBase\";\nimport ParasiteBase from \"../parasite/ParasiteBase\";\nimport { CollectionID } from \"../../defines/CollectionID\";\nimport { ItemBombType } from \"./color/bomb/ItemBombBase\";\nimport { GameCurrencyType } from \"../../../../define/GameCurrencyType\";\n//import { ItemBombFactory } from \"./color/bomb/ItemBombFactory\";\n\n// Learn TypeScript:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/typescript.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/typescript.html\n// Learn Attribute:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html\n\nexport enum ItemType {\n    None = 0,\n    Normal,          //基础\n    EffectBomb,         //炸弹\n    Block,              //砖块\n    Doughnut,           //甜甜圈\n    MagicCrystal,       //魔法水晶\n    Bone,               //骨头\n    Mower,              //割草机\n    Chestnut,           //坚果\n    Puppy,              //小狗\n    DogHouse,           //狗屋\n    DogPaw,             //狗爪\n    Balloon,            //热气球\n    HoneyComb,          //蜂巢\n    JamBottle,          //果酱瓶\n    ItemWatermelon,     //西瓜拼盘\n    ItemFireWormBottle, //萤火虫\n    FruitCake,          //水果蛋糕\n    Fireworks,          //烟花\n    Statue,             //雕像      \n};\n\nconst { ccclass, property } = cc._decorator;\n\n@ccclass\nexport default class ItemBase extends EntityBase {\n\n    private _itemType: ItemType = ItemType.None;\n    public getItemType(): ItemType {\n        return this._itemType;\n    }\n\n    public getProducedTrainSupplyMaps(): Object {\n        let result = {};\n        result[GameCurrencyType.GoldCoin] = 1;\n        return result;\n    }\n\n    public getButterflyPriority(color: EntityColor, layoutGrass: boolean): number {\n        let grid = this.getGrid();\n        if (grid.isTargetCollectionID(CollectionID.ItemBone) &&\n            this.canCleanByBomb(color)) {\n            let checkPos = this.getLogicalPos().clone();\n            while (1) {\n                let cell = grid.getCellAtLogicalPos(checkPos);\n                if (cell) {\n                    if (cell.getIsWormholeExit()) {\n                        checkPos = cell.getWormholeSource().clone();\n                    } else {\n                        checkPos.addSelf(cc.v2(0, 1));\n                    }\n                } else {\n                    break;\n                }\n                let item = grid.getItemAtLogicalPos(checkPos);\n                if (item && item.getItemType() == ItemType.Bone) {\n                    return 1;\n                }\n            }\n        }\n        return super.getButterflyPriority(color, layoutGrass);\n    }\n\n    public getTopParasite(): ParasiteBase {\n        let grid = this.getGrid();\n        let occupyArea = this.getOccupyArea();\n        for (let row = occupyArea.yMin; row < occupyArea.yMax; row++) {\n            for (let column = occupyArea.xMin; column < occupyArea.xMax; column++) {\n                let parasite = grid.getParasiteAtLogicalPos(cc.v2(column, row));\n                if (parasite) {\n                    return parasite;\n                }\n            }\n        }\n\n        return null;\n    }\n\n    public canLink(item: ItemBase): boolean {\n        if (!item) {\n            return false;\n        }\n\n        if (!item.canMatch()) {\n            return false;\n        }\n\n        if (!this.canMatch()) {\n            return false;\n        }\n\n        let color = this.getEntityColor();\n        if (color >= EntityColor.Begin && color <= EntityColor.End) {\n            return item.getEntityColor() == color;\n        }\n        return false;\n    }\n    /**\n     * 获取该元素为中心，联结在一起的元素数组\n     */\n    public getLinkedPositions(): cc.Vec2[] {\n        let result: cc.Vec2[] = [];\n        if (!this.canMatch()) {\n            return result;\n        }\n\n        let linkedPos: cc.Vec2[] = [this.getLogicalPos()];\n        let moveOffsets: cc.Vec2[] = [cc.v2(1, 0), cc.v2(-1, 0), cc.v2(0, 1), cc.v2(0, -1)];\n\n        let grid = this.getGrid();\n\n        for (let index = 0; index < linkedPos.length; index++) {\n            let currentPos = linkedPos[index];\n\n            for (let offset of moveOffsets) {\n                let checkPos = currentPos.add(offset);\n\n                if (GameMath.indexOf(linkedPos, checkPos) != -1) {\n                    continue;\n                }\n\n                let checkItem = grid.getItemAtLogicalPos(checkPos);\n                if (checkItem && this.canLink(checkItem)) {\n                    linkedPos.push(checkPos);\n                }\n            }\n        }\n        linkedPos.sort(function (infoA: cc.Vec2, infoB: cc.Vec2): number {\n            if (GameMath.vec2Less(infoA, infoB)) {\n                return -1;\n            } else {\n                return 1;\n            }\n        });\n        GameMath.filterInvalidMathPositions(linkedPos);\n        return linkedPos;\n    }\n\n    public canDrop(): boolean {\n        let parasite = this.getTopParasite();\n        if (parasite) {\n            return parasite.hostCanDrop();\n        } else {\n            return this._canDrop();\n        }\n    }\n    protected _canDrop(): boolean {\n        return false;\n    }\n    public canSwap(): boolean {\n        let parasite = this.getTopParasite();\n        if (parasite) {\n            return parasite.hostCanSwap();\n        } else {\n            return this._canSwap();\n        }\n    }\n    protected _canSwap(): boolean {\n        return false;\n    }\n    public canMatch(): boolean {\n        let parasite = this.getTopParasite();\n        if (parasite) {\n            return parasite.hostCanMatch();\n        } else {\n            return this._canMatch();\n        }\n    }\n    protected _canMatch(): boolean {\n        return false;\n    }\n    public canShuffle(): boolean {\n        if (this.canSwap()) {\n            return this._canShuffle();\n        }\n        return false;\n    }\n    protected _canShuffle(): boolean {\n        return false;\n    }\n    public canShuffleWhenCreate(): boolean {\n        if (this.canSwap()) {\n            return this._canShuffleWhenCreate();\n        }\n        return false;\n    }\n    protected _canShuffleWhenCreate(): boolean {\n        return false;\n    }\n    public canForceSwap(): boolean {\n        return this.canSwap();\n    }\n    public canChange(): boolean {\n        let parasite = this.getTopParasite();\n        if (!parasite) {\n            return this._canChange();\n        }\n        return false;\n    }\n\n    protected _canChange(): boolean {\n        return false;\n    }\n\n    public canCharge(collectionID: CollectionID) {\n        let parasite = this.getTopParasite();\n        if (!parasite) {\n            return this._canCharge(collectionID);\n        }\n        return false;\n    }\n\n    public onCharge(option: EntityChargeOption) {\n        this._onCharge(option);\n    }\n\n    protected _onCharge(option: EntityChargeOption) {\n\n    }\n\n    public canWillCharge(collectionID: CollectionID) {\n        let parasite = this.getTopParasite();\n        if (!parasite) {\n            return this._canWillCharge(collectionID);\n        }\n        return false;\n    }\n\n    protected _targetCount: number = 0;\n    protected _chargeCount: number = 0;\n    protected _willChargeCount: number = 0;\n    protected _chargePriority = 999;\n    protected _chargetCollectionID: CollectionID = CollectionID.None;\n    protected _canCharge(collectionID: CollectionID) {\n        if (this._chargeCount < this._targetCount) {\n            return this.getChargeID() == collectionID;\n        }\n        return false;\n    }\n\n    protected _canWillCharge(collectionID: CollectionID) {\n        if (this._chargeCount + this._willChargeCount < this._targetCount) {\n            return this.getChargeID() == collectionID;\n        }\n        return false;\n    }\n\n    public getChargePriority(): number {\n        return this._chargePriority;\n    }\n\n    public getChargeID(): CollectionID {\n        return this._chargetCollectionID;\n    }\n    public setChargeID(collectionID: CollectionID): void {\n        this._chargetCollectionID = collectionID;\n    }\n    public absorbWillChargeAmount(collectionID: CollectionID, amount: number): void {\n        if (this.getChargeID() == collectionID) {\n            let absorbAmount = Math.min(amount, this._willChargeCount);\n            this.setWillChargeAmount(this.getWillChargeAmount() - absorbAmount);\n            this.setChargeAmount(this.getChargeAmount() + absorbAmount);\n        }\n    }\n\n    public getChargeAmount(): number {\n        return this._chargeCount;\n    }\n    public setChargeAmount(amount: number): void {\n        this._chargeCount = amount;\n    }\n\n    public getWillChargeAmount(): number {\n        return this._willChargeCount;\n    }\n    public setWillChargeAmount(willChargetAmount: number): void {\n        this._willChargeCount = willChargetAmount;\n    }\n\n    public getChargeTargetAmount(): number {\n        return this._targetCount;\n    }\n    public setChargeTargetAmount(amount: number): void {\n        this._targetCount = amount;\n    }\n\n    public haveEnoughEnergy(): boolean {\n        return this.getChargeAmount() >= this.getChargeTargetAmount();\n    }\n\n\n    public canTransformByMagicCrystal(): boolean {\n        let parasite = this.getTopParasite();\n        if (!parasite) {\n            return this._canTransformByMagicCrystal();\n        }\n        return false;\n    }\n    protected _canTransformByMagicCrystal(): boolean {\n        return false;\n    }\n    public canUpgradeByRainbow(): boolean {\n        let parasite = this.getTopParasite();\n        if (!parasite) {\n            return this._canUpgradeByRainbow();\n        }\n        return false;\n    }\n    protected _canUpgradeByRainbow(): boolean {\n        return false;\n    }\n    public canChangeColor(): boolean {\n        let parasite = this.getTopParasite();\n        if (!parasite) {\n            return this._canChangeColor();\n        }\n        return false;\n    }\n    protected _canChangeColor(): boolean {\n        return false;\n    }\n    public canCoveredByHoney(): boolean {\n        let parasite = this.getTopParasite();\n        if (!parasite) {\n            return this._canCoveredByHoney();\n        }\n        return false;\n    }\n    protected _canCoveredByHoney(): boolean {\n        return this._canDrop();\n    }\n    public canBlockBombRay(): boolean {\n        let parasite = this.getTopParasite();\n        if (!parasite) {\n            return this._canBlockBombRay();\n        }\n        return false;\n    }\n    protected _canBlockBombRay(): boolean {\n        return false;\n    }\n    public canCleanByBomb(cleanColor: EntityColor): boolean {\n\n        let parasite = this.getTopParasite();\n        if (parasite) {\n            return parasite.canCleanByBomb(cleanColor);\n        } else {\n            if (!this.getImmuneDamage()) {\n                return this._canCleanByBomb(cleanColor);\n            } else {\n                return false;\n            }\n        }\n    }\n    protected _canCleanByBomb(cleanColor: EntityColor): boolean {\n        return false;\n    }\n    public canCleanByActivate(): boolean {\n        let parasite = this.getTopParasite();\n        if (!parasite) {\n            return this._canCleanByActivate();\n        }\n        return false;\n    }\n    protected _canCleanByActivate(): boolean {\n        return false;\n    }\n    public canCleanByMatch(): boolean {\n        let parasite = this.getTopParasite();\n        if (parasite) {\n            return parasite.canCleanByMatch();\n        } else {\n            if (!this.getImmuneDamage()) {\n                return this._canCleanByMatch();\n            } else {\n                return false;\n            }\n        }\n    }\n    protected _canCleanByMatch(): boolean {\n        return false;\n    }\n    public canCleanByNeighbour(color: EntityColor): boolean {\n        let parasite = this.getTopParasite();\n        if (parasite) {\n            return parasite.canCleanByNeighbour(color);\n        } else {\n            if (!this.getImmuneDamage()) {\n                return this._canCleanByNeighbour(color);\n            } else {\n                return false;\n            }\n        }\n    }\n    protected _canCleanByNeighbour(color: EntityColor): boolean {\n        return false;\n    }\n    public canCleanBySuicide(): boolean {\n        let parasite = this.getTopParasite();\n        if (!parasite) {\n            return this._canCleanBySuicide();\n        }\n        return false;\n    }\n    protected _canCleanBySuicide(): boolean {\n        return false;\n    }\n    public canCleanByTerminate(cleanColor: EntityColor): boolean {\n        let parasite = this.getTopParasite();\n        if (parasite) {\n            return parasite.canCleanByTerminate(cleanColor);\n        } else {\n            return this._canCleanByTerminate(cleanColor);\n        }\n    }\n    protected _canCleanByTerminate(cleanColor: EntityColor): boolean {\n        return this._canCleanByBomb(cleanColor);\n    }\n    public coverUnderForever(): boolean {\n        return this._converUnderForever();\n    }\n    protected _converUnderForever(): boolean {\n        return false;\n    }\n\n    private canActivatedByDoubleTabbed(): boolean {\n        let parasite = this.getTopParasite();\n        if (!parasite) {\n            return this._canActivatedByDoubleTabbed();\n        }\n        return false;\n    }\n    protected _canActivatedByDoubleTabbed(): boolean {\n        return false;\n    }\n    private onActivatedByDoubleTabbed(): void {\n        let parasite = this.getTopParasite();\n        if (!parasite) {\n            this._onActivatedByDoubleTabbed();\n        }\n    }\n    protected _onActivatedByDoubleTabbed(): void {\n\n    }\n\n    private satisfyMatch(): boolean {\n        return this._satisfyMatch();\n    }\n    protected _satisfyMatch(): boolean {\n        let linkedPos = this.getLinkedPositions();\n        if (linkedPos.length > 0) {\n            return true;\n        }\n        return false;\n    }\n    private onSatisfyMatch(): void {\n        this._onSatisfyMatch(0);\n    }\n    protected _onSatisfyMatch(basePriority: number): void {\n        let totalLinkPos = this.getLinkedPositions();\n        if (totalLinkPos.length > 0) {\n            let baseSteps: number[] = [];\n            for (let pos of totalLinkPos) {\n                if (pos.equals(this.getLogicalPos())) {\n                    baseSteps.push(basePriority);\n                } else {\n                    let priority = 0;\n                    let item = this.getGrid().getItemAtLogicalPos(pos);\n                    if (item && item.getTopParasite() != null) {\n                        priority = 10000;\n                    }\n                    baseSteps.push(priority);\n                }\n            }\n\n            let mergeRoot = GameMath.getMergePos(totalLinkPos, baseSteps);\n            let createBombType = GameMath.getCreateBombType(totalLinkPos);//合成炸弹类型\n            if (!this.getGrid().canGenerateBomb()) {\n                createBombType = ItemBombType.None;\n            }\n\n            let grid = this.getGrid();\n            let layoutGrass = false;\n\n            for (let pos of totalLinkPos) {\n                if (grid.isGrassFloorAtLogicalPos(pos)) {\n                    layoutGrass = true;\n                    break;\n                }\n            }\n\n            for (let pos of totalLinkPos) {//消除的格子发送清除命令\n                grid.dispatchCommand(pos, GridCommand.MatchClean(mergeRoot, createBombType, layoutGrass), 0);\n            }\n        }\n    }\n\n    private canMatchWithNeighbourSwap(swapPos: cc.Vec2): boolean {\n        return this._canMatchWithNeighbourSwap(swapPos);\n    }\n    protected _canMatchWithNeighbourSwap(swapPos: cc.Vec2): boolean {\n        let swapItem = this.getGrid().getItemAtLogicalPos(swapPos);\n        if (swapItem && swapItem.getEntityID() != EntityID.ItemBombRainbow) {\n            return this._satisfyMatch();\n        }\n        return false;\n    }\n    private onMatchWithNeighbourSwap(swapPos: cc.Vec2): void {\n        this._onMatchWithNeighbourSwap(swapPos);\n    }\n    protected _onMatchWithNeighbourSwap(swapPos: cc.Vec2): void {\n        let swapItem = this.getGrid().getItemAtLogicalPos(swapPos);\n        if (swapItem && swapItem.getEntityID() != EntityID.ItemBombRainbow) {\n            this._onSatisfyMatch(-1000);\n        }\n    }\n\n    private canMatchWithForceSwap(swapPos: cc.Vec2): boolean {\n        return this._canMatchWithForceSwap(swapPos);\n    }\n    protected _canMatchWithForceSwap(swapPos: cc.Vec2): boolean {\n        return this._satisfyMatch();\n    }\n    private onMatchWithForceSwap(swapPos: cc.Vec2): void {\n        this._onMatchWithForceSwap(swapPos);\n    }\n    protected _onMatchWithForceSwap(swapPos: cc.Vec2): void {\n        this._onSatisfyMatch(-1000);\n    }\n\n    public canLayoutGrass(): boolean {\n        let parasite = this.getTopParasite();\n        if (!parasite) {\n            return this._canLayoutGrass();\n        }\n        return false;\n    }\n    protected _canLayoutGrass(): boolean {\n        return this._canHitFloor();\n    }\n    protected _onLayourGrass(): void {\n        this.getGrid().dispatchCommand(this.getLogicalPos(), GridCommand.LayoutGrass(), 0);\n    }\n    protected _canHitNeighbour(): boolean {\n        return this._canMatch();\n    }\n    protected _onHitNeighbour(): void {\n        let grid = this.getGrid();\n        let neighborOffsets: cc.Vec2[] = [cc.v2(1, 0), cc.v2(-1, 0), cc.v2(0, 1), cc.v2(0, -1)];\n\n        let origin = this.getLogicalPos();\n        for (let offset of neighborOffsets) {\n            grid.dispatchCommand(origin.add(offset), GridCommand.NeighborClean(origin, this.getEntityColor()), 0);\n        }\n    }\n    protected _canHitFloor(): boolean {\n        return this._canMatch();\n    }\n    protected _onHitFloor(): void {\n        this.getGrid().dispatchCommand(this.getLogicalPos(), GridCommand.FloorClean(), 0);\n    }\n\n    //自身被消除处理\n    protected progressDeathWish(cleanOption: EntityCleanOption): void {\n        this.onCollected();\n\n        if (cleanOption.hitFloor && this._canHitFloor()) {\n            this._onHitFloor();\n        }\n        if (cleanOption.hitNeighbour && this._canHitNeighbour()) {\n            this._onHitNeighbour();\n        }\n        if (cleanOption.layoutGrass && this._canLayoutGrass()) {\n            this._onLayourGrass();\n        }\n\n        if (this.getLogicalPos().equals(cleanOption.cleanRoot)) {\n            this.getGrid().generateBomb(cleanOption.cleanRoot, cleanOption.createBombType, this.getEntityColor());\n        }\n    }\n\n    //自身被消除\n    private onClean(cleanOption: EntityCleanOption): void {\n        let parasite = this.getTopParasite();\n        if (parasite) {\n            parasite.onClean(cleanOption);\n        } else {\n            this._onClean(cleanOption);\n            if (this._canImmuneDamageAfterHurt()) {\n                this.setImmuneDamage(true);\n            }\n        }\n    }\n    protected _onClean(cleanOption: EntityCleanOption): void {\n\n    }\n    protected _canImmuneDamageAfterHurt(): boolean {\n        return true;\n    }\n\n    private onChange(changeOption: EntityChangeOption): void {\n        this._onChange(changeOption);\n    }\n    protected _onChange(changeOption: EntityChangeOption): void {\n\n    }\n\n    public canExcuteCommand(command: GridCommand): boolean {\n        switch (command.type) {\n            case GridCommandType.DoubleTabbed: {\n                return this.canActivatedByDoubleTabbed();\n            }\n                break;\n            case GridCommandType.NeighbourSwap: {\n                return this.canMatchWithNeighbourSwap(command.swapPos);\n            }\n                break;\n            case GridCommandType.ForceSwap: {\n                return this.canMatchWithForceSwap(command.swapPos);\n            }\n                break;\n            case GridCommandType.CheckMatch: {\n                return this.satisfyMatch();\n            }\n                break;\n            case GridCommandType.BombClean: {\n                return this.canCleanByBomb(command.cleanColor);\n            }\n                break;\n            case GridCommandType.ActivateClean: {\n                return this.canCleanByActivate();\n            }\n                break;\n            case GridCommandType.MatchClean: {\n                return this.canCleanByMatch();\n            }\n                break;\n            case GridCommandType.NeighborClean: {\n                return this.canCleanByNeighbour(command.cleanColor);\n            }\n                break;\n            case GridCommandType.SuicideClean: {\n                return this.canCleanBySuicide();\n            }\n                break;\n            case GridCommandType.TerminateClean: {\n                return this.canCleanByTerminate(command.cleanColor);\n            }\n                break;\n            case GridCommandType.Change: {\n                return this.canChange();\n            }\n                break;\n            case GridCommandType.Charge: {\n                return this.canCharge(command.chargeID);\n            }\n                break;\n\n            default:\n                break;\n        }\n\n        return false;\n    }\n    public excuteCommand(command: GridCommand): void {\n        if (!this.canExcuteCommand(command)) {\n            return;\n        }\n\n        switch (command.type) {\n            case GridCommandType.DoubleTabbed: {\n                this.onActivatedByDoubleTabbed();\n            }\n                break;\n            case GridCommandType.NeighbourSwap: {\n                this.onMatchWithNeighbourSwap(command.swapPos);\n            }\n                break;\n            case GridCommandType.ForceSwap: {\n                this.onMatchWithForceSwap(command.swapPos);\n            }\n                break;\n            case GridCommandType.CheckMatch: {\n                this.onSatisfyMatch();\n            }\n                break;\n            case GridCommandType.BombClean: {\n                this.onClean(EntityCleanOption.create(EntityCleanType.Bomb,\n                    command.cleanRoot,\n                    command.cleanColor,\n                    command.createBombType,\n                    command.hitNeighbour,\n                    command.hitFloor,\n                    command.layoutGrass));\n            }\n                break;\n            case GridCommandType.ActivateClean: {\n                this.onClean(EntityCleanOption.create(EntityCleanType.Activate,\n                    command.cleanRoot,\n                    command.cleanColor,\n                    command.createBombType,\n                    command.hitNeighbour,\n                    command.hitFloor,\n                    command.layoutGrass));\n            }\n                break;\n            case GridCommandType.MatchClean: {\n                this.onClean(EntityCleanOption.create(EntityCleanType.Match,\n                    command.cleanRoot,\n                    command.cleanColor,\n                    command.createBombType,\n                    command.hitNeighbour,\n                    command.hitFloor,\n                    command.layoutGrass));\n            }\n                break;\n            case GridCommandType.NeighborClean: {\n                this.onClean(EntityCleanOption.create(EntityCleanType.Neighbor,\n                    command.cleanRoot,\n                    command.cleanColor,\n                    command.createBombType,\n                    command.hitNeighbour,\n                    command.hitFloor,\n                    command.layoutGrass));\n            }\n                break;\n            case GridCommandType.SuicideClean: {\n                this.onClean(EntityCleanOption.create(EntityCleanType.Suicide,\n                    command.cleanRoot,\n                    command.cleanColor,\n                    command.createBombType,\n                    command.hitNeighbour,\n                    command.hitFloor,\n                    command.layoutGrass));\n            }\n                break;\n            case GridCommandType.TerminateClean: {\n                this.onClean(EntityCleanOption.create(EntityCleanType.Terminate,\n                    command.cleanRoot,\n                    command.cleanColor,\n                    command.createBombType,\n                    command.hitNeighbour,\n                    command.hitFloor,\n                    command.layoutGrass));\n            }\n                break;\n            case GridCommandType.Change: {\n                this.onChange(EntityChangeOption.create(command.targetID, command.collectOld));\n            }\n                break;\n            case GridCommandType.Charge: {\n                this.onCharge(EntityChargeOption.create(command.chargeID, command.chargeAmount));\n            }\n                break;\n            default:\n                break;\n        }\n    }\n\n    public selected(): void {\n        let scale = 0.05;\n        let outDuration = 0.2;\n        let backDuration = 0.15;\n        let toDuration = 0.15;\n        let recoverDuration = 0.5;\n\n        this.node.angle = 0;\n        this.node.scale = 1.0;\n\n        let outAction = cc.scaleTo(outDuration, 1 + scale).easing(cc.easeOut(2.0));\n        let backAction = cc.scaleTo(backDuration, 1).easing(cc.easeIn(2.0));\n        let toAction = cc.scaleTo(toDuration, 1 - scale).easing(cc.easeOut(2.0));\n        let recoverAction = cc.scaleTo(recoverDuration, 1).easing(cc.easeIn(2.0));\n        let action = cc.sequence(outAction, backAction, toAction, recoverAction).repeatForever();\n        action.setTag(1001);\n        this._puppet.runAction(action);\n        this.node.zIndex = this.getTopZOrder();\n    }\n    public unselected(): void {\n        this._puppet.stopActionByTag(1001);\n        this._puppet.angle = 0;\n        this._puppet.scale = 1.0;\n        this._puppet.setPosition(cc.Vec2.ZERO);\n        this.node.zIndex = this.getBottomZOrder();\n    }\n    public shake(): void {\n        let rotation = 3;\n        let scale = 0.05;\n        let outDuration = 0.2;\n        let backDuration = 0.15;\n        let toDuration = 0.15;\n        let recoverDuration = 0.5;\n\n        this.node.angle = 0;\n        this.node.scale = 1.0;\n\n        let outAction = cc.spawn(cc.callFunc(() => { this.getGrid().highlightedCell(this.getLogicalPos()) }),\n            cc.rotateTo(outDuration, rotation).easing(cc.easeOut(2.0)),\n            cc.scaleTo(outDuration, 1 + scale).easing(cc.easeOut(2.0)));\n        let backAction = cc.spawn(cc.rotateTo(backDuration, rotation * 0.5).easing(cc.easeIn(2.0)),\n            cc.scaleTo(backDuration, 1 + scale * 0.5).easing(cc.easeIn(2.0)));\n        let toAction = cc.spawn(cc.rotateTo(toDuration, rotation).easing(cc.easeOut(2.0)),\n            cc.scaleTo(toDuration, 1 + scale).easing(cc.easeOut(2.0)));\n        let recoverAction = cc.spawn(cc.rotateTo(recoverDuration, 0).easing(cc.easeIn(2.0)),\n            cc.scaleTo(recoverDuration, 1).easing(cc.easeIn(2.0)));\n        let action = cc.sequence(outAction, backAction, toAction, recoverAction).repeat(2);\n        action.setTag(1002);\n        this._puppet.runAction(action);\n        this.node.zIndex = this.getTopZOrder();\n    }\n    public unshake(): void {\n        this._puppet.stopActionByTag(1002);\n        this._puppet.angle = 0;\n        this._puppet.scale = 1.0;\n        this._puppet.setPosition(cc.Vec2.ZERO);\n        this.node.zIndex = this.getBottomZOrder();\n    }\n    public tipSlide(target: cc.Vec2): void {\n\n        this.setPixelPos(this.getLogicalPos());\n        let sourcePos = this.getGrid().getPixelPosFromLogicalPos(this.getLogicalPos());\n        let targetPos = this.getGrid().getPixelPosFromLogicalPos(target);\n        let offset = targetPos.sub(sourcePos).mul(0.1);\n\n        let scale = 0.05;\n        let outDuration = 0.2;\n        let backDuration = 0.15;\n        let toDuration = 0.15;\n        let recoverDuration = 0.5;\n\n        let origin = cc.Vec2.ZERO;\n\n        let outAction = cc.spawn(cc.callFunc(() => { this.getGrid().highlightedCell(this.getLogicalPos()) }),\n            cc.moveTo(outDuration, origin.add(offset)).easing(cc.easeOut(2.0)),\n            cc.scaleTo(outDuration, 1 + scale).easing(cc.easeOut(2.0)));\n        let backAction = cc.spawn(cc.moveTo(backDuration, origin.add(offset.mul(0.5))).easing(cc.easeIn(2.0)),\n            cc.scaleTo(backDuration, 1 + scale * 0.5).easing(cc.easeIn(2.0)));\n        let toAction = cc.spawn(cc.moveTo(toDuration, origin.add(offset)).easing(cc.easeOut(2.0)),\n            cc.scaleTo(toDuration, 1 + scale).easing(cc.easeOut(2.0)));\n        let recoverAction = cc.spawn(cc.moveTo(recoverDuration, origin).easing(cc.easeIn(2.0)),\n            cc.scaleTo(recoverDuration, 1).easing(cc.easeIn(2.0)));\n\n        let action = cc.sequence(outAction, backAction, toAction, recoverAction).repeat(2);\n        action.setTag(1003);\n        this._puppet.runAction(action);\n        this.node.zIndex = this.getTopZOrder();\n    }\n    public untipSlide(): void {\n        this._puppet.stopActionByTag(1003);\n        this._puppet.angle = 0;\n        this._puppet.scale = 1.0;\n        this._puppet.setPosition(cc.Vec2.ZERO);\n        this.node.zIndex = this.getBottomZOrder();\n    }\n\n    public bounce(): cc.AnimationState {\n        return null;\n    }\n\n    protected initItem(grid: GridBase, itemType: ItemType, width: number = 1, height: number = 1): void {\n        super.initEntity(grid, EntityType.Item, width, height);\n        this._itemType = itemType;\n        this._targetCount = 0;\n        this._chargeCount = 0;\n        this._willChargeCount = 0;\n        this._chargePriority = 999;\n        this._chargetCollectionID = CollectionID.None;\n    }\n\n    onDestroy() {\n        super.onDestroy();\n    }\n}\n","import ItemBase, { ItemType } from \"../ItemBase\";\nimport { CollectionID } from \"../../../defines/CollectionID\";\nimport { EntityID, EntityCleanOption, EntityCleanType, EntityColor } from \"../../../defines/EntityID\";\nimport GridBase from \"../../../grid/GridBase\";\nimport IdentifierManager from \"../../../defines/IdentifierManager\";\nimport FlyerAnimation, { FlyerAnimationType } from \"../../flyer/FlyerAnimation\";\nimport { TMXJsonObjectInfo } from \"../../../../../extend/utils/TMXJsonPhraser\";\nimport IGame from \"../../../../../base/IGame\";\nimport EntityPrefabNodePool from \"../../EntityPrefabNodePool\";\n\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class ItemBlock extends ItemBase {\n\n    public static create(grid:GridBase, healthPoint:number):ItemBlock{\n\n        let className = 'ItemBlock';\n        let prefabFileName = 'match_scene/prefab/entity/item/ItemBlock';\n        let pool = EntityPrefabNodePool.getInstance();\n        let component = pool.getPrefabNodeWithFileNameAndClassName(prefabFileName, className) as ItemBlock;\n\n        \n        if (component) {\n            component.init(grid, healthPoint); \n            return component;       \n        }\n        return null;\n    }\n\n    public clone():ItemBlock {\n        let item = ItemBlock.create(this.getGrid(), this.getHealthPoint());\n        return item;\n    }\n    protected init(grid:GridBase, healthPoint:number):void{\n        super.initItem(grid, ItemType.Block);\n        this.setHealthPoint(healthPoint);\n    }\n    \n    private _healthPoint:number = 0;\n    protected getHealthPoint():number{\n        return this._healthPoint;\n    }\n\n    protected setHealthPoint(val:number){\n        this._healthPoint = val;\n        this.updatePuppet();\n    }\n\n    public getCollectionID():CollectionID{\n        return CollectionID.ItemBlock;\n    }\n\n    public getEntityID():EntityID{\n        let result = EntityID.None;\n        switch(this.getHealthPoint()){\n            case 1:{\n                result = EntityID.ItemBlockHp1;\n                break;\n            }\n            case 2:{\n                result = EntityID.ItemBlockHp2;\n                break;\n            }\n            case 3:{\n                result = EntityID.ItemBlockHp3;\n                break;\n            }\n            case 4:{\n                result = EntityID.ItemBlockHp4;\n                break;\n            }\n            case 5:{\n                result = EntityID.ItemBlockHp5;\n                break;\n            }\n            case 6:{\n                result = EntityID.ItemBlockHp6;\n                break;\n            }\n            default:{\n                break;\n            }\n        }\n\n        return result;\n    }\n\n    public getScore():number{\n        return 100;\n    }\n\n    protected _canDrop():boolean{\n        return false;\n    }\n\n    protected _canSwap():boolean{\n        return false;\n    }\n\n    protected _canMatch():boolean{\n        return false;\n    }\n\n    protected _canCleanByBomb(cleanColor:EntityColor):boolean{\n        return true;\n    }\n\n    protected _canCleanByNeighbour(color:EntityColor):boolean{\n        return true;\n    }\n\n    protected _onClean(cleanOption:EntityCleanOption):void{\n\n        let rate = 1;\n        if (cleanOption.cleanType == EntityCleanType.Terminate) {\n            rate = this.getHealthPoint();\n            this.setHealthPoint(1);\n        }\n        this.getGrid().gainScoreWithEntity(this, rate);\n        if(this.getHealthPoint() <= 1){\n            if (!this.isTargetCollection()) {\n                let flyer = FlyerAnimation.createDieAnimation(this.getGrid(), this.getEntityID());\n                this.getGrid().setFlyerAtLogicalPos(flyer, this.getLogicalPos());\n                IGame.playAudio(IdentifierManager.getInstance().getMatchAudioFilePath('block'));\n            }\n            this.progressDeathWish(cleanOption);\n            this.setVisible(false);\n            this.selfDestory();\n            \n        }else{\n            this.setHealthPoint(this.getHealthPoint() - 1);\n            this.selfHurt();\n            IGame.playAudio(IdentifierManager.getInstance().getMatchAudioFilePath('eliminate_0'));\n            let flyer = FlyerAnimation.createAnimationWithType(this.getGrid(), FlyerAnimationType.CommonHurt);\n            this.getGrid().setFlyerAtLogicalPos(flyer, this.getLogicalPos());\n            flyer.node.zIndex = this.getTopZOrder()\n        }\n    }\n}\n","import IGame from \"../../../../../../base/IGame\";\nimport { Pair } from \"../../../../../../base/Pair\";\nimport { EntityCleanOption, EntityCleanType, EntityColor } from \"../../../../defines/EntityID\";\nimport IdentifierManager from \"../../../../defines/IdentifierManager\";\nimport GridBase from \"../../../../grid/GridBase\";\nimport FlyerBomb from \"../../../flyer/FlyerBomb\";\nimport FlyerCannon from \"../../../flyer/FlyerCannon\";\nimport FlyerMissile, { FlyerMissileType } from \"../../../flyer/FlyerMissile\";\nimport ItemBase, { ItemType } from \"../../ItemBase\";\n\n// Learn TypeScript:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/typescript.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/typescript.html\n// Learn Attribute:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html\nexport enum ItemBombType {\n    None,\n    Butterfly,\n    Row,\n    Column,\n    Cross,\n    Range,\n    Rainbow,\n};\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class ItemBombBase extends ItemBase {\n\n    private _bombType:ItemBombType = ItemBombType.None;\n    public getBombType() : ItemBombType {\n        return this._bombType;\n    }\n\n    private _isDud:boolean = false;\n    public getIsDud() : boolean {\n        return this._isDud;\n    }\n    public setIsDud(isDud:boolean) : void {\n        this._isDud = isDud;\n    }\n\n    private _selfDestructIndex:boolean = false;\n    public getSelfDestructIndex() : boolean {\n        return this._selfDestructIndex;\n    }\n    public setSelfDestructIndex(selfDestructIndex:boolean) : void {\n        this._selfDestructIndex = selfDestructIndex;\n    }\n\n    private _isGrassBomb:boolean = false;\n    public getIsGrassBomb() : boolean {\n        return this._isGrassBomb;\n    }\n    public setIsGrassBomb(isGrassBomb:boolean) : void {\n        this._isGrassBomb = isGrassBomb;\n    }\n\n    public getShouldLayoutGrass() : boolean {\n        return this.getIsGrassBomb() || this.getGrid().isGrassFloorAtLogicalPos(this.getLogicalPos());\n    } \n\n    protected _canDrop() : boolean {\n        return true;\n    }\n    protected _canSwap() : boolean {\n        return true;\n    }\n    protected _canMatch() : boolean {\n        return true;\n    }\n    protected _canChangeColor() : boolean {\n        return true;\n    }\n    protected _canCleanByBomb(cleanColor:EntityColor) : boolean {\n        return true;\n    }\n    protected _canCleanByMatch() : boolean {\n        return true;\n    }\n    protected _canCleanByActivate() : boolean {\n        return true;\n    }\n    protected _canShuffleWhenCreate() : boolean {\n        return true;\n    }\n\n    protected _canBombCombineWithNeighbour(swapPos:cc.Vec2) : boolean {\n        let neighbourItem = this.getGrid().getItemAtLogicalPos(swapPos);\n        if (neighbourItem && neighbourItem.canMatch() && neighbourItem.getItemType() == ItemType.EffectBomb) {\n            return true;\n        }\n        return false;\n    }\n    protected _onBombCombineWithNeighbour(swapPos:cc.Vec2) : void {\n        let neighbourItem = this.getGrid().getItemAtLogicalPos(swapPos);\n        let anotherBomb = neighbourItem as ItemBombBase;\n        if (anotherBomb) {\n            this._onBombCombine(anotherBomb);    \n        }\n    }\n    protected _onBombCombine(bombB:ItemBombBase) : void {\n        \n        let typeA = this.getBombType();\n        let typeB = bombB.getBombType();\n\n        let minType = Math.min(typeA, typeB);\n        let maxType = Math.max(typeA, typeB);\n        let code = maxType * 100 + minType;\n        \n        let canLayoutGrass = this.getShouldLayoutGrass() || bombB.getShouldLayoutGrass();\n        let grid = this.getGrid();\n        let matchColor = this.getEntityColor();\n        let startPos = this.getLogicalPos();\n\n        switch (code) {\n            case 101:{\n                for (let i = 0; i < 3; i++) {\n                    let missile = FlyerMissile.create(grid, FlyerMissileType.Dot, matchColor, canLayoutGrass);\n                    grid.setFlyerAtLogicalPos(missile, startPos);\n                }\n            }\n                break;\n            case 201:{\n                let rayDirections:Pair<cc.Vec2, boolean>[] = [\n                    new Pair<cc.Vec2, boolean>(cc.v2(1, 0), true),\n                    new Pair<cc.Vec2, boolean>(cc.v2(-1, 0), false),\n                ];\n                let grid = this.getGrid();\n                for (let ray of rayDirections) {\n                    let cannon = FlyerCannon.create(grid, matchColor, canLayoutGrass, startPos, ray.first, ray.second);\n                    grid.setFlyerAtLogicalPos(cannon, startPos);\n                }\n                let missile = FlyerMissile.create(grid, FlyerMissileType.Row, matchColor, canLayoutGrass);\n                grid.setFlyerAtLogicalPos(missile, startPos);\n\n            }\n                break;\n            case 301:{\n                let rayDirections:Pair<cc.Vec2, boolean>[] = [\n                    new Pair<cc.Vec2, boolean>(cc.v2(0, 1), true),\n                    new Pair<cc.Vec2, boolean>(cc.v2(0, -1), false),\n                ];\n                let grid = this.getGrid();\n                for (let ray of rayDirections) {\n                    let cannon = FlyerCannon.create(grid, matchColor, canLayoutGrass, startPos, ray.first, ray.second);\n                    grid.setFlyerAtLogicalPos(cannon, startPos);\n\n                }\n                let missile = FlyerMissile.create(grid, FlyerMissileType.Column, matchColor, canLayoutGrass);\n                grid.setFlyerAtLogicalPos(missile, startPos);\n            }\n                break;\n            case 401:{\n                IGame.playAudio(IdentifierManager.getInstance().getMatchAudioFilePath('eliminate_special_cross'));\n                let rayDirections:Pair<cc.Vec2, boolean>[] = [\n                    new Pair<cc.Vec2, boolean>(cc.v2(1, 1), true),\n                    new Pair<cc.Vec2, boolean>(cc.v2(-1, -1), false),\n                    new Pair<cc.Vec2, boolean>(cc.v2(1, -1), false),\n                    new Pair<cc.Vec2, boolean>(cc.v2(-1, 1), false),\n                ];\n\n                for (let ray of rayDirections) {\n                    let cannon = FlyerCannon.create(grid, matchColor, canLayoutGrass, startPos, ray.first, ray.second);\n                    grid.setFlyerAtLogicalPos(cannon, startPos);\n                }\n\n                let missile = FlyerMissile.create(grid, FlyerMissileType.Cross, matchColor, canLayoutGrass);\n                grid.setFlyerAtLogicalPos(missile, startPos);\n            }\n                break;\n            case 501:{\n                let bomb = FlyerBomb.create(grid, matchColor, canLayoutGrass, startPos, 2);\n                grid.setFlyerAtLogicalPos(bomb, startPos);\n\n                let missile = FlyerMissile.create(grid, FlyerMissileType.Range, matchColor, canLayoutGrass);\n                grid.setFlyerAtLogicalPos(missile, startPos);\n\n            }\n                break;\n\n            case 202:\n            case 302:\n            case 303:{\n                IGame.playAudio(IdentifierManager.getInstance().getMatchAudioFilePath('eliminate_special_colorline'));\n                let rayDirections:Pair<cc.Vec2, boolean>[] = [\n                    new Pair<cc.Vec2, boolean>(cc.v2(1, 0), true),\n                    new Pair<cc.Vec2, boolean>(cc.v2(-1, 0), false),\n                    new Pair<cc.Vec2, boolean>(cc.v2(0, 1), false),\n                    new Pair<cc.Vec2, boolean>(cc.v2(0, -1), false),\n                ];\n                for (let ray of rayDirections) {\n                    let cannon = FlyerCannon.create(grid, matchColor, canLayoutGrass, startPos, ray.first, ray.second);\n                    grid.setFlyerAtLogicalPos(cannon, startPos);\n                }\n            }\n                break;\n\n            case 402:\n            case 403:\n            case 404:{\n                IGame.playAudio(IdentifierManager.getInstance().getMatchAudioFilePath('eliminate_special_linecross'));\n                let rayDirections:Pair<cc.Vec2, boolean>[] = [\n                    new Pair<cc.Vec2, boolean>(cc.v2(1, 0), true),\n                    new Pair<cc.Vec2, boolean>(cc.v2(-1, 0), false),\n                    new Pair<cc.Vec2, boolean>(cc.v2(0, 1), false),\n                    new Pair<cc.Vec2, boolean>(cc.v2(0, -1), false),\n\n                    new Pair<cc.Vec2, boolean>(cc.v2(1, 1), false),\n                    new Pair<cc.Vec2, boolean>(cc.v2(-1, -1), false),\n                    new Pair<cc.Vec2, boolean>(cc.v2(-1, 1), false),\n                    new Pair<cc.Vec2, boolean>(cc.v2(1, -1), false),\n                ];\n                for (let ray of rayDirections) {\n                    let cannon = FlyerCannon.create(grid, matchColor, canLayoutGrass, startPos, ray.first, ray.second);\n                    grid.setFlyerAtLogicalPos(cannon, startPos);\n                }\n            }\n                break;\n            case 502:{\n                IGame.playAudio(IdentifierManager.getInstance().getMatchAudioFilePath('eliminate_special_linebomb'));\n                let rayDirections:Pair<cc.Vec2, boolean>[] = [\n                    new Pair<cc.Vec2, boolean>(cc.v2(1, 0), true),\n                    new Pair<cc.Vec2, boolean>(cc.v2(-1, 0), false),\n                ];\n\n                let lineOffsets:cc.Vec2[] = [\n                    cc.v2(0, 1),\n                    cc.v2(0, 0),\n                    cc.v2(0, -1),\n                ];\n\n                for (let offset of lineOffsets) {\n                    for (let ray of rayDirections) {\n                        let cannon = FlyerCannon.create(grid, matchColor, canLayoutGrass, startPos.add(offset), ray.first, ray.second);\n                        grid.setFlyerAtLogicalPos(cannon, startPos.add(offset));\n                    }\n                }\n            }\n                break;\n            case 503:{\n                IGame.playAudio(IdentifierManager.getInstance().getMatchAudioFilePath('eliminate_special_linebomb'));\n                let rayDirections:Pair<cc.Vec2, boolean>[] = [\n                    new Pair<cc.Vec2, boolean>(cc.v2(0, 1), true),\n                    new Pair<cc.Vec2, boolean>(cc.v2(0, -1), false),\n                ];\n\n                let lineOffsets:cc.Vec2[] = [\n                    cc.v2(1, 0),\n                    cc.v2(0, 0),\n                    cc.v2(-1, 0),\n                ];\n\n                for (let offset of lineOffsets) {\n                    for (let ray of rayDirections) {\n                        let cannon = FlyerCannon.create(grid, matchColor, canLayoutGrass, startPos.add(offset), ray.first, ray.second);\n                        grid.setFlyerAtLogicalPos(cannon, startPos.add(offset));\n                    }\n                }\n            }\n                break;\n            case 504:{\n                IGame.playAudio(IdentifierManager.getInstance().getMatchAudioFilePath('eliminate_special_bombcross'));\n                let rayDirections1:Pair<cc.Vec2, boolean>[] = [\n                    new Pair<cc.Vec2, boolean>(cc.v2(0, 0), true),\n                    new Pair<cc.Vec2, boolean>(cc.v2(-1, 0), true),\n                    new Pair<cc.Vec2, boolean>(cc.v2(0, -1), true),\n                ];\n                for (let ray of rayDirections1) {\n                    let origin = startPos.add(ray.first);\n                    let cannon = FlyerCannon.create(grid, \n                                                    matchColor, \n                                                    canLayoutGrass, \n                                                    origin, \n                                                    cc.v2(-1,-1), \n                                                    ray.second);\n                    grid.setFlyerAtLogicalPos(cannon, origin);\n                }\n\n                let rayDirections2:Pair<cc.Vec2, boolean>[] = [\n                    new Pair<cc.Vec2, boolean>(cc.v2(0, 0), false),\n                    new Pair<cc.Vec2, boolean>(cc.v2(1, 0), true),\n                    new Pair<cc.Vec2, boolean>(cc.v2(0, 1), true),\n                ];\n                for (let ray of rayDirections2) {\n                    let origin = startPos.add(ray.first);\n                    let cannon = FlyerCannon.create(grid, \n                                                    matchColor, \n                                                    canLayoutGrass, \n                                                    origin, \n                                                    cc.v2(1,1), \n                                                    ray.second);\n                    grid.setFlyerAtLogicalPos(cannon, origin);\n                }\n\n                let rayDirections3:Pair<cc.Vec2, boolean>[] = [\n                    new Pair<cc.Vec2, boolean>(cc.v2(0, 0), false),\n                    new Pair<cc.Vec2, boolean>(cc.v2(1, 0), false),\n                    new Pair<cc.Vec2, boolean>(cc.v2(0, -1), false),\n                ];\n                for (let ray of rayDirections3) {\n                    let origin = startPos.add(ray.first);\n                    let cannon = FlyerCannon.create(grid, \n                                                    matchColor, \n                                                    canLayoutGrass, \n                                                    origin, \n                                                    cc.v2(1,-1), \n                                                    ray.second);\n                    grid.setFlyerAtLogicalPos(cannon, origin);\n                }\n\n                let rayDirections4:Pair<cc.Vec2, boolean>[] = [\n                    new Pair<cc.Vec2, boolean>(cc.v2(0, 0), false),\n                    new Pair<cc.Vec2, boolean>(cc.v2(-1, 0), false),\n                    new Pair<cc.Vec2, boolean>(cc.v2(0, 1), false),\n                ];\n                for (let ray of rayDirections4) {\n                    let origin = startPos.add(ray.first);\n                    let cannon = FlyerCannon.create(grid, \n                                                    matchColor, \n                                                    canLayoutGrass, \n                                                    origin, \n                                                    cc.v2(-1,1), \n                                                    ray.second);\n                    grid.setFlyerAtLogicalPos(cannon, origin);\n                }\n            }\n                break;\n            case 505:{\n                IGame.playAudio(IdentifierManager.getInstance().getMatchAudioFilePath('eliminate_special_bombbomb'));\n                let bomb = FlyerBomb.create(grid, matchColor, canLayoutGrass, startPos, 3);\n                grid.setFlyerAtLogicalPos(bomb, startPos);\n            }\n        \n            default:\n                break;\n        }\n        \n        this.setIsDud(true);\n        if (this._satisfyMatch()) {\n            this._onSatisfyMatch(-1000);\n        }else{\n            this._onClean(EntityCleanOption.create(EntityCleanType.Match, \n                                                   this.getLogicalPos(), \n                                                   EntityColor.None, \n                                                   ItemBombType.None, \n                                                   true, \n                                                   true, \n                                                   canLayoutGrass));\n        }\n        \n        bombB.setIsDud(true);\n        if (bombB._satisfyMatch()) {\n            bombB._onSatisfyMatch(-1000);\n        }else{\n            bombB._onClean(EntityCleanOption.create(EntityCleanType.Match, \n                                                    bombB.getLogicalPos(), \n                                                    EntityColor.None, \n                                                    ItemBombType.None, \n                                                    true, \n                                                    true, \n                                                    canLayoutGrass));\n        }\n    }\n    protected _canMatchWithNeighbourSwap(swapPos:cc.Vec2) : boolean {\n        if (this._canBombCombineWithNeighbour(swapPos)) {\n            return true;\n        }else{\n            return super._canMatchWithNeighbourSwap(swapPos);\n        }\n    }\n    protected _onMatchWithNeighbourSwap(swapPos:cc.Vec2) : void {\n        if (this._canBombCombineWithNeighbour(swapPos)) {\n            this._onBombCombineWithNeighbour(swapPos);\n        }else{\n            super._onMatchWithNeighbourSwap(swapPos);\n        }\n    }\n    protected _onClean(cleanOption:EntityCleanOption) : void {\n\n        this.setVisible(false);\n        if (cleanOption.layoutGrass) {\n            this.setIsGrassBomb(true);\n        }\n        this.progressDeathWish(cleanOption);\n        this.selfDestory();\n    }\n\n    protected initBomb(grid:GridBase, bombType:ItemBombType) {\n        super.initItem(grid, ItemType.EffectBomb);\n        this._bombType = bombType;\n        this.setIsDud(false);\n        this._selfDestructIndex = false;\n        this._isGrassBomb = false;\n    }\n}\n","import { CollectionID } from \"../../../../defines/CollectionID\";\nimport { EntityCleanOption, EntityColor, EntityID } from \"../../../../defines/EntityID\";\nimport GridBase from \"../../../../grid/GridBase\";\nimport FlyerMissile, { FlyerMissileType } from \"../../../flyer/FlyerMissile\";\nimport ItemBombBase, { ItemBombType } from \"./ItemBombBase\";\nimport IGame from \"../../../../../../base/IGame\";\nimport EntityPrefabNodePool from \"../../../EntityPrefabNodePool\";\nimport { GameCurrencyType } from \"../../../../../../define/GameCurrencyType\";\nimport FlyerCollectedSupply from \"../../../flyer/FlyerCollectedSupply\";\n\n\n// Learn TypeScript:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/typescript.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/typescript.html\n// Learn Attribute:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class ItemBombButterfly extends ItemBombBase {\n\n    public getCollectionID() : CollectionID {\n        let result = CollectionID.None;\n        switch (this.getEntityColor()) {\n            case EntityColor.Red:\n                result = CollectionID.ItemBombButterflyRed;\n                break;\n            case EntityColor.Green:\n                result = CollectionID.ItemBombButterflyGreen;\n                break;\n            case EntityColor.Blue:\n                result = CollectionID.ItemBombButterflyBlue;\n                break;\n            case EntityColor.Yellow:\n                result = CollectionID.ItemBombButterflyYellow;\n                break;\n            case EntityColor.Orange:\n                result = CollectionID.ItemBombButterflyOrange;\n                break;\n            case EntityColor.Purple:\n                result = CollectionID.ItemBombButterflyPurple;\n                break;\n                \n            default:\n                break;\n        }\n        return result;\n    }\n    public getEntityID() : EntityID {\n        let result = EntityID.None;\n        switch (this.getEntityColor()) {\n            case EntityColor.Red:\n                result = EntityID.ItemBombButterflyRed;\n                break;\n            case EntityColor.Green:\n                result = EntityID.ItemBombButterflyGreen;\n                break;\n            case EntityColor.Blue:\n                result = EntityID.ItemBombButterflyBlue;\n                break;\n            case EntityColor.Yellow:\n                result = EntityID.ItemBombButterflyYellow;\n                break;\n            case EntityColor.Orange:\n                result = EntityID.ItemBombButterflyOrange;\n                break;\n            case EntityColor.Purple:\n                result = EntityID.ItemBombButterflyPurple;\n                break;\n                \n            default:\n                break;\n        }\n        return result;\n    }\n\n    public getProducedTrainSupplyMaps() : Object {\n        let result = {};\n        result[GameCurrencyType.GoldCoin] = 1;\n        result[GameCurrencyType.TrainFood] = 1;\n        return result;\n    }\n\n    public getScore():number{\n        return 200;\n    }\n\n    protected _onClean(cleanOption:EntityCleanOption) : void {\n    \n        super._onClean(cleanOption);\n        this.getGrid().gainScoreWithEntity(this);\n        if (!this.getIsDud()) {\n            let grid = this.getGrid();\n            let missile = FlyerMissile.create(grid, FlyerMissileType.Dot, this.getEntityColor(), this.getShouldLayoutGrass());\n            grid.setFlyerAtLogicalPos(missile, this.getLogicalPos());\n            this.setVisible(false);\n        }\n    }\n\n    public static create(grid:GridBase, color:EntityColor):ItemBombButterfly{\n\n        let className = 'ItemBombButterfly';\n        let prefabFileName = 'match_scene/prefab/entity/item/ItemBombButterfly';\n        let pool = EntityPrefabNodePool.getInstance();\n        let component = pool.getPrefabNodeWithFileNameAndClassName(prefabFileName, className) as ItemBombButterfly;\n        if (component) {\n            component.init(grid, color); \n            return component;       \n        }\n        return null;\n    }\n\n    public clone():ItemBombButterfly {\n        let item = ItemBombButterfly.create(this.getGrid(),this.getEntityColor());\n        return item;\n    }\n\n    protected init(grid:GridBase, entityColor:EntityColor) : void{\n        super.initBomb(grid, ItemBombType.Butterfly);\n        this.setEntityColor(entityColor);\n    }\n\n    // LIFE-CYCLE CALLBACKS:\n\n    // onLoad () {}\n\n    start () {\n\n    }\n\n    // update (dt) {}\n}\n","import { Pair } from \"../../../../../../base/Pair\";\nimport { CollectionID } from \"../../../../defines/CollectionID\";\nimport { EntityCleanOption, EntityColor, EntityID } from \"../../../../defines/EntityID\";\nimport GridBase from \"../../../../grid/GridBase\";\nimport FlyerCannon from \"../../../flyer/FlyerCannon\";\nimport ItemBombBase, { ItemBombType } from \"./ItemBombBase\";\nimport IGame from \"../../../../../../base/IGame\";\nimport IdentifierManager from \"../../../../defines/IdentifierManager\";\nimport EntityPrefabNodePool from \"../../../EntityPrefabNodePool\";\nimport { GameCurrencyType } from \"../../../../../../define/GameCurrencyType\";\nimport FlyerCollectedSupply from \"../../../flyer/FlyerCollectedSupply\";\n\n\n// Learn TypeScript:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/typescript.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/typescript.html\n// Learn Attribute:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class ItemBombColumn extends ItemBombBase {\n\n    public getCollectionID() : CollectionID {\n        let result = CollectionID.None;\n        switch (this.getEntityColor()) {\n            case EntityColor.Red:\n                result = CollectionID.ItemBombColumnRed;\n                break;\n            case EntityColor.Green:\n                result = CollectionID.ItemBombColumnGreen;\n                break;\n            case EntityColor.Blue:\n                result = CollectionID.ItemBombColumnBlue;\n                break;\n            case EntityColor.Yellow:\n                result = CollectionID.ItemBombColumnYellow;\n                break;\n            case EntityColor.Orange:\n                result = CollectionID.ItemBombColumnOrange;\n                break;\n            case EntityColor.Purple:\n                result = CollectionID.ItemBombColumnPurple;\n                break;\n                \n            default:\n                break;\n        }\n        return result;\n    }\n    \n    public getEntityID():EntityID {\n        \n        let result = EntityID.None;\n        switch (this.getEntityColor()) {\n            case EntityColor.Red:\n                result = EntityID.ItemBombColumnRed;\n                break;\n            case EntityColor.Green:\n                result = EntityID.ItemBombColumnGreen;\n                break;\n            case EntityColor.Blue:\n                result = EntityID.ItemBombColumnBlue;\n                break;\n            case EntityColor.Yellow:\n                result = EntityID.ItemBombColumnYellow;\n                break;\n            case EntityColor.Orange:\n                result = EntityID.ItemBombColumnOrange;\n                break;\n            case EntityColor.Purple:\n                result = EntityID.ItemBombColumnPurple;\n                break;\n                \n            default:\n                break;\n        }\n        return result;\n    }\n\n    public getProducedTrainSupplyMaps() : Object {\n        let result = {};\n        result[GameCurrencyType.GoldCoin] = 1;\n        result[GameCurrencyType.TrainEyepatch] = 1;\n        return result;\n    }\n\n    public getScore():number{\n        return 300;\n    }\n\n    protected _onClean(cleanOption:EntityCleanOption) {\n        super._onClean(cleanOption);\n        \n        this.getGrid().gainScoreWithEntity(this);\n\n\n        if (!this.getIsDud()) {\n            IGame.playAudio(IdentifierManager.getInstance().getMatchAudioFilePath('eliminate_special_line'));\n            let rayDirections:Pair<cc.Vec2, boolean>[] = [\n                new Pair<cc.Vec2, boolean>(cc.v2(0, 1), true),\n                new Pair<cc.Vec2, boolean>(cc.v2(0, -1), false),\n            ];\n            let grid = this.getGrid();\n            for (let ray of rayDirections) {\n                let cannon = FlyerCannon.create(grid, \n                                                this.getEntityColor(), \n                                                this.getShouldLayoutGrass(), \n                                                this.getLogicalPos(), \n                                                ray.first, \n                                                ray.second);\n                grid.setFlyerAtLogicalPos(cannon, this.getLogicalPos());\n            }\n\n            this.setVisible(false);\n        }\n    }\n    public static create(grid:GridBase, color:EntityColor):ItemBombColumn{\n\n        let className = 'ItemBombColumn';\n        let prefabFileName = 'match_scene/prefab/entity/item/ItemBombColumn';\n        let pool = EntityPrefabNodePool.getInstance();\n        let component = pool.getPrefabNodeWithFileNameAndClassName(prefabFileName, className) as ItemBombColumn;\n        if (component) {\n            component.init(grid, color); \n            return component;       \n        }\n        return null;\n    }\n\n    public clone():ItemBombColumn {\n        let item = ItemBombColumn.create(this.getGrid(),this.getEntityColor());\n        return item;\n    }\n\n    protected init(grid:GridBase, entityColor:EntityColor) : void{\n        super.initBomb(grid, ItemBombType.Column);\n        this.setEntityColor(entityColor);\n    }\n\n    // LIFE-CYCLE CALLBACKS:\n\n    // onLoad () {}\n\n    start () {\n\n    }\n\n    // update (dt) {}\n}\n","import { Pair } from \"../../../../../../base/Pair\";\nimport { CollectionID } from \"../../../../defines/CollectionID\";\nimport { EntityCleanOption, EntityColor, EntityID } from \"../../../../defines/EntityID\";\nimport GridBase from \"../../../../grid/GridBase\";\nimport FlyerCannon from \"../../../flyer/FlyerCannon\";\nimport ItemBombBase, { ItemBombType } from \"./ItemBombBase\";\nimport IGame from \"../../../../../../base/IGame\";\nimport IdentifierManager from \"../../../../defines/IdentifierManager\";\nimport EntityPrefabNodePool from \"../../../EntityPrefabNodePool\";\nimport { GameCurrencyType } from \"../../../../../../define/GameCurrencyType\";\nimport FlyerCollectedSupply from \"../../../flyer/FlyerCollectedSupply\";\n\n// Learn TypeScript:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/typescript.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/typescript.html\n// Learn Attribute:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class ItemBombCross extends ItemBombBase {\n\n    public getCollectionID() : CollectionID {\n        let result = CollectionID.None;\n        switch (this.getEntityColor()) {\n            case EntityColor.Red:\n                result = CollectionID.ItemBombCrossRed;\n                break;\n            case EntityColor.Green:\n                result = CollectionID.ItemBombCrossGreen;\n                break;\n            case EntityColor.Blue:\n                result = CollectionID.ItemBombCrossBlue;\n                break;\n            case EntityColor.Yellow:\n                result = CollectionID.ItemBombCrossYellow;\n                break;\n            case EntityColor.Orange:\n                result = CollectionID.ItemBombCrossOrange;\n                break;\n            case EntityColor.Purple:\n                result = CollectionID.ItemBombCrossPurple;\n                break;\n                \n            default:\n                break;\n        }\n        return result;\n    }\n    \n    public getEntityID():EntityID {\n        \n        let result = EntityID.None;\n        switch (this.getEntityColor()) {\n            case EntityColor.Red:\n                result = EntityID.ItemBombCrossRed;\n                break;\n            case EntityColor.Green:\n                result = EntityID.ItemBombCrossGreen;\n                break;\n            case EntityColor.Blue:\n                result = EntityID.ItemBombCrossBlue;\n                break;\n            case EntityColor.Yellow:\n                result = EntityID.ItemBombCrossYellow;\n                break;\n            case EntityColor.Orange:\n                result = EntityID.ItemBombCrossOrange;\n                break;\n            case EntityColor.Purple:\n                result = EntityID.ItemBombCrossPurple;\n                break;\n                \n            default:\n                break;\n        }\n        return result;\n    }\n\n    public getProducedTrainSupplyMaps() : Object {\n        let result = {};\n        result[GameCurrencyType.GoldCoin] = 1;\n        result[GameCurrencyType.TrainHoe] = 1;\n        return result;\n    }\n\n    public getScore():number{\n        return 400;\n    }\n\n    protected _onClean(cleanOption:EntityCleanOption) {\n        super._onClean(cleanOption);\n        this.getGrid().gainScoreWithEntity(this);\n\n\n        if (!this.getIsDud()) {\n            IGame.playAudio(IdentifierManager.getInstance().getMatchAudioFilePath('eliminate_special_cross'));\n            let rayDirections:Pair<cc.Vec2, boolean>[] = [\n                new Pair<cc.Vec2, boolean>(cc.v2(1, 1), true),\n                new Pair<cc.Vec2, boolean>(cc.v2(-1, -1), false),\n                new Pair<cc.Vec2, boolean>(cc.v2(1, -1), false),\n                new Pair<cc.Vec2, boolean>(cc.v2(-1, 1), false),\n            ];\n            let grid = this.getGrid();\n            for (let ray of rayDirections) {\n                let cannon = FlyerCannon.create(grid, \n                                                this.getEntityColor(), \n                                                this.getShouldLayoutGrass(), \n                                                this.getLogicalPos(), \n                                                ray.first, \n                                                ray.second);\n                grid.setFlyerAtLogicalPos(cannon, this.getLogicalPos());\n            }\n\n            this.setVisible(false);\n        }\n    }\n    public static create(grid:GridBase, color:EntityColor):ItemBombCross{\n\n        let className = 'ItemBombCross';\n        let prefabFileName = 'match_scene/prefab/entity/item/ItemBombCross';\n        let pool = EntityPrefabNodePool.getInstance();\n        let component = pool.getPrefabNodeWithFileNameAndClassName(prefabFileName, className) as ItemBombCross;\n        if (component) {\n            component.init(grid, color); \n            return component;       \n        }\n        return null;\n    }\n\n    public clone():ItemBombCross {\n        let item = ItemBombCross.create(this.getGrid(),this.getEntityColor());\n        return item;\n    }\n\n    protected init(grid:GridBase, entityColor:EntityColor) : void{\n        super.initBomb(grid, ItemBombType.Cross);\n        this.setEntityColor(entityColor);\n    }\n    // LIFE-CYCLE CALLBACKS:\n\n    // onLoad () {}\n\n    start () {\n\n    }\n\n    // update (dt) {}\n}\n","import GameMath from \"../../../../../../extend/utils/GameMath\";\nimport { CollectionID } from \"../../../../defines/CollectionID\";\nimport { EntityCleanOption, EntityCleanType, EntityColor, EntityID } from \"../../../../defines/EntityID\";\nimport GridBase from \"../../../../grid/GridBase\";\nimport FlyerLaser from \"../../../flyer/FlyerLaser\";\nimport FlyerNuclear from \"../../../flyer/FlyerNuclear\";\nimport ItemBase, { ItemType } from \"../../ItemBase\";\nimport ItemBombBase, { ItemBombType } from \"./ItemBombBase\";\nimport EntityPrefabNodePool from \"../../../EntityPrefabNodePool\";\nimport GridCommand from \"../../../../commond/GridCommand\";\nimport { GameCurrencyType } from \"../../../../../../define/GameCurrencyType\";\n\n\n// Learn TypeScript:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/typescript.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/typescript.html\n// Learn Attribute:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class ItemBombRainbow extends ItemBombBase {\n\n    public getCollectionID():CollectionID {\n        return CollectionID.ItemBombRainbow;\n    }\n    public getEntityID() : EntityID {\n        return EntityID.ItemBombRainbow;\n    }\n    public getProducedTrainSupplyMaps() : Object {\n        let result = {};\n        result[GameCurrencyType.GoldCoin] = 1;\n        return result;\n    }\n    public getScore():number{\n        return 1000;\n    }\n    public selfDestory() : void {\n\n        this.getGrid().gainScoreWithEntity(this);\n        if (this.getGrid().canGenerateTrainSupply()) {\n            this.getGrid().gainStepWithItemID(GameCurrencyType.ExtraStep1, true, this.getLogicalPos());    \n        }\n        let entity = this.getGrid().getEntity(this.getEntityType(), this.getLogicalPos());\n        if (entity == this) {\n            this.removeFromGridAndAddToEffect();    \n        }\n        this.getGrid().addObstructs(this);\n        this.progressDeathWish(this._cleanOption);\n\n        let dispear = cc.spawn(cc.scaleTo(0.15, 0),\n                               cc.fadeOut(0.15));\n        let action = cc.sequence(dispear, cc.callFunc(function() {\n            this.getGrid().removeObstructs(this);\n            this.destoryWithRecycle(true);\n           }, this));\n        this.runAction(action);\n    }\n\n    protected _canMatch() : boolean {\n        return false;\n    }\n    protected _canHitFloor() : boolean {\n        return true;\n    }\n    protected _canHitNeighbour() : boolean {\n        return true;\n    }\n    protected _canLayoutGrass() : boolean {\n        return true;\n    }\n    protected _canChangeColor() : boolean {\n        return false;\n    }\n    protected _canCleanBySuicide() : boolean {\n        return true;\n    }\n    protected _canCleanByMatch() : boolean {\n        return false;\n    }\n    protected _canCleanByBomb(cleanColor:EntityColor) : boolean  {\n        return false;\n    }\n    protected _canCleanByTerminate(cleanColor:EntityColor) : boolean {\n        return true;\n    }\n    protected _canCleanByActivate() : boolean {\n        return true;\n    }\n\n    private _cleanOption:EntityCleanOption = EntityCleanOption.create(EntityCleanType.None, \n                                                                      cc.Vec2.ZERO, \n                                                                      EntityColor.None,\n                                                                      ItemBombType.None,\n                                                                      false, \n                                                                      false, \n                                                                      false);  \n    public getCleanOption() : EntityCleanOption {\n        return this._cleanOption;\n    }\n    public setCleanOption(cleanOption:EntityCleanOption) : void {\n        this._cleanOption = cleanOption;\n    }\n\n    protected _canMatchWithNeighbourSwap(swapPos:cc.Vec2) : boolean {\n        if (this._canBombCombineWithNeighbour(swapPos)) {\n            return true;\n        }else{\n            let neighbourItem = this.getGrid().getItemAtLogicalPos(swapPos);\n            if (neighbourItem &&\n                neighbourItem.canMatch() &&\n                neighbourItem.getEntityColor() >= EntityColor.Begin &&\n                neighbourItem.getEntityColor() <= EntityColor.End){\n                return true;\n            }\n        }\n        \n        return false;\n    }\n    protected _onMatchWithNeighbourSwap(swapPos:cc.Vec2) : void {\n   \n        let matchColor = EntityColor.None;\n        let bombType = ItemBombType.None;\n        let layoutGrass = this.getShouldLayoutGrass() || this.getGrid().isGrassFloorAtLogicalPos(swapPos);\n        let neighbourItem = this.getGrid().getItemAtLogicalPos(swapPos);\n        if (neighbourItem) {\n            matchColor = neighbourItem.getEntityColor();\n        }\n        \n        if (this._canBombCombineWithNeighbour(swapPos)){\n            let bombB = neighbourItem as ItemBombBase;\n            bombType = bombB.getBombType();\n\n            if (bombB.getBombType() == ItemBombType.Rainbow) {\n                \n                let grid = this.getGrid();\n                let nuclear = FlyerNuclear.create(this.getGrid(), layoutGrass, this.getLogicalPos());\n                grid.setFlyerAtLogicalPos(nuclear, this.getLogicalPos());\n            \n                this.setIsDud(true);\n                this._cleanOption = EntityCleanOption.create(EntityCleanType.Match, \n                                                            this.getLogicalPos(), \n                                                            EntityColor.None, \n                                                            ItemBombType.None, \n                                                            true, \n                                                            true, \n                                                            layoutGrass);\n\n                this.selfDestory();\n                let rainbowB = bombB as ItemBombRainbow;\n                if (rainbowB) {\n                    rainbowB.setIsDud(true);\n                    rainbowB.setCleanOption(EntityCleanOption.create(EntityCleanType.Match, \n                                                                    this.getLogicalPos(), \n                                                                    EntityColor.None, \n                                                                    ItemBombType.None, \n                                                                    true, \n                                                                    true, \n                                                                    layoutGrass));\n                    rainbowB.selfDestory();\n                }\n            }else{\n                this._launchLaser(matchColor, bombType, layoutGrass);\n            }\n        }else{\n            this._launchLaser(matchColor, bombType, layoutGrass);\n        }\n    }\n    protected _canBombCombineWithNeighbour(swapPos:cc.Vec2) : boolean {\n        let neighbourItem = this.getGrid().getItemAtLogicalPos(swapPos);\n    \n        if (this.getIsDud() == false &&\n            this.getTopParasite() == null &&\n            neighbourItem &&\n            neighbourItem.getTopParasite() == null &&\n            neighbourItem.getItemType() == ItemType.EffectBomb) {\n            return true;\n        }\n        return false;\n    }\n    protected _onClean(cleanOption:EntityCleanOption) : void {\n        if (cleanOption.layoutGrass) {\n            this.setIsGrassBomb(true);\n        }\n        if (!this.getIsDud()) {\n            this.setIsDud(true);\n            let colors:EntityColor[] = [];\n            let itemMap = this.getGrid().getItemsMap();\n            for (let key in itemMap) {\n                let item = itemMap[key] as ItemBase;\n                if (item.canMatch()){\n                    let entityColor = item.getEntityColor();\n                    if (entityColor != EntityColor.None) {\n                        GameMath.insertAsSet(colors, entityColor);\n                    }\n                }\n            }\n            if (colors.length > 0) {\n                let index = GameMath.randomInt(0, colors.length - 1);\n                let color = colors[index];\n                this._launchLaser(color, ItemBombType.None, this.getShouldLayoutGrass());  \n            }\n        }else{\n            this.selfDestory();\n        }\n    }\n    protected _launchLaser(color:EntityColor, type:ItemBombType, layoutGrass:boolean) : void {\n        this.setIsDud(true);  \n        \n        this._cleanOption = EntityCleanOption.create(EntityCleanType.Match, \n                                                    this.getLogicalPos(), \n                                                    color, \n                                                    ItemBombType.None,\n                                                    true, \n                                                    true, \n                                                    layoutGrass);\n        this.removeFromGridAndAddToEffect();\n        let grid = this.getGrid();\n        let laser = FlyerLaser.create(grid, this, this.getLogicalPos(), color, type, layoutGrass);\n        grid.setFlyerAtLogicalPos(laser, this.getLogicalPos());\n    }\n\n    public static create(grid:GridBase) : ItemBombRainbow {\n\n        let className = 'ItemBombRainbow';\n        let prefabFileName = 'match_scene/prefab/entity/item/ItemBombRainbow';\n        let pool = EntityPrefabNodePool.getInstance();\n        let component = pool.getPrefabNodeWithFileNameAndClassName(prefabFileName, className) as ItemBombRainbow;\n        if (component) {\n            component.init(grid); \n            return component;       \n        }\n        return null;\n    }\n\n    public clone():ItemBombRainbow {\n        let item = ItemBombRainbow.create(this.getGrid());\n        return item;\n    }\n\n    protected init(grid:GridBase) : void {\n        super.initBomb(grid, ItemBombType.Rainbow);\n        this.setEntityColor(EntityColor.None);\n\n        this._cleanOption = EntityCleanOption.create(EntityCleanType.None, \n                                                    cc.Vec2.ZERO, \n                                                    EntityColor.None,\n                                                    ItemBombType.None,\n                                                    false, \n                                                    false, \n                                                    false);\n    }\n    \n    // LIFE-CYCLE CALLBACKS:\n\n    // onLoad () {}\n\n    start () {\n\n    }\n\n    // update (dt) {}\n}\n","import { CollectionID } from \"../../../../defines/CollectionID\";\nimport { EntityCleanOption, EntityColor, EntityID } from \"../../../../defines/EntityID\";\nimport GridBase from \"../../../../grid/GridBase\";\nimport FlyerBomb from \"../../../flyer/FlyerBomb\";\nimport ItemBombBase, { ItemBombType } from \"./ItemBombBase\";\nimport IGame from \"../../../../../../base/IGame\";\nimport IdentifierManager from \"../../../../defines/IdentifierManager\";\nimport EntityPrefabNodePool from \"../../../EntityPrefabNodePool\";\nimport { GameCurrencyType } from \"../../../../../../define/GameCurrencyType\";\nimport FlyerCollectedSupply from \"../../../flyer/FlyerCollectedSupply\";\n\n// Learn TypeScript:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/typescript.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/typescript.html\n// Learn Attribute:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class ItemBombRange extends ItemBombBase {\n\n    public getCollectionID() : CollectionID {\n        let result = CollectionID.None;\n        switch (this.getEntityColor()) {\n            case EntityColor.Red:\n                result = CollectionID.ItemBombRangeRed;\n                break;\n            case EntityColor.Green:\n                result = CollectionID.ItemBombRangeGreen;\n                break;\n            case EntityColor.Blue:\n                result = CollectionID.ItemBombRangeBlue;\n                break;\n            case EntityColor.Yellow:\n                result = CollectionID.ItemBombRangeYellow;\n                break;\n            case EntityColor.Orange:\n                result = CollectionID.ItemBombRangeOrange;\n                break;\n            case EntityColor.Purple:\n                result = CollectionID.ItemBombRangePurple;\n                break;\n                \n            default:\n                break;\n        }\n        return result;\n    }\n    \n    public getEntityID():EntityID {\n        \n        let result = EntityID.None;\n        switch (this.getEntityColor()) {\n            case EntityColor.Red:\n                result = EntityID.ItemBombRangeRed;\n                break;\n            case EntityColor.Green:\n                result = EntityID.ItemBombRangeGreen;\n                break;\n            case EntityColor.Blue:\n                result = EntityID.ItemBombRangeBlue;\n                break;\n            case EntityColor.Yellow:\n                result = EntityID.ItemBombRangeYellow;\n                break;\n            case EntityColor.Orange:\n                result = EntityID.ItemBombRangeOrange;\n                break;\n            case EntityColor.Purple:\n                result = EntityID.ItemBombRangePurple;\n                break;\n                \n            default:\n                break;\n        }\n        return result;\n    }\n    public getProducedTrainSupplyMaps() : Object {\n        let result = {};\n        result[GameCurrencyType.GoldCoin] = 1;\n        result[GameCurrencyType.TrainHoe] = 1;\n        return result;\n    }\n\n    public getScore():number{\n        return 500;\n    }\n\n    protected _onClean(cleanOption:EntityCleanOption) {\n        super._onClean(cleanOption);\n        this.getGrid().gainScoreWithEntity(this);\n\n\n        if (!this.getIsDud()) {\n            IGame.playAudio(IdentifierManager.getInstance().getMatchAudioFilePath('eliminate_special_bomb'));\n            let grid = this.getGrid();\n            let bomb = FlyerBomb.create(grid, this.getEntityColor(), this.getShouldLayoutGrass(), this.getLogicalPos(), 2);\n            grid.setFlyerAtLogicalPos(bomb, this.getLogicalPos());\n            this.setVisible(false);\n        }\n    }\n\n    public static create(grid:GridBase, color:EntityColor):ItemBombRange{\n\n        let className = 'ItemBombRange';\n        let prefabFileName = 'match_scene/prefab/entity/item/ItemBombRange';\n        let pool = EntityPrefabNodePool.getInstance();\n        let component = pool.getPrefabNodeWithFileNameAndClassName(prefabFileName, className) as ItemBombRange;\n        if (component) {\n            component.init(grid, color); \n            return component;       \n        }\n        return null;\n    }\n\n    public clone():ItemBombRange {\n        let item = ItemBombRange.create(this.getGrid(),this.getEntityColor());\n        return item;\n    }\n\n    protected init(grid:GridBase, entityColor:EntityColor) : void{\n        super.initBomb(grid, ItemBombType.Range);\n        this.setEntityColor(entityColor);\n    }\n    // LIFE-CYCLE CALLBACKS:\n\n    // onLoad () {}\n\n    start () {\n\n    }\n\n    // update (dt) {}\n}\n","import { Pair } from \"../../../../../../base/Pair\";\nimport { CollectionID } from \"../../../../defines/CollectionID\";\nimport { EntityCleanOption, EntityColor, EntityID } from \"../../../../defines/EntityID\";\nimport GridBase from \"../../../../grid/GridBase\";\nimport FlyerCannon from \"../../../flyer/FlyerCannon\";\nimport ItemBombBase, { ItemBombType } from \"./ItemBombBase\";\nimport IGame from \"../../../../../../base/IGame\";\nimport IdentifierManager from \"../../../../defines/IdentifierManager\";\nimport EntityPrefabNodePool from \"../../../EntityPrefabNodePool\";\nimport { GameCurrencyType } from \"../../../../../../define/GameCurrencyType\";\nimport FlyerCollectedSupply from \"../../../flyer/FlyerCollectedSupply\";\n\n\n// Learn TypeScript:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/typescript.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/typescript.html\n// Learn Attribute:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class ItemBombRow extends ItemBombBase {\n\n    public getCollectionID() : CollectionID {\n    \n        let result = CollectionID.None;\n        switch (this.getEntityColor()) {\n            case EntityColor.Red:\n                result = CollectionID.ItemBombRowRed;\n                break;\n            case EntityColor.Green:\n                result = CollectionID.ItemBombRowGreen;\n                break;\n            case EntityColor.Blue:\n                result = CollectionID.ItemBombRowBlue;\n                break;\n            case EntityColor.Yellow:\n                result = CollectionID.ItemBombRowYellow;\n                break;\n            case EntityColor.Orange:\n                result = CollectionID.ItemBombRowOrange;\n                break;\n            case EntityColor.Purple:\n                result = CollectionID.ItemBombRowPurple;\n                break;\n                \n            default:\n                break;\n        }\n        return result;\n    }\n    \n    public getEntityID():EntityID {\n        \n        let result = EntityID.None;\n        switch (this.getEntityColor()) {\n            case EntityColor.Red:\n                result = EntityID.ItemBombRowRed;\n                break;\n            case EntityColor.Green:\n                result = EntityID.ItemBombRowGreen;\n                break;\n            case EntityColor.Blue:\n                result = EntityID.ItemBombRowBlue;\n                break;\n            case EntityColor.Yellow:\n                result = EntityID.ItemBombRowYellow;\n                break;\n            case EntityColor.Orange:\n                result = EntityID.ItemBombRowOrange;\n                break;\n            case EntityColor.Purple:\n                result = EntityID.ItemBombRowPurple;\n                break;\n                \n            default:\n                break;\n        }\n        return result;\n    }\n\n    public getProducedTrainSupplyMaps() : Object {\n        let result = {};\n        result[GameCurrencyType.GoldCoin] = 1;\n        result[GameCurrencyType.TrainSoap] = 1;\n        return result;\n    }\n\n    public getScore():number{\n        return 300;\n    }\n\n    protected _onClean(cleanOption:EntityCleanOption) {\n        super._onClean(cleanOption);\n        this.getGrid().gainScoreWithEntity(this);\n        if (!this.getIsDud()) {\n            IGame.playAudio(IdentifierManager.getInstance().getMatchAudioFilePath('eliminate_special_line'));\n            let rayDirections:Pair<cc.Vec2, boolean>[] = [\n                new Pair<cc.Vec2, boolean>(cc.v2(1, 0), true),\n                new Pair<cc.Vec2, boolean>(cc.v2(-1, 0), false),\n            ];\n            let grid = this.getGrid();\n            for (let ray of rayDirections) {\n                let cannon = FlyerCannon.create(grid, \n                                                this.getEntityColor(), \n                                                this.getShouldLayoutGrass(), \n                                                this.getLogicalPos(), \n                                                ray.first, \n                                                ray.second);\n                grid.setFlyerAtLogicalPos(cannon, this.getLogicalPos());\n            }\n\n            this.setVisible(false);\n        }\n        \n    }\n\n    public static create(grid:GridBase, color:EntityColor):ItemBombRow{\n\n        let className = 'ItemBombRow';\n        let prefabFileName = 'match_scene/prefab/entity/item/ItemBombRow';\n        let pool = EntityPrefabNodePool.getInstance();\n        let component = pool.getPrefabNodeWithFileNameAndClassName(prefabFileName, className) as ItemBombRow;\n        if (component) {\n            component.init(grid, color); \n            return component;       \n        }\n        return null;\n    }\n\n    public clone():ItemBombRow {\n        let item = ItemBombRow.create(this.getGrid(),this.getEntityColor());\n        return item;\n    }\n    protected init(grid:GridBase, entityColor:EntityColor) : void{\n        super.initBomb(grid, ItemBombType.Row);\n        this.setEntityColor(entityColor);\n    }\n    // LIFE-CYCLE CALLBACKS:\n\n    // onLoad () {}\n\n    start () {\n\n    }\n\n    // update (dt) {}\n}\n","import ItemBase, { ItemType } from \"../ItemBase\";\nimport GridBase from \"../../../grid/GridBase\";\nimport { CollectionID } from \"../../../defines/CollectionID\";\nimport { EntityID, EntityCleanOption, EntityColor } from \"../../../defines/EntityID\";\nimport GridCommand from \"../../../commond/GridCommand\";\nimport FlyerAnimation, { FlyerAnimationType } from \"../../flyer/FlyerAnimation\";\nimport IGame from \"../../../../../base/IGame\";\nimport IdentifierManager from \"../../../defines/IdentifierManager\";\nimport EntityPrefabNodePool from \"../../EntityPrefabNodePool\";\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class ItemBone extends ItemBase {\n\n    public static create(grid:GridBase):ItemBone{\n\n        let className = 'ItemBone';\n        let prefabFileName = 'match_scene/prefab/entity/item/ItemBone';\n        let pool = EntityPrefabNodePool.getInstance();\n        let component = pool.getPrefabNodeWithFileNameAndClassName(prefabFileName, className) as ItemBone;\n        if (component) {\n            component.init(grid); \n            return component;       \n        }\n        return null;\n    }\n\n    public clone():ItemBone {\n        let item = ItemBone.create(this.getGrid());\n        return item;\n    }\n\n    public getCollectionID():CollectionID{\n        return CollectionID.ItemBone;\n    }\n\n    public getEntityID():EntityID{\n        return EntityID.ItemBone;\n    }\n\n    public getScore():number{\n        return 500;\n    }\n\n    protected init(grid:GridBase){\n        super.initItem(grid, ItemType.Bone);\n    }\n\n    protected _canDrop():boolean{\n        return true;\n    }\n\n    protected _canSwap():boolean{\n        return true;\n    }\n\n    protected _canMatch():boolean{\n        return false;\n    }\n\n    protected _canCleanBySuicide():boolean{\n        return true;\n    }\n\n    protected _satisfyMatch():boolean{\n        let cell = this.getGrid().getCellAtLogicalPos(this.getLogicalPos());\n        if(cell && cell.getIsBoneCollector()){\n            return true;\n        }\n        return false;\n    }\n\n    protected _onSatisfyMatch(basePriority:number):void{\n        this.getGrid().dispatchCommand(this.getLogicalPos(), GridCommand.SuicideClean(this.getLogicalPos(), \n                    EntityColor.None, false), 0);\n    }\n\n    protected _canMatchWithNeighbourSwap(swapPos:cc.Vec2):boolean{\n        let item = this.getGrid().getItemAtLogicalPos(swapPos);\n        if(item){\n            if(item.getEntityID() == EntityID.ItemBone){\n                return false;\n            }\n\n            if(item.getEntityID() == EntityID.ItemBombRainbow ||\n                item.canExcuteCommand(GridCommand.NeighbourSwap(this.getLogicalPos()))){\n                    return this._satisfyMatch();\n                }\n        }\n        return false;\n    }\n\n    protected _onMatchWithNeighbourSwap(swapPos:cc.Vec2):void{\n        this.getGrid().dispatchCommand(this.getLogicalPos(), GridCommand.SuicideClean(this.getLogicalPos(),\n            EntityColor.None, false), 0);\n    }\n\n    protected _onClean(cleanOption:EntityCleanOption):void{\n        this.setVisible(false);\n        this.getGrid().gainScoreWithEntity(this);\n        this.progressDeathWish(cleanOption);\n        this.selfDestory(true);\n        let flyer = FlyerAnimation.createAnimationWithType(this.getGrid(), FlyerAnimationType.CommonHurt);\n        this.getGrid().setFlyerAtLogicalPos(flyer, this.getLogicalPos());\n        flyer.node.zIndex = this.getTopZOrder();\n        IGame.playAudio(IdentifierManager.getInstance().getMatchAudioFilePath('bone'));\n    }\n}\n","import ItemBase, { ItemType } from \"../ItemBase\";\nimport GridBase from \"../../../grid/GridBase\";\nimport { CollectionID } from \"../../../defines/CollectionID\";\nimport { EntityID, EntityColor, EntityCleanOption } from \"../../../defines/EntityID\";\nimport FlyerAnimation from \"../../flyer/FlyerAnimation\";\nimport IGame from \"../../../../../base/IGame\";\nimport IdentifierManager from \"../../../defines/IdentifierManager\";\nimport EntityPrefabNodePool from \"../../EntityPrefabNodePool\";\n\n// Learn TypeScript:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/typescript.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/typescript.html\n// Learn Attribute:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class ItemChestnut extends ItemBase {\n\n    public static create(grid:GridBase):ItemChestnut{\n\n        let className = 'ItemChestnut';\n        let prefabFileName = 'match_scene/prefab/entity/item/ItemChestnut';\n        let pool = EntityPrefabNodePool.getInstance();\n        let component = pool.getPrefabNodeWithFileNameAndClassName(prefabFileName, className) as ItemChestnut;\n        if (component) {\n            component.init(grid); \n            return component;       \n        }\n        return null;\n    }\n\n    public clone():ItemChestnut {\n        let item = ItemChestnut.create(this.getGrid());\n        return item;\n    }\n\n    public getCollectionID():CollectionID{\n        return CollectionID.ItemChestnut;\n    }\n\n    public getEntityID():EntityID{\n        return EntityID.ItemChestnut;\n    }\n\n    public getScore():number{\n        return 150;\n    }\n\n    public getButterflyPriority(color:EntityColor, layoutGrass:boolean):number{\n        if(this.getGrid().isTargetCollectionID(this.getCollectionID())){\n            return 1;\n        }\n\n        return super.getButterflyPriority(color, layoutGrass);\n    }\n\n    protected init(grid:GridBase){\n        super.initItem(grid, ItemType.Chestnut);\n    }\n\n    protected _canDrop():boolean{\n        return true;\n    }\n\n    protected _canSwap():boolean{\n        return true;\n    }\n\n    protected _canBlockBombRay() : boolean {\n        return true;\n    }\n\n    protected _canCleanByBomb(cleanColor:EntityColor):boolean{\n        return true;\n    }\n\n    protected _canCleanByNeighbour(color:EntityColor):boolean{\n        return true;\n    }\n\n    protected _onClean(cleanOption:EntityCleanOption):void{\n        this.getGrid().gainScoreWithEntity(this);\n        if (!this.isTargetCollection()) {\n            let flyer = FlyerAnimation.createDieAnimation(this.getGrid(), this.getEntityID());\n            this.getGrid().setFlyerAtLogicalPos(flyer, this.getLogicalPos());\n            IGame.playAudio(IdentifierManager.getInstance().getMatchAudioFilePath('nut'));\n        }\n        this.setVisible(false);\n        this.progressDeathWish(cleanOption);\n        this.selfDestory(true);\n    }\n}\n","import { CollectionID } from \"../../../defines/CollectionID\";\nimport { EntityID } from \"../../../defines/EntityID\";\nimport GridBase from \"../../../grid/GridBase\";\nimport ItemBase, { ItemType } from \"../ItemBase\";\nimport EntityPrefabNodePool from \"../../EntityPrefabNodePool\";\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class ItemDogHouse extends ItemBase {\n\n    public static create(grid:GridBase):ItemDogHouse{\n\n        let className = 'ItemDogHouse';\n        let prefabFileName = 'match_scene/prefab/entity/item/ItemDogHouse';\n        let pool = EntityPrefabNodePool.getInstance();\n        let component = pool.getPrefabNodeWithFileNameAndClassName(prefabFileName, className) as ItemDogHouse;\n        if (component) {\n            component.init(grid); \n            return component;       \n        }\n        return null;\n    }\n\n    public clone():ItemDogHouse {\n        let item = ItemDogHouse.create(this.getGrid());\n        return item;\n    }\n\n    public getCollectionID():CollectionID{\n        return CollectionID.ItemDogHouse;\n    }\n\n    public getEntityID():EntityID{\n        return EntityID.ItemDogHouse;\n    }\n\n    protected init(grid:GridBase){\n        super.initItem(grid, ItemType.DogHouse);\n    }\n\n    protected _canDrop():boolean{\n        return  false;\n    }\n\n    protected _canSwap():boolean{\n        return false;\n    }\n\n    protected _canMatch():boolean{\n        return false;\n    }\n\n    protected _converUnderForever():boolean{\n        return true;\n    }\n\n}\n","import { CollectionID } from \"../../../defines/CollectionID\";\nimport { EntityCleanOption, EntityColor, EntityID, EntityCleanType } from \"../../../defines/EntityID\";\nimport { PowerID } from \"../../../defines/PowerID\";\nimport GridBase from \"../../../grid/GridBase\";\nimport ItemBase, { ItemType } from \"../ItemBase\";\nimport FlyerAnimation from \"../../flyer/FlyerAnimation\";\nimport IGame from \"../../../../../base/IGame\";\nimport IdentifierManager from \"../../../defines/IdentifierManager\";\nimport EntityPrefabNodePool from \"../../EntityPrefabNodePool\";\nimport GameMath from \"../../../../../extend/utils/GameMath\";\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class ItemDogPaw extends ItemBase {\n    public static create(grid:GridBase, color:EntityColor):ItemDogPaw{\n        \n        let className = 'ItemDogPaw';\n        let prefabFileName = 'match_scene/prefab/entity/item/ItemDogPaw';\n        let pool = EntityPrefabNodePool.getInstance();\n        let component = pool.getPrefabNodeWithFileNameAndClassName(prefabFileName, className) as ItemDogPaw;\n        if (component) {\n            component.init(grid, color); \n            return component;       \n        }\n        return null;\n    }\n\n    public clone():ItemDogPaw {\n        let item = ItemDogPaw.create(this.getGrid(),this.getEntityColor());\n        return item;\n    }\n\n    private init(grid:GridBase, color:EntityColor):void{\n        super.initItem(grid, ItemType.DogPaw);\n        this.setEntityColor(color);\n    }\n\n    public getCollectionID():CollectionID{\n        let result = CollectionID.None;\n        switch(this.getEntityColor()){\n            case EntityColor.Red:{\n                result = CollectionID.ItemPawRed;\n                break;\n            }\n            case EntityColor.Green:{\n                result = CollectionID.ItemPawGreen;\n                break;\n            }\n            case EntityColor.Blue:{\n                result = CollectionID.ItemPawBlue;\n                break;\n            }\n            case EntityColor.Yellow:{\n                result = CollectionID.ItemPawYellow;\n                break;\n            }\n            case EntityColor.Orange:{\n                result = CollectionID.ItemPawOrange;\n                break;\n            }\n            case EntityColor.Purple:{\n                result = CollectionID.ItemPawPurple;\n                break;\n            }\n            default:{\n                break;\n            }\n        }\n        return result;\n    }\n\n    public getEntityID():EntityID{\n        let result:EntityID = EntityID.None;\n        switch(this.getEntityColor()){\n            case EntityColor.Red:{\n                result = EntityID.ItemPawRed;\n                break;\n            }\n            case EntityColor.Green:{\n                result = EntityID.ItemPawGreen;\n                break;\n            }\n            case EntityColor.Blue:{\n                result = EntityID.ItemPawBlue;\n                break;\n            }\n            case EntityColor.Yellow:{\n                result = EntityID.ItemPawYellow;\n                break;\n            }\n            case EntityColor.Orange:{\n                result = EntityID.ItemPawOrange;\n                break;\n            }\n            case EntityColor.Purple:{\n                result = EntityID.ItemPawPurple;\n                break;\n            }\n            default:{\n                break;\n            }\n        }\n        return result;\n    }\n\n    public getPowerID():PowerID{\n        return PowerID.PuppyVitality;\n    }\n\n    public getScore():number{\n        return 100;\n    }\n\n    protected _canDrop():boolean{\n        return true;\n    }\n\n    protected _canSwap():boolean{\n        return true;\n    }\n\n    protected _canMatch():boolean{\n        return true;\n    }\n\n    protected _canChangeColor():boolean{\n        return true;\n    }\n\n    protected _canCleanByBomb(cleanColor:EntityColor):boolean{\n        return true;\n    }\n\n    protected _canCleanByMatch() : boolean {\n        return true;\n    }\n\n    protected _canShuffleWhenCreate():boolean{\n        return true;\n    }\n\n    protected _onClean(cleanOption:EntityCleanOption):void{\n  \n        this.progressDeathWish(cleanOption);\n        let state = this.playAnimation('matched');\n        if (state) {\n            this.removeFromGridAndAddToEffect();\n            this.node.zIndex = GridBase.ZORDER_PUPPY_TOP;\n            this.getGrid().addObstructs(this);\n            let removeAction = cc.sequence(cc.delayTime(state.duration),\n                                           cc.callFunc(()=>{\n                                              this._flyToDog();\n                                           }));\n            this.runAction(removeAction);\n        }else{\n            this.selfDestory(true);\n        }\n        this.getGrid().gainScoreWithEntity(this);\n\n        if (cleanOption.cleanType == EntityCleanType.Match) {\n            let combo = this.getGrid().getPowerAmount(PowerID.MatchCombo);\n            let fileName = 'eliminate_0';\n            switch (combo) {\n                case 0:\n                    fileName = 'eliminate_0';\n                    break;\n                case 1:\n                    fileName = 'eliminate_1';\n                    break;\n                case 2:\n                    fileName = 'eliminate_2';\n                    break;\n                case 3:\n                    fileName = 'eliminate_3';\n                    break;\n                case 4:\n                    fileName = 'eliminate_4';\n                    break;\n                case 5:\n                    fileName = 'eliminate_5';\n                    break;\n                case 6:\n                    fileName = 'eliminate_6';\n                    break;\n                case 7:\n                    fileName = 'eliminate_7';\n                    break;\n                case 8:\n                    fileName = 'eliminate_8';\n                    break;\n                default:\n                    fileName = 'eliminate_8';\n                    break;\n            }\n            IGame.playAudio(IdentifierManager.getInstance().getMatchAudioFilePath(fileName));\n        }\n    }\n\n    protected _flyToDog() : void {\n\n        if (this.getGrid().isTargetCollectionID(CollectionID.ItemPuppy)) {\n            \n            let targetPos:cc.Vec2 = cc.Vec2.ZERO; \n            let itemsMap = this.getGrid().getItemsMap();\n            for (let key in itemsMap) {\n                let item = itemsMap[key] as ItemBase;\n                if (item.getEntityID() == EntityID.ItemPuppy) {\n                    targetPos = item.getLogicalPos();\n                    break;\n                }\n            }\n\n            let distance = GameMath.getDistance(this.node.position, this.getPixelPos(targetPos));\n            let duration = distance / 1000;\n            let move = cc.sequence(cc.spawn(cc.moveTo(duration, this.getPixelPos(targetPos)),\n                                            cc.scaleTo(duration, 0.5)),\n                                   cc.callFunc(()=>{\n                                        this.getGrid().bombCell(targetPos);\n                                        this.getGrid().removeObstructs(this);\n                                        this.destoryWithRecycle(true);\n                                   }));\n            this.runAction(move);\n        }else{\n            this.selfDestory(true);\n        }\n    }\n}\n","import ItemBase, { ItemType } from \"../ItemBase\";\nimport GridBase from \"../../../grid/GridBase\";\nimport { CollectionID } from \"../../../defines/CollectionID\";\nimport { EntityID, EntityColor, EntityCleanOption, EntityCleanType } from \"../../../defines/EntityID\";\nimport IdentifierManager from \"../../../defines/IdentifierManager\";\nimport FlyerAnimation, { FlyerAnimationType } from \"../../flyer/FlyerAnimation\";\nimport IGame from \"../../../../../base/IGame\";\nimport EntityPrefabNodePool from \"../../EntityPrefabNodePool\";\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class ItemDoughnut extends ItemBase {\n    private _healthPoint:number = 0;\n\n    public static create(grid:GridBase, healthPoint:number):ItemDoughnut{\n\n        let className = 'ItemDoughnut';\n        let prefabFileName = 'match_scene/prefab/entity/item/ItemDoughnut';\n        let pool = EntityPrefabNodePool.getInstance();\n        let component = pool.getPrefabNodeWithFileNameAndClassName(prefabFileName, className) as ItemDoughnut;\n        if (component) {\n            component.init(grid, healthPoint); \n            return component;       \n        }\n        return null;\n    }\n\n    public clone():ItemDoughnut {\n        let item = ItemDoughnut.create(this.getGrid(), this.getHealthPoint());\n        return item;\n    }\n\n    public getCollectionID():CollectionID{\n        return CollectionID.ItemDoughnut;\n    }\n\n    public getEntityID():EntityID{\n        let result = EntityID.None;\n        switch(this.getHealthPoint()){\n            case 1:{\n                result = EntityID.ItemDoughnutHp1;\n                break;\n            }\n            case 2:{\n                result = EntityID.ItemDoughnutHp2;\n                break;\n            }\n            case 3:{\n                result = EntityID.ItemDoughnutHp3;\n                break;\n            }\n            default:{\n                break;\n            }\n        }\n        return result;\n    }\n\n    public getScore():number{\n        return 100;\n    }\n\n    public getButterflyPriority(color:EntityColor, layoutGrass:boolean):number{\n        if(this.getGrid().isTargetCollectionID(this.getCollectionID())){\n            return 1;\n        }\n\n        return super.getButterflyPriority(color, layoutGrass);\n    }\n\n    protected init(grid:GridBase, healthPoint:number){\n        super.initItem(grid, ItemType.Doughnut);\n        this.setHealthPoint(healthPoint);\n    }\n\n    protected _canDrop():boolean{\n        return true;\n    }\n\n    protected _canSwap():boolean{\n        return true;\n    }\n\n    protected _canCleanByBomb(cleanColor:EntityColor):boolean{\n        return true;\n    }\n\n    protected _canCleanByNeighbour(color:EntityColor):boolean{\n        return true;\n    }\n\n    protected _onClean(cleanOption:EntityCleanOption):void{\n        let rate = 1; \n        if (cleanOption.cleanType == EntityCleanType.Terminate) {\n            rate = this.getHealthPoint();\n            this.setHealthPoint(1);\n        }\n        this.getGrid().gainScoreWithEntity(this, rate);\n        if(this.getHealthPoint() <= 1){\n            if (!this.isTargetCollection()) {\n                let flyer = FlyerAnimation.createDieAnimation(this.getGrid(), this.getEntityID());\n                this.getGrid().setFlyerAtLogicalPos(flyer, this.getLogicalPos());\n                IGame.playAudio(IdentifierManager.getInstance().getMatchAudioFilePath('doughnut'));\n            }\n            this.setVisible(false);\n            this.progressDeathWish(cleanOption);\n            this.selfDestory(true);\n\n            \n        }else{   \n            this.setHealthPoint(this.getHealthPoint() - 1);\n            this.selfHurt();\n            IGame.playAudio(IdentifierManager.getInstance().getMatchAudioFilePath('eliminate_0'));\n            let flyer = FlyerAnimation.createAnimationWithType(this.getGrid(), FlyerAnimationType.CommonHurt);\n            this.getGrid().setFlyerAtLogicalPos(flyer, this.getLogicalPos());\n            flyer.node.zIndex = this.getTopZOrder();\n        }\n    }\n\n    protected getHealthPoint():number{\n        return this._healthPoint;\n    }\n\n    protected setHealthPoint(val:number){\n        this._healthPoint = val;\n        this.updatePuppet();\n    }\n}\n","import GameMath from \"../../../../extend/utils/GameMath\";\nimport { EntityColor, EntityID } from \"../../defines/EntityID\";\nimport IdentifierManager from \"../../defines/IdentifierManager\";\nimport { KindID } from \"../../defines/KindID\";\nimport GridBase from \"../../grid/GridBase\";\nimport ItemBombBase, { ItemBombType } from \"./color/bomb/ItemBombBase\";\nimport ItemBombButterfly from \"./color/bomb/ItemBombButterfly\";\nimport ItemBombColumn from \"./color/bomb/ItemBombColumn\";\nimport ItemBombCross from \"./color/bomb/ItemBombCross\";\nimport ItemBombRainbow from \"./color/bomb/ItemBombRainbow\";\nimport ItemBombRange from \"./color/bomb/ItemBombRange\";\nimport ItemBombRow from \"./color/bomb/ItemBombRow\";\nimport ItemDogPaw from \"./color/ItemDogPaw\";\nimport ItemNormal from \"./color/ItemNormal\";\nimport ItemBase from \"./ItemBase\";\nimport ItemBalloon from \"./special/ItemBalloon\";\nimport ItemDogHouse from \"./special/ItemDogHouse\";\nimport ItemMagicCrystal from \"./special/ItemMagicCrystal\";\nimport ItemPuppy from \"./special/ItemPuppy\";\nimport ItemBlock from \"./special/ItemBlock\";\nimport ItemBone from \"./special/ItemBone\";\nimport ItemWatermelon from \"./special/ItemWatermelon\";\nimport ItemDoughnut from \"./special/ItemDoughnut\";\nimport ItemFireWormBottle from \"./special/ItemFireWormBottle\";\nimport ItemJamBottle from \"./special/ItemJamBottle\";\nimport ItemFruitCake from \"./special/ItemFruitCake\";\nimport ItemChestnut from \"./special/ItemChestnut\";\nimport ItemHoneyComb from \"./special/ItemHoneyComb\";\nimport ItemMower, { ItemMowerDirection } from \"./special/ItemMower\";\nimport ItemFireworks from \"./special/ItemFireworks\";\nimport ItemStatue from \"./special/ItemStatue\";\nimport { EntityGroupID } from \"../../defines/EntityGroupID\";\n\n\nexport default class ItemFactory  {\n\n    \n\n    public static generateItemWithEntityID(grid:GridBase, entityID:EntityID):ItemBase {\n        let item:ItemBase = null;\n        \n        switch (entityID) {\n            case EntityID.ItemNormalRed:\n            case EntityID.ItemNormalGreen:\n            case EntityID.ItemNormalBlue:\n            case EntityID.ItemNormalYellow:\n            case EntityID.ItemNormalOrange:\n            case EntityID.ItemNormalPurple:{\n                let color = entityID - EntityID.ItemNormalRed + EntityColor.Red;\n                item = ItemNormal.create(grid, color);\n            }\n                break;\n\n            case EntityID.ItemBombButterflyRed:\n            case EntityID.ItemBombButterflyGreen:\n            case EntityID.ItemBombButterflyBlue:\n            case EntityID.ItemBombButterflyYellow:\n            case EntityID.ItemBombButterflyOrange:\n            case EntityID.ItemBombButterflyPurple:{\n                let color = entityID - EntityID.ItemBombButterflyRed + EntityColor.Red;\n                item = ItemBombButterfly.create(grid, color);\n            }\n                break;\n\n            case EntityID.ItemBombRowRed:\n            case EntityID.ItemBombRowGreen:\n            case EntityID.ItemBombRowBlue:\n            case EntityID.ItemBombRowYellow:\n            case EntityID.ItemBombRowOrange:\n            case EntityID.ItemBombRowPurple:{\n                let color = entityID - EntityID.ItemBombRowRed + EntityColor.Red;\n                item = ItemBombRow.create(grid, color);\n            }\n                break;\n\n            case EntityID.ItemBombColumnRed:\n            case EntityID.ItemBombColumnGreen:\n            case EntityID.ItemBombColumnBlue:\n            case EntityID.ItemBombColumnYellow:\n            case EntityID.ItemBombColumnOrange:\n            case EntityID.ItemBombColumnPurple:{\n                let color = entityID - EntityID.ItemBombColumnRed + EntityColor.Red;\n                item = ItemBombColumn.create(grid, color);\n            }\n                break;\n\n            case EntityID.ItemBombCrossRed:\n            case EntityID.ItemBombCrossGreen:\n            case EntityID.ItemBombCrossBlue:\n            case EntityID.ItemBombCrossYellow:\n            case EntityID.ItemBombCrossOrange:\n            case EntityID.ItemBombCrossPurple:{\n                let color = entityID - EntityID.ItemBombCrossRed + EntityColor.Red;\n                item = ItemBombCross.create(grid, color);\n            }\n                break;\n\n            case EntityID.ItemBombRangeRed:\n            case EntityID.ItemBombRangeGreen:\n            case EntityID.ItemBombRangeBlue:\n            case EntityID.ItemBombRangeYellow:\n            case EntityID.ItemBombRangeOrange:\n            case EntityID.ItemBombRangePurple:{\n                let color = entityID - EntityID.ItemBombRangeRed + EntityColor.Red;\n                item = ItemBombRange.create(grid, color);\n            }\n                break;\n\n            case EntityID.ItemPawRed:\n            case EntityID.ItemPawGreen:\n            case EntityID.ItemPawBlue:\n            case EntityID.ItemPawYellow:\n            case EntityID.ItemPawOrange:\n            case EntityID.ItemPawPurple:{\n                let color = entityID - EntityID.ItemPawRed + EntityColor.Red;\n                item = ItemDogPaw.create(grid, color);\n            }\n                break;\n\n            case EntityID.ItemBombRainbow:{\n                item = ItemBombRainbow.create(grid);\n            }\n                break;\n\n            case EntityID.ItemDoughnutHp1:\n            case EntityID.ItemDoughnutHp2:\n            case EntityID.ItemDoughnutHp3:{\n                let hp = entityID - EntityID.ItemDoughnutHp1 + 1;\n                item = ItemDoughnut.create(grid, hp);\n            }\n                break;\n\n            case EntityID.ItemBlockHp1:\n            case EntityID.ItemBlockHp2:\n            case EntityID.ItemBlockHp3:\n            case EntityID.ItemBlockHp4:\n            case EntityID.ItemBlockHp5:\n            case EntityID.ItemBlockHp6:{\n                let hp = entityID - EntityID.ItemBlockHp1 + 1;\n                item = ItemBlock.create(grid, hp);\n            }\n                break;\n\n            case EntityID.ItemMagicCrystal:{\n                item = ItemMagicCrystal.create(grid);\n            }\n                break;\n            case EntityID.ItemMowerUp:\n            case EntityID.ItemMowerRight:\n            case EntityID.ItemMowerDown:\n            case EntityID.ItemMowerLeft:{\n                let dirction = (entityID - EntityID.ItemMowerUp) + ItemMowerDirection.Up;\n                item = ItemMower.create(grid, dirction);\n            }   \n                break;\n            case EntityID.ItemBone:{\n                item = ItemBone.create(grid);\n            }\n                break;\n            case EntityID.ItemChestnut:{\n                item = ItemChestnut.create(grid);\n            }\n                break;\n            case EntityID.ItemPuppy:{\n                item = ItemPuppy.create(grid);\n            }\n                break;\n            case EntityID.ItemDogHouse:{\n                item = ItemDogHouse.create(grid);\n            }\n                break;\n            case EntityID.ItemBalloon:{\n                item = ItemBalloon.create(grid);\n            }\n                break;\n            case EntityID.ItemHoneyComb:{\n                item = ItemHoneyComb.create(grid);\n            }\n                break;\n            case EntityID.ItemJamBottle:{\n                item = ItemJamBottle.create(grid);\n            }\n                break;\n            case EntityID.ItemWatermelon:{\n                item = ItemWatermelon.create(grid);\n            }\n                break;\n            case EntityID.ItemFruitCake:{\n                item = ItemFruitCake.create(grid);\n            }\n                break;\n            case EntityID.ItemFireWormBottle:{\n                item = ItemFireWormBottle.create(grid);\n            }\n                break;\n            case EntityID.ItemFireworksHp1:\n            case EntityID.ItemFireworksHp2:\n            case EntityID.ItemFireworksHp3:\n            case EntityID.ItemFireworksHp4:{\n                let hp = entityID - EntityID.ItemFireworksHp1 + 1;\n                item = ItemFireworks.create(grid, hp);\n            }\n                break;\n            case EntityID.ItemStatueHp1:\n            case EntityID.ItemStatueHp2:\n            case EntityID.ItemStatueHp3:{\n                let hp = entityID - EntityID.ItemStatueHp1 + 1;\n                item = ItemStatue.create(grid, hp);\n            }\n                break;\n            default:\n                break;\n        }\n        if(!item){\n            item = this.generateNormalRandomItem(grid);\n        }\n        return item;\n    }\n\n    private static generateNormalRandomItem(grid:GridBase) : ItemBase {\n\n        let dropEntityMap = grid.getDropEntityMap();\n        let avilabelEntityMap = {};\n        let normalIDs = IdentifierManager.getInstance().getEntityIDsFromEntityGroupID(EntityGroupID.ItemNormal);\n        let pawIDs = IdentifierManager.getInstance().getEntityIDsFromEntityGroupID(EntityGroupID.ItemPaw);\n        for (let key in dropEntityMap) {\n            let amount = dropEntityMap[key];\n            let entityID = Number(key) as EntityID;\n            if(normalIDs.indexOf(entityID) != -1 || pawIDs.indexOf(entityID) != -1){\n                avilabelEntityMap[entityID] = amount;\n            }\n        }\n        let entityID = grid.getRandomEntityID(avilabelEntityMap,grid.getLimitedEntityMap(), grid.getLimitedGroupMap(), true);\n        return ItemFactory.generateItemWithEntityID(grid, entityID);\n    }\n\n    private static generateRandomItemWithGroupIDs(groupIDs:EntityGroupID[], grid:GridBase) : ItemBase {\n\n        let dropEntityMap = grid.getDropEntityMap();\n        let avilabelEntityMap = {};\n\n        for (let groupID of groupIDs) {\n            let entityIDs = IdentifierManager.getInstance().getEntityIDsFromEntityGroupID(groupID);\n            for (let entityID of entityIDs) {\n                let relevantEntityID = IdentifierManager.getInstance().getCorrespondingNormlaEntityID(entityID)\n                let value = dropEntityMap[relevantEntityID];\n                if (value) {\n                    avilabelEntityMap[entityID] = value;\n                }\n            }\n        }\n        let entityID = grid.getRandomEntityID(avilabelEntityMap,{},{});\n        return ItemFactory.generateItemWithEntityID(grid, entityID);\n    }\n\n    public static generateItemWithKindID(grid:GridBase, kindID:KindID) : ItemBase {\n        let item:ItemBase = null;\n        switch (kindID) {\n            case KindID.ItemNormalRandom:{\n                item = ItemFactory.generateNormalRandomItem(grid);\n            }\n                break;\n            case KindID.ItemBombButterflyRandom:{\n                item = ItemFactory.generateRandomItemWithGroupIDs([EntityGroupID.ItemBombButterfly], grid);\n            }\n                break;\n            case KindID.ItemBombRowRandom:{\n                item = ItemFactory.generateRandomItemWithGroupIDs([EntityGroupID.ItemBombRow], grid);\n            }\n                break;\n            case KindID.ItemBombColumnRandom:{\n                item = ItemFactory.generateRandomItemWithGroupIDs([EntityGroupID.ItemBombColumn], grid);\n            }\n                break;\n            case KindID.ItemBombCrossRandom:{\n                item = ItemFactory.generateRandomItemWithGroupIDs([EntityGroupID.ItemBombCross], grid);\n            }\n                break;\n            case KindID.ItemBombRangeRandom:{\n                item = ItemFactory.generateRandomItemWithGroupIDs([EntityGroupID.ItemBombRange], grid);\n            }\n                break;\n            case KindID.ItemPawRandom:{\n                item = ItemFactory.generateRandomItemWithGroupIDs([EntityGroupID.ItemPaw], grid);\n            }\n                break;\n            default:{\n                let entityID = IdentifierManager.getInstance().getEntityIDFromKindID(kindID);;\n                item = ItemFactory.generateItemWithEntityID(grid, entityID);\n            }\n                break;\n        }\n        return item;\n    }\n\n    public static generateGlobalRandomItem(grid:GridBase) : ItemBase {\n\n        let normalItemIDs:EntityID[] = [\n            EntityID.ItemNormalRed,\n            EntityID.ItemNormalGreen,\n            EntityID.ItemNormalBlue,\n            EntityID.ItemNormalYellow,\n            EntityID.ItemNormalOrange,\n            EntityID.ItemNormalPurple,\n            \n            EntityID.ItemPawRed,\n            EntityID.ItemPawGreen,\n            EntityID.ItemPawBlue,\n            EntityID.ItemPawYellow,\n            EntityID.ItemPawOrange,\n            EntityID.ItemPawPurple,\n        ];\n        \n        let normalItemMap:Object = {};\n        \n        let dropMap = grid.getDropEntityMap();\n        \n        for (let entityID in dropMap) {\n            let value = dropMap[entityID];\n            if(GameMath.indexOf(normalItemIDs, entityID) != -1) {\n                normalItemMap[entityID] = value;\n            }\n        }\n\n        let entityID = grid.getRandomEntityID(normalItemIDs, grid.getLimitedEntityMap(), grid.getLimitedGroupMap());\n        return this.generateItemWithEntityID(grid, entityID);\n    }\n\n    public static generateEffectBombItem(grid:GridBase, bombType:ItemBombType, color:EntityColor) : ItemBombBase {\n        let item:ItemBombBase = null;\n        \n        switch (bombType) {\n            case ItemBombType.Rainbow:{\n                item = ItemBombRainbow.create(grid);\n            }\n                break;\n            case ItemBombType.Range:{\n                item = ItemBombRange.create(grid, color);\n            }\n                break;\n            case ItemBombType.Cross:{\n                item = ItemBombCross.create(grid, color);\n            }\n                break;\n            case ItemBombType.Row:{\n                item = ItemBombRow.create(grid, color);\n            }\n                break;\n            case ItemBombType.Column:{\n                item = ItemBombColumn.create(grid, color);\n            }\n                break;\n            case ItemBombType.Butterfly:{\n                item = ItemBombButterfly.create(grid, color);\n            }\n                break;\n        \n            default:\n                break;\n        }\n        return item;\n    }\n\n    public static generateItemWithName(grid:GridBase, name:string) : ItemBase {\n\n        let item:ItemBase = null;\n        let entityID = IdentifierManager.getInstance().getEntityIDFromString(name);\n        item = this.generateItemWithEntityID(grid, entityID);\n        return item;\n    }\n\n    public static isShuffleKindID(kindID:KindID) {\n        return kindID == KindID.ItemNormalRandom;\n    }\n\n}\n","import ItemBase, { ItemType } from \"../ItemBase\";\nimport GridBase from \"../../../grid/GridBase\";\nimport { CollectionID } from \"../../../defines/CollectionID\";\nimport { EntityID, EntityColor, EntityCleanOption, EntityCleanType } from \"../../../defines/EntityID\";\nimport TMXConfigInfoKeys from \"../../../defines/TMXConfigInfoKeys\";\nimport { EntityStateType } from \"../../state/EntityStateBase\";\nimport FlyerAnimation, { FlyerAnimationType } from \"../../flyer/FlyerAnimation\";\nimport IGame from \"../../../../../base/IGame\";\nimport IdentifierManager from \"../../../defines/IdentifierManager\";\nimport EntityPrefabNodePool from \"../../EntityPrefabNodePool\";\n\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class ItemFireWormBottle extends ItemBase {\n    private _healthPoint:number = 0;\n\n    private _fireWorms:cc.Node[] = [];\n    public static create(grid:GridBase):ItemFireWormBottle{\n\n        let className = 'ItemFireWormBottle';\n        let prefabFileName = 'match_scene/prefab/entity/item/ItemFireWormBottle';\n        let pool = EntityPrefabNodePool.getInstance();\n        let component = pool.getPrefabNodeWithFileNameAndClassName(prefabFileName, className) as ItemFireWormBottle;\n        if (component) {\n            component.init(grid); \n            return component;       \n        }\n        return null;\n    }\n\n    public clone() : ItemFireWormBottle {\n        let bottle = ItemFireWormBottle.create(this.getGrid());\n        bottle.setHealthPoint(this.getHealthPoint());\n        return bottle;\n    }\n\n    public getCollectionID():CollectionID{\n        return CollectionID.FlyerFireWorm;\n    }\n\n    public getEntityID():EntityID{\n        return EntityID.ItemFireWormBottle;\n    }\n\n    public getScore():number{\n        return 100;\n    }\n\n    public getButterflyPriority(color:EntityColor, layoutGrass:boolean):number{\n        if(this.getGrid().isTargetCollectionID(CollectionID.FlyerFireWorm)){\n            return 1;\n        }\n        return super.getButterflyPriority(color, layoutGrass);\n    }\n\n    public dealWithConfigMap(configMap:Object):void{\n        super.dealWithConfigMap(configMap);\n        if(configMap[TMXConfigInfoKeys.CFG_FIREWORM_BOTTLE_MAX]){\n            this._healthPoint = configMap[TMXConfigInfoKeys.CFG_FIREWORM_BOTTLE_MAX];\n        }\n\n        this.setHealthPoint(this._healthPoint);\n    }\n\n    protected init(grid:GridBase){\n        super.initItem(grid, ItemType.ItemFireWormBottle);\n        for (let i = 0; i < 5; i++) {\n            let key = 'FireWorm' + i;\n            let node = this._puppet.getChildByName(key);\n            if (node) {\n                this._fireWorms.push(node);\n            }\n        }\n    }\n\n    protected _canDrop():boolean{\n        return false;\n    }\n\n    protected _canSwap():boolean{\n        return false;\n    }\n\n    protected _canMatch():boolean{\n        return false;\n    }\n\n    protected _canCleanByBomb(cleanColor:EntityColor):boolean{\n        return true;\n    }\n\n    protected _canCleanByNeighbour(color:EntityColor):boolean{\n        return true;\n    }\n\n    protected _onClean(cleanOption:EntityCleanOption):void{\n        let rate = 1;\n        if (cleanOption.cleanType == EntityCleanType.Terminate) {\n            rate = this.getHealthPoint();\n            for (let i = this.getHealthPoint(); i > 1; i--) {\n                this.onCollected();\n            }\n            this.setHealthPoint(1);\n        }\n        this.getGrid().gainScoreWithEntity(this, rate);\n        if(this.getHealthPoint() <= 1){\n            this.setVisible(false);\n            this.progressDeathWish(cleanOption);\n            this.selfDestory();\n\n            let flyer = FlyerAnimation.createDieAnimation(this.getGrid(), this.getEntityID());\n            this.getGrid().setFlyerAtLogicalPos(flyer, this.getLogicalPos());\n            IGame.playAudio(IdentifierManager.getInstance().getMatchAudioFilePath('firewormfly'));\n            IGame.playAudio(IdentifierManager.getInstance().getMatchAudioFilePath('firewormbottle'));\n        }else{\n            this.onCollected();\n            this.setHealthPoint(this.getHealthPoint() - 1);\n            this.selfHurt();\n            let flyer = FlyerAnimation.createAnimationWithType(this.getGrid(), FlyerAnimationType.CommonHurt);\n            this.getGrid().setFlyerAtLogicalPos(flyer, this.getLogicalPos());\n            flyer.node.zIndex = this.getTopZOrder();\n            IGame.playAudio(IdentifierManager.getInstance().getMatchAudioFilePath('firewormfly'));\n        }\n    }\n\n    protected getHealthPoint():number{\n        return this._healthPoint;\n    }\n\n    protected setHealthPoint(val:number){\n        this._healthPoint = val;\n        this.updatePuppet();\n\n        for (let i = 0; i < 5; i++) {\n            let fireWorm = this._fireWorms[i];\n            if (fireWorm) {\n                fireWorm.active = (i < this._healthPoint)\n            }\n        }\n    }\n\n    onDestroy() {\n        super.onDestroy();\n        this._fireWorms = null;\n    }\n}\n","/**\n * 烟花\n */\n\nimport ItemBase, { ItemType } from \"../ItemBase\";\nimport { CollectionID } from \"../../../defines/CollectionID\";\nimport { EntityID, EntityCleanOption, EntityCleanType, EntityColor} from \"../../../defines/EntityID\";\nimport GridBase from \"../../../grid/GridBase\";\nimport EntityPrefabNodePool from \"../../EntityPrefabNodePool\";\nimport IGame from \"../../../../../base/IGame\";\nimport IdentifierManager from \"../../../defines/IdentifierManager\";\nimport FlyerAnimation, { FlyerAnimationType } from \"../../flyer/FlyerAnimation\";\nimport FlyerFireworksMissile from \"../../flyer/FlyerFireworksMissile\";\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class ItemFireworks extends ItemBase {\n    \n    public static create(grid:GridBase, healthPoint:number):ItemFireworks{\n\n        let className = 'ItemFireworks';\n        let prefabFileName = 'match_scene/prefab/entity/item/ItemFireworks';\n        let pool = EntityPrefabNodePool.getInstance();\n        let component = pool.getPrefabNodeWithFileNameAndClassName(prefabFileName, className) as ItemFireworks;\n\n        \n        if (component) {\n            component.init(grid, healthPoint); \n            return component;       \n        }\n        return null;\n    }\n\n    public clone():ItemFireworks {\n        let item = ItemFireworks.create(this.getGrid(),this.getHealthPoint());\n        return item;\n    }\n\n    protected init(grid:GridBase, healthPoint:number):void{\n        super.initItem(grid, ItemType.Fireworks);\n        this.setHealthPoint(healthPoint);\n    }\n\n    private _healthPoint:number = 0;\n    protected getHealthPoint():number{\n        return this._healthPoint;\n    }\n\n    protected setHealthPoint(val:number){\n        this._healthPoint = val;\n        this.updatePuppet();\n    }\n\n    public getEntityID():EntityID{\n        let result = EntityID.None;\n        switch(this.getHealthPoint()){\n            case 1:{\n                result = EntityID.ItemFireworksHp1;\n                break;\n            }\n            case 2:{\n                result = EntityID.ItemFireworksHp2;\n                break;\n            }\n            case 3:{\n                result = EntityID.ItemFireworksHp3;\n                break;\n            }\n            case 4:{\n                result = EntityID.ItemFireworksHp4;\n                break;\n            }\n            default:{\n                break;\n            }\n        }\n\n        return result;\n    }\n\n    public getCollectionID():CollectionID{\n        return CollectionID.ItemFireworks;\n    }\n\n    public getScore():number{\n        return 100;\n    }\n\n    protected _canDrop():boolean{\n        return false;\n    }\n\n    protected _canSwap():boolean{\n        return false;\n    }\n\n    protected _canMatch():boolean{\n        return false;\n    }\n\n    protected _canCleanByBomb(cleanColor:EntityColor):boolean{\n        return true;\n    }\n\n    protected _canCleanByNeighbour(color:EntityColor):boolean{\n        return true;\n    }\n\n    protected _onClean(cleanOption:EntityCleanOption):void{\n        let rate = 1;\n        if (cleanOption.cleanType == EntityCleanType.Terminate) {\n            this.setHealthPoint(1);\n        }\n        this.getGrid().gainScoreWithEntity(this, rate);\n        if(this.getHealthPoint() <= 1){\n\n            this.progressDeathWish(cleanOption);\n            this.setVisible(false);\n            this.selfDestory();\n            \n            //生成3个导弹\n            let grid = this.getGrid();\n            let isLayoutGrass = this.getGrid().isGrassFloorAtLogicalPos(this.getLogicalPos());\n            for(let i = 0; i < 3; i++){\n                let missile = FlyerFireworksMissile.create(grid, isLayoutGrass);\n                grid.setFlyerAtLogicalPos(missile, this.getLogicalPos());\n            }\n            \n        }else{\n            this.setHealthPoint(this.getHealthPoint() - 1);\n            this.selfHurt();\n            IGame.playAudio(IdentifierManager.getInstance().getMatchAudioFilePath('eliminate_0'));\n            let flyer = FlyerAnimation.createAnimationWithType(this.getGrid(), FlyerAnimationType.CommonHurt);\n            this.getGrid().setFlyerAtLogicalPos(flyer, this.getLogicalPos());\n            flyer.node.zIndex = this.getTopZOrder();\n        }\n    }\n}\n","import ItemBase, { ItemType } from \"../ItemBase\";\nimport GridBase from \"../../../grid/GridBase\";\nimport { CollectionID } from \"../../../defines/CollectionID\";\nimport { EntityID, EntityColor, EntityCleanOption } from \"../../../defines/EntityID\";\nimport GameMath from \"../../../../../extend/utils/GameMath\";\nimport { Pair } from \"../../../../../base/Pair\";\nimport FlyerNuclear from \"../../flyer/FlyerNuclear\";\nimport IdentifierManager from \"../../../defines/IdentifierManager\";\nimport IGame from \"../../../../../base/IGame\";\nimport EntityPrefabNodePool from \"../../EntityPrefabNodePool\";\nimport EntityBase from \"../../EntityBase\";\n\n\nconst { ccclass, property } = cc._decorator;\n\n@ccclass\nexport default class ItemFruitCake extends ItemBase {\n\n    private _pieces: Pair<EntityColor, cc.Node>[] = [];\n\n    public static create(grid: GridBase): ItemFruitCake {\n\n        let className = 'ItemFruitCake';\n        let prefabFileName = 'match_scene/prefab/entity/item/ItemFruitCake';\n        let pool = EntityPrefabNodePool.getInstance();\n        let component = pool.getPrefabNodeWithFileNameAndClassName(prefabFileName, className) as ItemFruitCake;\n        if (component) {\n            component.init(grid);\n            return component;\n        }\n        return null;\n    }\n\n    public getCollectionID(): CollectionID {\n        return CollectionID.ItemFruitCake;\n    }\n\n    public getEntityID(): EntityID {\n        return EntityID.ItemFruitCake;\n    }\n\n    public getScore(): number {\n        return 200;\n    }\n\n    public getButterflyPriority(color: EntityColor, layoutGrass: boolean): number {\n        let hasPiece: boolean = false;\n        for (let pari of this._pieces) {\n            if (pari.first == color) {\n                hasPiece = true;\n                break;\n            }\n        }\n\n        if (hasPiece) {\n            return 1;\n        }\n        return super.getButterflyPriority(color, layoutGrass);\n    }\n\n    protected init(grid: GridBase): void {\n        super.initItem(grid, ItemType.FruitCake, 2, 2);\n        this._pieces.length = 0;\n        let availableColors = grid.getAvailableColors();\n        let pieceCount = availableColors.length;\n        let index = 0;\n        for (let color of availableColors) {\n            let sprite = this.createPiece(pieceCount, color);\n            if (sprite) {\n                sprite.setAnchorPoint(cc.v2(0.5, 0.5));\n                this._puppet.addChild(sprite);\n                let ratation = 360 / pieceCount;\n                sprite.angle = -(ratation * index - 90);\n                index++;\n\n                // this._pieces[color] = sprite;\n                let pair = new Pair<EntityColor, cc.Node>(color, sprite);\n                this._pieces.push(pair);\n            }\n        }\n    }\n\n    protected _canDrop(): boolean {\n        return false;\n    }\n\n    protected _canSwap(): boolean {\n        return false;\n    }\n\n    protected _canMatch(): boolean {\n        return false;\n    }\n\n    protected _canCleanByBomb(cleanColor: EntityColor): boolean {\n        return true;\n    }\n\n    protected _canCleanByNeighbour(color: EntityColor): boolean {\n        return true;\n    }\n\n    protected _canImmuneDamageAfterHurt(): boolean {\n        return false;\n    }\n\n    protected _onClean(cleanOption: EntityCleanOption): void {\n        let index = GameMath.indexOf(this._pieces, cleanOption, 0, function (pair: Pair<EntityColor, cc.Node>) {\n            return pair.first == cleanOption.cleanColor;\n        });\n\n        if (index != -1) {\n            this.getGrid().gainScoreWithEntity(this);\n            if (this._pieces.length <= 1) {\n\n                this.progressDeathWish(cleanOption);\n                this.removeFromGridAndAddToEffect();\n                this.getGrid().addObstructs(this);\n                let action = cc.sequence(cc.scaleTo(0.25, 1.2).easing(cc.easeInOut(2.0)),\n                    cc.scaleTo(0.25, 1.0).easing(cc.easeInOut(2.0)),\n                    cc.delayTime(0.25),\n                    cc.callFunc(() => {\n\n\n\n                        let rect = this.getOccupyArea();\n                        let shouldLayoutGrass: boolean = false;\n                        for (let row: number = 0; row < rect.size.height; row++) {\n                            for (let column: number = 0; column < rect.size.width; column++) {\n                                if (this.getGrid().isGrassFloorAtLogicalPos(rect.origin.add(cc.v2(column, row)))) {\n                                    shouldLayoutGrass = true;\n                                    break;\n                                }\n                            }\n                            if (shouldLayoutGrass) {\n                                break;\n                            }\n                        }\n                        let bomb = FlyerNuclear.create(this.getGrid(), shouldLayoutGrass, this.getLogicalPos());\n                        this.getGrid().setFlyerAtLogicalPos(bomb, this.getLogicalPos());\n                        bomb.node.setPosition(this.node.getPosition());\n                        bomb.launch();\n                        IGame.playAudio(IdentifierManager.getInstance().getMatchAudioFilePath('fruitCake'));\n                        this.selfDestory();\n                    })\n                );\n\n                this.runAction(action);\n            } else {\n                this.selfHurt();\n            }\n\n            let piece = this._pieces[index].second;\n            let action = cc.sequence(cc.fadeOut(0.33).easing(cc.easeOut(2.0)), cc.callFunc(() => {\n                piece.removeFromParent();\n            }))\n            piece.runAction(action);\n            this._pieces.splice(index, 1);\n        }\n    }\n\n    private createPiece(pieceCount: number, color: EntityColor): cc.Node {\n        let result: cc.Node = new cc.Node();\n\n        let frameName = IdentifierManager.getInstance().getFrameNameFromEntityID(EntityID.ItemFruitCake);\n\n        if (frameName != '') {\n            frameName = frameName + '_' + pieceCount + '_' + (color + 1);\n            let sprite = result.addComponent(cc.Sprite);\n            sprite.sizeMode = cc.Sprite.SizeMode.RAW;\n            sprite.trim = false;\n            sprite.spriteFrame = EntityBase.getEntitySpriteFarme(frameName);\n        }\n        return result;\n    }\n\n    onDestroy() {\n        super.onDestroy();\n        this._pieces = null;\n    }\n}\n","import ItemBase, { ItemType } from \"../ItemBase\";\nimport GridBase from \"../../../grid/GridBase\";\nimport { EntityID, EntityColor } from \"../../../defines/EntityID\";\nimport { CollectionID } from \"../../../defines/CollectionID\";\nimport GameMath from \"../../../../../extend/utils/GameMath\";\nimport TMXConfigInfoKeys from \"../../../defines/TMXConfigInfoKeys\";\nimport IdentifierManager from \"../../../defines/IdentifierManager\";\nimport EntityPrefabNodePool from \"../../EntityPrefabNodePool\";\n\n// Learn TypeScript:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/typescript.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/typescript.html\n// Learn Attribute:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class ItemHoneyComb extends ItemBase {\n\n    private _spreadHoneyIDs:EntityID[] = [];\n    public static create(grid:GridBase):ItemHoneyComb{\n\n        let className = 'ItemHoneyComb';\n        let prefabFileName = 'match_scene/prefab/entity/item/ItemHoneyComb';\n        let pool = EntityPrefabNodePool.getInstance();\n        let component = pool.getPrefabNodeWithFileNameAndClassName(prefabFileName, className) as ItemHoneyComb;\n        if (component) {\n            component.init(grid); \n            return component;       \n        }\n        return null;\n    }\n\n    public clone() : ItemHoneyComb {\n        let item = ItemHoneyComb.create(this.getGrid());\n        return item;\n    }\n\n    public init(grid:GridBase):void{\n        super.initItem(grid, ItemType.HoneyComb);\n        this._spreadHoneyIDs.length = 0;\n    }\n\n    public getSpreadHoneyHp() : number {\n\n        let hp = 1;\n        if (this._spreadHoneyIDs.length > 0) {\n            let index = GameMath.randomInt(0, this._spreadHoneyIDs.length - 1);\n            let entityID = this._spreadHoneyIDs[index];\n            hp = entityID - EntityID.ParasiteHoneyHp1 + 1;\n        }\n\n        return hp;\n    }\n\n    public getEntityID():EntityID{\n        return EntityID.ItemHoneyComb;\n    }\n\n    public getCollectionID():CollectionID{\n        return CollectionID.ItemHoneyComb;\n    }\n\n    public dealWithConfigMap(configMap:Object):void{\n        super.dealWithConfigMap(configMap);\n        let entityNameString:string = configMap[TMXConfigInfoKeys.CFG_HONEY_COMB_OUTPUT];\n        if (entityNameString) {\n            let entityNames = entityNameString.split('|');\n            for (let entityName of entityNames) {\n                let entityID = IdentifierManager.getInstance().getEntityIDFromString(entityName);\n                if (entityID == EntityID.ParasiteHoneyHp1 || entityID == EntityID.ParasiteHoneyHp2) {\n                    this._spreadHoneyIDs.push(entityID);   \n                }\n            }\n        }\n    }\n\n    protected _canDrop():boolean{\n        return false;\n    }\n\n    protected _canSwap():boolean{\n        return false;\n    }\n\n    protected _canMatch():boolean{\n        return false;\n    }\n\n    protected _canCleanByBomb(cleanColor:EntityColor):boolean{\n        return false;\n    }\n\n    protected _canCleanByNeighbour(color:EntityColor):boolean{\n        return false;\n    }\n\n    protected _converUnderForever():boolean{\n        return true;\n    }\n\n    onDestroy() {\n        super.onDestroy();\n        this._spreadHoneyIDs = null;\n    }\n}\n","import { GameCurrencyType } from \"../../../define/GameCurrencyType\";\nimport ItemInfo from \"./ItemInfo\";\nimport GameConfig from \"../../../define/GameConfig\";\n\n\nexport default class ItemInfoManager {\n    //单例对象\n    private static instance:ItemInfoManager = null;\n    public static getInstance():ItemInfoManager{\n        if(this.instance == null){\n            this.instance = new ItemInfoManager();\n        }\n        return this.instance;\n    }\n\n    constructor(){\n        this.initItemID_To_FrameName_Map();\n        this.initName_To_ItemID_Map();\n    };\n\n    private ItemID_To_FrameName_Map:Object = {};\n    private initItemID_To_FrameName_Map():void {\n\n\n        this.ItemID_To_FrameName_Map[GameCurrencyType.DiamondCoin] = ItemInfo.create('diamondcoin',\n                                                                                     'itemName_1',\n                                                                                     'itemDepict_1',\n                                                                                     false);  \n\n        this.ItemID_To_FrameName_Map[GameCurrencyType.StarCoin] = ItemInfo.create('starcoin',\n                                                                                  'itemName_2',\n                                                                                  'itemDepict_2',\n                                                                                  false);     \n\n        this.ItemID_To_FrameName_Map[GameCurrencyType.GoldCoin] = ItemInfo.create('goldcoin',\n                                                                                  'itemName_3',\n                                                                                  'itemDepict_3',\n                                                                                  false);\n                                                                                                \n        this.ItemID_To_FrameName_Map[GameCurrencyType.LifeHeart] = ItemInfo.create('lifeheart',\n                                                                                   'itemName_4',\n                                                                                   'itemDepict_4',\n                                                                                   false);    \n\n        this.ItemID_To_FrameName_Map[GameCurrencyType.ExtraStep1] = ItemInfo.create('jiabu_1',\n                                                                                   'itemName_10011',\n                                                                                   'itemDepict_10011',\n                                                                                   false); \n\n        this.ItemID_To_FrameName_Map[GameCurrencyType.ExtraStep2] = ItemInfo.create('jiabu_2',\n                                                                                  'itemName_10013',\n                                                                                  'itemDepict_10013',\n                                                                                  false);  \n\n        this.ItemID_To_FrameName_Map[GameCurrencyType.ExtraStep3] = ItemInfo.create('jiabu_3',\n                                                                                  'itemName_10012',\n                                                                                  'itemDepict_10012',\n                                                                                  false); \n        \n        this.ItemID_To_FrameName_Map[GameCurrencyType.ExtraStep5] = ItemInfo.create('jiabu_5',\n                                                                                  'itemName_10010',\n                                                                                  'itemDepict_10010',\n                                                                                  false); \n\n        this.ItemID_To_FrameName_Map[GameCurrencyType.BeginLine] = ItemInfo.create('beginline',\n                                                                                   'itemName_10020',\n                                                                                   'itemDepict_10020',\n                                                                                   false);  \n\n        this.ItemID_To_FrameName_Map[GameCurrencyType.BeginRange] = ItemInfo.create('beginrange',\n                                                                                    'itemName_10030',\n                                                                                    'itemDepict_10030',\n                                                                                    false);    \n\n        this.ItemID_To_FrameName_Map[GameCurrencyType.BeginRainbow] = ItemInfo.create('beginrainbow',\n                                                                                      'itemName_10040',\n                                                                                      'itemDepict_10040',\n                                                                                      false);\n\n        this.ItemID_To_FrameName_Map[GameCurrencyType.AidHammer] = ItemInfo.create('aidhammer',\n                                                                                   'itemName_10050',\n                                                                                   'itemDepict_10050',\n                                                                                   false);\n\n        this.ItemID_To_FrameName_Map[GameCurrencyType.AidBomb] = ItemInfo.create('aidbomb',\n                                                                                 'itemName_10060',\n                                                                                 'itemDepict_10060',\n                                                                                 false);    \n\n        this.ItemID_To_FrameName_Map[GameCurrencyType.AidSwap] = ItemInfo.create('aidswap',\n                                                                                 'itemName_10070',\n                                                                                 'itemDepict_10070',\n                                                                                 false);\n\n        this.ItemID_To_FrameName_Map[GameCurrencyType.TimeLimitedAidHammer] = ItemInfo.create('aidhammer',\n                                                                                 'itemName_10051',\n                                                                                 'itemDepict_10051',\n                                                                                 false);\n\n        this.ItemID_To_FrameName_Map[GameCurrencyType.TimeLimitedAidBomb] = ItemInfo.create('aidbomb',\n                                                                               'itemName_10061',\n                                                                               'itemDepict_10061',\n                                                                               false);    \n\n        this.ItemID_To_FrameName_Map[GameCurrencyType.TimeLimitedAidSwap] = ItemInfo.create('aidswap',\n                                                                               'itemName_10071',\n                                                                               'itemDepict_10071',\n                                                                               false);\n\n        this.ItemID_To_FrameName_Map[GameCurrencyType.LifeAddOnePoint] = ItemInfo.create('lifeaddonepoint',\n                                                                                         'itemName_10080',\n                                                                                         'itemDepict_10080',\n                                                                                         false);\n\n        this.ItemID_To_FrameName_Map[GameCurrencyType.LifeEverOneHour] = ItemInfo.create('lifeeveronehour',\n                                                                                         'itemName_10090',\n                                                                                         'itemDepict_10090',\n                                                                                         false);\n\n        this.ItemID_To_FrameName_Map[GameCurrencyType.LifeEverTwoHour] = ItemInfo.create('lifeevertwohour',\n                                                                                         'itemName_10100',\n                                                                                         'itemDepict_10100',\n                                                                                         false);\n\n        this.ItemID_To_FrameName_Map[GameCurrencyType.TrainFood] = ItemInfo.create('food',\n                                                                                     'itemName_10110',\n                                                                                     'itemDepict_10110',\n                                                                                     false);\n                                                                                     \n        this.ItemID_To_FrameName_Map[GameCurrencyType.TrainSoap] = ItemInfo.create('soap',\n                                                                                     'itemName_10120',\n                                                                                     'itemDepict_10120',\n                                                                                     false);\n\n        this.ItemID_To_FrameName_Map[GameCurrencyType.TrainEyepatch] = ItemInfo.create('eyepatch',\n                                                                                     'itemName_10130',\n                                                                                     'itemDepict_10130',\n                                                                                     false);\n\n        this.ItemID_To_FrameName_Map[GameCurrencyType.TrainHoe] = ItemInfo.create('hoe',\n                                                                                     'itemName_10140',\n                                                                                     'itemDepict_10140',\n                                                                                     false);\n                                                                                     \n\n        this.ItemID_To_FrameName_Map[GameCurrencyType.VirtualCoin] = ItemInfo.create('virtualcoin',\n                                                                                     'LocalizationItemVirtualCoinName',\n                                                                                     'LocalizationItemVirtualCoinDetail',\n                                                                                     false);\n\n        this.ItemID_To_FrameName_Map[GameCurrencyType.InfiniteBeginLine] = ItemInfo.create('beginline',\n                                                                                   'itemName_10022',\n                                                                                   'itemDepict_10022',\n                                                                                   false);  \n\n        this.ItemID_To_FrameName_Map[GameCurrencyType.InfiniteBeginRange] = ItemInfo.create('beginrange',\n                                                                                    'itemName_10032',\n                                                                                    'itemDepict_10032',\n                                                                                    false);    \n\n        this.ItemID_To_FrameName_Map[GameCurrencyType.InfiniteBeginRainbow] = ItemInfo.create('beginrainbow',\n                                                                                      'itemName_10042',\n                                                                                      'itemDepict_10042',\n                                                                                      false);\n\n        this.ItemID_To_FrameName_Map[GameCurrencyType.TimeLimitedBeginLine] = ItemInfo.create('beginline',\n                                                                                   'itemName_10021',\n                                                                                   'itemDepict_10021',\n                                                                                   false);  \n\n        this.ItemID_To_FrameName_Map[GameCurrencyType.TimeLimitedBeginRange] = ItemInfo.create('beginrange',\n                                                                                    'itemName_10031',\n                                                                                    'itemDepict_10031',\n                                                                                    false);    \n\n        this.ItemID_To_FrameName_Map[GameCurrencyType.TimeLimitedBeginRainbow] = ItemInfo.create('beginrainbow',\n                                                                                      'itemName_10041',\n                                                                                      'itemDepict_10041',\n                                                                                      false);\n\n\n\n\n        this.ItemID_To_FrameName_Map[GameCurrencyType.OneRoundBeginLine] = ItemInfo.create('beginline',\n                                                                                   'itemName_10023',\n                                                                                   'itemDepict_10023',\n                                                                                   false);  \n\n        this.ItemID_To_FrameName_Map[GameCurrencyType.OneRoundBeginRange] = ItemInfo.create('beginrange',\n                                                                                    'itemName_10033',\n                                                                                    'itemDepict_10033',\n                                                                                    false);    \n\n        this.ItemID_To_FrameName_Map[GameCurrencyType.OneRoundBeginRainbow] = ItemInfo.create('beginrainbow',\n                                                                                      'itemName_10043',\n                                                                                      'itemDepict_10043',\n                                                                                      false);\n\n        this.ItemID_To_FrameName_Map[GameCurrencyType.AddSpeed] = ItemInfo.create('speed',\n                                                                                      'itemName_10150',\n                                                                                      'itemDepict_10150',\n                                                                                      false);\n        \n        this.ItemID_To_FrameName_Map[GameCurrencyType.LuckyWheelRow] = ItemInfo.create('hline',\n                                                                                      'itemName_13020',\n                                                                                      'itemDepict_13020',\n                                                                                      false);\n        \n        this.ItemID_To_FrameName_Map[GameCurrencyType.LuckyWheelColumn] = ItemInfo.create('vline',\n                                                                                      'itemName_13030',\n                                                                                      'itemDepict_13030',\n                                                                                      false);\n        \n        this.ItemID_To_FrameName_Map[GameCurrencyType.LuckyWheelCross] = ItemInfo.create('cross',\n                                                                                      'itemName_13040',\n                                                                                      'itemDepict_13040',\n                                                                                      false);\n\n        this.ItemID_To_FrameName_Map[GameCurrencyType.LuckyWheelRange] = ItemInfo.create('range',\n                                                                                      'itemName_13050',\n                                                                                      'itemDepict_13050',\n                                                                                      false);\n\n        this.ItemID_To_FrameName_Map[GameCurrencyType.LuckyWheelMissile_Row] = ItemInfo.create('hline_missile',\n                                                                                      'itemName_13060',\n                                                                                      'itemDepict_13060',\n                                                                                      false);\n    \n        this.ItemID_To_FrameName_Map[GameCurrencyType.LuckyWheelMissile_Column] = ItemInfo.create('vline_missile',\n                                                                                      'itemName_13070',\n                                                                                      'itemDepict_13070',\n                                                                                      false);\n\n        this.ItemID_To_FrameName_Map[GameCurrencyType.LuckyWheelMissile_Cross] = ItemInfo.create('cross_missile',\n                                                                                      'itemName_13080',\n                                                                                      'itemDepict_13080',\n                                                                                      false);\n        \n        this.ItemID_To_FrameName_Map[GameCurrencyType.LuckyWheelMissile_Range] = ItemInfo.create('range_missile',\n                                                                                      'itemName_13090',\n                                                                                      'itemDepict_13090',\n                                                                                      false);\n                                                                                      \n        this.ItemID_To_FrameName_Map[GameCurrencyType.LuckyWheelRow_Cross] = ItemInfo.create('item_13100',\n                                                                                            'itemName_13100',\n                                                                                            'itemDepict_13100',\n                                                                                            false);\n                                                                                \n        this.ItemID_To_FrameName_Map[GameCurrencyType.LuckyWheelColumn_Cross] = ItemInfo.create('item_13110',\n                                                                                            'itemName_13110',\n                                                                                            'itemDepict_13110',\n                                                                                            false);\n\n        this.ItemID_To_FrameName_Map[GameCurrencyType.LuckyWheelRow_Range] = ItemInfo.create('item_13120',\n                                                                                            'itemName_13120',\n                                                                                            'itemDepict_13120',\n                                                                                            false);\n\n        this.ItemID_To_FrameName_Map[GameCurrencyType.LuckyWheelColumn_Range] = ItemInfo.create('item_13130',\n                                                                                            'itemName_13130',\n                                                                                            'itemDepict_13130',\n                                                                                            false);\n\n        this.ItemID_To_FrameName_Map[GameCurrencyType.LuckyWheelMissile_Row_Column] = ItemInfo.create('item_13140',\n                                                                                            'itemName_13140',\n                                                                                            'itemDepict_13140',\n                                                                                            false);\n                                                                        \n        this.ItemID_To_FrameName_Map[GameCurrencyType.LuckyWheelMissile_Rainbow] = ItemInfo.create('item_13150',\n                                                                                            'itemName_13150',\n                                                                                            'itemDepict_13150',\n                                                                                            false);\n\n        this.ItemID_To_FrameName_Map[GameCurrencyType.LuckyWheelMissile_Row_Cross] = ItemInfo.create('item_13160',\n                                                                                            'itemName_13160',\n                                                                                            'itemDepict_13160',\n                                                                                            false);\n\n        this.ItemID_To_FrameName_Map[GameCurrencyType.LuckyWheelMissile_Column_Range] = ItemInfo.create('item_13170',\n                                                                                            'itemName_13170',\n                                                                                            'itemDepict_13170',\n                                                                                            false);\n                                                                                      \n        this.ItemID_To_FrameName_Map[GameCurrencyType.PetKeJi] = ItemInfo.create('kejiquan',\n                                                                                'itemName_20010',\n                                                                                'itemDepict_20010',\n                                                                                false);\n\n    }\n\n    private Name_To_ItemID_Map:Object = {};\n    private initName_To_ItemID_Map():void {\n        this.Name_To_ItemID_Map[\"1\"] =      GameCurrencyType.DiamondCoin;                                         \n        this.Name_To_ItemID_Map[\"2\"] =      GameCurrencyType.StarCoin;                                         \n        this.Name_To_ItemID_Map[\"3\"] =      GameCurrencyType.GoldCoin;                                         \n        this.Name_To_ItemID_Map[\"4\"] =      GameCurrencyType.LifeHeart;                                         \n        this.Name_To_ItemID_Map[\"5\"] =      GameCurrencyType.VirtualCoin;     \n        this.Name_To_ItemID_Map[\"7\"] =      GameCurrencyType.RedPacket;    \n\n        this.Name_To_ItemID_Map[\"10010\"] =  GameCurrencyType.ExtraStep5; \n        this.Name_To_ItemID_Map[\"10011\"] =  GameCurrencyType.ExtraStep1; \n        this.Name_To_ItemID_Map[\"10012\"] =  GameCurrencyType.ExtraStep3; \n        this.Name_To_ItemID_Map[\"10013\"] =  GameCurrencyType.ExtraStep2;  \n\n        this.Name_To_ItemID_Map[\"10020\"] =  GameCurrencyType.BeginLine;                                         \n        this.Name_To_ItemID_Map[\"10030\"] =  GameCurrencyType.BeginRange;                                         \n        this.Name_To_ItemID_Map[\"10040\"] =  GameCurrencyType.BeginRainbow; \n\n        this.Name_To_ItemID_Map[\"10021\"] =  GameCurrencyType.TimeLimitedBeginLine;                                         \n        this.Name_To_ItemID_Map[\"10031\"] =  GameCurrencyType.TimeLimitedBeginRange;                                         \n        this.Name_To_ItemID_Map[\"10041\"] =  GameCurrencyType.TimeLimitedBeginRainbow; \n    \n\n        this.Name_To_ItemID_Map[\"10022\"] =  GameCurrencyType.InfiniteBeginLine;                                         \n        this.Name_To_ItemID_Map[\"10032\"] =  GameCurrencyType.InfiniteBeginRange;                                         \n        this.Name_To_ItemID_Map[\"10042\"] =  GameCurrencyType.InfiniteBeginRainbow; \n        \n        this.Name_To_ItemID_Map[\"10023\"] =  GameCurrencyType.OneRoundBeginLine;                                         \n        this.Name_To_ItemID_Map[\"10033\"] =  GameCurrencyType.OneRoundBeginRange;                                         \n        this.Name_To_ItemID_Map[\"10043\"] =  GameCurrencyType.OneRoundBeginRainbow; \n\n        this.Name_To_ItemID_Map[\"13020\"] =  GameCurrencyType.LuckyWheelRow;                                         \n        this.Name_To_ItemID_Map[\"13030\"] =  GameCurrencyType.LuckyWheelColumn;                                         \n        this.Name_To_ItemID_Map[\"13040\"] =  GameCurrencyType.LuckyWheelCross; \n        this.Name_To_ItemID_Map[\"13050\"] =  GameCurrencyType.LuckyWheelRange;                                         \n        this.Name_To_ItemID_Map[\"13060\"] =  GameCurrencyType.LuckyWheelMissile_Row;                                         \n        this.Name_To_ItemID_Map[\"13070\"] =  GameCurrencyType.LuckyWheelMissile_Column; \n        this.Name_To_ItemID_Map[\"13080\"] =  GameCurrencyType.LuckyWheelMissile_Cross;                                         \n        this.Name_To_ItemID_Map[\"13090\"] =  GameCurrencyType.LuckyWheelMissile_Range;\n\n        this.Name_To_ItemID_Map[\"13100\"] =  GameCurrencyType.LuckyWheelRow_Cross;                                         \n        this.Name_To_ItemID_Map[\"13110\"] =  GameCurrencyType.LuckyWheelColumn_Cross;                                         \n        this.Name_To_ItemID_Map[\"13120\"] =  GameCurrencyType.LuckyWheelRow_Range; \n        this.Name_To_ItemID_Map[\"13130\"] =  GameCurrencyType.LuckyWheelColumn_Range;                                         \n        this.Name_To_ItemID_Map[\"13140\"] =  GameCurrencyType.LuckyWheelMissile_Row_Column;                                         \n        this.Name_To_ItemID_Map[\"13150\"] =  GameCurrencyType.LuckyWheelMissile_Rainbow; \n        this.Name_To_ItemID_Map[\"13160\"] =  GameCurrencyType.LuckyWheelMissile_Row_Cross;                                         \n        this.Name_To_ItemID_Map[\"13170\"] =  GameCurrencyType.LuckyWheelMissile_Column_Range;\n        \n        this.Name_To_ItemID_Map[\"10050\"] =  GameCurrencyType.AidHammer;                                         \n        this.Name_To_ItemID_Map[\"10060\"] =  GameCurrencyType.AidBomb;                                         \n        this.Name_To_ItemID_Map[\"10070\"] =  GameCurrencyType.AidSwap;  \n\n        this.Name_To_ItemID_Map[\"10051\"] =  GameCurrencyType.TimeLimitedAidHammer;                                         \n        this.Name_To_ItemID_Map[\"10061\"] =  GameCurrencyType.TimeLimitedAidBomb;                                         \n        this.Name_To_ItemID_Map[\"10071\"] =  GameCurrencyType.TimeLimitedAidSwap; \n\n        this.Name_To_ItemID_Map[\"10080\"] =  GameCurrencyType.LifeAddOnePoint;                                         \n        this.Name_To_ItemID_Map[\"10090\"] =  GameCurrencyType.LifeEverOneHour;                                         \n        this.Name_To_ItemID_Map[\"10100\"] =  GameCurrencyType.LifeEverTwoHour;   \n\n        this.Name_To_ItemID_Map[\"10110\"] =  GameCurrencyType.TrainFood;                                         \n        this.Name_To_ItemID_Map[\"10120\"] =  GameCurrencyType.TrainSoap;                                         \n        this.Name_To_ItemID_Map[\"10130\"] =  GameCurrencyType.TrainEyepatch;   \n        this.Name_To_ItemID_Map[\"10140\"] =  GameCurrencyType.TrainHoe; \n        this.Name_To_ItemID_Map[\"10150\"] =  GameCurrencyType.AddSpeed; \n\n        this.Name_To_ItemID_Map[\"20010\"] =  GameCurrencyType.PetKeJi;                                            \n    }\n\n    public getItemIDFromName(name:string) : GameCurrencyType {\n        let result = this.Name_To_ItemID_Map[name];\n        if (result) {\n            return result;\n        }\n        return GameCurrencyType.NoneType;\n    }\n\n    public getItemInfoFromItemID(itemID:GameCurrencyType) : ItemInfo {\n        let result = this.ItemID_To_FrameName_Map[itemID] as ItemInfo;\n        if (result) {\n            //铁镐特殊处理\n            if(itemID == 10140){\n                if(!GameConfig.DigRedPacket){\n                    result.description = 'itemDepict_10140_fix';\n                }\n            };\n\n            let answer = ItemInfo.create('texture/icons/item/' + result.frameName,\n                                          result.localization,\n                                          result.description,\n                                          result.isUnlimited,\n                                          result.scaleX,\n                                          result.scaleY);\n            return answer;\n        }\n        return null;\n    }\n\n    public getUnlimitedItemIDs():GameCurrencyType[]{\n        let unlimitedItemIDs = [\n            GameCurrencyType.InfiniteBeginLine,\n            GameCurrencyType.InfiniteBeginRange,\n            GameCurrencyType.InfiniteBeginRainbow,\n        ];\n        return unlimitedItemIDs;\n    }\n}\n","\nexport default class ItemInfo  {\n\n    public static create(FrameName:string = '', \n                         Localization:string = '', \n                         Description:string = '',\n                         isUnlimited:boolean = false, \n                         ScaleX:number = 1.0, \n                         ScaleY:number = 1.0) : ItemInfo {\n        return new ItemInfo(FrameName, Localization, Description,isUnlimited, ScaleX, ScaleY);\n    }\n\n    public frameName:string = '';\n    public localization:string = '';\n    public description:string = '';\n    public isUnlimited = false;\n    public scaleX:number = 1.0;\n    public scaleY:number = 1.0;\n    \n\n    constructor(FrameName:string, Localization:string, Description:string, isUnlimited:boolean, ScaleX:number, ScaleY:number) {\n        this.frameName = FrameName;\n        this.localization = Localization;\n        this.description = Description;\n        this.isUnlimited = isUnlimited;\n        this.scaleX = ScaleX;\n        this.scaleY = ScaleY;\n    }\n}\n","import ItemBase, { ItemType } from \"../ItemBase\";\nimport GridBase from \"../../../grid/GridBase\";\nimport { CollectionID } from \"../../../defines/CollectionID\";\nimport { EntityID, EntityCleanOption, EntityColor } from \"../../../defines/EntityID\";\nimport RugJam from \"../../rug/RugJam\";\nimport FlyerAnimation from \"../../flyer/FlyerAnimation\";\nimport IGame from \"../../../../../base/IGame\";\nimport IdentifierManager from \"../../../defines/IdentifierManager\";\nimport EntityPrefabNodePool from \"../../EntityPrefabNodePool\";\n\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class ItemJamBottle extends ItemBase {\n\n    public static create(grid:GridBase):ItemJamBottle{\n\n        let className = 'ItemJamBottle';\n        let prefabFileName = 'match_scene/prefab/entity/item/ItemJamBottle';\n        let pool = EntityPrefabNodePool.getInstance();\n        let component = pool.getPrefabNodeWithFileNameAndClassName(prefabFileName, className) as ItemJamBottle;\n        if (component) {\n            component.init(grid); \n            return component;       \n        }\n        return null;\n    }\n\n    public clone() : ItemJamBottle {\n        let item = ItemJamBottle.create(this.getGrid());\n        return item;\n    }\n\n    public getCollectionID():CollectionID{\n        return CollectionID.ItemJamBottle;\n    }\n\n    public getEntityID():EntityID{\n        return EntityID.ItemJamBottle;\n    }\n\n    public getScore():number{\n        return 200;\n    }\n\n    protected init(grid:GridBase):void{\n        super.initItem(grid, ItemType.JamBottle);\n    }\n\n    protected _canDrop():boolean{\n        return true;\n    }\n\n    protected _canSwap():boolean{\n        return true;\n    }\n\n    protected _canCleanByBomb(cleanColor:EntityColor):boolean{\n        return true;\n    }\n\n    protected _canCleanByNeighbour(color:EntityColor):boolean{\n        return true;\n    }\n\n    protected _onClean(cleanOption:EntityCleanOption):void{\n        this.getGrid().gainScoreWithEntity(this);\n        this.setVisible(false);\n        this.progressDeathWish(cleanOption);\n        this.selfDestory();\n        IGame.playAudio(IdentifierManager.getInstance().getMatchAudioFilePath('jambottle'));\n\n        let flyer = FlyerAnimation.createDieAnimation(this.getGrid(), this.getEntityID());\n        this.getGrid().setFlyerAtLogicalPos(flyer, this.getLogicalPos());\n        let offsets:cc.Vec2[] = [\n            cc.v2(-1, -1),\n            cc.v2(0, -1),\n            cc.v2(1, -1),\n\n            cc.v2(-1, 0),\n            cc.v2(0, 0),\n            cc.v2(1, 0),\n\n            cc.v2(-1, 1),\n            cc.v2(0, 1),\n            cc.v2(1, 1)\n        ];\n\n        for(let offset of offsets){\n            let checkPos = this.getLogicalPos().add(offset);\n            let cell = this.getGrid().getCellAtLogicalPos(checkPos);\n            if(cell && cell.canHoldItem()){\n                let item = this.getGrid().getItemAtLogicalPos(checkPos);\n                if(item && item.coverUnderForever()){\n                    continue;\n                }\n\n                let oldJam = this.getGrid().getRugAtLogicalPos(checkPos);\n                if(!oldJam){\n                    let jam = RugJam.create(this.getGrid());\n                    jam.setImmuneDamage(true);\n                    jam.grow();\n                    this.getGrid().setRugAtLogicalPos(jam, checkPos);\n                }\n            }\n        }\n    }\n}\n","import { CollectionID } from \"../../../defines/CollectionID\";\nimport { EntityGroupID } from \"../../../defines/EntityGroupID\";\nimport { EntityCleanOption, EntityID, EntityColor, EntityCleanType } from \"../../../defines/EntityID\";\nimport IdentifierManager from \"../../../defines/IdentifierManager\";\nimport TMXConfigInfoKeys from \"../../../defines/TMXConfigInfoKeys\";\nimport GridBase from \"../../../grid/GridBase\";\nimport ItemBase, { ItemType } from \"../ItemBase\";\nimport EntityPrefabNodePool from \"../../EntityPrefabNodePool\";\nimport EntityBase from \"../../EntityBase\";\n\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class ItemMagicCrystal extends ItemBase {\n\n    //当前被碰撞次数\n    private _curAttackCount:number = 0;\n    //产出颜色\n    private _attrOutput:string = '';\n    //每次产出个数\n    private _attrNum:number = 1;\n    //魔法水晶需要碰撞消除N次才能产出元素\n    private _attrMax:number = 1;\n    //初始状态次数\n    private _attrStatus:number = 0;\n\n    //元素节点\n    private _itemNode:cc.Node = null;\n\n    public static create(grid:GridBase):ItemMagicCrystal{\n\n        let className = 'ItemMagicCrystal';\n        let prefabFileName = 'match_scene/prefab/entity/item/ItemMagicCrystal';\n        let pool = EntityPrefabNodePool.getInstance();\n        let component = pool.getPrefabNodeWithFileNameAndClassName(prefabFileName, className) as ItemMagicCrystal;\n        if (component) {\n            component.init(grid); \n            return component;       \n        }\n        return null;\n    }\n\n    public clone() : ItemMagicCrystal {\n        let item = ItemMagicCrystal.create(this.getGrid());\n        item.initMagicItemImg(this._attrOutput);\n        return item;\n    }\n  \n\n    public init(grid:GridBase):void{\n        super.initItem(grid, ItemType.MagicCrystal);\n        this._itemNode = this._puppet.getChildByName('item_sprite');\n\n        this._curAttackCount = 0;\n        this._attrOutput = '';\n        this._attrNum = 1;\n        this._attrMax = 1;\n        this._attrStatus = 0;\n    }\n\n    public getAttrNum():number{\n        return this._attrNum;\n    }\n\n    public getEntityID():EntityID{\n        return EntityID.ItemMagicCrystal;\n    }\n\n    public getCollectionID():CollectionID{\n        return CollectionID.ItemMagicCrystal;\n    }\n\n    public getScore():number{\n        return 50;\n    }\n\n    public dealWithConfigMap(configMap:Object):void{\n        super.dealWithConfigMap(configMap);\n        if(configMap[TMXConfigInfoKeys.CFG_MATIC_CRYSTAL_OUTPUT]){\n            this._attrOutput = configMap[TMXConfigInfoKeys.CFG_MATIC_CRYSTAL_OUTPUT];\n        }\n\n        if(configMap[TMXConfigInfoKeys.CFG_MATIC_CRYSTAL_NUM]){\n            this._attrNum = Number(configMap[TMXConfigInfoKeys.CFG_MATIC_CRYSTAL_NUM]);\n        }\n\n        if(configMap[TMXConfigInfoKeys.CFG_MATIC_CRYSTAL_MAX]){\n            this._attrMax = Number(configMap[TMXConfigInfoKeys.CFG_MATIC_CRYSTAL_MAX]) - 1;\n        }\n\n        if(configMap[TMXConfigInfoKeys.CFG_MATIC_CRYSTAL_STATUS]){\n            this._attrStatus = Number(configMap[TMXConfigInfoKeys.CFG_MATIC_CRYSTAL_STATUS]) - 1;\n            this._curAttackCount = this._attrStatus;\n            if(this._curAttackCount > this._attrMax){\n                this._curAttackCount = this._attrMax;\n                this._attrStatus = this._curAttackCount;\n            }\n        }else{\n            this._curAttackCount = 0;\n        }\n\n        this.updateProgress();\n\n        this.initMagicItemImg(this._attrOutput);\n    }\n\n    //获取产出的id\n    public getOutputEntityId():EntityID{\n        let entityID = EntityID.None;\n\n        entityID = IdentifierManager.getInstance().getEntityIDFromString(this._attrOutput);\n        if(entityID != EntityID.None){\n            return entityID;\n        }\n\n        let tmpGroupId:EntityGroupID = IdentifierManager.getInstance().getEntityGroupIDFromString(this._attrOutput);\n        let groupIds = IdentifierManager.getInstance().getEntityIDsFromEntityGroupID(tmpGroupId);\n        if(groupIds.length <= 0){\n            return entityID;\n        }\n\n        let colorItemMap:Object = {};\n        let dropMap = this.getGrid().getDropEntityMap();\n        for(let i:number = 0; i < groupIds.length; i++){\n            let NormalColorId:EntityID = IdentifierManager.getInstance().getCorrespondingNormlaEntityID(groupIds[i]);\n            if(dropMap[NormalColorId]){\n                colorItemMap[groupIds[i]] = dropMap[NormalColorId];\n            }\n        }\n\n        let tempMap1:Object = {};\n        let tempMap2:Object = {};\n        entityID = this.getGrid().getRandomEntityID(colorItemMap, tempMap1, tempMap2);\n\n        return entityID;\n    }\n\n    //是否可以产出\n    public isCanOutput():boolean{\n\n        if(this.getGrid().hasShowCompleteBanner()){\n            return false;\n        }\n\n        if(this._curAttackCount >= this._attrMax){\n            this._curAttackCount = 0;\n            this.updateProgress();\n            return true;\n        }else{\n            return false;\n        }\n    }\n\n    //初始化魔法水晶内图片显示\n    public initMagicItemImg(output:string):void{\n        this._attrOutput = output;\n        let imgPath:string = '';\n        let entityID:EntityID = EntityID.None;\n        entityID = IdentifierManager.getInstance().getEntityIDFromString(output);\n\n        if(entityID != EntityID.None){\n            imgPath = IdentifierManager.getInstance().getFrameNameFromEntityID(entityID);\n        }\n\n        if(imgPath == ''){\n            let tmpGroupId:EntityGroupID = IdentifierManager.getInstance().getEntityGroupIDFromString(output);\n            imgPath = IdentifierManager.getInstance().getFrameNameFromEntityGroupID(tmpGroupId);\n        }\n\n        if(imgPath != '' && this._itemNode){\n            let itemNode:cc.Node = new cc.Node();\n            let itemIcon:cc.Sprite = this._itemNode.getComponent(cc.Sprite);\n            itemIcon.spriteFrame = EntityBase.getEntitySpriteFarme(imgPath);\n        }\n    }\n\n    //更新进度\n    public updateProgress():void{\n        let progress:number = this._curAttackCount / this._attrMax;\n        if(progress > 1.0){\n            progress = 1.0;\n        }\n        let progressNode = this._puppet.getChildByName('magic_crystal_bottom');\n        progressNode.scaleY = progress;\n    }\n\n    protected _canDrop():boolean{\n        return false;\n    }\n\n    protected _canSwap():boolean{\n        return false;\n    }\n\n    protected _canMatch():boolean{\n        return false;\n    }\n\n    protected _canCleanByBomb(cleanColor:EntityColor):boolean{\n        return true;\n    }\n\n    protected _canCleanByNeighbour(color:EntityColor):boolean{\n        return true;\n    }\n\n    protected _converUnderForever():boolean{\n        return true;\n    }\n\n    protected _onClean(cleanOption:EntityCleanOption):void{\n\n        if (this._curAttackCount < this._attrMax) {\n            let rate = 1\n            if (cleanOption.cleanType == EntityCleanType.Terminate) {\n                rate = this._attrMax - this._curAttackCount\n                this._curAttackCount = this._attrMax;\n            }\n            this.getGrid().gainScoreWithEntity(this, rate);\n            this._curAttackCount += 1;\n            this.updateProgress();\n        }\n    }\n\n    onDestroy() {\n        super.onDestroy();\n        this._attrOutput = null;\n        this._itemNode = null;\n    }\n}\n","import UISpriteExt from \"../../../../../component/UISpriteExt\";\nimport { CollectionID } from \"../../../defines/CollectionID\";\nimport { EntityChargeOption, EntityID } from \"../../../defines/EntityID\";\nimport IdentifierManager from \"../../../defines/IdentifierManager\";\nimport TMXConfigInfoKeys from \"../../../defines/TMXConfigInfoKeys\";\nimport GridBase from \"../../../grid/GridBase\";\nimport EntityPrefabNodePool from \"../../EntityPrefabNodePool\";\nimport FlyerMower, { FlyerMowerDirection } from \"../../flyer/FlyerMower\";\nimport ItemBase, { ItemType } from \"../ItemBase\";\n\nexport enum ItemMowerDirection{\n    Up = 0,\n    Right,\n    Down,\n    Left,\n};\n\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class ItemMower extends ItemBase {\n\n    private static targetFramePositions:Object = {\n        0 : cc.v2(20, -25),\n        1 : cc.v2(-25, -20),\n        2 : cc.v2(-20, 25),\n        3 : cc.v2(25 ,20),\n    }\n\n    private _direction:ItemMowerDirection = ItemMowerDirection.Up;\n    private _targetIcon:cc.Sprite = null;\n    private _targetFrame:cc.Node = null;\n    private _targetLabel:cc.Label = null;\n\n    public static create(grid:GridBase, direction:ItemMowerDirection):ItemMower{\n\n        let className = 'ItemMower';\n        let prefabFileName = 'match_scene/prefab/entity/item/ItemMower';\n        let pool = EntityPrefabNodePool.getInstance();\n        let component = pool.getPrefabNodeWithFileNameAndClassName(prefabFileName, className) as ItemMower;\n        if (component) {\n            component.init(grid, direction); \n            return component;       \n        }\n        return null;\n    }\n    protected init(grid:GridBase, direction:ItemMowerDirection){\n        super.initItem(grid, ItemType.Mower);\n        this._targetIcon = this._puppet.getChildByName('targetIcon').getComponent(cc.Sprite);\n        this._targetFrame = this._puppet.getChildByName('targetFrame');\n        this._targetLabel = this._targetFrame.getChildByName('targetAmountLabel').getComponent(cc.Label);\n        this.setDirection(direction);\n        //this.setChargeID(CollectionID.ItemNormalRed);\n        this.setChargeTargetAmount(0);\n    }\n\n    public dealWithConfigMap(configMap:Object):void{\n        super.dealWithConfigMap(configMap);\n        if(configMap[TMXConfigInfoKeys.CFG_MOWER_CHARGE_TARGET]){\n            let targetName = configMap[TMXConfigInfoKeys.CFG_MOWER_CHARGE_TARGET];\n            let collectionID = IdentifierManager.getInstance().getCollectionIDFromString(targetName);\n            if (collectionID != CollectionID.None) {\n                this.setChargeID(collectionID);\n            }\n\n            let count = configMap[TMXConfigInfoKeys.CFG_MOWER_CHARGE_COUNT];\n            if (count) {\n                this.setChargeTargetAmount(Number(count));\n            }\n\n            let priority = configMap[TMXConfigInfoKeys.CFG_MOWER_CHARGE_PRIORITY];\n            if (priority) {\n                this._chargePriority = priority;\n            }\n        }\n    }\n\n    public setChargeID(collectionID:CollectionID) : void {\n        super.setChargeID(collectionID);\n        let frameName = IdentifierManager.getInstance().getFrameNameFromCollectionID(this._chargetCollectionID);\n        let component = this._targetIcon.getComponent(UISpriteExt)\n        if (component) {\n            component.src = frameName;\n        }\n    } \n\n    public setChargeAmount(amount:number) : void {\n        super.setChargeAmount(amount);\n        this.updateTargetAmount();\n    }\n\n    public setChargeTargetAmount(amount:number) : void {\n        super.setChargeTargetAmount(amount);\n        this.updateTargetAmount();\n    }\n\n    private updateTargetAmount() : void {\n        let amount = Math.max(this._targetCount - this._chargeCount, 0); \n        this._targetLabel.string = amount.toString();\n    }\n\n    public getDirection() : ItemMowerDirection {\n        return this._direction;\n    }\n    public setDirection(direction:ItemMowerDirection) : void {\n        this._direction = direction;\n        this.updatePuppet();\n        let targetFramePos = ItemMower.targetFramePositions[this._direction];\n        if(targetFramePos){\n            this._targetFrame.setPosition(targetFramePos);\n        }\n    }\n    public clone():ItemMower {\n        let item = ItemMower.create(this.getGrid(), this.getDirection());\n        return item;\n    }\n\n    public getCollectionID():CollectionID{\n        return CollectionID.ItemMower;\n    }\n\n    public getEntityID():EntityID{\n\n        let result = EntityID.None;\n        switch (this._direction) {\n            case ItemMowerDirection.Up:\n                result = EntityID.ItemMowerUp;\n                break;\n            case ItemMowerDirection.Right:\n                result = EntityID.ItemMowerRight;\n                break;\n            case ItemMowerDirection.Down:\n                result = EntityID.ItemMowerDown;\n                break;\n            case ItemMowerDirection.Left:\n                result = EntityID.ItemMowerLeft;\n                break;\n        \n            default:\n                break;\n        }\n\n        return result;\n    }\n\n    public getScore():number{\n        return 50 * this.getChargeTargetAmount();\n    }\n\n    protected _onCharge(option:EntityChargeOption) {\n        this.absorbWillChargeAmount(option.chargeID, option.chargeAmount);\n        if (this.getChargeAmount() >= this.getChargeTargetAmount()) {\n            this.getGrid().gainScoreWithEntity(this);\n            this.setVisible(false);\n            this.selfDestory();\n            let layoutGrass = this.getGrid().isGrassFloorAtLogicalPos(this.getLogicalPos());\n            let direction = FlyerMowerDirection.Up;\n            switch (this._direction) {\n                case ItemMowerDirection.Up:\n                    direction = FlyerMowerDirection.Up;\n                    break;\n                case ItemMowerDirection.Right:\n                    direction = FlyerMowerDirection.Right;\n                    break;\n                case ItemMowerDirection.Down:\n                    direction = FlyerMowerDirection.Down;\n                    break;\n                case ItemMowerDirection.Left:\n                    direction = FlyerMowerDirection.Left;\n                    break;\n                default:\n                    break;\n            }\n            let flyer = FlyerMower.create(this.getGrid(),layoutGrass, this.getLogicalPos(),direction);\n            this.getGrid().setFlyerAtLogicalPos(flyer, this.getLogicalPos());\n        }\n    }\n\n    onDestroy() {\n        super.onDestroy();\n        this._targetIcon = null;\n        this._targetFrame = null;\n        this._targetLabel = null;\n    }\n}\n","import { CollectionID } from \"../../../defines/CollectionID\";\nimport { EntityCleanOption, EntityColor, EntityID, EntityChangeOption, EntityCleanType } from \"../../../defines/EntityID\";\nimport GridBase from \"../../../grid/GridBase\";\nimport ItemBase, { ItemType } from \"../ItemBase\";\nimport { ItemBombType } from \"./bomb/ItemBombBase\";\nimport ItemFactory from \"../ItemFactory\";\nimport FlyerAnimation from \"../../flyer/FlyerAnimation\";\nimport IGame from \"../../../../../base/IGame\";\nimport { PowerID } from \"../../../defines/PowerID\";\nimport IdentifierManager from \"../../../defines/IdentifierManager\";\nimport EntityPrefabNodePool from \"../../EntityPrefabNodePool\";\n\n\n// Learn TypeScript:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/typescript.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/typescript.html\n// Learn Attribute:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class ItemNormal extends ItemBase {\n\n    public getCollectionID() : CollectionID {\n        let result = CollectionID.None;\n        switch (this.getEntityColor()) {\n            case EntityColor.Red:\n                result = CollectionID.ItemNormalRed;\n                break;\n            case EntityColor.Green:\n                result = CollectionID.ItemNormalGreen;\n                break;\n            case EntityColor.Blue:\n                result = CollectionID.ItemNormalBlue;\n                break;\n            case EntityColor.Yellow:\n                result = CollectionID.ItemNormalYellow;\n                break;\n            case EntityColor.Orange:\n                result = CollectionID.ItemNormalOrange;\n                break;\n            case EntityColor.Purple:\n                result = CollectionID.ItemNormalPurple;\n                break;\n                \n            default:\n                break;\n        }\n        return result;\n    }\n    public getEntityID() : EntityID {\n        let result = EntityID.None;\n        switch (this.getEntityColor()) {\n            case EntityColor.Red:\n                result = EntityID.ItemNormalRed;\n                break;\n            case EntityColor.Green:\n                result = EntityID.ItemNormalGreen;\n                break;\n            case EntityColor.Blue:\n                result = EntityID.ItemNormalBlue;\n                break;\n            case EntityColor.Yellow:\n                result = EntityID.ItemNormalYellow;\n                break;\n            case EntityColor.Orange:\n                result = EntityID.ItemNormalOrange;\n                break;\n            case EntityColor.Purple:\n                result = EntityID.ItemNormalPurple;\n                break;\n            default:\n                break;\n        }\n        return result;\n    }\n\n    public getScore():number{\n        return 30;\n    }\n\n    public getButterflyPriority(color:EntityColor, layoutGrass:boolean) : number {\n        if (this.getGrid().isTargetCollectionID(this.getCollectionID())) {\n            return 1;\n        }\n        return super.getButterflyPriority(color, layoutGrass);\n    }\n    \n    protected _canDrop() : boolean {\n        return true;\n    }\n    protected _canSwap() : boolean {\n        return true;\n    }\n    protected _canMatch() : boolean {\n        return true;\n    }\n    protected _canChange() : boolean {\n        return true;\n    }\n    protected _canShuffle() : boolean {\n        return true;\n    }\n    protected _canShuffleWhenCreate() : boolean {\n        return true;\n    }\n    protected _canTransformByMagicCrystal() : boolean {\n        if (this.getGrid().isTargetCollectionID(this.getCollectionID())) {\n            return false;\n        }\n        return true;\n    }\n    protected _canUpgradeByRainbow() : boolean {\n        return true;\n    }\n    protected _canChangeColor() : boolean {\n        return true;\n    }\n    protected _canCleanByBomb(cleanColor:EntityColor) : boolean {\n        return true;\n    }\n    protected _canCleanByMatch() : boolean {\n        return true;\n    }\n    \n    protected _onClean(cleanOption:EntityCleanOption) : void {\n\n        this.setVisible(false);  \n        this.getGrid().gainScoreWithEntity(this);\n        if (cleanOption.createBombType != ItemBombType.None) {\n            this.removeFromGridAndAddToEffect();\n            this.getGrid().addObstructs(this);\n            this.setVisible(!this.isTargetCollection());\n            this.progressDeathWish(cleanOption);\n\n            let targetPos = this.getPixelPos(cleanOption.cleanRoot);\n            let obstructAction = cc.sequence(cc.delayTime(0.1),\n                                     cc.callFunc(function() {\n                                         this.getGrid().removeObstructs(this);\n                                        }, this));\n            this.runAction(obstructAction);\n\n            let removeAction = cc.sequence(cc.spawn(cc.scaleTo(0.3, 0),\n                                                    cc.moveTo(0.3 * 0.5, targetPos)),\n                                           cc.callFunc(function() {\n                                            this.getGrid().removeObstructs(this);\n                                            this.destoryWithRecycle(true);\n                                           },this));\n            this.runAction(removeAction);\n        }else{\n            this.selfDestory(true);\n            if (!this.isTargetCollection()) {\n                let flyer = FlyerAnimation.createDieAnimation(this.getGrid(), this.getEntityID());\n                this.getGrid().setFlyerAtLogicalPos(flyer, this.getLogicalPos());\n                if (cleanOption.cleanType == EntityCleanType.Match) {\n                    let combo = this.getGrid().getPowerAmount(PowerID.MatchCombo);\n                    let fileName = 'eliminate_0';\n                    switch (combo) {\n                        case 0:\n                            fileName = 'eliminate_0';\n                            break;\n                        case 1:\n                            fileName = 'eliminate_1';\n                            break;\n                        case 2:\n                            fileName = 'eliminate_2';\n                            break;\n                        case 3:\n                            fileName = 'eliminate_3';\n                            break;\n                        case 4:\n                            fileName = 'eliminate_4';\n                            break;\n                        case 5:\n                            fileName = 'eliminate_5';\n                            break;\n                        case 6:\n                            fileName = 'eliminate_6';\n                            break;\n                        case 7:\n                            fileName = 'eliminate_7';\n                            break;\n                        case 8:\n                            fileName = 'eliminate_8';\n                            break;\n                        default:\n                            fileName = 'eliminate_8';\n                            break;\n                    }\n                    IGame.playAudio(IdentifierManager.getInstance().getMatchAudioFilePath(fileName));\n                }\n            }\n            this.progressDeathWish(cleanOption);\n        }\n    }\n\n    protected _onChange(changeOption:EntityChangeOption) : void {\n        if (changeOption.collectOld) {\n            this.onCollected();\n        }\n        \n        let grid = this.getGrid();\n\n\n        let  newItem = ItemFactory.generateItemWithEntityID(grid, changeOption.targetID);\n        if (newItem) {\n            grid.setEntity(newItem, this.getLogicalPos());\n        }\n    }\n    \n    public bounce() : cc.AnimationState {\n        let state = this.playAnimation('bounce');\n        IGame.playAudio(IdentifierManager.getInstance().getMatchAudioFilePath('fall_back'));\n        return state;\n    }\n\n    public static create(grid:GridBase, color:EntityColor) : ItemNormal {\n\n        let className = 'ItemNormal';\n        let prefabFileName = 'match_scene/prefab/entity/item/ItemNormal';\n        let pool = EntityPrefabNodePool.getInstance();\n        let component = pool.getPrefabNodeWithFileNameAndClassName(prefabFileName, className) as ItemNormal;\n        if (component) {\n            component.init(grid, color); \n            return component;       \n        }\n        return null;\n    }\n\n    public clone() : ItemNormal {\n        let item = ItemNormal.create(this.getGrid(), this.getEntityColor());\n        return item;\n    }\n\n    protected init(grid:GridBase, color:EntityColor) {\n        super.initItem(grid, ItemType.Normal);\n        this.setEntityColor(color);\n    }\n\n}\n","import { CollectionID } from \"../../../defines/CollectionID\";\nimport { EntityID } from \"../../../defines/EntityID\";\nimport GridBase from \"../../../grid/GridBase\";\nimport ItemBase, { ItemType } from \"../ItemBase\";\nimport EntityPrefabNodePool from \"../../EntityPrefabNodePool\";\n\nexport enum PuppyDirection{\n    None,\n    Left,\n    Right,\n    Front,\n    Back,\n};\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class ItemPuppy extends ItemBase {\n    \n    public static create(grid:GridBase):ItemPuppy{\n\n        let className = 'ItemPuppy';\n        let prefabFileName = 'match_scene/prefab/entity/item/ItemPuppy';\n        let pool = EntityPrefabNodePool.getInstance();\n        let component = pool.getPrefabNodeWithFileNameAndClassName(prefabFileName, className) as ItemPuppy;\n        if (component) {\n            component.init(grid); \n            return component;       \n        }\n        return null;\n    }\n\n    public clone() : ItemPuppy {\n        let item = ItemPuppy.create(this.getGrid());\n        return item;\n    }\n\n    public getTopZOrder() : number {\n        return GridBase.ZORDER_PUPPY_TOP;\n    }\n    public getBottomZOrder() : number {\n        return GridBase.ZORDER_PUPPY_BOTTOM;\n    }\n\n    public getCollectionID():CollectionID{\n        return CollectionID.ItemPuppy;\n    }\n\n    public getEntityID():EntityID{\n        return EntityID.ItemPuppy;\n    }\n\n    public setLogicalPos(pos:cc.Vec2):void{\n        super.setLogicalPos(pos);\n        this.node.zIndex = GridBase.ZORDER_PUPPY_BOTTOM;\n    }\n\n    public onCollected():void{\n        if (this.getGrid().isTargetCollectionID(this.getCollectionID())) {\n            this.getGrid().updateTargetBarUIWithDelta(this.getCollectionID(), -1);\n        }\n        this.getGrid().collectEntity(this);\n    }\n\n    protected init(grid:GridBase){\n        super.initItem(grid, ItemType.Puppy);\n    }\n\n    protected _canDrop():boolean{\n        return false;\n    }\n\n    protected _canSwap():boolean{\n        return false;\n    }\n\n    protected _canMatch():boolean{\n        return false;\n    }\n\n    public stay():void{\n        this.playAnimation('item_puppy_idle');\n    }\n\n    public attack(direction:PuppyDirection):void{\n        let animationName = 'item_puppy_idle';\n        switch(direction){\n            case PuppyDirection.Left:{\n                animationName = 'item_puppy_attack_left';\n                break;\n            }\n            case PuppyDirection.Right:{\n                animationName = 'item_puppy_attack_right';\n                break;\n            }\n            case PuppyDirection.Front:{\n                animationName = 'item_puppy_attack_front';\n                break;\n            }\n            case PuppyDirection.Back:{\n                animationName = 'item_puppy_attack_back';\n                break;\n            }\n            default:{\n                break;\n            }\n        }\n\n        this.playAnimation(animationName);\n    }\n\n    public move(direction:PuppyDirection):void{\n        let animationName = 'item_puppy_idle';\n        switch(direction){\n            case PuppyDirection.Left:{\n                animationName = 'item_puppy_move_left';\n                break;\n            }\n            case PuppyDirection.Right:{\n                animationName = 'item_puppy_move_right';\n                break;\n            }\n            case PuppyDirection.Front:{\n                animationName = 'item_puppy_move_front';\n                break;\n            }\n            case PuppyDirection.Back:{\n                animationName = 'item_puppy_move_back';\n                break;\n            }\n            default:{\n                break;\n            }\n        }\n        \n        if (this.getCurrentAnimationClipName() != animationName) {\n            this.playAnimation(animationName);\n        }\n    }\n\n    // public turn(direction:PuppyDirection):void{\n    //     let animationName = 'item_puppy_idle';\n    //     switch(direction){\n    //         case PuppyDirection.Front:{\n    //             animationName = 'backToFront';\n    //             break;\n    //         }\n    //         case PuppyDirection.Back:{\n    //             animationName = 'frontToBack';\n    //             break;\n    //         }\n    //         default:{\n    //             break;\n    //         }\n    //     }\n    // }\n\n    public fly():void{\n        this.playAnimation('item_puppy_fly');\n    }\n\n    public win():void{\n        this.playAnimation('item_puppy_win');\n    }\n}\n","import { EntityColor } from \"../../../defines/EntityID\";\nimport EntityStateBase, { EntityStateType } from \"../../state/EntityStateBase\";\nimport EntityBase from \"../../EntityBase\";\nimport EntityStateWait from \"../../state/concreteState/EntityStateWait\";\n\nexport default class ItemStateChangeColor extends EntityStateBase {\n\n    private _targetColor:EntityColor = null;\n\n    constructor(color:EntityColor) {\n        super(EntityStateType.ChangeColor);\n        this._targetColor = color;\n    }\n\n    public static create(color:EntityColor):ItemStateChangeColor{\n        return new ItemStateChangeColor(color);\n    }\n\n    public enter(entity:EntityBase):void{\n        let grid = entity.getGrid();\n        grid.addObstructs(entity);\n\n        let animate = cc.sequence(cc.fadeOut(0.2 * 0.5), cc.callFunc(()=>{\n            entity.setEntityColor(this._targetColor);\n        }), cc.fadeIn(0.2 * 0.5));\n\n        let callBack = cc.callFunc(()=>{\n            entity.setCurrentState(EntityStateWait.create());\n            grid.removeObstructs(entity);\n        });\n        entity.runAction(cc.sequence(animate, callBack));\n        \n    }\n\n    public update(entity:EntityBase, delta:number):void{\n\n    }\n\n    public exit(entity:EntityBase):void{\n        let grid = entity.getGrid();\n        grid.removeObstructs(entity);\n    }\n\n\n}\n","import GameMath from \"../../../../../extend/utils/GameMath\";\nimport { EntityDropStepType } from \"../../../defines/EntityID\";\nimport EntityBase from \"../../EntityBase\";\nimport EntityStateWait from \"../../state/concreteState/EntityStateWait\";\nimport EntityStateBase, { EntityStateType } from \"../../state/EntityStateBase\";\nimport ItemBase from \"../ItemBase\";\n\n\nexport default class ItemStateDrop extends EntityStateBase {\n\n    public static create() : ItemStateDrop {\n        return new ItemStateDrop();\n    }\n    constructor() {\n        super(EntityStateType.Drop);\n    }\n\n    private _pathIndex:number = 0;\n    private _pathCount:number = 0;\n    private _timeDelta:number = 0;\n    private _stepDuraton:number = 0;\n\n    private static MAX_DROP_DRUATION = 0.125;\n    private static MIN_DROP_DRUATION = 0.065;\n    private static DROP_DRUATION_DECAY_FACTOR = 0.9;\n\n    private initDropPath(entity:EntityBase) : void {\n        let grid = entity.getGrid();\n        let path = entity.getPath();\n        if (path.length < 2) {\n            entity.setCurrentState(EntityStateWait.create());\n            entity.clearPath();\n            return;\n        }\n\n        let lastTargetIndex = path.length - 1;\n        for (; lastTargetIndex >= 0; lastTargetIndex--) {\n            if (path[lastTargetIndex].type != EntityDropStepType.Stay) {\n                break;\n            }\n        }\n\n        if (lastTargetIndex < 0) {\n            entity.setCurrentState(EntityStateWait.create());\n            entity.clearPath();\n            return;\n        }else{\n            grid.addObstructs(entity);\n            let firstStep = path[0];\n            entity.setPixelPos(firstStep.logicalPos);\n            entity.setVisible(firstStep.type != EntityDropStepType.Hide);\n\n            this._pathCount = lastTargetIndex + 1;\n            this._pathIndex = 1;\n            this._timeDelta = 0;\n            this._stepDuraton = ItemStateDrop.MAX_DROP_DRUATION;\n        }\n    }\n    private updatePath(entity:EntityBase, delta:number) : void {\n        this._timeDelta += delta;\n        while(1) {\n            let needNextLoop = false;\n            if (this._pathIndex >= this._pathCount) {\n                let item = entity as ItemBase;\n                item.bounce();\n                entity.getGrid().removeObstructs(entity);\n                entity.clearPath();\n                entity.setCurrentState(EntityStateWait.create());\n                break;\n            }\n\n            let path = entity.getPath();\n            let step = path[this._pathIndex];\n\n            switch (step.type) {\n                case EntityDropStepType.Hide: {\n                    entity.setVisible(false);\n                    if (this._timeDelta >= ItemStateDrop.MAX_DROP_DRUATION) {\n                        this._timeDelta -= ItemStateDrop.MAX_DROP_DRUATION;\n                        this._pathIndex += 1;\n                        needNextLoop = true;\n                        this._stepDuraton = ItemStateDrop.MAX_DROP_DRUATION;\n                    }\n                }\n                    break;\n                case EntityDropStepType.Born: {\n                    entity.setVisible(true);\n                    let startPos = entity.getPixelPos(step.logicalPos).add(cc.v2(0, entity.getContentSize().height * 0.5));\n                    let offset = cc.v2(0, -entity.getContentSize().height * 0.5);\n                    let startScale = 0;\n                    let scaleDelta = 1.0;\n                    let percentage = Math.min(this._timeDelta / ItemStateDrop.MAX_DROP_DRUATION, 1);\n                    entity.node.setPosition(startPos.add(offset.mul(percentage)));\n                    entity.node.setScale(startScale + scaleDelta * percentage);\n\n                    if (this._timeDelta >= ItemStateDrop.MAX_DROP_DRUATION) {\n                        this._timeDelta -= ItemStateDrop.MAX_DROP_DRUATION;\n                        this._pathIndex += 1;\n                        needNextLoop = true;\n                        this._stepDuraton = ItemStateDrop.MAX_DROP_DRUATION;\n                    }\n                }   \n                    break;\n                case EntityDropStepType.Stay: {\n                    entity.setVisible(true);\n                    if (this._timeDelta >= ItemStateDrop.MAX_DROP_DRUATION) {\n                        this._timeDelta -= ItemStateDrop.MAX_DROP_DRUATION;\n                        this._pathIndex += 1;\n                        needNextLoop = true;\n                        this._stepDuraton = ItemStateDrop.MAX_DROP_DRUATION;\n                    }\n                }\n                    break;\n\n                case EntityDropStepType.Drop: {\n                    let startPos = entity.getPixelPos(path[this._pathIndex - 1].logicalPos);\n                    let offset = entity.getPixelPos(step.logicalPos).sub(startPos);\n                    let percentage = Math.min(this._timeDelta / this._stepDuraton, 1);\n                    entity.node.setPosition(startPos.add(offset.mul(percentage)));\n                    if (this._timeDelta >= this._stepDuraton) {\n                        this._timeDelta -= this._stepDuraton;\n                        this._pathIndex += 1;\n                        needNextLoop = true;\n                        let newDuration = this._stepDuraton * ItemStateDrop.DROP_DRUATION_DECAY_FACTOR;\n                        this._stepDuraton = GameMath.clamp(newDuration, ItemStateDrop.MIN_DROP_DRUATION, ItemStateDrop.MAX_DROP_DRUATION);\n                    }\n                }\n                    break;\n                case EntityDropStepType.Wormhole : {\n                    let percentage = Math.min(this._timeDelta / this._stepDuraton, 1);\n                    if (percentage <= 0.5) {\n                        percentage = percentage / 0.5;\n                        let startPos = entity.getPixelPos(path[this._pathIndex - 1].logicalPos);\n                        let offset = cc.v2(0, -entity.getContentSize().height * 0.5);\n                        let startScale = 1.0;\n                        let scaleDelta = -1.0;\n                        entity.node.setPosition(startPos.add(offset.mul(percentage)));\n                        entity.node.setScale(startScale + scaleDelta * percentage);\n                    }else{\n                        percentage = Math.min((percentage - 0.5) / 0.5, 1);\n                        let startPos = entity.getPixelPos(step.logicalPos).add(cc.v2(0, entity.getContentSize().height * 0.5));\n                        let offset = cc.v2(0, -entity.getContentSize().height * 0.5);\n\n                        let startScale = 0;\n                        let scaleDelta = 1.0;\n                        entity.node.setPosition(startPos.add(offset.mul(percentage)));\n                        entity.node.setScale(startScale + scaleDelta * percentage);\n                    }\n                    \n                    if (this._timeDelta >= ItemStateDrop.MAX_DROP_DRUATION) {\n                        this._timeDelta -= ItemStateDrop.MAX_DROP_DRUATION;\n                        this._pathIndex += 1;\n                        needNextLoop = true;\n                        let newDuration = this._stepDuraton * ItemStateDrop.DROP_DRUATION_DECAY_FACTOR;\n                        this._stepDuraton = GameMath.clamp(newDuration, ItemStateDrop.MIN_DROP_DRUATION, ItemStateDrop.MAX_DROP_DRUATION);\n                    }\n                }\n                    break;\n                \n                default:\n                    break;\n            }\n            if (needNextLoop == false) {\n                break;\n            }\n        }\n    }\n    enter(entity:EntityBase):void {\n        this.initDropPath(entity);\n    }\n    update(entity:EntityBase, delta:number):void {\n        this.updatePath(entity, delta * cc.director.getScheduler().getTimeScale());\n    }\n    exit(entity:EntityBase):void {\n        entity.getGrid().removeObstructs(entity);\n    }\n}\n","import EntityStateBase, { EntityStateType } from \"../../state/EntityStateBase\";\nimport EntityBase from \"../../EntityBase\";\nimport EntityStateWait from \"../../state/concreteState/EntityStateWait\";\nimport EntityEventChanged from \"../../../event/EntityEventChanged\";\nimport GridBase from \"../../../grid/GridBase\";\nimport FlyerAnimation, { FlyerAnimationType } from \"../../flyer/FlyerAnimation\";\n\nexport default class ItemStateGenerate extends EntityStateBase {\n\n    private _targetPos:cc.Vec2 = cc.Vec2.ZERO;\n    \n    public static create(pos:cc.Vec2) : ItemStateGenerate {\n        return new ItemStateGenerate(pos);\n    }\n    constructor(pos:cc.Vec2) {\n        super(EntityStateType.Generate);\n        this._targetPos = pos;\n    }\n\n    enter(entity:EntityBase):void {\n        let grid = entity.getGrid();\n        let pixelTargetPos = entity.getPixelPos(this._targetPos);\n        entity.node.setPosition(pixelTargetPos);\n        entity.node.setScale(0);\n        grid.addObstructs(entity);\n        entity.node.zIndex = entity.getTopZOrder();\n\n        let flyer = FlyerAnimation.createAnimationWithType(entity.getGrid(), FlyerAnimationType.CommonHurt);\n        grid.setFlyerAtLogicalPos(flyer, this._targetPos);\n        flyer.node.zIndex = entity.getBottomZOrder() - 499;\n        let sequence = cc.sequence(cc.scaleTo(0.3, 1.0).easing(cc.easeBackOut()),\n                                   cc.callFunc(()=> {\n                                        grid.setEntity(entity, this._targetPos);\n                                        entity.setCurrentState(EntityStateWait.create());\n                                        let changedEvent = EntityEventChanged.create(entity);\n                                        entity.node.dispatchEvent(changedEvent);\n                                        entity.getGrid().removeObstructs(entity);\n                                        entity.node.zIndex = GridBase.ZORDER_ITEM_BOTTOM;\n                                   }));\n        entity.runAction(sequence);\n    }\n\n    update(entity:EntityBase, delta:number):void {\n        \n    }\n    \n    exit(entity:EntityBase):void {\n        entity.getGrid().removeObstructs(entity);\n    }\n}\n","import GameMath from \"../../../../../extend/utils/GameMath\";\nimport EntityBase from \"../../EntityBase\";\nimport EntityStateBase, { EntityStateType } from \"../../state/EntityStateBase\";\nimport EntityStateWait from \"../../state/concreteState/EntityStateWait\";\nimport CurveToAction from \"../../../../../extend/action/CurveToAction\";\nimport GridBase from \"../../../grid/GridBase\";\nimport { GameCurrencyType } from \"../../../../../define/GameCurrencyType\";\n\n\nexport default class ItemStateReplace extends EntityStateBase {\n\n    private _delayTime:number = 0;\n    private _targetPos:cc.Vec2 = null;\n    private _gainScore:number = 0;\n    private _supplys:object = {};\n\n    public static create(targetPos:cc.Vec2, delay:number = 0.0, score:number = 0, supplys:object = {}) : ItemStateReplace {\n        return new ItemStateReplace(targetPos, delay, score, supplys);\n    }\n\n    constructor(toPos:cc.Vec2, delay:number, score:number, supplys:object) {\n        super(EntityStateType.Replace);\n        this._targetPos = toPos;\n        this._delayTime = delay;\n        this._gainScore = score;\n        this._supplys = supplys;\n    }\n\n    enter(entity:EntityBase):void {\n        \n       let grid = entity.getGrid();\n       let pixelTargetPos = entity.getPixelPos(this._targetPos);\n       grid.addObstructs(entity);\n       \n       entity.node.zIndex = GridBase.ZORDER_EFFECT;\n       entity.shiftToEffectLayer();\n       \n       let actions:cc.FiniteTimeAction[] = [];\n       if (this._delayTime > 0) {\n           actions.push(cc.delayTime(this._delayTime))\n       } \n\n       let moveTime:number = 1.0;\n       actions.push(CurveToAction.create(moveTime, entity.node.getPosition(), pixelTargetPos))\n\n       \n        let gainReward = cc.callFunc(()=>{\n            if(this._gainScore > 0){\n                grid.gainScoreWithPixelPos(this._gainScore, pixelTargetPos, true)\n            }\n            \n            for (let key in this._supplys) {\n                let supplyID = Number(key) as GameCurrencyType;\n                let amount = this._supplys[key];\n                grid.gainCollectedSupply(supplyID, amount)\n            }\n        })\n        actions.push(gainReward);\n       \n\n       let callback = cc.callFunc(()=>{\n            grid.setEntity(entity, this._targetPos);\n            entity.setCurrentState(EntityStateWait.create());\n            grid.removeObstructs(entity);\n       });\n\n       actions.push(callback);\n       entity.runAction(cc.sequence(actions));\n    }\n\n    update(entity:EntityBase, delta:number):void {\n        \n    }\n    \n    exit(entity:EntityBase):void {\n        entity.getGrid().removeObstructs(entity);\n    }\n}\n","import EntityStateBase, { EntityStateType } from \"../../state/EntityStateBase\";\nimport GameMath from \"../../../../../extend/utils/GameMath\";\nimport EntityBase from \"../../EntityBase\";\nimport EntityStateWait from \"../../state/concreteState/EntityStateWait\";\nimport GridBase from \"../../../grid/GridBase\";\n\n\nexport default class ItemStateShuffle extends EntityStateBase {\n\n    public static SHUFFLE_DRUATION:number = 1;\n    public static create(fromPos:cc.Vec2, toPos:cc.Vec2, duration:number = ItemStateShuffle.SHUFFLE_DRUATION) : ItemStateShuffle {\n        return new ItemStateShuffle(fromPos, toPos, duration);\n    }\n\n    private _fromPos:cc.Vec2 = GameMath.INVALID_LOGICAL_POSITION.clone();\n    private _toPos:cc.Vec2 = GameMath.INVALID_LOGICAL_POSITION.clone();\n    private _duration:number = ItemStateShuffle.SHUFFLE_DRUATION; \n\n    constructor(fromPos:cc.Vec2, toPos:cc.Vec2, duration:number) {\n        super(EntityStateType.Shuffle);\n        this._fromPos = fromPos;\n        this._toPos = toPos;\n        this._duration = duration;\n    }\n\n    enter(entity:EntityBase):void {\n        let grid = entity.getGrid();\n        grid.addObstructs(entity);\n        \n        let cellSize = grid.getCellSize();\n        let startPos = entity.getPixelPos(this._fromPos);\n        entity.node.setPosition(startPos);\n        entity.node.zIndex = GridBase.ZORDER_EFFECT;\n        entity.shiftToEffectLayer();\n        let duration = this._duration + GameMath.random(this._duration * -0.5, this._duration * 0.5);\n\n        let fly = cc.spawn(cc.moveTo(duration * 0.33, startPos.add(cc.v2(0, cellSize.height * 0.75))),\n                           cc.scaleTo(duration * 0.33, 1.2));\n\n        let stay = cc.delayTime(duration * 0.34);\n\n        let move = cc.spawn(cc.moveTo(duration * 0.33, entity.getPixelPos(this._toPos)),\n                            cc.scaleTo(duration, 1));\n        let callback = cc.callFunc(function() {\n            grid.setEntity(entity,entity.getLogicalPos());\n            entity.setCurrentState(EntityStateWait.create());\n        }, this);\n        entity.runAction(cc.sequence(fly, stay, move, callback));\n    }\n\n    update(entity:EntityBase, delta:number):void {\n        \n    }\n    \n    exit(entity:EntityBase):void {\n        entity.getGrid().removeObstructs(entity);\n    }\n}\n","import GameMath from \"../../../../../extend/utils/GameMath\";\nimport EntityBase from \"../../EntityBase\";\nimport EntityStateWait from \"../../state/concreteState/EntityStateWait\";\nimport EntityStateBase, { EntityStateType } from \"../../state/EntityStateBase\";\nimport GridBase from \"../../../grid/GridBase\";\n\n\nexport default class ItemStateSwap extends EntityStateBase {\n\n    public static SWAP_DRUATION:number = 0.15;\n    public static create(fromPos:cc.Vec2, toPos:cc.Vec2, duration:number = ItemStateSwap.SWAP_DRUATION) : ItemStateSwap {\n        return new ItemStateSwap(fromPos, toPos, duration);\n    }\n\n    private _fromPos:cc.Vec2 = GameMath.INVALID_LOGICAL_POSITION.clone();\n    private _toPos:cc.Vec2 = GameMath.INVALID_LOGICAL_POSITION.clone();\n    private _duration:number = ItemStateSwap.SWAP_DRUATION; \n    private _timePast:number = 0;\n\n    constructor(fromPos:cc.Vec2, toPos:cc.Vec2, duration:number) {\n        super(EntityStateType.Swap);\n        this._fromPos = fromPos;\n        this._toPos = toPos;\n        this._duration = duration;\n        this._timePast = 0;\n    }\n\n    enter(entity:EntityBase):void {\n        \n        let grid = entity.getGrid();\n        grid.addObstructs(entity);\n        \n        entity.setPixelPos(this._fromPos);\n        entity.node.zIndex = GridBase.ZORDER_EFFECT;\n        let move = cc.moveTo(this._duration, entity.getPixelPos(this._toPos));\n        let callback = cc.callFunc(function() {\n            entity.setCurrentState(EntityStateWait.create());\n            entity.node.zIndex = entity.getBottomZOrder();\n        }, this);\n        entity.runAction(cc.sequence(move, callback));\n        this._timePast = 0;\n    }\n\n    update(entity:EntityBase, delta:number):void {\n        this._timePast += delta;\n        if (this._timePast >= this._duration + 0.1) {\n            entity.node.stopAllActions();\n            entity.setPixelPos(this._toPos);\n            entity.setCurrentState(EntityStateWait.create());\n        }\n    }\n    \n    exit(entity:EntityBase):void {\n        entity.getGrid().removeObstructs(entity);\n    }\n}\n","import ItemBase, { ItemType } from \"../ItemBase\";\nimport GridBase from \"../../../grid/GridBase\";\nimport EntityPrefabNodePool from \"../../EntityPrefabNodePool\";\nimport { CollectionID } from \"../../../defines/CollectionID\";\nimport { EntityID, EntityColor, EntityCleanOption, EntityCleanType } from \"../../../defines/EntityID\";\nimport FlyerAnimation, { FlyerAnimationType } from \"../../flyer/FlyerAnimation\";\nimport IdentifierManager from \"../../../defines/IdentifierManager\";\nimport IGame from \"../../../../../base/IGame\";\n\n// Learn TypeScript:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/typescript.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/typescript.html\n// Learn Attribute:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class ItemStatue extends ItemBase {\n\n    public static create(grid:GridBase, healthPoint:number):ItemStatue{\n\n        let className = 'ItemStatue';\n        let prefabFileName = 'match_scene/prefab/entity/item/ItemStatue';\n        let pool = EntityPrefabNodePool.getInstance();\n        let component = pool.getPrefabNodeWithFileNameAndClassName(prefabFileName, className) as ItemStatue;\n\n        if (component) {\n            component.init(grid, healthPoint); \n            return component;       \n        }\n        return null;\n    }\n\n    public clone():ItemStatue {\n        let item = ItemStatue.create(this.getGrid(), this.getHealthPoint());\n        return item;\n    }\n    protected init(grid:GridBase, healthPoint:number):void{\n        super.initItem(grid, ItemType.Statue);\n        this.setHealthPoint(healthPoint);\n    }\n    \n    private _healthPoint:number = 0;\n    protected getHealthPoint():number{\n        return this._healthPoint;\n    }\n\n    protected setHealthPoint(val:number){\n        this._healthPoint = val;\n        this.updatePuppet();\n    }\n\n    public getCollectionID():CollectionID{\n        return CollectionID.ItemStatue;\n    }\n\n    public getEntityID():EntityID{\n        let result = EntityID.None;\n        switch(this.getHealthPoint()){\n            case 1:{\n                result = EntityID.ItemStatueHp1;\n                break;\n            }\n            case 2:{\n                result = EntityID.ItemStatueHp2;\n                break;\n            }\n            case 3:{\n                result = EntityID.ItemStatueHp3;\n                break;\n            }\n            default:{\n                break;\n            }\n        }\n        return result;\n    }\n\n    public getScore():number{\n        return 150;\n    }\n\n    protected _canDrop():boolean{\n        return false;\n    }\n\n    protected _canSwap():boolean{\n        return false;\n    }\n\n    protected _canMatch():boolean{\n        return false;\n    }\n\n    protected _canCleanByBomb(cleanColor:EntityColor):boolean{\n        return true;\n    }\n\n    protected _canCleanByNeighbour(color:EntityColor):boolean{\n        return false;\n    }\n\n    protected _onClean(cleanOption:EntityCleanOption):void{\n\n        let rate = 1\n        if (cleanOption.cleanType == EntityCleanType.Terminate) {\n            rate = this.getHealthPoint()\n            this.setHealthPoint(1);\n        }\n        this.getGrid().gainScoreWithEntity(this, rate);\n        if(this.getHealthPoint() <= 1){\n            if (!this.isTargetCollection()) {\n                let flyer = FlyerAnimation.createDieAnimation(this.getGrid(), this.getEntityID());\n                this.getGrid().setFlyerAtLogicalPos(flyer, this.getLogicalPos());\n            }\n            this.progressDeathWish(cleanOption);\n            this.setVisible(false);\n            this.selfDestory();\n            IGame.playAudio(IdentifierManager.getInstance().getMatchAudioFilePath('statue'));\n            \n        }else{\n            IGame.playAudio(IdentifierManager.getInstance().getMatchAudioFilePath('eliminate_0'));\n            this.setHealthPoint(this.getHealthPoint() - 1);\n            this.selfHurt();\n            let flyer = FlyerAnimation.createAnimationWithType(this.getGrid(), FlyerAnimationType.CommonHurt);\n            this.getGrid().setFlyerAtLogicalPos(flyer, this.getLogicalPos());\n            flyer.node.zIndex = this.getTopZOrder()\n        }\n    }\n}\n","import ItemBase, { ItemType } from \"../ItemBase\";\nimport GridBase from \"../../../grid/GridBase\";\nimport { CollectionID } from \"../../../defines/CollectionID\";\nimport { EntityID, EntityCleanOption, EntityColor } from \"../../../defines/EntityID\";\nimport TMXConfigInfoKeys from \"../../../defines/TMXConfigInfoKeys\";\nimport FlyerAnimation from \"../../flyer/FlyerAnimation\";\nimport IGame from \"../../../../../base/IGame\";\nimport IdentifierManager from \"../../../defines/IdentifierManager\";\nimport EntityPrefabNodePool from \"../../EntityPrefabNodePool\";\n\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class ItemWatermelon extends ItemBase {\n\n    @property([cc.Node])\n    piecesNode:cc.Node[] =[];\n\n    public _healthPoint:number = 1;\n\n    public static create(grid:GridBase):ItemWatermelon{\n\n        let className = 'ItemWatermelon';\n        let prefabFileName = 'match_scene/prefab/entity/item/ItemWatermelon';\n        let pool = EntityPrefabNodePool.getInstance();\n        let component = pool.getPrefabNodeWithFileNameAndClassName(prefabFileName, className) as ItemWatermelon;\n        if (component) {\n            component.init(grid); \n            return component;       \n        }\n        return null;\n    }\n\n    public clone() : ItemWatermelon {\n        let item = ItemWatermelon.create(this.getGrid());\n        item.setHealthPoint(this.getHealthPoint());\n        return item;\n    }\n\n    public getCollectionID():CollectionID{\n        return CollectionID.ItemWatermelon;\n    }\n\n    public getEntityID():EntityID{\n        return EntityID.ItemWatermelon;\n    }\n\n    public getScore():number{\n        return 100;\n    }\n\n    public dealWithConfigMap(configMap:Object):void{\n        super.dealWithConfigMap(configMap);\n        if(configMap[TMXConfigInfoKeys.CFG_WATERMELON_MAX]){\n            this._healthPoint = Number(configMap[TMXConfigInfoKeys.CFG_WATERMELON_MAX]);\n        }\n\n        this.setHealthPoint(this._healthPoint);\n    }\n\n    protected init(grid:GridBase){\n        super.initItem(grid, ItemType.ItemWatermelon, 2, 2);\n    }\n\n    protected _canDrop():boolean{\n        return false;\n    }\n\n    protected _canSwap():boolean{\n        return false;\n    }\n\n    protected _canMatch():boolean{\n        return false;\n    }\n\n    protected _canCleanByTerminate(cleanColor:EntityColor) : boolean {\n        return false;\n    }\n\n    protected _canCleanByBomb(cleanColor:EntityColor):boolean{\n        return true;\n    }\n\n    protected _canCleanByNeighbour(color:EntityColor):boolean{\n        return true;\n    }\n\n    protected _onClean(cleanOption:EntityCleanOption){\n        this.getGrid().gainScoreWithEntity(this);\n        if(this.getHealthPoint() <= 1){\n            \n            this.progressDeathWish(cleanOption);\n            this.removeFromGridAndAddToEffect();\n            this.getGrid().addObstructs(this);\n\n            let size = cc.view.getVisibleSize();\n            let worldPos = cc.v2(size.width + 2000, 0 - 500);\n            let gridPos = this.getGrid().node.convertToNodeSpace(worldPos);\n\n            let removeObstruct = cc.sequence(cc.delayTime(0.2), cc.callFunc(()=>{\n                this.getGrid().removeObstructs(this);\n            }));\n            let disappear = cc.sequence(cc.spawn(cc.moveTo(1.0, gridPos),cc.fadeOut(1.0)),\n                                cc.callFunc(()=>{\n                                    this.getGrid().removeObstructs(this);\n                                    this.node.removeFromParent();\n                                }));\n            let action = cc.spawn(removeObstruct, disappear);\n            this.runAction(action);\n\n            let flyer = FlyerAnimation.createDieAnimation(this.getGrid(), this.getEntityID());\n            this.getGrid().setFlyerAtLogicalPos(flyer, this.getLogicalPos());\n            flyer.node.setPosition(this.node.getPosition());\n            flyer.node.zIndex = this.getTopZOrder();\n            IGame.playAudio(IdentifierManager.getInstance().getMatchAudioFilePath('watermelon'));\n            this.setHealthPoint(0);\n        }else{\n            this.onCollected();\n            this.setHealthPoint(this.getHealthPoint() - 1);\n            this.selfHurt();\n            \n            let flyer = FlyerAnimation.createDieAnimation(this.getGrid(), this.getEntityID());\n            this.getGrid().setFlyerAtLogicalPos(flyer, this.getLogicalPos());\n            flyer.node.setPosition(this.node.getPosition());\n            flyer.node.zIndex = this.getTopZOrder();\n            IGame.playAudio(IdentifierManager.getInstance().getMatchAudioFilePath('watermelon'));\n        }\n    }\n    \n    protected getHealthPoint():number{\n        return this._healthPoint;\n    }\n\n    protected setHealthPoint(val:number):void{\n        this._healthPoint = val;\n        this.updatePuppet();\n    }\n\n    protected updatePuppet():void{\n        for (let i = 0; i < 8; i++) {\n            this.piecesNode[i].active = i < this._healthPoint;\n        }   \n    }\n}\n","import { EntityID } from \"./EntityID\";\n\nexport enum  KindID {\n    CellNormal                  = 10101,\n    CellConveyerD2U             = 20101,\n    CellConveyerL2R             = 20102,\n    CellConveyerU2D             = 20103,\n    CellConveyerR2L             = 20104,\n    CellConveyerD2L             = 20105,\n    CellConveyerL2U             = 20106,\n    CellConveyerU2R             = 20107,\n    CellConveyerR2D             = 20108,\n    CellConveyerD2R             = 20109,\n    CellConveyerR2U             = 20110,\n    CellConveyerU2L             = 20111,\n    CellConveyerL2D             = 20112,\n    CellMovablePlate            = 20201,\n    PopsicleNormal              = 30101,\n    PopsicleBoom                = 30201,\n    PopsicleLine                = 30301,\n    FloorGrass                  = 40101,\n    FloorIceHp1                 = 40201,\n    FloorIceHp2                 = 40202,\n    FloorIceHp3                 = 40203,\n    FloorIceHp4                 = 40204,\n    FloorChangerRed             = 40301,\n    FloorChangerGreen           = 40302,\n    FloorChangerBlue            = 40303,\n    FloorChangerYellow          = 40304,\n    FloorChangerOrange          = 40305,\n    FloorChangerPurple          = 40306,\n    FloorDouble                 = 40401,\n    FloorRoadLineVU             = 40501,\n    FloorRoadLineHR             = 40502,\n    FloorRoadLineVD             = 40503,\n    FloorRoadLineHL             = 40504,\n    FloorRoadTurnLdD            = 40505,\n    FloorRoadTurnLuL            = 40506,\n    FloorRoadTurnRuU            = 40507,\n    FloorRoadTurnRdR            = 40508,\n    FloorRoadTurnRdD            = 40509,\n    FloorRoadTurnRuR            = 40510,\n    FloorRoadTurnLuU            = 40511,\n    FloorRoadTurnLdL            = 40512,\n    PolishJam                   = 50101,\n    ItemNormalRed               = 60101,\n    ItemNormalGreen             = 60102,\n    ItemNormalBlue              = 60103,\n    ItemNormalYellow            = 60104,\n    ItemNormalOrange            = 60105,\n    ItemNormalPurple            = 60106,\n    ItemBombButterflyRed        = 60201,\n    ItemBombButterflyGreen      = 60202,\n    ItemBombButterflyBlue       = 60203,\n    ItemBombButterflyYellow     = 60204,\n    ItemBombButterflyOrange     = 60205,\n    ItemBombButterflyPurple     = 60206,\n    ItemBombRowRed              = 60301,\n    ItemBombRowGreen            = 60302,\n    ItemBombRowBlue             = 60303,\n    ItemBombRowYellow           = 60304,\n    ItemBombRowOrange           = 60305,\n    ItemBombRowPurple           = 60306,\n    ItemBombColumnRed           = 60401,\n    ItemBombColumnGreen         = 60402,\n    ItemBombColumnBlue          = 60403,\n    ItemBombColumnYellow        = 60404,\n    ItemBombColumnOrange        = 60405,\n    ItemBombColumnPurple        = 60406,\n    ItemBombCrossRed            = 60501,\n    ItemBombCrossGreen          = 60502,\n    ItemBombCrossBlue           = 60503,\n    ItemBombCrossYellow         = 60504,\n    ItemBombCrossOrange         = 60505,\n    ItemBombCrossPurple         = 60506,\n    ItemBombRangeRed            = 60601,\n    ItemBombRangeGreen          = 60602,\n    ItemBombRangeBlue           = 60603,\n    ItemBombRangeYellow         = 60604,\n    ItemBombRangeOrange         = 60605,\n    ItemBombRangePurple         = 60606,\n    ItemBombRainbow             = 60701,\n    ItemBlock_Begin             = 60801,\n    ItemBlock_HP1               = 60801,\n    ItemBlock_HP2               = 60802,\n    ItemBlock_HP3               = 60803,\n    ItemBlock_HP4               = 60804,\n    ItemBlock_HP5               = 60805,\n    ItemBlock_HP6               = 60806,\n    ItemDoughnut_Begin          = 60901,\n    ItemDoughnut_HP1            = 60901,\n    ItemDoughnut_HP2            = 60902,\n    ItemDoughnut_HP3            = 60903,\n    ItemMagicCrystal            = 61001,\n    ItemWatermelon              = 61101,\n    ItemFruitCake               = 61201,\n    ItemFireWormBottle          = 61301,\n    ItemMowerUp                 = 61401,\n    ItemMowerRight              = 61402,\n    ItemMowerDown               = 61403,\n    ItemMowerLeft               = 61404,\n    ItemBone                    = 61501,\n    ItemChestnut                = 61601,\n    ItemFireworksHp1            = 61701,\n    ItemFireworksHp2            = 61702,\n    ItemFireworksHp3            = 61703,\n    ItemFireworksHp4            = 61704,\n    ItemPuppy                   = 62001,\n    ItemDogPaw_Red              = 62101,\n    ItemDogPaw_Green            = 62102,\n    ItemDogPaw_Blue             = 62103,\n    ItemDogPaw_Yellow           = 62104,\n    ItemDogPaw_Orange           = 62105,\n    ItemDogPaw_Purple           = 62106,\n    ItemBalloon                 = 62201,\n    ItemDogHouse                = 62301,\n    ItemJamBottle               = 62401,\n    ItemNormalRandom            = 62501,\n    ItemHoneyComb               = 62601,\n    ItemBombButterflyRandom     = 62701,\n    ItemBombRowRandom           = 62702,\n    ItemBombColumnRandom        = 62703,\n    ItemBombCrossRandom         = 62704,\n    ItemBombRangeRandom         = 62705,\n    ItemPawRandom               = 62708,\n    ItemStatueHp1               = 62801,\n    ItemStatueHp2               = 62802,\n    ItemStatueHp3               = 62803,\n    ParasiteIceCubeHp1          = 70101,\n    ParasiteIceCubeHp2          = 70102,\n    ParasiteIceCubeHp3          = 70103,\n    ParasiteIceCubeHp4          = 70104,\n    ParasiteIceCubeHp5          = 70105,\n    ParasiteIceCubeHp6          = 70106,\n    ParasiteShackleHp1          = 70201,\n    ParasiteShackleHp2          = 70202,\n    ParasiteShackleHp3          = 70203,\n    ParasiteHoneyHp1            = 70301,\n    ParasiteHoneyHp2            = 70302,\n    ParasiteGiftBoxRed          = 70401,\n    ParasiteGiftBoxGreen        = 70402,\n    ParasiteGiftBoxBlue         = 70403,\n    ParasiteGiftBoxYellow       = 70404,\n    ParasiteGiftBoxOrange       = 70405,\n    ParasiteGiftBoxPurple       = 70406,\n    MarkBoneCollector           = 80101,\n    MarkWormholeEntrance        = 80201,\n    MarkWormholeExit            = 80301,\n    FenceVineVertical           = 80401,\n    FenceVineHorizontal         = 80501,\n    MarkDropMachine             = 80801,\n};\n\nexport class KindIDManager {\n    //单例对象\n    private static instance:KindIDManager = null;\n    public static getInstance():KindIDManager{\n        if(this.instance == null){\n            this.instance = new KindIDManager();\n        }\n        return this.instance;\n    }\n\n    private KindID_To_EntityID_Map:Object = {};\n    private initKindID_To_EntityID_Map() : void {\n        this.KindID_To_EntityID_Map[KindID.CellNormal] =                 EntityID.CellNormal;\n        this.KindID_To_EntityID_Map[KindID.CellConveyerL2R] =            EntityID.CellConveyerL2R;\n        this.KindID_To_EntityID_Map[KindID.CellConveyerL2U] =            EntityID.CellConveyerL2U;\n        this.KindID_To_EntityID_Map[KindID.CellConveyerL2D] =            EntityID.CellConveyerL2D;\n        this.KindID_To_EntityID_Map[KindID.CellConveyerR2L] =            EntityID.CellConveyerR2L;\n        this.KindID_To_EntityID_Map[KindID.CellConveyerR2U] =            EntityID.CellConveyerR2U;\n        this.KindID_To_EntityID_Map[KindID.CellConveyerR2D] =            EntityID.CellConveyerR2D;\n        this.KindID_To_EntityID_Map[KindID.CellConveyerU2L] =            EntityID.CellConveyerU2L;\n        this.KindID_To_EntityID_Map[KindID.CellConveyerU2R] =            EntityID.CellConveyerU2R;\n        this.KindID_To_EntityID_Map[KindID.CellConveyerU2D] =            EntityID.CellConveyerU2D;\n        this.KindID_To_EntityID_Map[KindID.CellConveyerD2L] =            EntityID.CellConveyerD2L;\n        this.KindID_To_EntityID_Map[KindID.CellConveyerD2R] =            EntityID.CellConveyerD2R;\n        this.KindID_To_EntityID_Map[KindID.CellConveyerD2U] =            EntityID.CellConveyerD2U;\n        this.KindID_To_EntityID_Map[KindID.CellMovablePlate] =           EntityID.CellMovablePlate;\n        this.KindID_To_EntityID_Map[KindID.PopsicleNormal] =             EntityID.PopsicleNormal;\n        this.KindID_To_EntityID_Map[KindID.PopsicleLine] =               EntityID.PopsicleLine;\n        this.KindID_To_EntityID_Map[KindID.PopsicleBoom] =               EntityID.PopsicleBoom;\n        this.KindID_To_EntityID_Map[KindID.FloorGrass] =                 EntityID.FloorGrass;\n        this.KindID_To_EntityID_Map[KindID.FloorDouble] =                EntityID.FloorDouble;\n        this.KindID_To_EntityID_Map[KindID.FloorIceHp1] =                EntityID.FloorIceHp1;\n        this.KindID_To_EntityID_Map[KindID.FloorIceHp2] =                EntityID.FloorIceHp2;\n        this.KindID_To_EntityID_Map[KindID.FloorIceHp3] =                EntityID.FloorIceHp3;\n        this.KindID_To_EntityID_Map[KindID.FloorIceHp4] =                EntityID.FloorIceHp4;\n        this.KindID_To_EntityID_Map[KindID.FloorChangerRed] =            EntityID.FloorChangerRed;\n        this.KindID_To_EntityID_Map[KindID.FloorChangerGreen] =          EntityID.FloorChangerGreen;\n        this.KindID_To_EntityID_Map[KindID.FloorChangerBlue] =           EntityID.FloorChangerBlue;\n        this.KindID_To_EntityID_Map[KindID.FloorChangerYellow] =         EntityID.FloorChangerYellow;\n        this.KindID_To_EntityID_Map[KindID.FloorChangerOrange] =         EntityID.FloorChangerOrange;\n        this.KindID_To_EntityID_Map[KindID.FloorChangerPurple] =         EntityID.FloorChangerPurple;\n        this.KindID_To_EntityID_Map[KindID.FloorRoadLineVU] =            EntityID.FloorRoadLineVU;\n        this.KindID_To_EntityID_Map[KindID.FloorRoadLineHR] =            EntityID.FloorRoadLineHR;\n        this.KindID_To_EntityID_Map[KindID.FloorRoadLineVD] =            EntityID.FloorRoadLineVD;\n        this.KindID_To_EntityID_Map[KindID.FloorRoadLineHL] =            EntityID.FloorRoadLineHL;\n        this.KindID_To_EntityID_Map[KindID.FloorRoadTurnLdD] =           EntityID.FloorRoadTurnLdD;\n        this.KindID_To_EntityID_Map[KindID.FloorRoadTurnLuL] =           EntityID.FloorRoadTurnLuL;\n        this.KindID_To_EntityID_Map[KindID.FloorRoadTurnRuU] =           EntityID.FloorRoadTurnRuU;\n        this.KindID_To_EntityID_Map[KindID.FloorRoadTurnRdR] =           EntityID.FloorRoadTurnRdR;\n        this.KindID_To_EntityID_Map[KindID.FloorRoadTurnRdD] =           EntityID.FloorRoadTurnRdD;\n        this.KindID_To_EntityID_Map[KindID.FloorRoadTurnRuR] =           EntityID.FloorRoadTurnRuR;\n        this.KindID_To_EntityID_Map[KindID.FloorRoadTurnLuU] =           EntityID.FloorRoadTurnLuU;\n        this.KindID_To_EntityID_Map[KindID.FloorRoadTurnLdL] =           EntityID.FloorRoadTurnLdL;\n        this.KindID_To_EntityID_Map[KindID.PolishJam] =                  EntityID.RugJam;\n        this.KindID_To_EntityID_Map[KindID.ItemNormalRed] =              EntityID.ItemNormalRed;\n        this.KindID_To_EntityID_Map[KindID.ItemNormalGreen] =            EntityID.ItemNormalGreen;\n        this.KindID_To_EntityID_Map[KindID.ItemNormalBlue] =             EntityID.ItemNormalBlue;\n        this.KindID_To_EntityID_Map[KindID.ItemNormalYellow] =           EntityID.ItemNormalYellow;\n        this.KindID_To_EntityID_Map[KindID.ItemNormalOrange] =           EntityID.ItemNormalOrange;\n        this.KindID_To_EntityID_Map[KindID.ItemNormalPurple] =           EntityID.ItemNormalPurple;\n        this.KindID_To_EntityID_Map[KindID.ItemBombButterflyRed] =       EntityID.ItemBombButterflyRed;\n        this.KindID_To_EntityID_Map[KindID.ItemBombButterflyGreen] =     EntityID.ItemBombButterflyGreen;\n        this.KindID_To_EntityID_Map[KindID.ItemBombButterflyBlue] =      EntityID.ItemBombButterflyBlue;\n        this.KindID_To_EntityID_Map[KindID.ItemBombButterflyYellow] =    EntityID.ItemBombButterflyYellow;\n        this.KindID_To_EntityID_Map[KindID.ItemBombButterflyOrange] =    EntityID.ItemBombButterflyOrange;\n        this.KindID_To_EntityID_Map[KindID.ItemBombButterflyPurple] =    EntityID.ItemBombButterflyPurple;\n        this.KindID_To_EntityID_Map[KindID.ItemBombRowRed] =             EntityID.ItemBombRowRed;\n        this.KindID_To_EntityID_Map[KindID.ItemBombRowGreen] =           EntityID.ItemBombRowGreen;\n        this.KindID_To_EntityID_Map[KindID.ItemBombRowBlue] =            EntityID.ItemBombRowBlue;\n        this.KindID_To_EntityID_Map[KindID.ItemBombRowYellow] =          EntityID.ItemBombRowYellow;\n        this.KindID_To_EntityID_Map[KindID.ItemBombRowOrange] =          EntityID.ItemBombRowOrange;\n        this.KindID_To_EntityID_Map[KindID.ItemBombRowPurple] =          EntityID.ItemBombRowPurple;\n        this.KindID_To_EntityID_Map[KindID.ItemBombColumnRed] =          EntityID.ItemBombColumnRed;\n        this.KindID_To_EntityID_Map[KindID.ItemBombColumnGreen] =        EntityID.ItemBombColumnGreen;\n        this.KindID_To_EntityID_Map[KindID.ItemBombColumnBlue] =         EntityID.ItemBombColumnBlue;\n        this.KindID_To_EntityID_Map[KindID.ItemBombColumnYellow] =       EntityID.ItemBombColumnYellow;\n        this.KindID_To_EntityID_Map[KindID.ItemBombColumnOrange] =       EntityID.ItemBombColumnOrange;\n        this.KindID_To_EntityID_Map[KindID.ItemBombColumnPurple] =       EntityID.ItemBombColumnPurple;\n        this.KindID_To_EntityID_Map[KindID.ItemBombCrossRed] =           EntityID.ItemBombCrossRed;\n        this.KindID_To_EntityID_Map[KindID.ItemBombCrossGreen] =         EntityID.ItemBombCrossGreen;\n        this.KindID_To_EntityID_Map[KindID.ItemBombCrossBlue] =          EntityID.ItemBombCrossBlue;\n        this.KindID_To_EntityID_Map[KindID.ItemBombCrossYellow] =        EntityID.ItemBombCrossYellow;\n        this.KindID_To_EntityID_Map[KindID.ItemBombCrossOrange] =        EntityID.ItemBombCrossOrange;\n        this.KindID_To_EntityID_Map[KindID.ItemBombCrossPurple] =        EntityID.ItemBombCrossPurple;\n        this.KindID_To_EntityID_Map[KindID.ItemBombRangeRed] =           EntityID.ItemBombRangeRed;\n        this.KindID_To_EntityID_Map[KindID.ItemBombRangeGreen] =         EntityID.ItemBombRangeGreen;\n        this.KindID_To_EntityID_Map[KindID.ItemBombRangeBlue] =          EntityID.ItemBombRangeBlue;\n        this.KindID_To_EntityID_Map[KindID.ItemBombRangeYellow] =        EntityID.ItemBombRangeYellow;\n        this.KindID_To_EntityID_Map[KindID.ItemBombRangeOrange] =        EntityID.ItemBombRangeOrange;\n        this.KindID_To_EntityID_Map[KindID.ItemBombRangePurple] =        EntityID.ItemBombRangePurple;\n        this.KindID_To_EntityID_Map[KindID.ItemBombRainbow] =            EntityID.ItemBombRainbow;\n        this.KindID_To_EntityID_Map[KindID.ItemBlock_HP1] =              EntityID.ItemBlockHp1;\n        this.KindID_To_EntityID_Map[KindID.ItemBlock_HP2] =              EntityID.ItemBlockHp2;\n        this.KindID_To_EntityID_Map[KindID.ItemBlock_HP3] =              EntityID.ItemBlockHp3;\n        this.KindID_To_EntityID_Map[KindID.ItemBlock_HP4] =              EntityID.ItemBlockHp4;\n        this.KindID_To_EntityID_Map[KindID.ItemBlock_HP5] =              EntityID.ItemBlockHp5;\n        this.KindID_To_EntityID_Map[KindID.ItemBlock_HP6] =              EntityID.ItemBlockHp6;\n        this.KindID_To_EntityID_Map[KindID.ItemDoughnut_HP1] =           EntityID.ItemDoughnutHp1;\n        this.KindID_To_EntityID_Map[KindID.ItemDoughnut_HP2] =           EntityID.ItemDoughnutHp2;\n        this.KindID_To_EntityID_Map[KindID.ItemDoughnut_HP3] =           EntityID.ItemDoughnutHp3;\n        this.KindID_To_EntityID_Map[KindID.ItemMagicCrystal] =           EntityID.ItemMagicCrystal;\n        this.KindID_To_EntityID_Map[KindID.ItemWatermelon] =             EntityID.ItemWatermelon;\n        this.KindID_To_EntityID_Map[KindID.ItemFruitCake] =              EntityID.ItemFruitCake;\n        this.KindID_To_EntityID_Map[KindID.ItemMowerUp] =                EntityID.ItemMowerUp;\n        this.KindID_To_EntityID_Map[KindID.ItemMowerRight] =             EntityID.ItemMowerRight;\n        this.KindID_To_EntityID_Map[KindID.ItemMowerDown] =              EntityID.ItemMowerDown;\n        this.KindID_To_EntityID_Map[KindID.ItemMowerLeft] =              EntityID.ItemMowerLeft;\n        this.KindID_To_EntityID_Map[KindID.ItemBone] =                   EntityID.ItemBone;\n        this.KindID_To_EntityID_Map[KindID.ItemChestnut] =               EntityID.ItemChestnut;\n        this.KindID_To_EntityID_Map[KindID.ItemFireWormBottle] =         EntityID.ItemFireWormBottle;\n        this.KindID_To_EntityID_Map[KindID.ItemPuppy] =                  EntityID.ItemPuppy;\n        this.KindID_To_EntityID_Map[KindID.ItemDogPaw_Red] =             EntityID.ItemPawRed;\n        this.KindID_To_EntityID_Map[KindID.ItemDogPaw_Green] =           EntityID.ItemPawGreen;\n        this.KindID_To_EntityID_Map[KindID.ItemDogPaw_Blue] =            EntityID.ItemPawBlue;\n        this.KindID_To_EntityID_Map[KindID.ItemDogPaw_Yellow] =          EntityID.ItemPawYellow;\n        this.KindID_To_EntityID_Map[KindID.ItemDogPaw_Orange] =          EntityID.ItemPawOrange;\n        this.KindID_To_EntityID_Map[KindID.ItemDogPaw_Purple] =          EntityID.ItemPawPurple;\n        this.KindID_To_EntityID_Map[KindID.ItemBalloon] =                EntityID.ItemBalloon;\n        this.KindID_To_EntityID_Map[KindID.ItemDogHouse] =               EntityID.ItemDogHouse;\n        this.KindID_To_EntityID_Map[KindID.ItemJamBottle] =              EntityID.ItemJamBottle;\n        this.KindID_To_EntityID_Map[KindID.ItemHoneyComb] =              EntityID.ItemHoneyComb;\n        this.KindID_To_EntityID_Map[KindID.ItemStatueHp1] =              EntityID.ItemStatueHp1;\n        this.KindID_To_EntityID_Map[KindID.ItemStatueHp2] =              EntityID.ItemStatueHp2;\n        this.KindID_To_EntityID_Map[KindID.ItemStatueHp3] =              EntityID.ItemStatueHp3;\n        this.KindID_To_EntityID_Map[KindID.ParasiteIceCubeHp1] =         EntityID.ParasiteIceCubeHp1;\n        this.KindID_To_EntityID_Map[KindID.ParasiteIceCubeHp2] =         EntityID.ParasiteIceCubeHp2;\n        this.KindID_To_EntityID_Map[KindID.ParasiteIceCubeHp3] =         EntityID.ParasiteIceCubeHp3;\n        this.KindID_To_EntityID_Map[KindID.ParasiteIceCubeHp4] =         EntityID.ParasiteIceCubeHp4;\n        this.KindID_To_EntityID_Map[KindID.ParasiteIceCubeHp5] =         EntityID.ParasiteIceCubeHp5;\n        this.KindID_To_EntityID_Map[KindID.ParasiteIceCubeHp6] =         EntityID.ParasiteIceCubeHp6;\n        this.KindID_To_EntityID_Map[KindID.ParasiteShackleHp1] =         EntityID.ParasiteShackleHp1;\n        this.KindID_To_EntityID_Map[KindID.ParasiteShackleHp2] =         EntityID.ParasiteShackleHp2;\n        this.KindID_To_EntityID_Map[KindID.ParasiteShackleHp3] =         EntityID.ParasiteShackleHp3;\n        this.KindID_To_EntityID_Map[KindID.ParasiteHoneyHp1] =           EntityID.ParasiteHoneyHp1;\n        this.KindID_To_EntityID_Map[KindID.ParasiteHoneyHp2] =           EntityID.ParasiteHoneyHp2;\n        this.KindID_To_EntityID_Map[KindID.ParasiteGiftBoxRed] =         EntityID.ParasiteGiftBoxRed;\n        this.KindID_To_EntityID_Map[KindID.ParasiteGiftBoxGreen] =       EntityID.ParasiteGiftBoxGreen;\n        this.KindID_To_EntityID_Map[KindID.ParasiteGiftBoxBlue] =        EntityID.ParasiteGiftBoxBlue;\n        this.KindID_To_EntityID_Map[KindID.ParasiteGiftBoxYellow] =      EntityID.ParasiteGiftBoxYellow;\n        this.KindID_To_EntityID_Map[KindID.ParasiteGiftBoxOrange] =      EntityID.ParasiteGiftBoxOrange;\n        this.KindID_To_EntityID_Map[KindID.ParasiteGiftBoxPurple] =      EntityID.ParasiteGiftBoxPurple;\n        this.KindID_To_EntityID_Map[KindID.MarkBoneCollector] =          EntityID.MarkBoneCollector;\n        this.KindID_To_EntityID_Map[KindID.MarkWormholeEntrance] =       EntityID.MarkWormholeEntrance;\n        this.KindID_To_EntityID_Map[KindID.MarkWormholeExit] =           EntityID.MarkWormholeExit;\n        this.KindID_To_EntityID_Map[KindID.FenceVineHorizontal] =        EntityID.FenceVineHorizontal;\n        this.KindID_To_EntityID_Map[KindID.FenceVineVertical] =          EntityID.FenceVineVertical;\n        this.KindID_To_EntityID_Map[KindID.MarkDropMachine] =            EntityID.MarkDropMachine;\n        this.KindID_To_EntityID_Map[KindID.ItemFireworksHp1] =           EntityID.ItemFireworksHp1;\n        this.KindID_To_EntityID_Map[KindID.ItemFireworksHp2] =           EntityID.ItemFireworksHp2;\n        this.KindID_To_EntityID_Map[KindID.ItemFireworksHp3] =           EntityID.ItemFireworksHp3;\n        this.KindID_To_EntityID_Map[KindID.ItemFireworksHp4] =           EntityID.ItemFireworksHp4;\n    }\n\n    constructor(){\n        this.initKindID_To_EntityID_Map();\n    };\n\n    public getEntityIDFromKindID(kindID:KindID) : EntityID {\n        let result = this.KindID_To_EntityID_Map[kindID];\n        if (result) {\n            return result;\n        }\n        return EntityID.None;\n    }\n\n    public needLayoutGrassFromKindID(kindID:KindID) : boolean {\n        let needLayoutGrass = false;\n        let entityID = this.getEntityIDFromKindID(kindID);\n        switch(entityID) {\n            case EntityID.CellNormal:\n            case EntityID.CellMovablePlate:{\n                needLayoutGrass = true;\n            }\n        }\n        return needLayoutGrass;\n    }\n};","import MatchScene from \"../MatchScene\";\nimport { CFGTripleLevel } from \"../../../config/CFGTripleLevel\";\nimport GameSceneBase from \"../GameSceneBase\";\nimport GameMath from \"../../../extend/utils/GameMath\";\n\n// Learn TypeScript:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/typescript.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/typescript.html\n// Learn Attribute:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class LevelSelectorPanel extends cc.Component {\n\n    @property(cc.Node)\n    mask: cc.Node = null;\n\n    @property(cc.Node)\n    frame: cc.Node = null;\n\n    @property(cc.Node)\n    drawer: cc.Node = null;\n\n    @property(cc.Node)\n    previous: cc.Node = null;\n\n    @property(cc.Node)\n    next: cc.Node = null;\n\n    @property(cc.EditBox)\n    editBox: cc.EditBox = null;\n\n    @property(cc.Node)\n    updateCfgBtn:cc.Node = null;\n\n\n    @property(cc.Node)\n    speedUpButton:cc.Node = null;\n\n    @property(cc.EditBox)\n    speedEditBox: cc.EditBox = null;\n\n    @property(cc.Node)\n    speedDownButton:cc.Node = null;\n\n    private _gameScene:GameSceneBase = null;\n    private _levelConfig:CFGTripleLevel = null\n    private _speed:number = 1.0;\n    public static create() : LevelSelectorPanel {\n        let res = cc.loader.getRes('match_scene/prefab/userInterface/LevelSelectorPanel', cc.Prefab);\n        if (res) {\n            let node = cc.instantiate(res);\n            if (node) {\n                let component = node.getComponent(LevelSelectorPanel) as LevelSelectorPanel;\n                if (component) {\n                    component.init();\n                }\n                return component;   \n            }\n        }\n    }\n\n    protected init() : void {\n        this.drawer.on('touchend',this.onPull, this);\n        this.previous.on('touchend',this.onPrevious, this);\n        this.next.on('touchend',this.onNext, this);\n        this.updateCfgBtn.on('touchend', this.onUpdateCfgBtnClick, this);\n\n        \n        this.mask.active = false;\n\n        this.editBox.inputMode = cc.EditBox.InputMode.NUMERIC;\n        this.editBox.maxLength = 20;\n        this.editBox.placeholder = '1';\n\n        this.editBox.node.on('editing-did-began',this.levelTextDidBegan, this);\n        this.editBox.node.on('editing-did-ended',this.levelTextDidEnded, this);\n        this.editBox.node.on('text-changed',this.levelTextChanged, this);\n\n\n        this.speedUpButton.on('touchend',this.onSpeedUp, this);\n        this.speedDownButton.on('touchend',this.onSpeedDown, this);\n\n        this.speedEditBox.node.on('editing-did-began',this.speedTextDidBegan, this);\n        this.speedEditBox.node.on('editing-did-ended',this.speedTextDidEnded, this);\n        this.speedEditBox.node.on('text-changed',this.speedTextChanged, this);\n\n        \n\n\n        let canvas = cc.find(\"Canvas\");\n        if (canvas) {\n            this._gameScene = canvas.getComponent(GameSceneBase);\n        }\n    }\n\n    \n    // LIFE-CYCLE CALLBACKS:\n    onLoad () {\n        \n    }\n\n    start () {\n\n    }\n    onDestroy() {\n        this.mask = null;\n        this.frame = null;\n        this.drawer = null;\n        this.previous = null;\n        this.next = null;\n        this.editBox = null;\n        this._gameScene = null;\n        this._levelConfig = null;\n        cc.director.getScheduler().setTimeScale(1.0);\n    }\n    // update (dt) {}\n    private onPull(evt:cc.Event.EventTouch) {\n        let winSize = this.node.getContentSize();\n        let frameSize = this.frame.getContentSize();\n        let targetPos = cc.v2(-frameSize.width - (winSize.width - this.frame.width) * 0.5, this.frame.position.y);\n\n        this.frame.stopAllActions();\n        let duration = Math.abs(this.frame.position.x - targetPos.x) / 1000 * cc.director.getScheduler().getTimeScale();\n        let pullAction = cc.moveTo(duration, targetPos).easing(cc.easeBackInOut());\n        this.frame.runAction(pullAction);\n    \n        this.node.on('touchend',this.onPush, this);\n        this.drawer.setPosition(-1000, this.drawer.position.y);\n        this.mask.active = true;\n\n    }\n\n    private onPush(evt:cc.Event.EventTouch) {\n        let targetPos = cc.v2(0, this.frame.position.y);\n        this.frame.stopAllActions();\n        let duration = Math.abs(this.frame.position.x - targetPos.x) / 1000 * cc.director.getScheduler().getTimeScale();\n        let pushAction = cc.moveTo(duration, targetPos).easing(cc.easeBackInOut());\n        this.frame.runAction(pushAction);\n\n        this.node.off('touchend',this.onPush, this);\n        this.drawer.setPosition(-20, this.drawer.position.y);\n        this.mask.active = false;\n    }\n\n    private onPrevious(evt:cc.Event.EventTouch) {\n        this._gameScene.cheatGameWithLevel(this._gameScene.getLevel() - 1)   \n        this.onPush(null);\n    }\n\n    private onNext(evt:cc.Event.EventTouch) {\n        let level = Number(this.editBox.string);\n        if(level){\n            this._gameScene.cheatGameWithLevel(level);\n        }else{\n            this._gameScene.cheatGameWithLevel(this._gameScene.getLevel() + 1);\n        }\n        this.onPush(null);\n    }\n\n    private onUpdateCfgBtnClick(evt:cc.Event.EventTouch):void{\n        //更新配置回调\n        cc.log('onUpdateCfgBtnClick');\n    }\n\n    public restartGame():void{\n        this._gameScene.cheatGameWithLevel(this._gameScene.getLevel());\n        this.onPush(null);\n    }\n\n    private levelTextDidBegan(event:cc.Event.EventCustom) {\n        cc.log('levelTextDidBegan:' + this.editBox.string);\n    }\n\n    private levelTextChanged(event:cc.Event.EventCustom) {\n        cc.log('levelTextChanged:' + this.editBox.string);\n    }\n\n    private levelTextDidEnded(event:cc.Event.EventCustom) {\n        cc.log('levelTextDidEnded:' + this.editBox.string);\n    }\n    \n\n\n    private setSpeed(speed:number){\n        let newSpeed = GameMath.clamp(speed, 0.0625, 16);\n        this._speed = newSpeed;\n        this.speedEditBox.string = newSpeed.toString();\n        cc.director.getScheduler().setTimeScale(this._speed);\n    }\n    private onSpeedUp(evt:cc.Event.EventTouch) {\n        this.setSpeed(this._speed * 2);\n    }\n\n    private onSpeedDown(evt:cc.Event.EventTouch) {\n        this.setSpeed(this._speed * 0.5);\n    }\n\n    private speedTextDidBegan(event:cc.Event.EventCustom) {\n        cc.log('speedTextDidBegan:' + this.speedEditBox.string);\n        \n    }\n\n    private speedTextChanged(event:cc.Event.EventCustom) {\n        cc.log('speedTextChanged:' + this.speedEditBox.string);\n\n        let number = Number(this.speedEditBox.string);\n        if (number) {\n            this.setSpeed(number);\n        }\n    }\n\n    private speedTextDidEnded(event:cc.Event.EventCustom) {\n        cc.log('speedTextDidEnded:' + this.speedEditBox.string);\n\n        \n    }\n}\n","import GameMath from \"../extend/utils/GameMath\";\n\n/**\n * Created by chenzd on 2018/7/16.\n * 加载场景\n */\n\nconst { ccclass, property } = cc._decorator;\n\n@ccclass\nexport default class LoadingScene extends cc.Component {\n\n    @property(cc.ProgressBar)\n    progressBar: cc.ProgressBar = null;\n\n    @property(cc.Label)\n    progressLabel: cc.Label = null;\n\n    start() {\n        this.loadData();\n    }\n\n    private getProgress(): number {\n        if (this.progressBar) {\n            return this.progressBar.progress;\n        }\n        return 0;\n    }\n\n    private setProgress(progress: number): void {\n        if (this.progressBar) {\n            this.progressBar.progress = GameMath.clamp(progress, 0, 1);\n        }\n\n        if (this.progressLabel) {\n            this.progressLabel.string = Math.floor(progress * 100).toString() + '%';\n        }\n    }\n\n    private loadData() {\n        this.setProgress(0);\n        cc.loader.loadResDir('data',\n            () => {\n\n            },\n            () => {\n                this.loadCommon()\n            });\n    }\n\n    private loadCommon() {\n        this.setProgress(0);\n        cc.loader.loadResDir('common', this.onLoadCommonProgressChanged.bind(this), this.onLoadCommonComplete.bind(this));\n    }\n    private onLoadCommonProgressChanged(completedCount: number, totalCount: number, item: any) {\n        let progress = Math.max(this.getProgress(), completedCount / totalCount * 0.5)\n        this.setProgress(progress);\n    }\n    private onLoadCommonComplete(error: Error, resource: any[], urls: string[]) {\n        this.loadMatch();\n    }\n\n\n    private loadMatch() {\n        this.setProgress(0);\n        cc.loader.loadResDir('match_scene', this.onLoadMatchProgressChanged.bind(this), this.onLoadMatchComplete.bind(this));\n    }\n    private onLoadMatchProgressChanged(completedCount: number, totalCount: number, item: any) {\n        let progress = Math.max(this.getProgress(), completedCount / totalCount * 0.5 + 0.5)\n        this.setProgress(progress);\n    }\n    private onLoadMatchComplete(error: Error, resource: any[], urls: string[]) {\n        cc.director.loadScene('MatchScene');\n    }\n}\n","import { EntityType } from \"../../defines/EntityID\";\nimport GridBase from \"../../grid/GridBase\";\nimport EntityBase from \"../EntityBase\";\n\n// Learn TypeScript:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/typescript.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/typescript.html\n// Learn Attribute:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html\n\nexport enum MarkerType {\n    None,\n    Normal,\n};\n\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class MarkerBase extends EntityBase {\n\n    private _markerType:MarkerType = MarkerType.None;\n    public getMarkerType() : MarkerType {\n        return this._markerType;\n    }\n    protected initMarker(grid:GridBase, markerType:MarkerType, width:number = 1, height:number = 1) : void {\n        super.initEntity(grid, EntityType.Marker, width, height);\n        this._markerType = markerType;\n    }\n}\n","import GridBase from \"../../grid/GridBase\";\nimport MarkerBase, { MarkerType } from \"./MarkerBase\";\nimport { CollectionID } from \"../../defines/CollectionID\";\nimport { EntityID } from \"../../defines/EntityID\";\nimport TMXConfigInfoKeys from \"../../defines/TMXConfigInfoKeys\";\nimport IdentifierManager from \"../../defines/IdentifierManager\";\nimport { EntityGroupID } from \"../../defines/EntityGroupID\";\nimport EntityPrefabNodePool from \"../EntityPrefabNodePool\";\nimport EntityBase from \"../EntityBase\";\n\n// Learn TypeScript:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/typescript.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/typescript.html\n// Learn Attribute:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class MarkerNormal extends MarkerBase {\n\n    private static DropMachineDisplayConfig:Object = {\n        '1' : [\n            {'Position':cc.v2(0, 0),    'Scale':0.5,}\n        ],\n\n        '2' : [\n            {'Position':cc.v2(-13, -2),   'Scale':0.4,},\n            {'Position':cc.v2(13, -2),   'Scale':0.4,},\n        ],\n\n        '3' : [\n            {'Position':cc.v2(0, -2),   'Scale':0.4,},\n            {'Position':cc.v2(18, 0),   'Scale':0.3,},\n            {'Position':cc.v2(-18, 0),   'Scale':0.3,},\n        ],\n    }\n\n    private _boneCollector:cc.Node = null;\n    private _dropMachine:cc.Node = null;\n    private _wormholeEntrance:cc.Node = null;\n    private _wormholeExit:cc.Node = null;\n\n    public getCollectionID():CollectionID{\n        return CollectionID.MarkerNormal;\n    }\n\n    public getEntityID():EntityID{\n        return EntityID.MarkNormal;\n    }\n\n    public dealWithConfigMap(config:Object) : void {\n        super.dealWithConfigMap(config);\n        let showEntityString = config[TMXConfigInfoKeys.CFG_DROP_MACHINE_SHOW_KEY_TYPE];\n        if (showEntityString) {\n            let entityNames = (showEntityString as string).split('|')\n\n            let sprites:cc.Node[] = [];\n            for (let name of entityNames) {\n                let entityID = IdentifierManager.getInstance().getEntityIDFromString(name);\n                if (entityID != EntityID.None) {\n                    let frameName = IdentifierManager.getInstance().getFrameNameFromEntityID(entityID);\n                    let node = new cc.Node();\n                    let sprite = node.addComponent(cc.Sprite);\n                    sprite.spriteFrame = EntityBase.getEntitySpriteFarme(frameName);\n                    sprites.push(node);\n                }\n            }\n\n            for (let name of entityNames) {\n                let groupID = IdentifierManager.getInstance().getEntityGroupIDFromString(name);\n                if (groupID != EntityGroupID.None) {\n                    let frameName = IdentifierManager.getInstance().getFrameNameFromEntityGroupID(groupID);\n                    let node = new cc.Node();\n                    let sprite = node.addComponent(cc.Sprite);\n                    sprite.spriteFrame = EntityBase.getEntitySpriteFarme(frameName);\n                    sprites.push(node);\n                }\n            }\n\n            let dropMachineConfig = MarkerNormal.DropMachineDisplayConfig[sprites.length.toString()];\n            if (dropMachineConfig) {\n                for (let index = 0; index < sprites.length; index++) {\n                    let sprite = sprites[index];\n                    let spriteInfo = dropMachineConfig[index];\n                    sprite.position = spriteInfo['Position'];\n                    sprite.scale = spriteInfo['Scale'];\n                    this._dropMachine.addChild(sprite, -index - 1);    \n                }\n            }\n\n            this._dropMachine.active = true;\n        }\n\n        let wormholeEntrance = config[TMXConfigInfoKeys.CFG_WORM_HOLE_ENTRANCE_KEY_TYPE];\n        if (wormholeEntrance) {\n            this._wormholeEntrance.active = true;\n        }\n\n        let wormholeExit = config[TMXConfigInfoKeys.CFG_WORM_HOLE_EXIT_KEY_TYPE];\n        if (wormholeExit) {\n            this._wormholeExit.active = true;\n        }\n        \n\n        let boneCollector = config[TMXConfigInfoKeys.CFG_MARK_BONE_COLLECTOR_KEY_TYPE];\n        if (boneCollector) {\n            this._boneCollector.active = true;\n        }\n    }\n\n    public static create(grid:GridBase) : MarkerNormal {\n\n        let className = 'MarkerNormal';\n        let prefabFileName = 'match_scene/prefab/entity/marker/MarkerNormal';\n        let pool = EntityPrefabNodePool.getInstance();\n        let component = pool.getPrefabNodeWithFileNameAndClassName(prefabFileName, className) as MarkerNormal;\n        if (component) {\n            component.init(grid); \n            return component;       \n        }\n        return null;\n    }\n\n    protected init(grid:GridBase) {\n        super.initMarker(grid, MarkerType.Normal);\n        this._boneCollector = this._puppet.getChildByName('boneCollector');\n        this._boneCollector.active = false;\n        this._dropMachine = this._puppet.getChildByName('dropMachine');\n        this._dropMachine.active = false;\n        this._wormholeEntrance = this._puppet.getChildByName('wormholeEntrance');\n        this._wormholeEntrance.active = false;\n        this._wormholeExit = this._puppet.getChildByName('wormholeExit');\n        this._wormholeExit.active = false;\n    }\n\n    // LIFE-CYCLE CALLBACKS:\n\n    // onLoad () {}\n\n    start () {\n\n    }\n\n    // update (dt) {}\n\n    onDestroy() {\n        super.onDestroy();\n        this._boneCollector = null;\n        this._dropMachine = null;\n        this._wormholeEntrance = null;\n        this._wormholeExit = null;\n    }\n}\n","import GameConfig from \"../../define/GameConfig\";\nimport { GameCurrencyType } from \"../../define/GameCurrencyType\";\nimport { PowerID } from \"./defines/PowerID\";\nimport GameSceneBase, { MatchGameEndRewardType, MatchGameEndType } from \"./GameSceneBase\";\nimport GridStateFail from \"./grid/state/concreteState/GridStateFail\";\nimport GridStateLaunchGears from \"./grid/state/concreteState/GridStateLaunchGears\";\nimport GameStatistics, { EventCollectTargets } from \"./statistics/GameStatistics\";\nimport { GameEndPanelData } from \"./userinterface/GameResultPanel/GameResultBasePanel\";\nimport { GearBarData } from \"./userinterface/GearBar\";\nimport LevelSelectorPanel from \"./userinterface/LevelSelectorPanel\";\n\n// Learn TypeScript:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/typescript.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/typescript.html\n// Learn Attribute:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html\n\nconst { ccclass, property } = cc._decorator;\n\n@ccclass\nexport default class MatchScene extends GameSceneBase {\n\n    private _lastStarsCount: number = 0;\n    public canGenerateBomb(): boolean {\n        return true\n    };\n    public canGenerateTrainSupply(): boolean {\n        return true;\n    };\n\n    public canCountScore(): boolean {\n        return true\n    }\n\n    public canGetBonusFromLeftStep(): boolean {\n        return true;\n    };\n\n    public initMatchScene(level: number): void {\n        super.initGameScene(level);\n        this.phrasePrewarData(null);\n        this.updateLevelBar();\n        this.updateStepBar();\n        this.updateTargetBar();\n        this.updateGearBar();\n        this.updateScore();\n        this.updateSupplyBar();\n        this.showTargetBanner();\n\n        let panel = LevelSelectorPanel.create();\n        this.node.addChild(panel.node, 1000);\n        this.reportStepInit();\n    }\n\n    protected phrasePrewarData(data: Object) {\n        let parram = null;\n        this.gearBar.setData(GearBarData.createWithData(parram));\n        this.setEndUIData(GameEndPanelData.createWithData(parram));\n        this.setEventTargets(EventCollectTargets.createWithData(parram));\n        this.setHistoryHighscore(0);\n    }\n\n    public gainPowerAmount(powerID: PowerID, amount: number): void {\n        super.gainPowerAmount(powerID, amount);\n        if (powerID == PowerID.UsedSwap) {\n            let usedSwap = this.getPowerAmount(powerID);\n            this.reportStepSwap(usedSwap);\n        }\n    }\n\n    public isFailed() {\n        return super.isFailed();\n    }\n\n    public beforePlayerOperated() {\n        super.beforePlayerOperated();\n        let currentStarsCount = this.getStarsCount()\n        if (currentStarsCount > this._lastStarsCount) {\n            this._lastStarsCount = currentStarsCount;\n        }\n    }\n\n    public onRecevieGiftBox(data: Object) {\n        let items = data['items'];\n\n        for (let key in items) {\n            let itemID = Number(key) as GameCurrencyType\n            let amount = items[key];\n            if (itemID != GameCurrencyType.NoneType && amount > 0) {\n                this.setPrewarGearAmount(itemID, amount);\n            }\n        }\n        this.setPowerAmount(PowerID.LaunchGears, 1);\n        this._grid.setCurrentState(GridStateLaunchGears.create());\n    }\n\n    public onCancleGiftBox(data: Object) {\n\n    }\n\n    public updateUserInterface(): void {\n        this.updateGearBar();\n    }\n\n    public showCompleteBanner(): void {\n        this.setCompleteWithLastStep(this.getPowerAmount(PowerID.AvailableSwap) == 0);\n        super.showCompleteBanner();\n    }\n\n    public congratulation(): void {\n        super.congratulation();\n        let completeReward = this.getCompleteReward();\n        for (let key in completeReward) {\n            let amount = completeReward[key];\n            let itemID = Number(key) as GameCurrencyType;\n            this.setCollectedSupplyAmount(itemID, this.getCollectedSupplyAmount(itemID) + amount);\n        }\n        this.updateSupplyBar();\n        this.updateScore();\n        this.hideAdBanner();\n    }\n\n    public noMoreStep(): void {\n\n    }\n    public onNoMoreStep(object: Object) {\n\n        let usedItemIDs = object['items'];\n        if (usedItemIDs) {\n            for (let key in usedItemIDs) {\n                let amount = usedItemIDs[key];\n                let id = Number(key);\n\n                if (id == GameCurrencyType.ExtraStep1 ||\n                    id == GameCurrencyType.ExtraStep2 ||\n                    id == GameCurrencyType.ExtraStep3 ||\n                    id == GameCurrencyType.ExtraStep5) {\n                    this.setPrewarGearAmount(id, amount);\n                }\n            }\n            this.setPowerAmount(PowerID.LaunchGears, 1);\n            this.updateUserInterface();\n            this._grid.resumeGame();\n        }\n    }\n\n\n\n    public stalemate() {\n\n    }\n\n    public showReplayPrepareUI() {\n\n    }\n\n    public backToMainScene(prepareNext: boolean, prepareNextInMatchScene: boolean = false) {\n\n    }\n\n    public nextGame() {\n        this.reportStepNextGame();\n        this.backToMainScene(true);\n    }\n\n    public quitGame() {\n\n        this.swallowTouchLayer.active = true;\n        this.reportResult(MatchGameEndType.GiveUp, MatchGameEndRewardType.None, false, this.onQuitGameRespone, this);\n        this.hideAdBanner();\n    }\n\n    public onQuitGameRespone(object: Object) {\n        this.endGameWithReplay(false);\n    }\n\n    public replayGame() {\n\n        this.swallowTouchLayer.active = true;\n        this.reportResult(MatchGameEndType.GiveUp, MatchGameEndRewardType.None, false, this.onReplayGameRespone, this);\n        this.hideAdBanner();\n    }\n\n    public onReplayGameRespone(object: Object) {\n        let replay = true;\n        this.endGameWithReplay(replay);\n    }\n\n    public gameOver() {\n        this._grid.setCurrentState(GridStateFail.create());\n    }\n\n    public showGameFail() {\n\n    }\n\n    public stalemateGame() {\n        this.swallowTouchLayer.active = true;\n        this.endGameWithReplay(true);\n    }\n\n    public cheatGameWithLevel(level: number) {\n        this.initMatchScene(level);\n    }\n\n    /// Special Behavior\n    public onPauseTabbed(evt: cc.Event.EventTouch) {\n        if (this.canPauseGame()) {\n\n        }\n    }\n\n    public requestUseGear(itemID: GameCurrencyType,\n        amount: number,\n        allbackFunc: Function = null,\n        callbackObj: any = null) {\n\n        allbackFunc.call(callbackObj, null);\n    }\n\n    public requestBuyMoreStep(currencyID: GameCurrencyType,\n        price: number,\n        itemID: GameCurrencyType,\n        allbackFunc: Function = null,\n        callbackObj: any = null) {\n\n    }\n\n    public reportResult(endType: MatchGameEndType,\n        rewardType: MatchGameEndRewardType,\n        hasExtraReward: boolean,\n        callbackFunc: Function = null,\n        callbackObj: any = null) {\n\n\n    }\n    start() {\n        this.initMatchScene(1);\n    }\n}\n","\nexport class MathUtils\n{\n    public static round(f:number):number\n    {\n        let tmp:number = Math.pow(10, 3);\n        let temf:number = Math.round(f * tmp) / tmp\n        return temf;\n    }\n    public static shuffle(arr){\n        let len = arr.length;\n        for(let i = 0; i < len - 1; i++){\n            let idx = Math.floor(Math.random() * (len - i));\n            let temp = arr[idx];\n            arr[idx] = arr[len - i - 1];\n            arr[len - i -1] = temp;\n        }\n        return arr;\n    }\n}\n","import GameConfig from \"../../../../define/GameConfig\";\nimport { GameCurrencyType } from \"../../../../define/GameCurrencyType\";\nimport { CollectionID } from \"../../defines/CollectionID\";\nimport ItemInfoManager from \"../../defines/ItemInfoManager\";\nimport GameSceneBase from \"../../GameSceneBase\";\nimport { GameType } from \"../../statistics/GameStatistics\";\nimport TargetItem from \"../TargetItem\";\n\n// Learn TypeScript:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/typescript.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/typescript.html\n// Learn Attribute:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class NoMoreStepBasePanel extends cc.Component {\n\n    @property(cc.Label)\n    title:cc.Label = null;\n\n    @property(cc.Node)\n    targetFrame:cc.Node = null;\n\n    @property(cc.Node)\n    bottomFrame:cc.Node = null;\n\n    @property(cc.Node)\n    closeButton:cc.Node = null;\n\n    protected _gameScene:GameSceneBase = null;\n    protected _report:Object = {};\n    protected _unilimitedItems:Object = {};\n    //打开回调\n    onOpen(param:Object){\n        this.initPanel(param);\n    }\n\n    protected initPanel(param:Object){\n        let canvas = cc.find(\"Canvas\");\n        if (canvas) {\n            this._gameScene = canvas.getComponent(GameSceneBase);\n        }\n        this._report = param['report'];\n        this.closeButton.on('touchend', this.onCloseButtonTabbed, this);\n\n        this.initLeftTarget();\n        this.initLostUnlimitedItems();\n    }\n\n    protected initLostUnlimitedItems(){\n        let unlimitedItemIDs = ItemInfoManager.getInstance().getUnlimitedItemIDs();\n        let usedGears = this._report['usedGear_GN'];\n        for (let key in usedGears) {\n            let itemID = Number(key) as GameCurrencyType;\n            let amount = usedGears[key];\n            if(unlimitedItemIDs.indexOf(itemID) != -1){\n                this._unilimitedItems[itemID] = amount;\n            }\n        }\n    }\n\n    protected initLeftTarget() {\n        if (this._report) {\n            let config = this._report['config'];\n            let levelType = config['LevelType'];\n\n            switch (levelType) {\n                case GameType.Order:\n                    this.title.string = '你还需要收集：';\n                    break;\n                case GameType.Popsicle:\n                    this.title.string = '你还需要收集：';\n                break;\n                case GameType.Path:\n                    this.title.string = '你至少还需要收集：';\n                break;\n                case GameType.Grass:\n                    this.title.string = '还有格子没铺满草地：';\n                break;\n            \n                default:\n                    break;\n            }\n\n            let leftTargets = this._report['leftTarget_TN'];\n            for (let key in leftTargets) {\n                let collectionID = Number(key);\n                let amount = leftTargets[key];   \n                \n                if (collectionID != CollectionID.None) {\n                    let needAmount = amount;\n                    let showCollectionID = collectionID;\n                    if (collectionID == CollectionID.ItemPuppy) {\n                        showCollectionID = CollectionID.ItemPawChromatic;\n                        needAmount = this._gameScene.getPuppyLeftSteps();\n                    }\n                    let item = TargetItem.create(showCollectionID, false);\n                    item.setAmount(needAmount);\n                    this.targetFrame.addChild(item.node);\n                }\n            }\n        }\n    }\n\n     //窗口动画弹窗完成\n    onAnimationDone(){\n       \n    }\n\n    protected onCloseButtonTabbed(event:cc.Event.EventCustom) {\n        this.giveUp();\n    }\n\n    public getLevel():number{\n        return this._gameScene.getLevel();\n    }\n    public giveUp() {\n\n    }\n\n    public requestBuyMoreStep(currencyID:GameCurrencyType, \n                            price:number, \n                            itemID:GameCurrencyType, \n                            callbackFunc: Function = null, \n                            callbackObj: any = null) {\n        this._gameScene.requestBuyMoreStep(currencyID, price, itemID, callbackFunc, callbackObj);\n    }\n}\n","import GameMath from \"../utils/GameMath\";\n\n/**\n * Created by chenzd on 2018/8/3.\n * OrbitTrack\n */\n\nexport default class OrbitTrack extends cc.ActionInterval {\n\n    private _startPos: cc.Vec2 = null;\n    private _emitterDirection: cc.Vec2 = null;\n    private _radius: number = 0;\n    private _targetPos: cc.Vec2 = null;\n    private _rotateHead: boolean = false;\n    private _contactPos: cc.Vec2 = null;\n    private _origin: cc.Vec2 = null;\n    private _startAngle: number = 0;\n    private _endAngle: number = 0;\n    private _isClockWise: boolean = false;\n    private _arcAngle: number = 0;\n    private _arcLength: number = 0;\n    private _stringLength: number = 0;\n\n    protected originalTarget: cc.Node = null;\n    protected target: cc.Node = null;\n\n    // constructor(){\n    //     super();\n    // }\n\n    //静态创建方法\n    public static createWithDuration(duration: number, startPos: cc.Vec2, targetPos: cc.Vec2,\n        emitterDirection: cc.Vec2, radius: number, rotateHead: boolean): OrbitTrack {\n\n        let pRet: OrbitTrack = new OrbitTrack();\n        pRet.initWithDuration(duration, startPos, targetPos, emitterDirection, radius, rotateHead);\n        return pRet;\n    }\n\n    public static createWithSpeed(speed: number, startPos: cc.Vec2, targetPos: cc.Vec2, emitterDirection: cc.Vec2,\n        radius: number, rotateHead: boolean): OrbitTrack {\n\n        let pRet: OrbitTrack = new OrbitTrack();\n        pRet.initWithSpeed(speed, startPos, targetPos, emitterDirection, radius, rotateHead);\n        return pRet;\n    }\n\n    startWithTarget(target) {\n\n        (cc.ActionInterval.prototype as any).startWithTarget.call(this, target);\n\n        this.updateWithPercentage(0);\n    }\n\n    update(time: number) {\n        this.updateWithPercentage(time);\n    }\n\n    protected initWithDuration(duration: number, startPos: cc.Vec2, targetPos: cc.Vec2, emitterDirection: cc.Vec2,\n        radius: number, rotateHead: boolean): boolean {\n\n        this._startPos = startPos;\n        this._targetPos = targetPos;\n        this._emitterDirection = emitterDirection;\n        this._radius = radius;\n        this._rotateHead = rotateHead;\n        this.initPath();\n\n        return (cc.ActionInterval.prototype as any).initWithDuration.call(this, duration);\n\n    }\n\n    protected initWithSpeed(speed: number, startPos: cc.Vec2, targetPos: cc.Vec2, emitterDirection: cc.Vec2,\n        radius: number, rotateHead: boolean) {\n\n        this._startPos = startPos;\n        this._targetPos = targetPos;\n        this._emitterDirection = emitterDirection;\n        this._radius = radius;\n        this._rotateHead = rotateHead;\n        let duration: number = this.initPath(speed);\n\n        return (cc.ActionInterval.prototype as any).initWithDuration.call(this, duration);\n    }\n\n    private initPath(speed: number = 0): number {\n        let angle: number = GameMath.getAngle(this._startPos, this._targetPos, this._emitterDirection, true);\n        let rotateAngle: number = Math.PI / 2.0;\n        let round: number = 0.0;\n\n        let minAngle: number = 0.5;\n        if (Math.abs(angle) < minAngle) {\n            rotateAngle = -Math.PI / 2.0;\n            round = 1.0;\n        } else if (angle > minAngle && angle < 180 - minAngle) {\n            rotateAngle = Math.PI / 2.0;\n        } else if (Math.abs(angle - 180) < minAngle) {\n            rotateAngle = Math.PI / 2.0;\n        } else if (angle > 180 + minAngle && angle < 360 + minAngle) {\n            rotateAngle = -Math.PI / 2.0;\n        }\n\n        this._isClockWise = (rotateAngle < 0);\n\n        let normalize = this._emitterDirection.normalize();\n        let offset = normalize.mul(this._radius);\n\n        let rotateOffset = cc.v2(offset.x * Math.cos(rotateAngle) - offset.y * Math.sin(rotateAngle),\n            offset.x * Math.sin(rotateAngle) + offset.y * Math.cos(rotateAngle));\n\n        this._origin = this._startPos.add(rotateOffset);\n        this._contactPos = GameMath.getContactPoint(this._origin, this._radius, this._targetPos, this._isClockWise);\n        this._startAngle = GameMath.getAngle(this._origin, this._startPos, cc.v2(1, 0), false);\n        this._endAngle = GameMath.getAngle(this._origin, this._contactPos, cc.v2(1, 0), false);\n\n        if (this._isClockWise) {\n            this._endAngle = this._endAngle + round * -360.0;\n        } else {\n            this._endAngle = this._endAngle + round * 360.0;\n        }\n\n        this._arcAngle = 0.0;\n\n        if (this._isClockWise) {\n            this._arcAngle = Math.floor(this._startAngle + 360 - this._endAngle) % 360 + round * 360.0;\n        } else {\n            this._arcAngle = Math.floor(this._endAngle + 360 - this._startAngle) % 360 + round * 360.0;\n        }\n\n        this._arcLength = 2.0 * Math.PI * this._radius * this._arcAngle / 360.0;\n        let strightOffset = this._contactPos.sub(this._targetPos);\n        this._stringLength = strightOffset.mag();\n\n        if (speed > 0) {\n            return (this._arcLength + this._stringLength) / speed;\n        }\n        return 0;\n    }\n\n    private updateWithPercentage(percentage: number): void {\n        let totalLength: number = this._arcLength + this._stringLength;\n\n        let contactPosPercentage: number = this._arcLength / totalLength;\n\n        if (percentage > contactPosPercentage) {\n            let strightPercentage: number = (percentage - contactPosPercentage) / (1.0 - contactPosPercentage);\n\n            let offset = this._targetPos.sub(this._contactPos);\n            let offsetLength = offset.mag();\n            let offsetNormalize = offset.normalize();\n            let newPos = offsetNormalize.mul(strightPercentage * offsetLength).add(this._contactPos);\n\n            this.getTarget().setPosition(newPos);\n\n            if (this._rotateHead) {\n                let angle = GameMath.getAngle(this._contactPos, this._targetPos, cc.v2(0, 1), true);\n                let puppet = this.getTarget().getChildByName('puppet');\n                if (puppet) {\n                    puppet.angle = -angle;\n                }\n            }\n        } else {\n            let angleDelta = this._arcAngle * percentage / contactPosPercentage;\n            let offset = this._startPos.sub(this._origin);\n            let rotateOffset = cc.Vec2.ZERO;\n\n            let rotateRadin = angleDelta / 180 * Math.PI;\n            if (this._isClockWise) {\n                rotateRadin = -angleDelta / 180 * Math.PI;\n            }\n\n            rotateOffset = cc.v2(offset.x * Math.cos(rotateRadin) - offset.y * Math.sin(rotateRadin),\n                offset.x * Math.sin(rotateRadin) + offset.y * Math.cos(rotateRadin));\n\n            let newPos = this._origin.add(rotateOffset);\n\n            this.getTarget().setPosition(newPos);\n\n            if (this._rotateHead) {\n                let angle = GameMath.getAngle(this._origin, newPos, cc.v2(0, 1), true);\n                let rotation = 0;\n                if (this._isClockWise) {\n                    rotation = angle + 90;\n                } else {\n                    rotation = angle - 90;\n                }\n\n                let puppet = this.getTarget().getChildByName('puppet');\n                if (puppet) {\n                    puppet.angle = -rotation;\n                }\n            }\n        }\n    }\n\n}\n","/**\n * Created by chenzd on 2018/07/26.\n * 用于模拟c++的Pair\n */\nexport class Pair<T1, T2> {\n    constructor(public first: T1, public second: T2) { }\n     public toString() {\n        return \"Pair\"+ this.first.toString() + this.second.toString();\n    }\n}","import { EntityCleanOption, EntityType, EntityCleanType, EntityColor } from \"../../defines/EntityID\";\nimport EntityBase from \"../EntityBase\";\nimport ItemBase from \"../item/ItemBase\";\nimport GridBase from \"../../grid/GridBase\";\nimport GridCommand, { GridCommandType } from \"../../commond/GridCommand\";\n\n// Learn TypeScript:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/typescript.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/typescript.html\n// Learn Attribute:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html\n\nexport enum ParasiteType {\n    None = 0,\n    Shackle,\n    IceCube,\n    Honey,\n    GiftBox,\n};\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class ParasiteBase extends EntityBase {\n\n    private _parasiteType:ParasiteType = ParasiteType.None;\n    public getParasiteType() : ParasiteType {\n        return this._parasiteType;\n    }\n\n    public hostCanDrop() : boolean {\n        return this._hostCanDrop();\n    }\n    protected _hostCanDrop() : boolean {\n        return false;\n    }\n\n    public hostCanSwap() : boolean {\n        return this._hostCanSwap();\n    }\n    protected _hostCanSwap() : boolean {\n        return false;\n    }\n\n    public hostCanMatch() : boolean {\n        return this._hostCanMatch();\n    }\n    protected _hostCanMatch() : boolean {\n        return false;\n    }\n\n\n    public canExcuteCommand(command:GridCommand):boolean{\n        switch(command.type){\n            case GridCommandType.BombClean:{\n                return this.canCleanByBomb(command.cleanColor);\n            }\n            break;\n            case GridCommandType.NeighborClean:{\n                return this.canCleanByNeighbour(command.cleanColor);\n            }\n            break;\n            case GridCommandType.MatchClean:{\n                return this.canCleanByMatch();\n            }\n            break;\n            case GridCommandType.TerminateClean:{\n                return this.canCleanByTerminate(command.cleanColor);\n            }\n            break;\n            default:{\n                break;\n            }\n        }\n        return false;\n    }\n\n    public excuteCommand(command:GridCommand):void{\n        if(!this.canExcuteCommand(command)){\n            return;\n        }\n        switch(command.type){\n            case GridCommandType.BombClean:{\n                this.onClean(EntityCleanOption.create(EntityCleanType.Bomb,\n                    command.cleanRoot,\n                    command.cleanColor,\n                    command.createBombType,\n                    command.hitNeighbour,\n                    command.hitFloor,\n                    command.layoutGrass));\n            }\n            break;\n            case GridCommandType.NeighborClean:{\n                this.onClean(EntityCleanOption.create(EntityCleanType.Neighbor,\n                    command.cleanRoot,\n                    command.cleanColor,\n                    command.createBombType,\n                    command.hitNeighbour,\n                    command.hitFloor,\n                    command.layoutGrass));\n            }\n            break;\n            case GridCommandType.MatchClean:{\n                this.onClean(EntityCleanOption.create(EntityCleanType.Match,\n                    command.cleanRoot,\n                    command.cleanColor,\n                    command.createBombType,\n                    command.hitNeighbour,\n                    command.hitFloor,\n                    command.layoutGrass));\n            }\n            break;\n            case GridCommandType.TerminateClean:{\n                this.onClean(EntityCleanOption.create(EntityCleanType.Terminate,\n                    command.cleanRoot,\n                    command.cleanColor,\n                    command.createBombType,\n                    command.hitNeighbour,\n                    command.hitFloor,\n                    command.layoutGrass));\n            }\n            break;\n            default:{\n                break;\n            }\n        }\n    }\n\n    public removeFromGrid():void{\n        this.getGrid().removeParasiteAtLogicalPos(this.getLogicalPos());\n    }\n\n    public canCleanByBomb(cleanColor:EntityColor) : boolean {\n        if (!this.getImmuneDamage()) {\n            return this._canCleanByBomb(cleanColor);\n        }\n        return false;\n    }\n    protected _canCleanByBomb(cleanColor:EntityColor) : boolean {\n        return false;\n    }\n\n    public canCleanByTerminate(cleanColor:EntityColor) : boolean {\n        return this._canCleanByTerminate(cleanColor);\n    }\n    protected _canCleanByTerminate(cleanColor:EntityColor) : boolean {\n        return this._canCleanByBomb(cleanColor);\n    }\n\n    public canCleanByMatch() : boolean {\n        if (!this.getImmuneDamage()) {\n            return this._canCleanByMatch();\n        }\n        return false;\n    }\n    protected _canCleanByMatch() : boolean {\n        return false;\n    }\n\n    public canCleanByNeighbour(color:EntityColor) : boolean {\n        if (!this.getImmuneDamage()) {\n            return this._canCleanByNeighbour(color);\n        }\n        return false;\n    }\n    protected _canCleanByNeighbour(color:EntityColor) : boolean {\n        return false;\n    }\n    \n    public onClean(cleanOption:EntityCleanOption) : void {\n        this._onClean(cleanOption);\n        this.setImmuneDamage(true);\n    }\n    protected _onClean(cleanOption:EntityCleanOption) : void  {\n        \n    }\n\n    public initParasite(grid:GridBase, parasiteType:ParasiteType, width:number = 1, height:number = 1) : void {\n        super.initEntity(grid, EntityType.Parasite, width, height);\n        this._parasiteType = parasiteType;\n    }\n\n    onDestroy() {\n        super.onDestroy();\n    }\n}\n","import { EntityID, EntityColor } from \"../../defines/EntityID\";\nimport IdentifierManager from \"../../defines/IdentifierManager\";\nimport { KindID } from \"../../defines/KindID\";\nimport ItemBase from \"../item/ItemBase\";\nimport ParasiteBase from \"./ParasiteBase\";\nimport ParasiteIceCube from \"./ParasiteIceCube\";\nimport ParasiteHoney from \"./ParasiteHoney\";\nimport ParasiteShackle from \"./ParasiteShackle\";\nimport GridBase from \"../../grid/GridBase\";\nimport ParasiteGiftBox from \"./ParasiteGiftBox\";\n\nexport default class ParasiteFactory {\n\n    public static generateParasiteWithEntityID(grid:GridBase, entityID:EntityID) : ParasiteBase {\n        let parasite:ParasiteBase = null;\n\n        switch(entityID){\n            case EntityID.ParasiteShackleHp1:\n            case EntityID.ParasiteShackleHp2:\n            case EntityID.ParasiteShackleHp3:{\n                let hp = entityID - EntityID.ParasiteShackleHp1 + 1;\n                parasite = ParasiteShackle.create(grid, hp);\n            }\n            break;\n            case EntityID.ParasiteIceCubeHp1:\n            case EntityID.ParasiteIceCubeHp2:\n            case EntityID.ParasiteIceCubeHp3:\n            case EntityID.ParasiteIceCubeHp4:\n            case EntityID.ParasiteIceCubeHp5:\n            case EntityID.ParasiteIceCubeHp6:{\n                let hp = entityID - EntityID.ParasiteIceCubeHp1 + 1;\n                parasite = ParasiteIceCube.create(grid, hp);\n            }\n            break;\n            case EntityID.ParasiteHoneyHp1:\n            case EntityID.ParasiteHoneyHp2:{\n                let hp = entityID - EntityID.ParasiteHoneyHp1 + 1;\n                parasite = ParasiteHoney.create(grid, hp);\n            }\n            break;\n            case EntityID.ParasiteGiftBoxRed:\n            case EntityID.ParasiteGiftBoxGreen:\n            case EntityID.ParasiteGiftBoxBlue:\n            case EntityID.ParasiteGiftBoxYellow:\n            case EntityID.ParasiteGiftBoxOrange:\n            case EntityID.ParasiteGiftBoxPurple:{\n                let color = entityID - EntityID.ParasiteGiftBoxRed + EntityColor.Red \n                parasite = ParasiteGiftBox.create(grid, color);\n            }\n            break;\n            default:{\n                break;\n            }\n        }\n\n        return parasite;\n    }\n    \n    public static generateParasiteWithKindID(grid:GridBase, kindID:KindID) : ParasiteBase {\n        let entityID = IdentifierManager.getInstance().getEntityIDFromKindID(kindID);\n        return this.generateParasiteWithEntityID(grid, entityID);\n    }\n}\n","import ParasiteBase, { ParasiteType } from \"./ParasiteBase\";\nimport GridBase from \"../../grid/GridBase\";\nimport EntityPrefabNodePool from \"../EntityPrefabNodePool\";\nimport { CollectionID } from \"../../defines/CollectionID\";\nimport { EntityColor, EntityID, EntityCleanOption, EntityCleanType, EntityIDManager } from \"../../defines/EntityID\";\nimport FlyerAnimation, { FlyerAnimationType } from \"../flyer/FlyerAnimation\";\nimport IGame from \"../../../../base/IGame\";\nimport IdentifierManager from \"../../defines/IdentifierManager\";\nimport EntityEventChanged from \"../../event/EntityEventChanged\";\nimport TMXConfigInfoKeys from \"../../defines/TMXConfigInfoKeys\";\nimport EntityBase from \"../EntityBase\";\n\n// Learn TypeScript:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/typescript.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/typescript.html\n// Learn Attribute:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class ParasiteGiftBox extends ParasiteBase {\n\n    @property([cc.Node])\n    partsNode:cc.Node[] =[];\n\n    private _healthPoint:number = 0;\n\n    public static create(grid:GridBase, color:EntityColor, healthPoint:number = 1):ParasiteGiftBox{\n\n        let className = 'ParasiteGiftBox';\n        let prefabFileName = 'match_scene/prefab/entity/parasite/ParasiteGiftBox';\n        let pool = EntityPrefabNodePool.getInstance();\n        let component = pool.getPrefabNodeWithFileNameAndClassName(prefabFileName, className) as ParasiteGiftBox;\n        if (component) {\n            component.init(grid, color, healthPoint); \n            return component;       \n        }\n        return null;\n    }\n\n    public clone() : ParasiteGiftBox {\n        return ParasiteGiftBox.create(this.getGrid(), this.getHealthPoint());\n    }\n\n    public getButterflyPriority(color:EntityColor, layoutGrass:boolean):number{\n        if(color == this.getEntityColor()){\n            return super.getButterflyPriority(color, layoutGrass);\n        }\n        return EntityBase.DEFAULT_MISSILE_PRIORITY;\n    }\n\n    public getCollectionID():CollectionID{\n        let result = CollectionID.None\n        switch(this.getEntityColor()){\n            case EntityColor.Red:{\n                result = CollectionID.ParasiteGiftBoxRed;\n            }\n            break;\n            case EntityColor.Green:{\n                result = CollectionID.ParasiteGiftBoxGreen;\n            }\n            break;\n            case EntityColor.Blue:{\n                result = CollectionID.ParasiteGiftBoxBlue;\n            }   \n            break;\n            case EntityColor.Yellow:{\n                result = CollectionID.ParasiteGiftBoxYellow;\n            }\n            break;\n            case EntityColor.Orange:{\n                result = CollectionID.ParasiteGiftBoxOrange;\n            }\n            break;\n            case EntityColor.Purple:{\n                result = CollectionID.ParasiteGiftBoxPurple;\n            }\n            break;\n        }\n\n        return result;\n    }\n\n    public getEntityID():EntityID{\n\n        let result = EntityID.None\n        switch(this.getEntityColor()){\n            case EntityColor.Red:{\n                result = EntityID.ParasiteGiftBoxRed;\n            }\n            break;\n            case EntityColor.Green:{\n                result = EntityID.ParasiteGiftBoxGreen;\n            }\n            break;\n            case EntityColor.Blue:{\n                result = EntityID.ParasiteGiftBoxBlue;\n            }   \n            break;\n            case EntityColor.Yellow:{\n                result = EntityID.ParasiteGiftBoxYellow;\n            }\n            break;\n            case EntityColor.Orange:{\n                result = EntityID.ParasiteGiftBoxOrange;\n            }\n            break;\n            case EntityColor.Purple:{\n                result = EntityID.ParasiteGiftBoxPurple;\n            }\n            break;\n        }\n        return result;\n    }\n\n    public getScore():number{\n        return 200;\n    }\n\n    public dealWithConfigMap(configMap:Object):void{\n        super.dealWithConfigMap(configMap);\n        if(configMap[TMXConfigInfoKeys.CFG_GIFT_BOX_MAX]){\n            let healthPoint = configMap[TMXConfigInfoKeys.CFG_GIFT_BOX_MAX];\n            this.setHealthPoint(healthPoint);\n        }\n    }\n\n    protected _hostCanDrop():boolean{\n        return false;\n    }\n\n    protected _hostCanSwap():boolean{\n        return false;\n    }\n\n    protected _hostCanMatch():boolean{\n        return false;\n    }\n\n    protected _canCleanByBomb(cleanColor:EntityColor):boolean{\n        return cleanColor == this.getEntityColor() \n    }\n\n    protected _canCleanByNeighbour(cleanColor:EntityColor):boolean{\n        return cleanColor == this.getEntityColor() \n    }\n\n    protected _onClean(cleanOption:EntityCleanOption):void{\n        \n        if (cleanOption.cleanColor != this.getEntityColor()) {\n            return;\n        }\n        let grid = this.getGrid();\n        grid.gainScoreWithEntity(this);\n        if(this.getHealthPoint() <=  1){\n\n            let pos = this.getLogicalPos();\n            let size = this.getLogicalSize();\n\n            for (let row = 0; row < size.height; row++) {\n                for (let column = 0; column < size.width; column++) {\n                    let checkPos = pos.add(cc.v2(column, row));\n                    let item = grid.getItemAtLogicalPos(checkPos);\n                    if (item) {\n                        item.setImmuneDamage(true);\n                    }\n                }\n            }\n\n            if (!this.isTargetCollection()) {\n                let flyer = FlyerAnimation.createDieAnimation(this.getGrid(), this.getEntityID());\n                this.getGrid().setFlyerAtLogicalPos(flyer, this.getLogicalPos());\n                flyer.node.setPosition(this.getPixelPos(this.getLogicalPos()));\n                IGame.playAudio(IdentifierManager.getInstance().getMatchAudioFilePath('giftbox'));\n            }\n            this.setVisible(false);\n            let changedEvent = EntityEventChanged.create(this);\n            this.node.dispatchEvent(changedEvent);\n            this.onCollected();\n            this.selfDestory();\n\n        }else{\n            let changedEvent = EntityEventChanged.create(this);\n            this.node.dispatchEvent(changedEvent);\n            this.selfHurt();\n            IGame.playAudio(IdentifierManager.getInstance().getMatchAudioFilePath('eliminate_0'));\n            this.setHealthPoint(this.getHealthPoint() - 1);\n            let flyer = FlyerAnimation.createAnimationWithType(this.getGrid(), FlyerAnimationType.CommonHurt);\n            this.getGrid().setFlyerAtLogicalPos(flyer, this.getLogicalPos());\n            flyer.node.setPosition(this.getPixelPos(this.getLogicalPos()));\n            flyer.node.zIndex = this.getTopZOrder();\n        }\n    }\n\n    protected init(grid:GridBase, color:EntityColor, healthPoint):void{\n        super.initParasite(grid, ParasiteType.GiftBox, 2, 2);\n        this.setEntityColor(color)\n        this.setHealthPoint(healthPoint);\n    }\n\n    protected getHealthPoint():number{\n        return this._healthPoint;\n    }\n\n    protected setHealthPoint(val:number):void{\n        this._healthPoint = val;\n        this.updatePuppet();\n    }\n\n    protected updatePuppet():void{\n        super.updatePuppet();\n        for (let i = 0; i < 4; i++) {\n            this.partsNode[i].active = i < (this._healthPoint - 1);\n        }\n    }\n}\n","import ParasiteBase, { ParasiteType } from \"./ParasiteBase\";\nimport ItemBase from \"../item/ItemBase\";\nimport { CollectionID } from \"../../defines/CollectionID\";\nimport { EntityID, EntityCleanOption, EntityCleanType, EntityColor } from \"../../defines/EntityID\";\nimport { PowerID } from \"../../defines/PowerID\";\nimport { EntityStateType } from \"../state/EntityStateBase\";\nimport FlyerAnimation, { FlyerAnimationType } from \"../flyer/FlyerAnimation\";\nimport IGame from \"../../../../base/IGame\";\nimport IdentifierManager from \"../../defines/IdentifierManager\";\nimport EntityEventChanged from \"../../event/EntityEventChanged\";\nimport EntityPrefabNodePool from \"../EntityPrefabNodePool\";\nimport GridBase from \"../../grid/GridBase\";\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class ParasiteHoney extends ParasiteBase {\n\n    private _healthPoint:number = 0;\n\n    public static create(grid:GridBase, healthPoint:number):ParasiteHoney{\n\n        let className = 'ParasiteHoney';\n        let prefabFileName = 'match_scene/prefab/entity/parasite/ParasiteHoney';\n        let pool = EntityPrefabNodePool.getInstance();\n        let component = pool.getPrefabNodeWithFileNameAndClassName(prefabFileName, className) as ParasiteHoney;\n        if (component) {\n            component.init(grid, healthPoint); \n            return component;       \n        }\n        return null;\n    }\n\n    public clone() : ParasiteHoney {\n        return ParasiteHoney.create(this.getGrid(), this.getHealthPoint());\n    }\n    \n    public getCollectionID():CollectionID{\n        return CollectionID.ParasiteHoney;\n    }\n\n    public getEntityID():EntityID{\n        let result = EntityID.None;\n        switch(this.getHealthPoint()){\n            case 1:{\n                result = EntityID.ParasiteHoneyHp1;\n                break;\n            }\n            case 2:{\n                result = EntityID.ParasiteHoneyHp2;\n                break;\n            }\n            default:{\n                break;\n            }\n        }\n        return result;\n    }\n\n    public getPowerID():PowerID{\n        return PowerID.HoneyResist;\n    }\n\n    public getScore():number{\n        return 100;\n    }\n\n    public getHealthPoint():number{\n        return this._healthPoint;\n    }\n\n    public setHealthPoint(val:number):void{\n        this._healthPoint = val;\n        this.updatePuppet();\n    }\n\n    public grow():void{\n        this.playAnimation('grow');\n        IGame.playAudio(IdentifierManager.getInstance().getMatchAudioFilePath('honeycreate'));\n    }\n\n    protected _canCleanByBomb(cleanColor:EntityColor):boolean{\n        return true;\n    }\n\n    protected _canCleanByNeighbour(cleanColor:EntityColor):boolean{\n        return true;\n    }\n\n    protected _onClean(cleanOption:EntityCleanOption):void{\n        let rate = 1;\n        if (cleanOption.cleanType == EntityCleanType.Terminate) {\n            rate = this.getHealthPoint();\n            this.setHealthPoint(1);\n        }\n        this.getGrid().gainScoreWithEntity(this, rate);\n        if(this.getHealthPoint() <= 1){\n            this.setVisible(false);\n            if (!this.isTargetCollection()) {\n                let flyer = FlyerAnimation.createDieAnimation(this.getGrid(), this.getEntityID());\n                this.getGrid().setFlyerAtLogicalPos(flyer, this.getLogicalPos());\n                IGame.playAudio(IdentifierManager.getInstance().getMatchAudioFilePath('honey'));\n            }\n            let changedEvent = EntityEventChanged.create(this);\n            this.node.dispatchEvent(changedEvent);\n            this.onCollected();\n            this.selfDestory(true);\n  \n        }else{\n            this.setHealthPoint(this.getHealthPoint() - 1);\n            this.selfHurt();\n            IGame.playAudio(IdentifierManager.getInstance().getMatchAudioFilePath('eliminate_0'));\n            this.getGrid().gainPower(this.getPowerID(), 1);\n            let flyer = FlyerAnimation.createDieAnimation(this.getGrid(), this.getEntityID());\n            this.getGrid().setFlyerAtLogicalPos(flyer, this.getLogicalPos());\n            IGame.playAudio(IdentifierManager.getInstance().getMatchAudioFilePath('honey'));\n            flyer.node.zIndex = this.getTopZOrder();\n        }\n    }\n\n    protected init(grid:GridBase, healthPoint:number):void{\n        super.initParasite(grid, ParasiteType.Honey);\n        this.setHealthPoint(healthPoint);\n    }\n}\n","import ParasiteBase, { ParasiteType } from \"./ParasiteBase\";\nimport ItemBase from \"../item/ItemBase\";\nimport { EntityID, EntityColor, EntityCleanOption, EntityCleanType } from \"../../defines/EntityID\";\nimport { CollectionID } from \"../../defines/CollectionID\";\nimport { EntityStateType } from \"../state/EntityStateBase\";\nimport FlyerAnimation, { FlyerAnimationType } from \"../flyer/FlyerAnimation\";\nimport IGame from \"../../../../base/IGame\";\nimport IdentifierManager from \"../../defines/IdentifierManager\";\nimport EntityEventChanged from \"../../event/EntityEventChanged\";\nimport EntityPrefabNodePool from \"../EntityPrefabNodePool\";\nimport GridBase from \"../../grid/GridBase\";\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class ParasiteIceCube extends ParasiteBase {\n\n    private _healthPoint:number = 0;\n\n    public static create(grid:GridBase, healthPoint:number):ParasiteIceCube{\n\n        let className = 'ParasiteIceCube';\n        let prefabFileName = 'match_scene/prefab/entity/parasite/ParasiteIceCube';\n        let pool = EntityPrefabNodePool.getInstance();\n        let component = pool.getPrefabNodeWithFileNameAndClassName(prefabFileName, className) as ParasiteIceCube;\n        if (component) {\n            component.init(grid, healthPoint); \n            return component;       \n        }\n        return null;\n    }\n\n    public clone() : ParasiteIceCube {\n        return ParasiteIceCube.create(this.getGrid(), this.getHealthPoint());\n    }\n\n    public getEntityID():EntityID{\n        let result = EntityID.None;\n        switch(this.getHealthPoint()){\n            case 1:{\n                result = EntityID.ParasiteIceCubeHp1;\n                break;\n            }\n            case 2:{\n                result = EntityID.ParasiteIceCubeHp2;\n                break;\n            }\n            case 3:{\n                result = EntityID.ParasiteIceCubeHp3;\n                break;\n            }\n            case 4:{\n                result = EntityID.ParasiteIceCubeHp4;\n                break;\n            }\n            case 5:{\n                result = EntityID.ParasiteIceCubeHp5;\n                break;\n            }\n            case 6:{\n                result = EntityID.ParasiteIceCubeHp6;\n                break;\n            }\n            default:{\n                break;\n            }\n        }\n        return result;\n    }\n\n    public getCollectionID():CollectionID{\n        return CollectionID.ParasiteIceCube;\n    }\n\n    public getScore():number{\n        return 100;\n    }\n\n    public getButterflyPriority(color:EntityColor, layoutGrass:boolean):number{\n        return 1;\n    }\n\n    protected _hostCanDrop():boolean{\n        return false;\n    }\n\n    protected _hostCanSwap():boolean{\n        return false;\n    }\n\n    protected _hostCanMatch():boolean{\n        return false;\n    }\n\n    protected _canCleanByBomb(cleanColor:EntityColor):boolean{\n        return true;\n    }\n\n    protected _canCleanByNeighbour(cleanColor:EntityColor):boolean{\n        return true;\n    }\n\n    protected _onClean(cleanOption:EntityCleanOption):void{\n        let rate = 1\n        if (cleanOption.cleanType == EntityCleanType.Terminate) {\n            rate = this.getHealthPoint()\n            this.setHealthPoint(1);\n        }\n        this.getGrid().gainScoreWithEntity(this, rate);\n        if(this.getHealthPoint() <=  1){\n            this.setVisible(false);\n            if (!this.isTargetCollection()) {\n                let flyer = FlyerAnimation.createDieAnimation(this.getGrid(), this.getEntityID());\n                this.getGrid().setFlyerAtLogicalPos(flyer, this.getLogicalPos());\n                IGame.playAudio(IdentifierManager.getInstance().getMatchAudioFilePath('icecube'));\n            }\n            let changedEvent = EntityEventChanged.create(this);\n            this.node.dispatchEvent(changedEvent);\n            this.onCollected();\n            this.selfDestory();\n            \n            \n        }else{\n            this.selfHurt();\n            IGame.playAudio(IdentifierManager.getInstance().getMatchAudioFilePath('eliminate_0'));\n            this.setHealthPoint(this.getHealthPoint() - 1);\n            let flyer = FlyerAnimation.createAnimationWithType(this.getGrid(), FlyerAnimationType.CommonHurt);\n            this.getGrid().setFlyerAtLogicalPos(flyer, this.getLogicalPos());\n            flyer.node.zIndex = this.getTopZOrder();\n        }\n    }\n\n    protected init(grid:GridBase, healthPoint:number):void{\n        super.initParasite(grid, ParasiteType.IceCube);\n        this.setHealthPoint(healthPoint);\n    }\n\n    protected getHealthPoint():number{\n        return this._healthPoint;\n    }\n\n    protected setHealthPoint(val:number):void{\n        this._healthPoint = val;\n        this.updatePuppet();\n    }\n\n}\n","import ParasiteBase, { ParasiteType } from \"./ParasiteBase\";\nimport ItemBase from \"../item/ItemBase\";\nimport { CollectionID } from \"../../defines/CollectionID\";\nimport { EntityID, EntityCleanOption, EntityCleanType, EntityColor } from \"../../defines/EntityID\";\nimport { EntityStateType } from \"../state/EntityStateBase\";\nimport EntityEventChanged from \"../../event/EntityEventChanged\";\nimport FlyerAnimation, { FlyerAnimationType } from \"../flyer/FlyerAnimation\";\nimport IGame from \"../../../../base/IGame\";\nimport IdentifierManager from \"../../defines/IdentifierManager\";\nimport EntityPrefabNodePool from \"../EntityPrefabNodePool\";\nimport GridBase from \"../../grid/GridBase\";\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class ParasiteShackle extends ParasiteBase {\n    \n    private _healthPoint:number = 0;\n\n    public static create(grid:GridBase, healthPoint:number):ParasiteShackle{\n\n        let className = 'ParasiteShackle';\n        let prefabFileName = 'match_scene/prefab/entity/parasite/ParasiteShackle';\n        let pool = EntityPrefabNodePool.getInstance();\n        let component = pool.getPrefabNodeWithFileNameAndClassName(prefabFileName, className) as ParasiteShackle;\n        if (component) {\n            component.init(grid, healthPoint); \n            return component;       \n        }\n        return null;\n    }\n\n    public clone() : ParasiteShackle {\n        return ParasiteShackle.create(this.getGrid(), this.getHealthPoint());\n    }\n\n    public getCollectionID():CollectionID{\n        return CollectionID.ParasiteShackle;\n    }\n\n    public getEntityID():EntityID{\n        let result = EntityID.None;\n        switch(this.getHealthPoint()){\n            case 1:{\n                result = EntityID.ParasiteShackleHp1;\n                break;\n            }\n            case 2:{\n                result = EntityID.ParasiteShackleHp2;\n                break;\n            }\n            case 3:{\n                result = EntityID.ParasiteShackleHp3;\n                break;\n            }\n            default:\n                break;\n        }\n        return result;\n    }\n\n    public getScore():number{\n        return 100;\n    }\n\n    protected _hostCanDrop():boolean{\n        return false;\n    }\n\n    protected _hostCanSwap():boolean{\n        return false;\n    }\n\n    protected _hostCanMatch():boolean{\n        return true;\n    }\n\n    protected _canCleanByBomb(cleanColor:EntityColor):boolean{\n        return true;\n    }\n\n    protected _canCleanByMatch():boolean{\n        return true;\n    }\n\n    protected _onClean(cleanOption:EntityCleanOption):void{\n        let rate = 1\n        if (cleanOption.cleanType == EntityCleanType.Terminate) {\n            rate = this.getHealthPoint()\n            this.setHealthPoint(1);\n        }\n        this.getGrid().gainScoreWithEntity(this, rate);\n        if(this.getHealthPoint() <=  1){\n            if (!this.isTargetCollection()) {\n                let flyer = FlyerAnimation.createDieAnimation(this.getGrid(), this.getEntityID());\n                this.getGrid().setFlyerAtLogicalPos(flyer, this.getLogicalPos());\n                IGame.playAudio(IdentifierManager.getInstance().getMatchAudioFilePath('chain'));\n            }\n            this.setVisible(false);\n            let changedEvent = EntityEventChanged.create(this);\n            this.node.dispatchEvent(changedEvent);\n            this.onCollected();\n            this.selfDestory();\n        }else{\n            let changedEvent = EntityEventChanged.create(this);\n            this.node.dispatchEvent(changedEvent);\n            this.selfHurt();\n            IGame.playAudio(IdentifierManager.getInstance().getMatchAudioFilePath('eliminate_0'));\n            this.setHealthPoint(this.getHealthPoint() - 1);\n            let flyer = FlyerAnimation.createAnimationWithType(this.getGrid(), FlyerAnimationType.CommonHurt);\n            this.getGrid().setFlyerAtLogicalPos(flyer, this.getLogicalPos());\n            flyer.node.zIndex = this.getTopZOrder();\n        }\n    }\n\n    protected init(grid:GridBase, healthPoint:number):void{\n        super.initParasite(grid, ParasiteType.Shackle);\n        this.setHealthPoint(healthPoint);\n    }\n\n    protected getHealthPoint():number{\n        return this._healthPoint;\n    }\n\n    protected setHealthPoint(val:number):void{\n        this._healthPoint = val;\n        this.updatePuppet();\n    }\n}\n","import EntityBase from \"../EntityBase\";\nimport GridCommand, { GridCommandType } from \"../../commond/GridCommand\";\nimport GridBase from \"../../grid/GridBase\";\nimport { EntityType } from \"../../defines/EntityID\";\nimport CurveToAction from \"../../../../extend/action/CurveToAction\";\nimport GameMath from \"../../../../extend/utils/GameMath\";\n\n// Learn TypeScript:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/typescript.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/typescript.html\n// Learn Attribute:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html\n\nexport enum PopsicleType {\n    None,\n    Normal,\n    Line,\n    Range,\n};\n\nconst { ccclass, property } = cc._decorator;\n\n@ccclass\nexport default class PopsicleBase extends EntityBase {\n\n    private _popsicleType: PopsicleType = PopsicleType.None;\n    public getPopsicleType(): PopsicleType {\n        return this._popsicleType;\n    }\n\n    protected _canBePopsicleClean(): boolean {\n        let occupyArea = this.getOccupyArea();\n        let grid = this.getGrid();\n\n        for (let row = 0; row < occupyArea.height; row++) {\n            for (let column = 0; column < occupyArea.width; column++) {\n                let pos = occupyArea.origin.add(cc.v2(column, row));\n                let floor = grid.getFloorAtLogicalPos(pos);\n                if (floor) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n\n    protected _onBePopsicleClean(): void {\n        this.removeFromGridAndAddToEffect();\n        this.node.zIndex = GridBase.ZORDER_EFFECT;\n        this.shiftToEffectLayer();\n        this.getGrid().addObstructs(this);\n        let state = this.playAnimation('die');\n        if (state) {\n            let rotation = this._puppet.angle;\n\n            if (rotation >= 0) {\n                rotation = -15;\n            } else if (rotation < 0) {\n                rotation = 15;\n            } else {\n                rotation = -15;\n            }\n\n            let duration = state.duration;\n            let action = cc.sequence(cc.rotateTo(duration * 0.25, rotation).easing(cc.easeInOut(2)),\n                cc.rotateTo(duration * 0.25, -rotation * 0.5).easing(cc.easeInOut(2)),\n                cc.rotateTo(duration * 0.25, rotation * 0.25).easing(cc.easeInOut(2)),\n                cc.rotateTo(duration * 0.25, 0).easing(cc.easeInOut(2)),\n                cc.callFunc(() => {\n                    this.onDidClean();\n                }),\n            )\n            this.getPuppet().runAction(action);\n        }\n    }\n\n    protected onDidClean(): void {\n        if (this.getGrid().isTargetCollectionID(this.getCollectionID())) {\n            let startPos = this.node.position;\n            let targetPos = this.node.parent.convertToNodeSpaceAR(this.getGrid().getWorldPosForTarget(this.getCollectionID()));\n            let distance = GameMath.getDistance(startPos, cc.v2(targetPos.x, targetPos.y));\n            let speed = 1000;\n            let duration = distance / speed;\n\n            let size = this.getLogicalSize();\n\n            let move = cc.spawn(CurveToAction.create(duration, startPos, cc.v2(targetPos.x, targetPos.y)),\n                cc.scaleTo(duration * 0.5, 0.75 / Math.min(size.width, size.height),\n                    0.75 / Math.max(size.width, size.height)));\n            let callback = cc.callFunc(() => { this.getGrid().updateTargetBarUIWithDelta(this.getCollectionID(), -1); this.destoryWithRecycle(); });\n            let action = cc.sequence(move, callback);\n            this.runAction(action);\n\n        } else {\n            this.selfDestory();\n        }\n        this.getGrid().collectEntity(this);\n        this.getGrid().removeObstructs(this);\n    }\n\n    public canExcuteCommand(command: GridCommand): boolean {\n        switch (command.type) {\n            case GridCommandType.PopsicleClean: {\n                return this._canBePopsicleClean();\n            }\n                break;\n            default:\n                break;\n        }\n        return false;\n    }\n\n    public excuteCommand(command: GridCommand): void {\n        if (!this.canExcuteCommand(command)) {\n            return;\n        }\n        switch (command.type) {\n            case GridCommandType.PopsicleClean: {\n                this._onBePopsicleClean();\n            }\n                break;\n            default:\n                break;\n        }\n    }\n\n    public onCollected(): void {\n\n    }\n\n    protected initPopsicle(grid: GridBase, width: number, height: number, popsicleType: PopsicleType) {\n        super.initEntity(grid, EntityType.Popsicle, width, height);\n        this._popsicleType = popsicleType;\n    }\n\n}\n","import { EntityID } from \"../../defines/EntityID\";\nimport IdentifierManager from \"../../defines/IdentifierManager\";\nimport { KindID } from \"../../defines/KindID\";\nimport GridBase from \"../../grid/GridBase\";\nimport PopsicleBase from \"./PopsicleBase\";\nimport PopsicleNormal from \"./PopsicleNormal\";\nimport PopsicleLine from \"./PopsicleLine\";\nimport FlyerPopsicleBomb from \"../flyer/FlyerPopsicleBomb\";\nimport PopsicleRange from \"./PopsicleRange\";\n\nexport default class PopsicleFactory {\n    public static generatePopsicleWithEntityID(grid:GridBase, width:number, height:number, entityID:EntityID) : PopsicleBase {\n        let popsicle:PopsicleBase = null;\n\n        switch (entityID) {\n            case EntityID.PopsicleNormal:{\n                popsicle = PopsicleNormal.create(grid, width, height);\n            }\n                break;\n            case EntityID.PopsicleLine:{\n                popsicle = PopsicleLine.create(grid, width, height);\n            }\n                break;\n            case EntityID.PopsicleBoom:{\n                popsicle = PopsicleRange.create(grid, width, height);\n            }\n                break;\n                \n            default:\n                break;\n        }\n        return popsicle;\n    }\n    \n    public static generatePopsicleWithKindID(grid:GridBase, width:number, height:number, kindID:KindID) : PopsicleBase {\n        let entityID = IdentifierManager.getInstance().getEntityIDFromKindID(kindID);\n        return this.generatePopsicleWithEntityID(grid, width, height, entityID);\n    }\n}\n","import PopsicleBase, { PopsicleType } from \"./PopsicleBase\";\nimport { EntityID, EntityColor } from \"../../defines/EntityID\";\nimport { CollectionID } from \"../../defines/CollectionID\";\nimport GameMath from \"../../../../extend/utils/GameMath\";\nimport GridBase from \"../../grid/GridBase\";\nimport { Pair } from \"../../../../base/Pair\";\nimport FlyerCannon from \"../flyer/FlyerCannon\";\nimport FlyerPopsicleLine from \"../flyer/FlyerPopsicleLine\";\nimport IGame from \"../../../../base/IGame\";\nimport IdentifierManager from \"../../defines/IdentifierManager\";\nimport EntityPrefabNodePool from \"../EntityPrefabNodePool\";\n\n// Learn TypeScript:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/typescript.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/typescript.html\n// Learn Attribute:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html\n\nconst { ccclass, property } = cc._decorator;\n\n@ccclass\nexport default class PopsicleLine extends PopsicleBase {\n\n    private static SizeToEntityInfoMap: Object = {\n        '{1, 2}': {\n            'EntityID': EntityID.PopsicleLine,\n            'NeedRotate': false\n        },\n        '{2, 1}': {\n            'EntityID': EntityID.PopsicleLine,\n            'NeedRotate': true\n        },\n    };\n\n    private static getEntityInfoWithSize(size: cc.Size): Object {\n        let key = '{' + size.width + ', ' + size.height + '}';\n        return this.SizeToEntityInfoMap[key];\n    }\n\n    public getCollectionID(): CollectionID {\n        return CollectionID.PopsicleLine;\n    }\n\n    public getEntityID(): EntityID {\n        return EntityID.PopsicleLine;\n    }\n\n    public getScore(): number {\n        let size = this.getLogicalSize()\n        return 100 * size.width * size.height;\n    }\n\n    protected updatePopsicle(): void {\n        super.updatePuppet();\n\n        let rotation = 0;\n        let entityInfo = PopsicleLine.getEntityInfoWithSize(this.getLogicalSize());\n        if (entityInfo) {\n            let needRotate = entityInfo['NeedRotate'];\n            if (needRotate) {\n                rotation = GameMath.randomInt(0, 100) < 50 ? -90 : 90;\n            }\n        }\n        this._puppet.angle = -rotation;\n    }\n\n    protected _onBePopsicleClean(): void {\n        super._onBePopsicleClean();\n        this.getGrid().gainScoreWithEntity(this);\n        let rayDirections: Pair<cc.Vec2, boolean>[] = [];\n        let size = this.getLogicalSize();\n        if (size.width == 2) {\n            rayDirections.push(new Pair<cc.Vec2, boolean>(cc.v2(1, 0), true));\n            rayDirections.push(new Pair<cc.Vec2, boolean>(cc.v2(-1, 0), false));\n        } else if (size.height == 2) {\n            rayDirections.push(new Pair<cc.Vec2, boolean>(cc.v2(0, 1), true));\n            rayDirections.push(new Pair<cc.Vec2, boolean>(cc.v2(0, -1), false));\n        }\n\n        let grid = this.getGrid();\n        for (let ray of rayDirections) {\n            let cannon = FlyerPopsicleLine.create(grid,\n                this.getEntityColor(),\n                false,\n                this.getLogicalPos(),\n                ray.first,\n                ray.second);\n            grid.setFlyerAtLogicalPos(cannon, this.getLogicalPos());\n        }\n        IGame.playAudio(IdentifierManager.getInstance().getMatchAudioFilePath('popsiclesline'));\n    }\n\n\n\n    protected init(grid: GridBase, width: number, height: number): void {\n        super.initPopsicle(grid, width, height, PopsicleType.Line);\n        this.updatePopsicle();\n    }\n\n    public static create(grid: GridBase, width: number, height: number): PopsicleLine {\n\n        let className = 'PopsicleLine';\n        let prefabFileName = 'match_scene/prefab/entity/popsicle/PopsicleLine';\n        let pool = EntityPrefabNodePool.getInstance();\n        let component = pool.getPrefabNodeWithFileNameAndClassName(prefabFileName, className) as PopsicleLine;\n        if (component) {\n            component.init(grid, width, height);\n            return component;\n        }\n        return null;\n    }\n\n    public clone(): PopsicleLine {\n        let item = PopsicleLine.create(this.getGrid(), this.getLogicalSize().width, this.getLogicalSize().height);\n        return item;\n    }\n\n    // LIFE-CYCLE CALLBACKS:\n\n    // onLoad () {}\n\n    start() {\n\n    }\n\n    // update (dt) {}\n}\n","import IGame from \"../../../../base/IGame\";\nimport GameMath from \"../../../../extend/utils/GameMath\";\nimport { CollectionID } from \"../../defines/CollectionID\";\nimport { EntityID } from \"../../defines/EntityID\";\nimport IdentifierManager from \"../../defines/IdentifierManager\";\nimport GridBase from \"../../grid/GridBase\";\nimport EntityPrefabNodePool from \"../EntityPrefabNodePool\";\nimport PopsicleBase, { PopsicleType } from \"./PopsicleBase\";\n\n// Learn TypeScript:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/typescript.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/typescript.html\n// Learn Attribute:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html\n\nconst { ccclass, property } = cc._decorator;\n\n@ccclass\nexport default class PopsicleNormal extends PopsicleBase {\n\n    private static SizeToEntityInfoMap: Object = {\n        '{1, 1}': {\n            'EntityID': EntityID.PopsicleNormal_1x1,\n            'NeedRotate': false\n        },\n        '{1, 2}': {\n            'EntityID': EntityID.PopsicleNormal_1x2,\n            'NeedRotate': false\n        },\n        '{2, 1}': {\n            'EntityID': EntityID.PopsicleNormal_1x2,\n            'NeedRotate': true\n        },\n        '{2, 2}': {\n            'EntityID': EntityID.PopsicleNormal_2x2,\n            'NeedRotate': false\n        },\n        '{2, 3}': {\n            'EntityID': EntityID.PopsicleNormal_2x3,\n            'NeedRotate': false\n        },\n        '{3, 2}': {\n            'EntityID': EntityID.PopsicleNormal_2x3,\n            'NeedRotate': true\n        },\n        '{3, 3}': {\n            'EntityID': EntityID.PopsicleNormal_3x3,\n            'NeedRotate': false\n        },\n        '{3, 4}': {\n            'EntityID': EntityID.PopsicleNormal_3x4,\n            'NeedRotate': false\n        },\n        '{4, 3}': {\n            'EntityID': EntityID.PopsicleNormal_3x4,\n            'NeedRotate': true\n        },\n    };\n\n    private static getEntityInfoWithSize(size: cc.Size): Object {\n        let key = '{' + size.width + ', ' + size.height + '}';\n        return this.SizeToEntityInfoMap[key];\n    }\n\n    public getCollectionID(): CollectionID {\n        return CollectionID.PopsicleNormal;\n    }\n\n    public getEntityID(): EntityID {\n\n        let entityInfo = PopsicleNormal.getEntityInfoWithSize(this.getLogicalSize());\n        if (entityInfo) {\n            return entityInfo['EntityID'];\n        }\n        return EntityID.None;\n    }\n\n    public getScore(): number {\n        let size = this.getLogicalSize()\n        return 50 * size.width * size.height;\n    }\n\n    protected updatePopsicle(): void {\n        super.updatePuppet();\n\n        let rotation = 0;\n        let entityInfo = PopsicleNormal.getEntityInfoWithSize(this.getLogicalSize());\n        if (entityInfo) {\n            let needRotate = entityInfo['NeedRotate'];\n            if (needRotate) {\n                rotation = GameMath.randomInt(0, 100) < 50 ? -90 : 90;\n            }\n        }\n        this._puppet.angle = -rotation;\n    }\n\n    protected _onBePopsicleClean(): void {\n        super._onBePopsicleClean();\n        this.getGrid().gainScoreWithEntity(this);\n        IGame.playAudio(IdentifierManager.getInstance().getMatchAudioFilePath('popsicles'));\n    }\n\n\n\n    protected init(grid: GridBase, width: number, height: number): void {\n        super.initPopsicle(grid, width, height, PopsicleType.Normal);\n        this.updatePopsicle();\n    }\n\n    public static create(grid: GridBase, width: number, height: number): PopsicleNormal {\n\n        let className = 'PopsicleNormal';\n        let prefabFileName = 'match_scene/prefab/entity/popsicle/PopsicleNormal';\n        let pool = EntityPrefabNodePool.getInstance();\n        let component = pool.getPrefabNodeWithFileNameAndClassName(prefabFileName, className) as PopsicleNormal;\n        if (component) {\n            component.init(grid, width, height);\n            return component;\n        }\n        return null;\n    }\n\n    public clone(): PopsicleNormal {\n        let item = PopsicleNormal.create(this.getGrid(), this.getLogicalSize().width, this.getLogicalSize().height);\n        return item;\n    }\n\n    // LIFE-CYCLE CALLBACKS:\n\n    // onLoad () {}\n\n    start() {\n\n    }\n\n    // update (dt) {}\n}\n","import PopsicleBase, { PopsicleType } from \"./PopsicleBase\";\nimport { EntityID } from \"../../defines/EntityID\";\nimport { CollectionID } from \"../../defines/CollectionID\";\nimport GameMath from \"../../../../extend/utils/GameMath\";\nimport GridBase from \"../../grid/GridBase\";\nimport FlyerPopsicleBomb from \"../flyer/FlyerPopsicleBomb\";\nimport IGame from \"../../../../base/IGame\";\nimport IdentifierManager from \"../../defines/IdentifierManager\";\nimport EntityPrefabNodePool from \"../EntityPrefabNodePool\";\n\n// Learn TypeScript:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/typescript.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/typescript.html\n// Learn Attribute:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html\n\nconst { ccclass, property } = cc._decorator;\n\n@ccclass\nexport default class PopsicleRange extends PopsicleBase {\n\n    private static SizeToEntityInfoMap: Object = {\n        '{1, 1}': {\n            'EntityID': EntityID.PopsicleBoom_1x1,\n            'NeedRotate': false,\n            'ClearPosition': [\n                cc.v2(-1, -1),\n                cc.v2(0, -1),\n                cc.v2(1, -1),\n\n                cc.v2(-1, 0),\n                cc.v2(0, 0),\n                cc.v2(1, 0),\n\n                cc.v2(-1, 1),\n                cc.v2(0, 1),\n                cc.v2(1, 1),\n            ],\n        },\n        '{2, 2}': {\n            'EntityID': EntityID.PopsicleBoom_2x2,\n            'NeedRotate': false,\n            'ClearPosition': [\n                cc.v2(0, 0),\n                cc.v2(1, 0),\n                cc.v2(0, 1),\n                cc.v2(1, 1),\n\n                cc.v2(-1, -1),\n                cc.v2(-1, 0),\n                cc.v2(-1, 1),\n                cc.v2(-1, 2),\n\n                cc.v2(0, 0),\n                cc.v2(1, 2),\n                cc.v2(0, -1),\n                cc.v2(1, -1),\n\n                cc.v2(2, 2),\n                cc.v2(2, 1),\n                cc.v2(2, 0),\n                cc.v2(2, -1),\n            ],\n        },\n    };\n\n    private static getEntityInfoWithSize(size: cc.Size): Object {\n        let key = '{' + size.width + ', ' + size.height + '}';\n        return this.SizeToEntityInfoMap[key];\n    }\n\n    public getCollectionID(): CollectionID {\n        return CollectionID.PopsicleBoom;\n    }\n\n    public getEntityID(): EntityID {\n        let entityInfo = PopsicleRange.getEntityInfoWithSize(this.getLogicalSize());\n        if (entityInfo) {\n            return entityInfo['EntityID'];\n        }\n        return EntityID.None;\n    }\n\n    public getScore(): number {\n        let size = this.getLogicalSize()\n        return 100 * size.width * size.height;\n    }\n\n    protected updatePopsicle(): void {\n        super.updatePuppet();\n\n        let rotation = 0;\n        let entityInfo = PopsicleRange.getEntityInfoWithSize(this.getLogicalSize());\n        if (entityInfo) {\n            let needRotate = entityInfo['NeedRotate'];\n            if (needRotate) {\n                rotation = GameMath.randomInt(0, 100) < 50 ? -90 : 90;\n            }\n        }\n        this._puppet.angle = -rotation;\n    }\n\n    protected _onBePopsicleClean(): void {\n        super._onBePopsicleClean();\n        this.getGrid().gainScoreWithEntity(this);\n        let entityInfo = PopsicleRange.getEntityInfoWithSize(this.getLogicalSize());\n        let bombPositions = entityInfo['ClearPosition'];\n        let bomb = FlyerPopsicleBomb.create(this.getGrid(), this.getEntityColor(), this.getLogicalPos(), false, bombPositions);\n        this.getGrid().setFlyerAtLogicalPos(bomb, this.getLogicalPos());\n\n        bomb.node.position = this.node.position;\n        if (this.getLogicalSize().equals(cc.size(1, 1))) {\n            bomb.node.scale = 0.666;\n        }\n\n        IGame.playAudio(IdentifierManager.getInstance().getMatchAudioFilePath('popsiclesboom'));\n    }\n\n    protected init(grid: GridBase, width: number, height: number): void {\n        super.initPopsicle(grid, width, height, PopsicleType.Range);\n        this.updatePopsicle();\n    }\n\n    public static create(grid: GridBase, width: number, height: number): PopsicleRange {\n\n        let className = 'PopsicleRange';\n        let prefabFileName = 'match_scene/prefab/entity/popsicle/PopsicleRange';\n        let pool = EntityPrefabNodePool.getInstance();\n        let component = pool.getPrefabNodeWithFileNameAndClassName(prefabFileName, className) as PopsicleRange;\n        if (component) {\n            component.init(grid, width, height);\n            return component;\n        }\n        return null;\n    }\n\n    public clone(): PopsicleRange {\n        let item = PopsicleRange.create(this.getGrid(), this.getLogicalSize().width, this.getLogicalSize().height);\n        return item;\n    }\n    // LIFE-CYCLE CALLBACKS:\n\n    // onLoad () {}\n\n    start() {\n\n    }\n\n    // update (dt) {}\n}\n","export enum PowerID {\n    None = 0,\n    // 元素消除产生的能量\n    PuppyVitality           = 10001,   // 小狗活力（可移动步数）\n    HoneyResist             = 10002, // 消除过蜂蜜的数量\n    \n    // 玩家操作造成的能力\n    DyeingItem              = 10101, // 换色器\n    SpreadHoney             = 10102, // 蜂蜜扩展的次数\n    ActivateBomb            = 10103, // 自动激活炸弹\n    ConveyerMove            = 10104, // 传送带移动\n\n    //\n    AvailableSwap           = 10201, // 玩家可用交换\n    UsedSwap                = 10202, // 玩家已用交换\n    PuppyMovedStep          = 10203, // 小狗已经走的步数\n    \n    MatchCombo              = 10301,\n    LaunchGears             = 10302,\n    LaunchResidentGears     = 10303,\n};","import { GameCurrencyType } from \"../../../define/GameCurrencyType\";\nimport IdentifierManager from \"../defines/IdentifierManager\";\nimport UISpriteExt from \"../../../component/UISpriteExt\";\n\n// Learn TypeScript:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/typescript.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/typescript.html\n// Learn Attribute:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class PowerupItem extends cc.Component {\n\n    @property(UISpriteExt)\n    icon:UISpriteExt = null;\n\n    @property(UISpriteExt)\n    frame:UISpriteExt = null;\n\n    @property(cc.Node)\n    unlimitedIcon:cc.Node = null;\n\n    public static create(itemID:GameCurrencyType) : PowerupItem{\n\n        let res = cc.loader.getRes('match_scene/prefab/userInterface/PowerupItem', cc.Prefab);\n        if (res) {\n            let node:cc.Node = cc.instantiate(res);\n            if (node) {\n                let component:PowerupItem = node.getComponent(PowerupItem);\n                if (component) {\n                    component.init(itemID);     \n                    return component; \n                }\n            }\n        }\n        return null;\n    }\n\n    protected init(itemID:GameCurrencyType) {\n        this.setItemID(itemID);\n    }\n\n\n    private _itemID:GameCurrencyType = GameCurrencyType.NoneType;\n    public getItemID() : GameCurrencyType {\n        return this._itemID;\n    }\n    public setItemID(itemID:GameCurrencyType) : void {\n        this._itemID = itemID;\n        let itemInfo = IdentifierManager.getInstance().getItemInfoFromItemID(this._itemID);\n        this.icon.src = itemInfo.frameName;\n        this.unlimitedIcon.active = itemInfo.isUnlimited;\n\n        if (itemInfo.isUnlimited) {\n            this.frame.src = 'texture/start_game/unrelease/start_game_btn_yuan2';\n        }else{\n            this.frame.src = 'texture/start_game/unrelease/start_game_btn_yuan';\n        }\n        \n    } \n\n    // LIFE-CYCLE CALLBACKS:\n    onLoad () {\n        \n    }\n\n    start () {\n\n    }\n    // update (dt) {}\n\n    onDestroy() {\n        \n    }\n}\n","// Learn TypeScript:\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/typescript.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/typescript.html\n// Learn Attribute:\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class RectangleClipper extends cc.Mask {\n\n    private _clipAreas:cc.Rect[] = [];\n    setCropRectangles(arr) {\n        this._clipAreas = arr;\n        this._updateGraphics();\n    }\n    _updateGraphics () {\n        let graphics = (this as any)._graphics as cc.Graphics;\n        if (graphics) {\n            graphics.clear(false);\n            for(var i = 0; i < this._clipAreas.length; i++){\n                var tmpRect = this._clipAreas[i];\n                graphics.rect(tmpRect.x, tmpRect.y, tmpRect.width, tmpRect.height);\n            }\n            if (cc.game.renderType === cc.game.RENDER_TYPE_CANVAS) {\n                graphics.stroke();\n            }\n            else {\n                graphics.fill();\n            }\n        }\n    }\n    // update (dt) {}\n}\n","import EntityBase from \"../EntityBase\";\nimport GridCommand, { GridCommandType } from \"../../commond/GridCommand\";\nimport { EntityCleanOption, EntityChangeOption, EntityCleanType, EntityType, EntityColor } from \"../../defines/EntityID\";\nimport GridBase from \"../../grid/GridBase\";\n\nexport enum RugType {\n    Jam,\n};\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport class RugBase extends EntityBase {\n\n    private _type:RugType = null;\n\n    public removeFromGrid():void{\n        this.getGrid().removeRugAtLogicalPos(this.getLogicalPos());\n    }\n\n    public getType():RugType{\n        return this._type;\n    }\n\n    public canExcuteCommand(command:GridCommand):boolean{\n        switch(command.type){\n            case GridCommandType.BombClean:{\n                return this.canCleanByBomb(command.cleanColor);\n            }\n            break;\n            case GridCommandType.FloorClean:{\n                return this.canBeFloorClean();\n            }\n            break;\n            case GridCommandType.TerminateClean:{\n                return this.canCleanByTerminate(command.cleanColor);\n            }\n            break;\n            default:{\n                break;\n            }\n        }\n        return false;\n    }\n\n    public excuteCommand(command:GridCommand):void{\n        if(!this.canExcuteCommand(command)){\n            return;\n        }\n        switch(command.type){\n            case GridCommandType.BombClean:{\n                this.onClean(new EntityCleanOption(EntityCleanType.Bomb,\n                        command.cleanRoot,\n                        command.cleanColor,\n                        command.createBombType,\n                        command.hitNeighbour,\n                        command.hitFloor,\n                        command.layoutGrass));\n            }\n            break;\n            case GridCommandType.FloorClean:{\n                this.onClean(new EntityCleanOption(EntityCleanType.Floor,\n                    command.cleanRoot,\n                    command.cleanColor,\n                    command.createBombType,\n                    command.hitNeighbour,\n                    command.hitFloor,\n                    command.layoutGrass));\n            }\n            break;\n            case GridCommandType.TerminateClean:{\n                this.onClean(new EntityCleanOption(EntityCleanType.Terminate,\n                    command.cleanRoot,\n                    command.cleanColor,\n                    command.createBombType,\n                    command.hitNeighbour,\n                    command.hitFloor,\n                    command.layoutGrass));\n            }\n            break;\n            default:\n                break;\n        }\n    }\n\n    public canCleanByTerminate(cleanColor:EntityColor) : boolean {\n        return this._canCleanByTerminate(cleanColor);\n    }\n    \n\n    public canCleanByBomb(cleanColor:EntityColor):boolean{\n        if(!this.getImmuneDamage()){\n            return this._canCleanByBomb(cleanColor);\n        }\n        return false;\n    }\n\n    public canBeFloorClean():boolean{\n        if(!this.getImmuneDamage()){\n            return this._canBeFloorClean();\n        }\n        return\n    }\n\n    public onClean(cleanOption:EntityCleanOption):void{\n        this._onClean(cleanOption);\n        this.setImmuneDamage(true);\n    }\n\n    protected _canCleanByTerminate(cleanColor:EntityColor) : boolean {\n        return false;\n    }\n\n    protected _canCleanByBomb(cleanColor:EntityColor):boolean{\n        return false;\n    }\n\n    protected _canBeFloorClean():boolean{\n        return false;\n    }\n\n    protected _onClean(cleanOption:EntityCleanOption):void{\n    }\n\n    protected initRug(grid:GridBase, type:RugType){\n        super.initEntity(grid, EntityType.Rug, 1, 1);\n        this._type = type;\n    }\n}\n","import { EntityID } from \"../../defines/EntityID\";\nimport IdentifierManager from \"../../defines/IdentifierManager\";\nimport { KindID } from \"../../defines/KindID\";\nimport GridBase from \"../../grid/GridBase\";\nimport { RugBase } from \"./RugBase\";\nimport RugJam from \"./RugJam\";\n\n\nexport default class RugFactory {\n\n    public static generatePolishWithEntityID(grid:GridBase, entityID:EntityID) : RugBase {\n        let rug:RugBase = null;\n        switch(entityID){\n            case EntityID.RugJam:{\n                rug = RugJam.create(grid);\n            }\n            break;\n            default:\n                break;\n        }\n        return rug;\n    }\n\n    public static generatePolishWithKindID(grid:GridBase, kindID:KindID) : RugBase {\n        let entityID = IdentifierManager.getInstance().getEntityIDFromKindID(kindID);\n        return this.generatePolishWithEntityID(grid, entityID);\n    }\n}\n","import { RugBase, RugType } from \"./RugBase\";\nimport GridBase from \"../../grid/GridBase\";\nimport { CollectionID } from \"../../defines/CollectionID\";\nimport { EntityID, EntityCleanType, EntityColor, EntityCleanOption } from \"../../defines/EntityID\";\nimport FlyerAnimation from \"../flyer/FlyerAnimation\";\nimport IGame from \"../../../../base/IGame\";\nimport IdentifierManager from \"../../defines/IdentifierManager\";\nimport EntityPrefabNodePool from \"../EntityPrefabNodePool\";\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class RugJam extends RugBase {\n    public static create(grid:GridBase):RugJam{\n\n        let className = 'RugJam';\n        let prefabFileName = 'match_scene/prefab/entity/rug/RugJam';\n        let pool = EntityPrefabNodePool.getInstance();\n        let component = pool.getPrefabNodeWithFileNameAndClassName(prefabFileName, className) as RugJam;\n        if (component) {\n            component.init(grid); \n            return component;       \n        }\n        return null;\n    }\n\n    public clone() : RugJam {\n        let item = RugJam.create(this.getGrid());\n        return item;\n    }\n\n    public getCollectionID():CollectionID{\n        return CollectionID.RugJam\n    }\n\n    public getEntityID():EntityID{\n        return EntityID.RugJam;\n    }\n    public getScore():number{\n        return 100;\n    }\n\n    public getButterflyPriority(color:EntityColor, layoutGrass:boolean):number{\n        if(this.getGrid().isTargetCollectionID(CollectionID.RugJam)){\n            return 1;\n        }\n        return super.getButterflyPriority(color, layoutGrass);\n    }\n\n    protected _canCleanByTerminate(cleanColor:EntityColor) : boolean {\n        return true;\n    }\n\n    public _canCleanByBomb(cleanColor:EntityColor):boolean{\n        return true;\n    }\n\n    public _canBeFloorClean():boolean{\n        return true;\n    }\n\n    public _onClean(cleanOption:EntityCleanOption):void{\n        this.getGrid().gainScoreWithEntity(this);\n        if (!this.isTargetCollection()) {\n            let flyer = FlyerAnimation.createDieAnimation(this.getGrid(), this.getEntityID());\n            this.getGrid().setFlyerAtLogicalPos(flyer, this.getLogicalPos());\n            IGame.playAudio(IdentifierManager.getInstance().getMatchAudioFilePath('jam'));\n        }\n        this.setVisible(false);\n        this.onCollected();\n        this.selfDestory(true);\n    }\n\n    public grow():void{\n        this.playAnimation('grow');\n    }\n\n    protected init(grid:GridBase):void{\n        super.initRug(grid, RugType.Jam);\n    }\n}\n","import GameSceneBase from \"../GameSceneBase\";\nimport GameConfig from \"../../../define/GameConfig\";\n\n// Learn TypeScript:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/typescript.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/typescript.html\n// Learn Attribute:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html\n\nconst { ccclass, property } = cc._decorator;\n\n@ccclass\nexport default class ScoreBar extends cc.Component {\n\n    @property(cc.ProgressBar)\n    progressBar: cc.ProgressBar = null;\n\n    @property(cc.Node)\n    pointer: cc.Node = null;\n\n    @property(cc.Node)\n    pointerHead: cc.Node = null;\n\n    @property(cc.Label)\n    scoreLabel: cc.Label = null;\n\n    @property([cc.Sprite])\n    stars: cc.Sprite[] = [];\n\n    private _currentScore: number = 0;\n    private _score: number = 0;\n    private _completeScore: number = 0;\n    private _gameScene: GameSceneBase = null;\n\n    private _starScores: number[] = [35600, 49100, 60600, 66350];\n\n    private _starProgress: number[] = [0.444444444444444, 0.650793650793651, 0.873015873015873, 1.0];\n    private _rotateStart: number = 103;\n    private _rotateEnd: number = -10;\n    private _lastStarCount: number = 0;\n\n    private _lockScore: boolean = false;\n    public getIsLockScore(): boolean {\n        return this._lockScore;\n    }\n    public setIsLockScore(islock: boolean) {\n        this._lockScore = islock;\n    }\n\n    public getScore(): number {\n        return this._score;\n    }\n    public setScore(score: number) {\n        this._score = Math.min(this._gameScene.getTotalScore(), score);\n    }\n\n    public setCurrentScore(score: number) {\n        if (score > this._score) {\n            score = this._score;\n        }\n        this._currentScore = score;\n\n        this.scoreLabel.string = this._currentScore.toString();\n\n        let startScore = 0\n        let startProgress = 0;\n        let targetScore = 0\n        let targetProgress = 0;\n\n        for (let start of this.stars) {\n            this.setStarState(start, true);\n        }\n\n        for (let index = 0; index < this._starScores.length; index++) {\n            if (this._currentScore <= this._starScores[index]) {\n                targetScore = this._starScores[index];\n                targetProgress = this._starProgress[index];\n                if (index < this.stars.length) {\n                    if (this._currentScore >= targetScore) {\n                        this.setStarState(this.stars[index], false);\n                    } else {\n                        this.setStarState(this.stars[index], true);\n                    }\n                }\n                break;\n            } else {\n                if (index < this.stars.length) {\n                    this.setStarState(this.stars[index], false);\n                }\n                startScore = this._starScores[index];\n                startProgress = this._starProgress[index];\n            }\n        }\n\n        if (targetScore == 0) {\n            targetScore = this._starScores[this._starScores.length - 1]\n            targetProgress = this._starProgress[this._starProgress.length - 1];\n\n            startScore = this._starScores[this._starScores.length - 2]\n            startProgress = this._starProgress[this._starProgress.length - 2];\n        }\n\n        let progress = (this._currentScore - startScore) / (targetScore - startScore);\n        progress = Math.min((targetProgress - startProgress) * progress + startProgress, 1);\n        this.progressBar.progress = progress;\n        this.pointer.angle = -((this._rotateEnd - this._rotateStart) * progress + this._rotateStart);\n    }\n\n    private setStarState(star: cc.Sprite, isGray: boolean) {\n        if (isGray) {\n            star.spriteFrame = cc.loader.getRes(\"match_scene/texture/userInterface/match_star_slot\", cc.SpriteFrame);\n        } else {\n            star.spriteFrame = cc.loader.getRes(\"match_scene/texture/userInterface/match_star_small\", cc.SpriteFrame);\n        }\n    }\n\n    public getCompleteScore(): number {\n        return this._completeScore;\n    }\n\n    public setCompleteScore(score: number) {\n        this._completeScore = score;\n    }\n\n    public updateScore() {\n        if (this._gameScene) {\n\n            let starScores = this._gameScene.getStarScores();\n\n            this._starScores.length = 0;\n            for (let score of starScores) {\n                this._starScores.push(score);\n            }\n\n            while (this._starScores.length < 4) {\n                let rFirstScore = this._starScores[this._starScores.length - 1];\n                let rSecondScore = this._starScores[this._starScores.length - 2];\n                let delta = (rFirstScore - rSecondScore) * 0.5;\n                this._starScores.push(delta + rFirstScore);\n            }\n\n            let score = this._gameScene.getTotalScore();\n            this.setScore(score);\n            this.setCurrentScore(score);\n            let completeScore = this._gameScene.getCompleteScore();\n            this.setCompleteScore(completeScore);\n        }\n    }\n\n    public gainScore(delta: number) {\n        if (!this._lockScore) {\n            this.setScore(this.getScore() + delta)\n        }\n    }\n\n    public getWorldPos() {\n        return this.pointerHead.parent.convertToWorldSpaceAR(this.pointerHead.getPosition());\n    }\n\n    public getWorldPosForStar(index: number) {\n\n        if (index < this.stars.length) {\n            let star = this.stars[index];\n            return star.node.parent.convertToWorldSpaceAR(star.node.getPosition());\n        }\n        return this.node.parent.convertToWorldSpaceAR(this.node.getPosition());\n    }\n    // LIFE-CYCLE CALLBACKS:\n\n    onLoad() {\n        let canvas = cc.find(\"Canvas\");\n        if (canvas) {\n            this._gameScene = canvas.getComponent(GameSceneBase);\n        }\n    }\n\n    start() {\n\n    }\n\n    update(dt) {\n        let delta = this._score - this._currentScore\n        if (delta > 0) {\n            delta = Math.max(Math.floor(delta / 5), 1);\n            this.setCurrentScore(Math.min(this._currentScore + delta, this._score));\n        }\n    }\n}\n","// Learn TypeScript:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/typescript.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/typescript.html\n// Learn Attribute:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class ShinningStar extends cc.Component {\n\n    public static create():ShinningStar{\n        let res = cc.loader.getRes('match_scene/prefab/userInterface/ShinningStar', cc.Prefab);\n        if (res) {\n            let node:cc.Node = cc.instantiate(res);\n            if (node) {\n                let component:ShinningStar = node.getComponent(ShinningStar);\n                if (component) { \n                    return component; \n                }\n            }\n        }\n        return null;\n    }\n\n    public appear():cc.AnimationState{\n        let anim = this.getComponent(cc.Animation);\n        if (anim) {\n            return anim.play('appear');\n        }\n        return null;\n    }\n\n    public fly():cc.AnimationState{\n        let anim = this.getComponent(cc.Animation);\n        if (anim) {\n            return anim.play('fly');\n        }\n        return null;\n    }\n\n\n\n    // LIFE-CYCLE CALLBACKS:\n\n    // onLoad () {}\n\n    start () {\n\n    }\n\n    // update (dt) {}\n}\n","// Learn TypeScript:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/typescript.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/typescript.html\n// Learn Attribute:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html\n\nexport class StarAndScoreFrameData {\n    public starCount:number = 0;\n    public score:number = 0;\n    public highscore:number = 0;\n\n    public static create(starCount:number, score:number, highscore:number):StarAndScoreFrameData{\n        let result = new StarAndScoreFrameData();\n        result.starCount = starCount;\n        result.score = score;\n        result.highscore = highscore;\n        return result;\n    }\n}\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class StarAndScoreFrame extends cc.Component {\n\n    private _starCount:number = 0;\n    private _score:number = 0;\n    private _highscore:number = 0;\n    public getStarCount():number{\n        return this._starCount;\n    }\n    public setStarCount(count:number) {\n        this._starCount = count;\n\n        for (let index = 0; index < this.starsNode.length; index++) {\n            let node = this.starsNode[index];\n            node.active = (index < this._starCount)            \n        }\n    }\n\n    public getScore():number{\n        return this._score;\n    }\n    public setScore(score:number) {\n        this._score = score;\n        this.scoreLabel.string = this._score.toString();\n    }\n\n    public getHighscore():number{\n        return this._highscore;\n    }\n    public setHighscore(highscore:number) {\n        this._highscore = highscore;\n        this.highscoreLabel.string = this._highscore.toString();\n    }\n\n    @property([cc.Node])\n    starsNode:cc.Node[] =[];\n\n    @property(cc.Label)\n    scoreLabel:cc.Label = null;\n\n    @property(cc.Label)\n    highscoreLabel:cc.Label = null;\n\n    public setData(data:StarAndScoreFrameData){\n        this.setStarCount(data.starCount);\n        this.setScore(data.score);\n        this.setHighscore(data.highscore);\n    }\n\n    public appear(){\n        let anim = this.getComponent(cc.Animation);\n        if (anim) {\n            let state = anim.play('appear');\n            if(state){\n                let delay = cc.delayTime(state.duration);\n                let callback = cc.callFunc(()=>{\n                    this.shine();\n                })\n                this.node.runAction(cc.sequence(delay, callback));\n            }\n        }\n    }\n\n    public shine(){\n        let anim = this.getComponent(cc.Animation);\n        if (anim) {\n            anim.play('shine');\n        }\n    }\n    \n    // LIFE-CYCLE CALLBACKS:\n\n    // onLoad () {}\n\n    start () {\n\n    }\n\n    // update (dt) {}\n}\n","import StateBase from \"./StateBase\";\n\n\nexport default class StateMachineBase {\n    protected _owner:Object = null;\n    protected _currentState:StateBase = null;\n    protected _globalState:StateBase = null;\n\n    constructor (owner:Object) {\n        this._owner = owner;\n    }\n\n    public setCurrentState(state:StateBase){\n\n        if (this._currentState === state) {\n            return;\n        }\n\n        if (this._currentState) {\n            this._currentState.exit(this._owner);\n        }\n        this._currentState = state;\n        if (this._currentState) {\n            this._currentState.enter(this._owner);\n        }\n    }\n    public getCurrentState() : StateBase {\n        return this._currentState;\n    }\n    public setGlobalState(state:StateBase){\n\n        if (this._globalState === state) {\n            return;\n        }\n          \n        if (this._globalState) {\n            this._globalState.exit(this._owner);\n        }\n        this._globalState = state;\n        if (this._globalState) {\n            this._globalState.enter(this._owner);\n        }\n    }\n    public getGlobalState() : StateBase {\n        return this._globalState;\n    }\n  \n    public update(delta:number) : void {\n        if (this._currentState) {\n            this._currentState.update(this._owner, delta);\n        }\n\n        if (this._globalState) {\n            this._globalState.update(this._owner, delta);\n        }\n    }\n}\n","import GameSceneBase from \"../GameSceneBase\";\nimport { PowerID } from \"../defines/PowerID\";\n\n// Learn TypeScript:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/typescript.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/typescript.html\n// Learn Attribute:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class StepBar extends cc.Component {\n\n    @property(cc.Label)\n    label: cc.Label = null;\n\n    private _gameScene:GameSceneBase = null;\n    private _amount:number = 0;\n    public getAmount() : number {\n        return this._amount;\n    }\n    public setAmount(amount:number) : void {\n        let oldAmount = this._amount;\n        this._amount = amount;\n\n        if (oldAmount < this._amount) {\n            this.label.node.stopActionByTag(1001);\n            this.label.node.scale = 1.0;\n            let amountAction = cc.sequence(cc.scaleTo(0.1, 1.33).easing(cc.easeIn(2)),\n                                           cc.scaleTo(0.3, 1.0).easing(cc.easeOut(2))\n                                          );\n            amountAction.setTag(1001);\n            this.label.node.runAction(amountAction);\n        }else{\n            this.label.node.scale = 1.0;\n        }\n\n        this.label.string = this._amount.toString();\n        if (this._amount <= 5) {\n            let alertAction = this.label.node.getActionByTag(1);\n            if (!alertAction) {\n                let alertAction = cc.sequence(cc.scaleTo(0.25, 0.90).easing(cc.easeOut(2)),\n                                              cc.scaleTo(0.25, 0.95).easing(cc.easeIn(2)),\n                                              cc.scaleTo(0.25, 1.0).easing(cc.easeOut(2)),\n                                              cc.scaleTo(0.25, 0.95).easing(cc.easeIn(2)),\n                                             ).repeatForever();\n                alertAction.setTag(1);                           \n                this.label.node.runAction(alertAction);\n                this.label.node.color = cc.color(255, 130, 98, 255);\n            }\n        }else{\n            this.label.node.stopActionByTag(1);\n            this.label.node.setScale(1);\n            this.label.node.color = cc.Color.WHITE;\n        }\n    }\n    \n    public getWorldPos() {\n        return this.label.node.parent.convertToWorldSpaceAR(this.label.node.getPosition());\n    }\n    // LIFE-CYCLE CALLBACKS:\n\n    onLoad () {\n        let canvas = cc.find(\"Canvas\");\n        if (canvas) {\n            this._gameScene = canvas.getComponent(GameSceneBase);\n        }\n    }\n\n    start () {\n\n    }\n\n    // update (dt) {}\n\n    onDestroy() {\n        this.label = null;\n        this._gameScene = null;\n    }\n}\n","\n/**\n * Created by chenzd on 2018/7/25.\n * 字符串工具类\n */\nexport class StringUtil{\n    /**\n     * 构造函数\n     */\n    public constructor() {\n    }\n\n    /**\n     * 去掉前后空格\n     * @param str\n     * @returns {string}\n     */\n    public static trimSpace(str:string):string {\n        return str.replace(/^\\s*(.*?)[\\s\\n]*$/g, '$1');\n    }\n\n    //根据字符数来调整文本长度，中文/M/W算两个字符，其他英文算一个，超出部分用...表示（相对粗糙）\n    public static adjustFontByLength(str:string,maxLength:number):string{\n        var temp_str:string;\n        if(this.getStringLength(str) <= maxLength){\n            return str;\n        }else{\n            for(var i=str.length-2;i>1;i--){\n                if(this.getStringLength(str.substring(0,i)) <= (maxLength-1)){\n                    return str.substring(0,i) + \"...\";\n                }\n            }\n        }\n    }\n\n    /**\n     * 按字节数截取字符创\n     * @param str\n     */\n    public static sliceStringByLength(str:string,maxLength:number):string {\n        var strArr = str.split(\"\");\n        var length = 0;\n        var temp=\"\";\n        for (var i = 0; i < str.length; i++) {\n            var s = strArr[i];\n            temp += s;\n            if (this.isChinese(s)) {\n                length += 2;\n            }else {\n                length += 1;\n            }\n            if(length >= maxLength){\n                break;\n            }\n        }\n        return temp;\n    }\n\n    /**\n     * 获取字符串长度，W/H/中文为2\n     * @param str\n     */\n    public static getStringLength(str:string):number {\n        var strArr = str.split(\"\");\n        var length = 0;\n        for (var i = 0; i < strArr.length; i++) {\n            var s = strArr[i];\n            if (this.isChinese(s)) {\n                length += 2;\n            }else if (this.isMW(s)) {\n                length += 2;\n            } else {\n                length += 1;\n            }\n        }\n        return length;\n    }\n\n    /**\n     * 获取字符串长度，中文为2\n     * @param str\n     */\n    public static getStringLength_CH(str:string):number {\n        var strArr = str.split(\"\");\n        var length = 0;\n        for (var i = 0; i < strArr.length; i++) {\n            var s = strArr[i];\n            if (this.isChinese(s)) {\n                length += 2;\n            }else {\n                length += 1;\n            }\n        }\n        return length;\n    }\n\n    /**\n     * 判断一个字符串是否包含中文\n     * @param str\n     * @returns {boolean}\n     */\n    public static isChinese(str:string):boolean {\n        var reg = /^[\\u4E00-\\u9FA5]+$/;\n        if (reg.test(str)) {\n            return true;\n        }\n        return false;\n    }\n\n    public static getClassName(cls:Object){\n        let tmp:string = cls.toString();\n        let re = /function\\s*(\\w*)/ig;\n        var matches = re.exec(tmp); //正则原因只能获取一个，获取多个需循环获取 函数形式 function xxx() \n        // alert(matches[1]);\n        return matches[1];\n    }\n\n    /**\n     * 判断一个字符是否MW\n     * @param str\n     * @returns {boolean}\n     */\n    public static isMW(str:string):boolean {\n        var reg = /^[MW]+$/;\n        if (reg.test(str)) {\n            return true;\n        }\n        return false;\n    }\n    \n    /**\n     * 替换某个位置的字符\n     */ \n    public static replaceByPos(str:string, pos:number ,rep:string) {\n        //越位直接返回原字符串\n        if(pos > str.length){\n            return str;\n        }\n        var retStr = str.substr(0,pos - 1) + rep + str.substring(pos,str.length);\n        return retStr;\n    }\n    \n    /**\n     * 格式化字符串\n     */ \n    public static format(str:string, ...args: any[]):string {\n        var result:string = str;\n        if(args.length < 1) {\n            return result;\n        }\n\n        for(var key in args) {\n            var value = args[key];\n            if(undefined != value) {\n                result = result.replace(\"{\" + key + \"}\",value);\n            }\n        }\n        return result;\n    }\n    \n    public static contain(srcStr: string,subStr: string): boolean {\n        var index: number = srcStr.indexOf(subStr);\n        if(index >= 0) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n\n    /**\n     * 在字符串的前面填充字符char，到长度length结束\n     * @param str\n     * @param length\n     * @param char\n     */\n    public static fill(str:string, length:number, char:string = \"0\"){\n        while(str.length < length){\n            str = char + str;\n        }\n\n        return str;\n    }\n\n    //安全解析json\n    public static saleParseJson(str:string):Object{\n\n        try {\n            let tmpObj = JSON.parse(str);\n            if (typeof tmpObj == \"object\") {\n                return tmpObj;\n            }\n        } catch(e) {\n        }\n\n        return null;\n    }\n}","\nexport default class TMXConfigInfoKeys {\n    // MARK: @层名\n    public static CELLS_LAYER_KEY =     \"Cells\";\n    public static CONVEYERS_LAYER_KEY = \"Conveyers\";\n    public static POPSICLES_LAYER_KEY = \"Popsicles\";\n    public static FLOORS_LAYER_KEY =    \"Floors\";\n    public static JAM_LAYER_KEY =       \"Jam\";\n    public static ITEMS_LAYER_KEY =     \"Items\";\n    public static PARASITES_LAYER_KEY = \"Parasites\";\n    public static MARKS_LAYER_KEY =     \"Marks\";\n\n    // MARK: @动态掉落点配置规则\n    public static CFG_DROP_KEY_IS_TOP =         \"isTop\";\n    public static CFG_DROP_KEY_TYPE =           \"dropType\";\n    public static CFG_DROP_VALUE_TYPE_DEFAULT = \"default\";\n    public static CFG_DROP_VALUE_TYPE_NOT =     \"not\";\n    public static CFG_DROP_VALUE_TYPE_PROB =    \"prob\";\n    public static CFG_DROP_VALUE_TYPE_LIST =    \"list\";\n    public static CFG_DROP_KEY_BOX =            \"dropBox\";\n    public static CFG_DROP_KEY_PROB =           \"dropProb\";\n    public static CFG_DROP_KEY_NUM =            \"dropNum\";\n\n    // MARK: @热气球相关\n    public static CFG_POSTAL_VEC =  \"postal\";\n    public static CFG_NEXT_MAP_ID = \"nextMap\";\n\n    // MARK: @冰棍配置\n    public static CFG_POPSICLE_KEY_TYPE =      \"type\";\n    public static CFG_POPSICLE_VALUE_NORMAL =  \"popsicle\";\n    public static CFG_POPSICLE_VALUE_LINE =    \"popsiclesLine\";\n    public static CFG_POPSICLE_VALUE_BOOM =    \"popsiclesBoom\";\n\n    // MARK: @魔法水晶攻击优先级\n    public static CFG_MATIC_CRYSTAL_ATK_POINT = \"atkPoint\";\n    public static CFG_MATIC_CRYSTAL_OUTPUT =    \"output\";\n    public static CFG_MATIC_CRYSTAL_NUM =       \"num\";\n    public static CFG_MATIC_CRYSTAL_MAX =       \"max\";\n    public static CFG_MATIC_CRYSTAL_STATUS =    \"status\";\n\n    // MARK: @萤火虫瓶子\n    public static CFG_FIREWORM_BOTTLE_MAX =       \"max\";\n\n    // MARK: @西瓜拼盘\n    public static CFG_WATERMELON_MAX =       \"max\";\n\n    // MARK: @传送带\n    public static CFG_CONVEYER_POSTAL_KEY_TYPE =    \"conveyer\";\n    public static CFG_CONVEYER_POSTAL_VALUE_KEY =   \"postal\";\n\n    // MARK: @传送门\n    public static CFG_WORMHOLE_KEY_TYPE =           \"wormholeType\";\n    public static CFG_WORMHOLE_VALUE_NONE =         \"none\";\n    public static CFG_WORMHOLE_VALUE_ENTRANCE =     \"entrance\";\n    public static CFG_WORMHOLE_VALUE_EXIT =         \"exit\";\n    public static CFG_WORMHOLE_POSTAL_KEY_TYPE =    \"postal\";\n\n    // MARK: @传送门标记\n    public static CFG_WORM_HOLE_ENTRANCE_KEY_TYPE =         \"wormHoleEntrance\";\n    public static CFG_WORM_HOLE_ENTRANCE_VALUE_DEFAULT =    \"default\";\n    public static CFG_WORM_HOLE_EXIT_KEY_TYPE =             \"wormHoleExit\";\n    public static CFG_WORM_HOLE_EXIT_VALUE_DEFAULT =        \"default\";\n\n    // MARK: @活动地格\n    public static CFG_MOVABLE_PLATE_PATH_KEY_TYPE =         \"path\";\n    public static CFG_MOVABLE_PLATE_PATH_MOVE_TYPE =        \"move\";\n    public static CFG_MOVABLE_PLATE_PATH_STEP_TYPE =        \"step\";\n    public static CFG_MOVABLE_PLATE_PATH_FIRST_MOVE_TYPE =  \"firstMove\";\n    public static CFG_MOVABLE_PLATE_PATH_FIRST_STEP_TYPE =  \"firstStep\";\n\n    // MARK: @骨头收集点\n    public static CFG_MARK_BONE_COLLECTOR_KEY_TYPE =        \"boneCollectorType\";\n    public static CFG_MARK_BONE_COLLECTOR_VALUE_DEFAULT =   \"default\";\n\n    // MARK: @掉落机\n    public static CFG_DROP_MACHINE_KEY_TYPE =       \"dropMachine\";\n    public static CFG_DROP_MACHINE_VALUE_DEFAULT =  \"default\";\n    public static CFG_DROP_MACHINE_SHOW_KEY_TYPE =  \"show\";\n\n    // MARK: @蜂巢\n    public static CFG_HONEY_COMB_OUTPUT =           \"output\";\n\n    // MARK: @割草机\n    public static CFG_MOWER_CHARGE_TARGET =         \"collection\";\n    public static CFG_MOWER_CHARGE_COUNT =          \"num\";\n    public static CFG_MOWER_CHARGE_PRIORITY =       \"priority\";\n\n    // MARK: @烟花攻击优先级\n    public static CFG_FIREWORK_ATTACKED_PRIORITY = \"atkPointF\";\n\n    // MARK: @火箭攻击优先级\n    public static CFG_MISSILE_ATTACKED_PRIORITY = \"atkPointR\";\n\n    // MARK: @礼物盒\n    public static CFG_GIFT_BOX_MAX =       \"max\";\n     \n}\n","import { CFGTripleMapTileset, CFGTripleMapTilesetObj } from \"../../config/CFGTripleMapTileset\";\nimport GameMath from \"./GameMath\";\n\n/**\n * Created by chenzd on 2018/7/25.\n * 三消地图解析\n */\n\nexport class TMXJsonObjectInfo {\n    public gid: number = 0;\n    public id: number = 0;\n    public nane: string = '';\n    public type: string = '';\n    public rect: cc.Rect = null;\n    public properties: Object = {};\n    public path: cc.Vec2[] = [];\n}\n\nexport default class TMXJsonPhraser {\n\n    private _mapSize: cc.Size = null;\n    private _tileSize: cc.Size = null;\n    private _tileLayers: Object = {};\n    private _objectLayers: Object = {};\n    private _tileProperties: Object = {};\n\n    // private static _nullValueMap:Object = {};\n    // private static _nullObjectLayer:TMXJsonObjectInfo[] = [];\n    // private static _nullTileLayer:number[] = [];\n\n    public static create(data: Object): TMXJsonPhraser {\n        return new TMXJsonPhraser(data);\n    }\n    //字符串解析后的json对象\n\n    public constructor(jsonObject: Object) {\n        this.initMapInfo(jsonObject);\n        this.initLayers(jsonObject);\n        this.initTileProperties(jsonObject);\n    }\n\n    public getMapSize(): cc.Size {\n        return this._mapSize;\n    }\n\n    public getTileSize(): cc.Size {\n        return this._tileSize;\n    }\n\n    public getTileLayerWithName(name: string): number[] {\n        if (this._tileLayers[name]) {\n            return this._tileLayers[name];\n        }\n        return null;\n    }\n\n    public getObjectLayerWithName(name: string): TMXJsonObjectInfo[] {\n        if (this._objectLayers[name]) {\n            return this._objectLayers[name];\n        }\n        return null;\n    }\n\n    public getObjectInfos(name: string, pos: cc.Vec2): TMXJsonObjectInfo[] {\n        let result: TMXJsonObjectInfo[] = [];\n\n        let layer = this.getObjectLayerWithName(name);\n        if (layer) {\n            let cellRect = cc.rect(pos.x * this._tileSize.width + 1,\n                pos.y * this._tileSize.height + 1,\n                this._tileSize.width - 2,\n                this._tileSize.height - 2);\n\n            for (let objectInfo of layer) {\n                if (GameMath.rectIntersectsRect(objectInfo.rect, cellRect)) {\n                    result.push(objectInfo);\n                }\n            }\n        }\n        return result;\n    }\n\n    public getPropertieFromGID(gid: number): Object {\n        if (this._tileProperties[gid]) {\n            return this._tileProperties[gid];\n        }\n        return null;\n    }\n\n    private initMapInfo(jsonObj: Object): void {\n        if (!jsonObj.hasOwnProperty('width') || !jsonObj.hasOwnProperty('height')\n            || !jsonObj.hasOwnProperty('tilewidth') || !jsonObj.hasOwnProperty('tilewidth')) {\n            cc.error(\"initMapInfo error\");\n            return;\n        }\n\n        this._mapSize = cc.size(jsonObj['width'], jsonObj['height']);\n\n        this._tileSize = cc.size(jsonObj['tilewidth'], jsonObj['tilewidth']);\n\n    }\n\n    private initLayers(jsonObj: Object): void {\n        this._tileLayers = {};\n\n        if (!jsonObj.hasOwnProperty('layers')) {\n            cc.error('No Layers');\n            return;\n        }\n        let layers: Object = jsonObj['layers'];\n        for (let key in layers) {\n            let layer: Object = layers[key];\n            let type: string = layer['type'];\n            if (type == 'tilelayer') {\n                let data: number[] = [];\n                let values: number[] = layer['data'];\n                for (let val of values) {\n                    data.push(val);\n                }\n\n                let name: string = layer['name'];\n                this._tileLayers[name] = data;\n            } else if (type == 'objectgroup') {\n                let data: TMXJsonObjectInfo[] = [];\n                let values: Object[] = layer['objects'];\n                for (let key in values) {\n                    let obj: Object = values[key];\n\n                    let info: TMXJsonObjectInfo = new TMXJsonObjectInfo();\n                    info.id = obj['id'];\n                    info.nane = obj['name'];\n                    info.type = obj['type'];\n                    info.rect = cc.rect(obj['x'], obj['y'], obj['width'], obj['height'])\n                    info.gid = 0;\n                    if (obj.hasOwnProperty('gid')) {\n                        info.gid = obj['gid'];\n                        info.rect.y = info.rect.y - info.rect.height;\n                    }\n\n                    if (obj.hasOwnProperty('properties') && obj.hasOwnProperty('propertytypes')) {\n                        let properties: Object = obj['properties'];\n                        // let propertytypes:Object = obj['propertytypes'];\n\n                        for (let key in properties) {\n                            let value = properties[key];\n\n                            info.properties[key] = value;\n                        }\n                    }\n\n                    if (obj.hasOwnProperty('polyline')) {\n                        let origin = info.rect.origin;\n                        let tileSize = this._tileSize;\n                        let offsets: Object[] = obj['polyline'];\n                        for (let key in offsets) {\n                            let offset = offsets[key];\n                            info.path.push(origin.add(cc.v2(offset['x'], offset['y'])));\n                        }\n\n                        // auto origin = info.rect.origin;\n                        // auto tileSize = m_tileSize;\n                        // rapidjson::Document::ConstArray offsets = object[\"polyline\"].GetArray();\n                        // for (const auto& offset : offsets){\n                        //     auto offsetX = offset[\"x\"].GetFloat();\n                        //     auto offsetY = offset[\"y\"].GetFloat();\n                        //     info.path.push_back(origin + Vec2(offsetX, offsetY));\n                        // }\n                    }\n\n                    data.push(info);\n                }\n\n                let name: string = layer['name'];\n                this._objectLayers[name] = data;\n\n                // cc.log(this._objectLayers);\n            }\n        }\n\n    }\n\n    private initTileProperties(genericValue: Object): void {\n        this._tileProperties = {};\n        let tileSets: Object[] = genericValue['tilesets'];\n\n        for (let objItem of tileSets) {\n            let firstGID: number = objItem['firstgid'];\n\n            if (objItem.hasOwnProperty('source')) {\n                let source: string = objItem['source'];\n                let lastSlashIndex: number = source.lastIndexOf('/');\n                let lastDotIndex: number = source.lastIndexOf('.');\n\n                let tilesetName = source;\n                tilesetName = source.substr(lastSlashIndex + 1, lastDotIndex - lastSlashIndex - 1);\n\n                let jsonObj = this.getTilesetJsonString(tilesetName);\n                // //TODO 待优化\n                // let jsonObj = JSON.parse(jsonString);\n                let tileProperties = this.getTileProperties(jsonObj, firstGID);\n\n                for (let key in tileProperties) {\n                    this._tileProperties[key] = tileProperties[key];\n                }\n            } else {\n                let tileCount: number = objItem['tilecount'];\n                if (!objItem.hasOwnProperty('tileproperties')) {\n                    continue;\n                }\n\n                let tileproperties: Object = objItem['tileproperties'];\n                // let tilepropertytypes:Object = objItem['tilepropertytypes'];\n\n                for (let gidIndex: number = 0; gidIndex < tileCount; gidIndex++) {\n                    let key: string = gidIndex.toString();\n                    if (tileproperties.hasOwnProperty(key)) {\n                        let values: Object = tileproperties[key];\n\n                        // for(let key in values){\n\n                        // }\n\n                        this._tileProperties[firstGID + gidIndex] = values;\n                    }\n\n\n                }\n\n\n\n            }\n        }\n    }\n\n    private getTilesetJsonString(key: string): Object {\n        let result: string = '';\n        // let fileName = 'maps/tilesets/' + key;\n        // result = cc.loader.getRes(fileName);\n\n        let tileset: CFGTripleMapTileset = new CFGTripleMapTileset();\n        let tilesetInfo: CFGTripleMapTilesetObj = tileset.getTilesetByName(key);\n        if (tilesetInfo) {\n            result = JSON.parse(tilesetInfo.Properties);\n        }\n\n        return result;\n    }\n\n    private getTileProperties(genericValue: Object, beginGid: number): Object {\n        let tileProperties: Object = {};\n\n        if (genericValue.hasOwnProperty('tileproperties')) {\n            let tileCount: number = 0;\n            if (genericValue.hasOwnProperty('tilecount')) {\n                tileCount = genericValue['tilecount'];\n            }\n\n            let tileproperties: Object = genericValue['tileproperties'];\n            // let tilepropertytypes:Object = genericValue['tilepropertytypes'];\n\n            for (let gidIndex: number = 0; gidIndex < tileCount; gidIndex++) {\n                let keyStr: string = gidIndex.toString();\n                let key: string = keyStr;\n                if (tileproperties.hasOwnProperty(key)) {\n                    let values: Object = tileproperties[key];\n\n                    tileProperties[beginGid + gidIndex] = values;\n\n                }\n            }\n        }\n\n        return tileProperties;\n    }\n\n\n}\n","import CurveToAction from \"../../../extend/action/CurveToAction\";\nimport { CollectionID } from \"../defines/CollectionID\";\nimport GameSceneBase from \"../GameSceneBase\";\nimport TargetItem from \"./TargetItem\";\n\n// Learn TypeScript:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/typescript.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/typescript.html\n// Learn Attribute:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class TargetBanner extends cc.Component {\n\n    @property(cc.Node)\n    maskView:cc.Node = null;\n\n    @property(cc.Label)\n    title:cc.Label = null;\n\n    @property(cc.Node)\n    targetFrame:cc.Node = null;\n\n    private _displayDuraion:number = 0; \n    private _gameScene:GameSceneBase = null;\n    private _targetItems:TargetItem[] = [];\n\n    public static create(level:number, targets:Object) : TargetBanner {\n        let res = cc.loader.getRes('match_scene/prefab/userInterface/TargetBanner', cc.Prefab);\n        if (res) {\n            let node = cc.instantiate(res);\n            if (node) {\n                let component = node.getComponent(TargetBanner) as TargetBanner;\n                if (component) {\n                    component.init(level, targets);\n                }\n                return component;   \n            }\n        }\n    }\n\n    protected init(level:number, targets:Object) : void {\n\n        this.title.string = '第' + level.toString() + '关';;\n        for (const key in targets) {\n            let targetAmount = targets[key]\n            let collectionID = Number(key) as CollectionID;\n            if (collectionID) {\n                let needAmount = targetAmount;\n                let item = TargetItem.create(collectionID);\n                item.setAmount(needAmount, false);\n                this.targetFrame.addChild(item.node);\n                this._targetItems.push(item);\n            }\n        }\n        let canvas = cc.find(\"Canvas\");\n        if (canvas) {\n            this._gameScene = canvas.getComponent(GameSceneBase);\n        }\n    }\n\n    start () {\n        let anim = this.node.getComponent(cc.Animation);\n        anim.play('appear');\n    }\n\n    public didAppear () : void{\n        this._displayDuraion = 1.5;\n        this._gameScene.createGrid();\n        this.maskView.on(\"touchstart\", this.onTouchStart, this);\n    }\n\n    update (dt) {\n        dt = dt * cc.director.getScheduler().getTimeScale();\n        if (this._displayDuraion > 0) {\n            this._displayDuraion -= dt;\n            if (this._displayDuraion <= 0) {\n                this.onDisappear();\n            } \n        }\n    }\n\n    onDestroy() {\n        this.maskView = null;\n        this.title = null;\n        this.targetFrame = null;\n        this._gameScene = null;\n        this._targetItems = null;\n    }\n\n    public didDisappear () : void{\n        this._gameScene.runGame();\n        this.node.destroy();\n    }\n\n    private onTouchStart(evt:cc.Event.EventTouch) {\n        if (this._displayDuraion > 0) {\n            this._displayDuraion = 0;\n            this.onDisappear();\n        }\n    }\n\n    /**\n     * 游戏开始的目标面板退出 目标动画处理\n     */\n    private onDisappear () : void{\n        for (const key in this._targetItems) {\n            let tItem = this._targetItems[key];\n            if(this._gameScene){\n\n                let cItemNode = cc.instantiate(tItem.node);//复制\n                let cItem = cItemNode.getComponent('TargetItem') as TargetItem;\n                cItem.node.parent = this._gameScene.node;\n                cItem.node.zIndex = this.node.zIndex+1;//层级比当前界面高1\n\n                let startWorldPos = tItem.node.parent.convertToWorldSpaceAR(tItem.node.position);\n                let startPos = cItem.node.parent.convertToNodeSpaceAR(startWorldPos);\n                \n                cItem.node.position = startPos;\n                tItem.hideIco();\n                cItem.hideFrame(false);\n                \n                let barItem = this._gameScene.targetBar.getItemWithCollectionID(tItem.getCollectionID());\n                barItem.hideIco();\n\n                let endWorldPos = this._gameScene.getWorldPosForTarget(tItem.getCollectionID());\n                let endPos = cItem.node.parent.convertToNodeSpaceAR(endWorldPos);\n                \n                //飞到顶部栏动画\n                let seqAction = cc.sequence(\n                    \n                    cc.spawn(cc.scaleTo(0.3,1.2,0.8),cc.moveBy(0.3,cc.v2(0,-30))),\n                    cc.spawn(cc.scaleTo(0.2,1,1),CurveToAction.createNotRandom(0.8, cc.v2(startPos.x,startPos.y - 30), endPos)),\n                    cc.sequence(cc.delayTime(0),cc.callFunc(()=>{\n                        barItem.showIco();\n\n                        let anim = barItem.node.getComponent(cc.Animation);\n                        anim.play('bling');//目标动画\n                        \n                        // cItem.node.opacity = 0;\n                        cItem.node.active = false;\n                        cItem.node.destroy();\n                    }))\n                );\n                cItem.node.runAction(seqAction);\n            }\n\n            //面板退出动画\n            this.node.runAction(cc.sequence(cc.delayTime(0.2),cc.callFunc(()=>{\n                let anim = this.node.getComponent(cc.Animation);\n                anim.play('disappear');\n            })));\n            \n        }\n    }\n\n\n}\n","import MatchScene from \"../MatchScene\";\nimport TargetItem from \"./TargetItem\";\nimport { CollectionID } from \"../defines/CollectionID\";\nimport GameSceneBase from \"../GameSceneBase\";\n\n// Learn TypeScript:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/typescript.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/typescript.html\n// Learn Attribute:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class TargetBar extends cc.Component {\n\n    private _gameScene:GameSceneBase = null;\n    private _targetItems:TargetItem[] = [];\n\n    public hideAll(){\n        for (let item of this._targetItems) {\n            item.hideIco();\n        }\n    }\n\n    public setTargetData(data:Object) {\n        for (const key in data) {\n            let needAmount = data[key]\n            let collectionID = Number(key) as CollectionID;\n            if (collectionID) {\n                let item = this.getItemWithCollectionID(collectionID);\n                if (item) {\n                    item.setAmount(needAmount);\n                }\n            }\n        }\n    }\n\n    public clearTargets(){\n        for (let item  of this._targetItems) {\n            item.node.destroy();\n        }\n        this._targetItems.length = 0;\n    }\n\n    public getTargetIconWorldPos(collectionID:CollectionID) :cc.Vec2 {\n        return cc.Vec2.ZERO;\n    }\n\n    public getItemWithCollectionID(collectionID:CollectionID) : TargetItem {\n        let result:TargetItem = null;\n        for (let item of this._targetItems) {\n            if (item.getCollectionID() == collectionID) {\n                result = item;\n                break;\n            }\n        }\n        if(result == null){\n            result = TargetItem.create(collectionID);\n            if (result) {\n                this.node.addChild(result.node);\n                this._targetItems.push(result);\n            }\n        }\n        return result;\n    }\n\n    public getWorldPosWithCollectionID(collectionID:CollectionID) : cc.Vec2 {\n        let item = this.getItemWithCollectionID(collectionID);\n        if (item) {\n            return item.node.parent.convertToWorldSpaceAR(item.node.position);\n        }\n        return cc.Vec2.ZERO;\n    }\n\n    // LIFE-CYCLE CALLBACKS:\n    onLoad () {\n        let canvas = cc.find(\"Canvas\");\n        if (canvas) {\n            this._gameScene = canvas.getComponent(GameSceneBase);\n        }\n    }\n    start () {\n\n    }\n    // update (dt) {}\n    onDestroy() {\n        this._gameScene = null;\n        this._targetItems = null;\n    }\n}\n","import { CollectionID } from \"../defines/CollectionID\";\nimport IdentifierManager from \"../defines/IdentifierManager\";\nimport UISpriteExt from \"../../../component/UISpriteExt\";\n\n// Learn TypeScript:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/typescript.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/typescript.html\n// Learn Attribute:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class TargetItem extends cc.Component {\n\n    @property(cc.Sprite)\n    frame:cc.Sprite = null;\n\n    @property(cc.Sprite)\n    icon:cc.Sprite = null;\n\n    @property(cc.Label)\n    amountLabel:cc.Label = null;\n\n    @property(cc.Node)\n    checkMark:cc.Node = null;\n\n    private _collectionID:CollectionID = CollectionID.None;\n    public getCollectionID() : CollectionID {\n        return this._collectionID;\n    }\n    public setCollectionID(collectionID:CollectionID) : void {\n        this._collectionID = collectionID;\n        let spriteFrameName = IdentifierManager.getInstance().getFrameNameFromCollectionID(this._collectionID);\n\n        let component = this.icon.getComponent(UISpriteExt);\n        if (component) {\n            component.src = spriteFrameName;\n        }\n    } \n\n    private _amount:number = 0;\n    public getAmount() : number {\n        return this._amount;\n    }\n    public setAmount(amount:number, animated:boolean = true) : void {\n        let oldAmount = this._amount;\n        this._amount = amount;\n        this.amountLabel.string = this._amount.toString();\n\n        if (animated && oldAmount != this._amount) {\n\n            let  anim = this.getComponent(cc.Animation); \n            if (anim) {\n                anim.stop();\n                anim.play('bling');\n            }else{\n                this.amountLabel.node.stopActionByTag(1001);\n                this.amountLabel.node.scale = 1.0;\n                let amountAction = cc.sequence(cc.scaleTo(0.1, 1.33).easing(cc.easeIn(2)),\n                                            cc.scaleTo(0.3, 1.0).easing(cc.easeOut(2))\n                                            );\n                amountAction.setTag(1001);\n                this.amountLabel.node.runAction(amountAction);\n\n                this.icon.node.stopActionByTag(1001);\n                this.icon.node.scale = 1.0;\n                let iconAction = cc.sequence(cc.scaleTo(0.1, 1.33).easing(cc.easeIn(2)),\n                                            cc.scaleTo(0.3, 1.0).easing(cc.easeOut(2))\n                                            );\n                iconAction.setTag(1001);\n                this.icon.node.runAction(iconAction);\n            }\n        }else{\n            this.amountLabel.node.scale = 1.0;\n            this.icon.node.scale = 1.0;\n        }\n        \n        this.checkMark.active = (amount <= 0);\n        this.amountLabel.node.active = (amount > 0);\n    }\n\n    /**\n     * 显示框框中间图标数量\n     */\n    public showIco() : void {\n        this.icon.node.opacity = 255;\n        this.checkMark.opacity = 255;\n        this.amountLabel.node.opacity = 255;\n    }\n    /**\n     * 隐藏框框中间图标\n     */\n    public hideIco() : void {\n        this.icon.node.opacity = 0;\n        this.checkMark.opacity = 0;\n        this.amountLabel.node.opacity = 0;\n    }\n\n    /**\n     * 底框数量等显示\n     * @param isAni 是否显示动画\n     */\n    public showFrame(isAni:boolean = true) : void {\n        if(isAni){\n            this.frame.node.opacity = 255;\n            this.frame.node.runAction(cc.scaleTo(0.2, 1));\n            this.checkMark.runAction(cc.sequence(cc.delayTime(0.2),cc.fadeTo(0.1, 255),null));\n            this.amountLabel.node.runAction(cc.sequence(cc.delayTime(0.2),cc.fadeTo(0.1, 255),null));\n        }else{\n            this.frame.node.setScale(1);\n            this.frame.node.opacity = 255;\n            this.checkMark.opacity = 255;\n            this.amountLabel.node.opacity = 255;\n        }\n    }\n    /**\n     * 底框数量等隐藏\n     * @param isAni 是否显示动画\n     */\n    public hideFrame(isAni:boolean = true) : void {\n        if(isAni){\n            let seqAction = cc.sequence(cc.scaleTo(0.2, 0.5),cc.fadeTo(0.1, 0),null);\n            this.frame.node.runAction(seqAction);\n            this.checkMark.runAction(cc.fadeTo(0.1, 0));\n            this.amountLabel.node.runAction(cc.fadeTo(0.1, 0));\n        }else{\n            this.frame.node.opacity = 0;\n            this.checkMark.opacity = 0;\n            this.amountLabel.node.opacity = 0;\n        }\n    }\n    \n    public static create(collectionID:CollectionID, showFarme:boolean = true) : TargetItem{\n\n        let res = cc.loader.getRes('match_scene/prefab/userInterface/TargetItem', cc.Prefab);\n        if (res) {\n            let node:cc.Node = cc.instantiate(res);\n            if (node) {\n                let component:TargetItem = node.getComponent(TargetItem);\n                if (component) {\n                    component.init(collectionID, showFarme);     \n                    return component; \n                }\n            }\n        }\n        return null;\n    }\n\n    protected init(collectionID:CollectionID, showFarme:boolean) {\n\n        this.frame.node.active = showFarme;\n        this.setCollectionID(collectionID);\n        this.setAmount(0);\n    }\n\n    // LIFE-CYCLE CALLBACKS:\n    onLoad () {\n         \n    }\n    start () {\n        \n    }\n    // update (dt) {}\n    onDestroy() {\n        this.frame = null;\n        this.icon = null;\n        this.amountLabel = null;\n        this.checkMark = null;\n    }\n}\n","import AudioManager from \"../extend/audio/AudioManager\";\nimport IGame from \"../base/IGame\";\n\n/**\n * Created by chenzd on 2018/7/16.\n * 按钮属性扩展组件 (点击缩放实现)\n */\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class UIButtonExt extends cc.Component {\n\n    @property(cc.Label)\n    btnText:cc.Label = null; //按钮文本\n\n    @property\n    pressedScale:number = 1.1; //缩放大小\n\n    @property\n    transDuration:number = 0.1; //缩放动画时间\n\n    @property\n    touchSound:boolean = true; //是否有点击声音\n\n    // LIFE-CYCLE CALLBACKS:\n    @property\n    private initScale:number = -1; //原缩放大小\n\n    @property\n    isStopBubbleEvent:boolean = false;\n\n    @property\n    limitTouchTime:number = 1000;  //限制有效点击时间间隔\n\n    //是否处于可点状态\n    public touchEnable:boolean = true;\n\n    //灰化前字体按钮样式\n    private _fontColor:cc.Color = null;\n    private _outLineColor:cc.Color = null;\n\n    private _touchendCallBackFun:Function = null;\n    private _touchTarget:Object = null;\n\n    //限制连续点击时间\n    private _lastTouchedTime:number = 0; //最后一次点击时间\n    string: string;\n\n\n    start(){\n\n    }\n\n    onLoad () {\n\n        if(this.initScale == -1){\n            this.initScale = this.node.scale;\n        }  \n        // this.node.on('touchstart', this.onTouchDown, this);\n        // this.node.on('touchend', this.onTouchUp, this);\n        // this.node.on('touchcancel', this.onTouchUp, this);\n\n        this.setTouchEnable(this.touchEnable);\n    }\n\n    private onTouchDown(event){\n\n        if (!this.touchEnable || !this.enabledInHierarchy) return;\n\n        let scaleDownAction = cc.scaleTo(this.transDuration, this.pressedScale);\n        scaleDownAction.setTag(1001);\n        this.node.stopActionByTag(1001);\n        this.node.runAction(scaleDownAction);\n\n        if(this.isStopBubbleEvent){\n            event.stopPropagation();\n        }\n    }\n    /*\n    addTouchSound(){\n        //IGame.playAudio( \"audio/common/common_button\" );\n        \n        let state:number = AudioManager.getInstance().getSoundEffectStatus();\n        if(state == 1)\n        {\n            AudioManager.getInstance().setSoundEffectStatus(1);\n        }\n        \n    }\n    */\n    private onTouchUp(event){\n\n        if (!this.touchEnable || !this.enabledInHierarchy) return;\n\n        if(this._touchendCallBackFun && this._touchTarget){\n            let canTouch:boolean = false;\n            let curTouchTime:number = new Date().getTime();\n            if(this._lastTouchedTime == 0){\n                canTouch = true;\n                this._lastTouchedTime = curTouchTime;\n            }else{\n                if(Math.abs(this._lastTouchedTime - curTouchTime) > this.limitTouchTime){\n                    canTouch = true;\n                    this._lastTouchedTime = curTouchTime;\n                }\n            }\n\n            if(canTouch){\n                this._touchendCallBackFun.call(this._touchTarget, event);\n            }\n        }\n\n        let scaleUpAction = cc.scaleTo(this.transDuration, this.initScale);\n        scaleUpAction.setTag(1002);\n        this.node.stopActionByTag(1002);\n        this.node.runAction(scaleUpAction);\n\n        if( this.touchSound ){\n            IGame.playAudio( \"audio/common/common_button\" );\n        }\n    }\n\n    private onTouchCancel(event){\n        if (!this.touchEnable || !this.enabledInHierarchy) return;\n\n        let scaleUpAction = cc.scaleTo(this.transDuration, this.initScale);\n        scaleUpAction.setTag(1002);\n        this.node.stopActionByTag(1002);\n        this.node.runAction(scaleUpAction);\n    }\n\n    //设置按钮灰度\n    public setBtnGray(isGray:boolean):void{\n\n        if(isGray){\n            let btnSprite:any = this.node.getComponent(cc.Sprite);\n            if(btnSprite){\n                btnSprite.setState(1);\n            }\n\n            if(this.btnText){\n                if(this._fontColor == null){\n                    this._fontColor = this.btnText.node.color;\n                }\n                \n                this.btnText.node.color = cc.Color.WHITE;\n    \n                //描边颜色\n                let outLine = this.btnText.getComponent(cc.LabelOutline);\n                if(outLine){\n                    if(this._outLineColor == null){\n                        this._outLineColor = outLine.color;\n                    }\n                    \n                    outLine.color = outLine.color.fromHEX(\"#333333\");\n                }\n            }\n        }else{\n            let btnSprite:any = this.node.getComponent(cc.Sprite);\n            if(btnSprite){\n                btnSprite.setState(0);\n            }\n\n            if(this.btnText){\n                if(this._fontColor){\n                    this.btnText.node.color = this._fontColor;\n                }\n                \n                if(this._outLineColor){\n                    //描边颜色\n                    let outLine = this.btnText.getComponent(cc.LabelOutline);\n                    if(outLine){\n                        outLine.color = this._outLineColor;\n                    }\n                }\n            }\n        }\n\n    }\n\n    //设置是否可以点击\n    public setTouchEnable(enable:boolean):void{\n        this.touchEnable = enable;\n        // if(enable){\n        //     this.node.resumeSystemEvents(true);\n        // }else{\n        //     this.node.pauseSystemEvents(true);\n        // }\n\n        if(!this.touchEnable){\n            this.node.targetOff(this);\n        }else{\n            this.node.on('touchstart', this.onTouchDown, this);\n            this.node.on('touchend', this.onTouchUp, this);\n            this.node.on('touchcancel', this.onTouchCancel, this);\n        }\n        \n    }\n\n    //监听点击事件\n    public setTouchCallback(fun:Function, target:Object):void{\n        this._touchendCallBackFun = fun;\n        this._touchTarget = target;\n    }\n\n    public removeTouchCallBack():void{\n        this._touchendCallBackFun = null;\n        this._touchTarget = null;\n    }\n\n    //清除点击时间限制\n    public clearTouchLimitTime():void{\n        this._lastTouchedTime = 0;\n    }\n\n    onDestroy(){\n        this.node.off('touchstart', this.onTouchDown, this);\n        this.node.off('touchend', this.onTouchUp, this);\n        this.node.off('touchcancel', this.onTouchCancel, this);\n        this.removeTouchCallBack();\n    }\n\n}\n","import IdentifyNodeManager from \"../extend/identify/nodeIdentify/IdentifyNodeManager\";\n\n// Learn TypeScript:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/typescript.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/typescript.html\n// Learn Attribute:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class UINodeIdentifier extends cc.Component {\n    @property\n    identifier: string = '';\n\n    private _identifier:string = '';\n    onLoad(){\n        if (this._identifier == '') {\n            this.setIdentifier(this.identifier);    \n        }\n    }\n\n    onDestroy(){\n        this.setIdentifier('');\n    }\n\n    public setIdentifier(identifier:string) {\n        IdentifyNodeManager.getInstance().logout(this._identifier);\n        this._identifier = identifier;\n        IdentifyNodeManager.getInstance().regist(this._identifier, this.node);\n    }\n\n    public getIdentifier() : string {\n        return this._identifier\n    }\n}\n","// Learn TypeScript:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/typescript.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/typescript.html\n// Learn Attribute:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class UISceneBase extends cc.Component {\n\n    \n\n    public getWorldAreas(type:number, data:string) : cc.Rect[] {\n        return [];\n    }\n}\n","const {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class UISpriteExt extends cc.Component {\n\n    private _imageUrl:string = null;\n\n    private _curLoadCount:number = 0; //当前失败重新加载次数\n\n    private _spriteSize:cc.Size = null;\n\n    public setSpriteSize(size:cc.Size){\n        this._spriteSize = size;\n    }\n\n    get src():string{\n        return this._imageUrl;\n    }\n\n    set src(path:string){\n        let spriteCp:cc.Sprite = this.getComponent(cc.Sprite);\n        if(!spriteCp){\n            spriteCp = this.addComponent(cc.Sprite);\n        }\n\n        if(this._imageUrl != path){\n            this.node.active = false;\n        }\n\n        this._imageUrl = path;\n\n        this._curLoadCount += 1;\n\n        cc.loader.loadRes(path, cc.SpriteFrame, (err, spriteFrame) => {\n            if(!err){\n\n                if(!this.isValid){\n                    return;\n                }\n\n                if(spriteFrame && this._imageUrl.indexOf(spriteFrame.name) == -1){\n                    return;\n                }\n\n                spriteCp.spriteFrame = spriteFrame;\n                this.node.active = true;\n\n                if(this._spriteSize){\n                    this.node.setContentSize(this._spriteSize);\n                }\n                \n                \n            }else{\n                //失败重新加载\n                if(this._curLoadCount <= 3){\n                    this.src = this._imageUrl;\n                }\n            }\n        });\n    }\n}\n","/*\r\n * This script is automatically generated by Cocos Creator and is only used for projects compatible with the v2.1.0 ～ 2.2.1 version.\r\n * You do not need to manually add this script in any other project.\r\n * If you don't use cc.Toggle in your project, you can delete this script directly.\r\n * If your project is hosted in VCS such as git, submit this script together.\r\n *\r\n * 此脚本由 Cocos Creator 自动生成，仅用于兼容 v2.1.0 ~ 2.2.1 版本的工程，\r\n * 你无需在任何其它项目中手动添加此脚本。\r\n * 如果你的项目中没用到 Toggle，可直接删除该脚本。\r\n * 如果你的项目有托管于 git 等版本库，请将此脚本一并上传。\r\n */\r\n\r\nif (cc.Toggle) {\r\n    // Whether to trigger 'toggle' and 'checkEvents' events when modifying 'toggle.isChecked' in the code\r\n    // 在代码中修改 'toggle.isChecked' 时是否触发 'toggle' 与 'checkEvents' 事件\r\n    cc.Toggle._triggerEventInScript_isChecked = true;\r\n}\r\n"],"file":"index.js"}