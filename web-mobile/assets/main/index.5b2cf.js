window.__require = function e(t, n, r) {
  function s(o, u) {
    if (!n[o]) {
      if (!t[o]) {
        var b = o.split("/");
        b = b[b.length - 1];
        if (!t[b]) {
          var a = "function" == typeof __require && __require;
          if (!u && a) return a(b, !0);
          if (i) return i(b, !0);
          throw new Error("Cannot find module '" + o + "'");
        }
        o = b;
      }
      var f = n[o] = {
        exports: {}
      };
      t[o][0].call(f.exports, function(e) {
        var n = t[o][1][e];
        return s(n || e);
      }, f, f.exports, e, t, n, r);
    }
    return n[o].exports;
  }
  var i = "function" == typeof __require && __require;
  for (var o = 0; o < r.length; o++) s(r[o]);
  return s;
}({
  AudioManager: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "1ac16pHWR5IiqnHMRYn6oFB", "AudioManager");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.AudioInfo = void 0;
    var AudioInfo = function() {
      function AudioInfo() {
        this.MusicId = -1;
        this.Music = "";
        this.Volume = 0;
        this.Loop = false;
      }
      return AudioInfo;
    }();
    exports.AudioInfo = AudioInfo;
    var AudioManager = function() {
      function AudioManager() {
        this._AudioBGM = null;
        this._AUdioRunTime = {};
        this._AudioBGM = new AudioInfo();
      }
      AudioManager.prototype.play = function(Music, Volume, loop, bgm, succFunc) {
        void 0 === Volume && (Volume = 1);
        void 0 === loop && (loop = false);
        void 0 === bgm && (bgm = false);
        void 0 === succFunc && (succFunc = null);
        var Mid = 0;
        var MusicUrl = cc.loader.getRes(Music);
        if (MusicUrl) {
          Mid = this._playAudio(MusicUrl, Volume, loop, bgm);
          succFunc && succFunc(Mid);
        } else cc.loader.loadRes(Music, function(err, res) {
          if (!err) {
            MusicUrl = cc.loader.getRes(Music);
            Mid = this._playAudio(MusicUrl, Volume, loop, bgm);
            succFunc && succFunc(Mid);
          }
        }.bind(this));
      };
      AudioManager.prototype._playAudio = function(musicUrl, volume, loop, bgm) {
        void 0 === volume && (volume = 1);
        void 0 === loop && (loop = false);
        var Mid = 0;
        if (bgm) {
          this._shopBGM();
          Mid = cc.audioEngine.play(musicUrl, loop, volume);
          this._AudioBGM.MusicId = Mid;
          this._AudioBGM.Volume = volume;
          this._AudioBGM.Music = musicUrl;
          this._AudioBGM.Loop = loop;
        } else {
          if (!this._checkPlay(musicUrl)) return Mid;
          Mid = cc.audioEngine.play(musicUrl, loop, volume);
        }
        return Mid;
      };
      AudioManager.prototype.stopBGM = function() {
        this._shopBGM();
      };
      AudioManager.prototype._shopBGM = function() {
        if (this._AudioBGM.MusicId < 0) return false;
        this.stop(this._AudioBGM.MusicId);
        this._AudioBGM.MusicId = -1;
        this._AudioBGM.Music = "";
        this._AudioBGM.Loop = false;
        this._AudioBGM.Volume = 0;
        return true;
      };
      AudioManager.prototype.resumeBGM = function() {
        if (this._AudioBGM.MusicId < 0) return false;
        cc.audioEngine.resume(this._AudioBGM.MusicId);
      };
      AudioManager.prototype.setLoop = function(MusicId, Loop) {
        cc.audioEngine.setLoop(MusicId, Loop);
        return true;
      };
      AudioManager.prototype.setVolume = function(MusicId, Volume) {
        cc.audioEngine.setVolume(MusicId, Volume);
        return true;
      };
      AudioManager.prototype.stop = function(MusicId) {
        cc.audioEngine.stop(MusicId);
        return true;
      };
      AudioManager.prototype.stopAll = function() {
        cc.audioEngine.stopAll();
        this._AUdioRunTime = {};
        return true;
      };
      AudioManager.prototype._checkPlay = function(Music) {
        if (this._AUdioRunTime[Music] + 100 >= new Date().getTime()) return false;
        this._AUdioRunTime[Music] = new Date().getTime();
        return true;
      };
      AudioManager.getInstance = function() {
        null == this.instance && (this.instance = new AudioManager());
        return this.instance;
      };
      AudioManager.instance = null;
      return AudioManager;
    }();
    exports.default = AudioManager;
    cc._RF.pop();
  }, {} ],
  AvailableSwapInfo: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "7ceb3Iv0qhJ853GvO8jl3WW", "AvailableSwapInfo");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.AvailableSwapBaseValue = void 0;
    var Pair_1 = require("../../../../base/Pair");
    var GameMath_1 = require("../../../../extend/utils/GameMath");
    var AvailableSwapBaseValue;
    (function(AvailableSwapBaseValue) {
      AvailableSwapBaseValue[AvailableSwapBaseValue["None"] = 0] = "None";
      AvailableSwapBaseValue[AvailableSwapBaseValue["MatchColor"] = 2e7] = "MatchColor";
      AvailableSwapBaseValue[AvailableSwapBaseValue["MergerBomb"] = 3e7] = "MergerBomb";
      AvailableSwapBaseValue[AvailableSwapBaseValue["MatchBomb"] = 1e7] = "MatchBomb";
    })(AvailableSwapBaseValue = exports.AvailableSwapBaseValue || (exports.AvailableSwapBaseValue = {}));
    var AvailableSwapInfo = function() {
      function AvailableSwapInfo() {
        this.swapPair = new Pair_1.Pair(GameMath_1.default.INVALID_LOGICAL_POSITION, GameMath_1.default.INVALID_LOGICAL_POSITION);
        this.linkedPositions = [];
        this.value = 0;
      }
      AvailableSwapInfo.create = function() {
        return new AvailableSwapInfo();
      };
      return AvailableSwapInfo;
    }();
    exports.default = AvailableSwapInfo;
    cc._RF.pop();
  }, {
    "../../../../base/Pair": "Pair",
    "../../../../extend/utils/GameMath": "GameMath"
  } ],
  BehaviourDefines: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "462f4mCAYhNl5k1zhuiH9fQ", "BehaviourDefines");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.BehaviourEvent = void 0;
    var BehaviourEvent = function(_super) {
      __extends(BehaviourEvent, _super);
      function BehaviourEvent() {
        var _this = _super.call(this, BehaviourEvent.BehaviourEventName, true) || this;
        _this.behaviourName = "";
        return _this;
      }
      BehaviourEvent.create = function(behaviourName) {
        var event = new BehaviourEvent();
        event.behaviourName = behaviourName;
        return event;
      };
      BehaviourEvent.BehaviourEventName = "BehaviourEventName";
      return BehaviourEvent;
    }(cc.Event.EventCustom);
    exports.BehaviourEvent = BehaviourEvent;
    var BehaviourID = function() {
      function BehaviourID() {}
      BehaviourID.GuideTapAnyWhere = "GuideTapAnyWhere";
      BehaviourID.GuideFinish = "GuideFinish";
      BehaviourID.EnterMainSceneBegin = "EnterMainSceneBegin";
      BehaviourID.EnterMainSceneEnd = "EnterMainSceneEnd";
      BehaviourID.PetHouseOpenBegin = "PetHouseOpenBegin";
      BehaviourID.PetHouseOpenEnd = "PetHouseOpenEnd";
      BehaviourID.PetHouseCloseBegin = "PetHouseCloseBegin";
      BehaviourID.PetHouseCloseEnd = "PetHouseCloseEnd";
      BehaviourID.PrepareGameBegin = "PrepareGameBegin";
      BehaviourID.PrepareGameEnd = "PrepareGameEnd";
      BehaviourID.SelectedBeignLine = "SelectedBeignLine";
      BehaviourID.SelectedBeginRange = "SelectedBeginRange";
      BehaviourID.SelectedBeginRainbow = "SelectedBeginRainbow";
      BehaviourID.StartGameBegin = "StartGameBegin";
      BehaviourID.StartGameEnd = "StartGameEnd";
      BehaviourID.EnterFeedSceneBegin = "EnterFeedSceneBegin";
      BehaviourID.EnterFeedSceneEnd = "EnterFeedSceneEnd";
      BehaviourID.QuitFeedScene = "QuitFeedScene";
      BehaviourID.EnterBathSceneBegin = "EnterBathSceneBegin";
      BehaviourID.EnterBathSceneEnd = "EnterBathSceneEnd";
      BehaviourID.QuitBathScene = "QuitBathScene";
      BehaviourID.EnterSleepSceneBegin = "EnterSleepSceneBegin";
      BehaviourID.EnterSleepSceneEnd = "EnterSleepSceneEnd";
      BehaviourID.QuitSleepScene = "QuitSleepScene";
      BehaviourID.EnterDigGoldSceneBegin = "EnterDigGoldSceneBegin";
      BehaviourID.EnterDigGoldSceneEnd = "EnterDigGoldSceneEnd";
      BehaviourID.DigGoldSelectDogBegin = "DigGoldSelectDogBegin";
      BehaviourID.DigGoldSelectDogEnd = "DigGoldSelectDogEnd";
      BehaviourID.DigGoldBegin = "DigGoldBegin";
      BehaviourID.DigGoldEnd = "DigGoldEnd";
      BehaviourID.DigGoldRewardPanelOpenBegin = "DigGoldRewardPanelOpenBegin";
      BehaviourID.DigGoldRewardPanelOpenEnd = "DigGoldRewardPanelOpenEnd";
      BehaviourID.DigGoldRewardPanelCloseBegin = "DigGoldRewardPanelCloseBegin";
      BehaviourID.DigGoldRewardPanelCloseEnd = "DigGoldRewardPanelCloseEnd";
      BehaviourID.QuitDigGoldScene = "QuitDigGoldScene";
      BehaviourID.UpgradePanelOpenBegin = "UpgradePanelOpenBegin";
      BehaviourID.UpgradePanelOpenEnd = "UpgradePanelOpenEnd";
      BehaviourID.UpgradePanelCloseBegin = "UpgradePanelCloseBegin";
      BehaviourID.UpgradePanelCloseEnd = "UpgradePanelCloseEnd";
      BehaviourID.GameSwapItemsBegin = "GameSwapItemsBegin";
      BehaviourID.GameSwapItemsEnd = "GameSwapItemsEnd";
      BehaviourID.GameUseHammerBegin = "GameUseHammerBegin";
      BehaviourID.GameUseHammerEnd = "GameUseHammerEnd";
      BehaviourID.GameUseBombBegin = "GameUseBombBegin";
      BehaviourID.GameUseBombEnd = "GameUseBombEnd";
      BehaviourID.GameUseSwapBegin = "GameUseSwapBegin";
      BehaviourID.GameUseSwapSelectFirst = "GameUseSwapSelectFirst";
      BehaviourID.GameUseSwapEnd = "GameUseSwapEnd";
      return BehaviourID;
    }();
    exports.default = BehaviourID;
    cc._RF.pop();
  }, {} ],
  CFGTripleLevelGrass: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "dfa6enUDNpGeJL9chjmQBoL", "CFGTripleLevelGrass");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.CFGTripleLevelGrass = void 0;
    var CFGTripleLevelGrass = function() {
      function CFGTripleLevelGrass() {
        this.cfgPath = "CFGTripleLevelGrass";
        this.cfgObj = [];
        var res = cc.loader.getRes("data/" + this.cfgPath, cc.JsonAsset);
        res && (this.cfgObj = res.json);
      }
      CFGTripleLevelGrass.prototype.getCongfigByLevelID = function(levelID) {
        var cfgList = this.cfgObj;
        for (var _i = 0, cfgList_1 = cfgList; _i < cfgList_1.length; _i++) {
          var obj = cfgList_1[_i];
          if (obj["LevelID"] == levelID) return obj;
        }
        return null;
      };
      return CFGTripleLevelGrass;
    }();
    exports.CFGTripleLevelGrass = CFGTripleLevelGrass;
    cc._RF.pop();
  }, {} ],
  CFGTripleLevelOrder: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "acea1gLIq9FupEQr+sWp/YW", "CFGTripleLevelOrder");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.CFGTripleLevelOrder = void 0;
    var CFGTripleLevelOrder = function() {
      function CFGTripleLevelOrder() {
        this.cfgPath = "CFGTripleLevelOrder";
        this.cfgObj = [];
        var res = cc.loader.getRes("data/" + this.cfgPath, cc.JsonAsset);
        res && (this.cfgObj = res.json);
      }
      CFGTripleLevelOrder.prototype.getCongfigByLevelID = function(levelID) {
        var cfgList = this.cfgObj;
        for (var _i = 0, cfgList_1 = cfgList; _i < cfgList_1.length; _i++) {
          var obj = cfgList_1[_i];
          if (obj["LevelID"] == levelID) return obj;
        }
        return null;
      };
      return CFGTripleLevelOrder;
    }();
    exports.CFGTripleLevelOrder = CFGTripleLevelOrder;
    cc._RF.pop();
  }, {} ],
  CFGTripleLevelPath: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "9bfe5BaFHpPOIs33y77oxjM", "CFGTripleLevelPath");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.CFGTripleLevelPath = void 0;
    var CFGTripleLevelPath = function() {
      function CFGTripleLevelPath() {
        this.cfgPath = "CFGTripleLevelPath";
        this.cfgObj = [];
        var res = cc.loader.getRes("data/" + this.cfgPath, cc.JsonAsset);
        res && (this.cfgObj = res.json);
      }
      CFGTripleLevelPath.prototype.getCongfigByLevelID = function(levelID) {
        var cfgList = this.cfgObj;
        for (var _i = 0, cfgList_1 = cfgList; _i < cfgList_1.length; _i++) {
          var obj = cfgList_1[_i];
          if (obj["LevelID"] == levelID) return obj;
        }
        return null;
      };
      return CFGTripleLevelPath;
    }();
    exports.CFGTripleLevelPath = CFGTripleLevelPath;
    cc._RF.pop();
  }, {} ],
  CFGTripleLevelPopsicles: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "db582KmYy5PrLv5P7/jEXmk", "CFGTripleLevelPopsicles");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.CFGTripleLevelPopsicles = void 0;
    var CFGTripleLevelPopsicles = function() {
      function CFGTripleLevelPopsicles() {
        this.cfgPath = "CFGTripleLevelPopsicles";
        this.cfgObj = [];
        var res = cc.loader.getRes("data/" + this.cfgPath, cc.JsonAsset);
        res && (this.cfgObj = res.json);
      }
      CFGTripleLevelPopsicles.prototype.getCongfigByLevelID = function(levelID) {
        var cfgList = this.cfgObj;
        for (var _i = 0, cfgList_1 = cfgList; _i < cfgList_1.length; _i++) {
          var obj = cfgList_1[_i];
          if (obj["LevelID"] == levelID) return obj;
        }
        return null;
      };
      return CFGTripleLevelPopsicles;
    }();
    exports.CFGTripleLevelPopsicles = CFGTripleLevelPopsicles;
    cc._RF.pop();
  }, {} ],
  CFGTripleLevel: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "02ac1Nk+AVKz61fHb+Mf8Fu", "CFGTripleLevel");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.CFGTripleLevel = void 0;
    var CFGTripleLevel = function() {
      function CFGTripleLevel() {
        this.cfgPath = "CFGTripleLevel";
        this.cfgObj = [];
        var res = cc.loader.getRes("data/" + this.cfgPath, cc.JsonAsset);
        res && (this.cfgObj = res.json);
      }
      CFGTripleLevel.getInstance = function() {
        null == this.instance && (this.instance = new CFGTripleLevel());
        return this.instance;
      };
      CFGTripleLevel.prototype.getCongfigByLevelNum = function(levelNum) {
        var cfgList = this.cfgObj;
        for (var _i = 0, cfgList_1 = cfgList; _i < cfgList_1.length; _i++) {
          var obj = cfgList_1[_i];
          if (obj["LevelNum"] == levelNum) return obj;
        }
        return null;
      };
      CFGTripleLevel.instance = null;
      return CFGTripleLevel;
    }();
    exports.CFGTripleLevel = CFGTripleLevel;
    cc._RF.pop();
  }, {} ],
  CFGTripleMapTileset: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "ffb5809hitMeaIbv3b2MTuD", "CFGTripleMapTileset");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.CFGTripleMapTileset = void 0;
    var CFGTripleMapTileset = function() {
      function CFGTripleMapTileset() {
        this.cfgPath = "CFGTripleMapTileset";
        this.cfgObj = [];
        var res = cc.loader.getRes("data/" + this.cfgPath, cc.JsonAsset);
        res && (this.cfgObj = res.json);
      }
      CFGTripleMapTileset.prototype.getTilesetByName = function(tilesetName) {
        for (var _i = 0, _a = this.cfgObj; _i < _a.length; _i++) {
          var obj = _a[_i];
          var tmpObj = obj;
          if (tmpObj.TilesetName == tilesetName) return tmpObj;
        }
        return null;
      };
      return CFGTripleMapTileset;
    }();
    exports.CFGTripleMapTileset = CFGTripleMapTileset;
    cc._RF.pop();
  }, {} ],
  CFGTripleMap: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "5ebe7x3EbROf6zU9r80ItFe", "CFGTripleMap");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.CFGTripleMap = void 0;
    var CFGTripleMap = function() {
      function CFGTripleMap() {
        this.cfgPath = "CFGTripleMap";
      }
      CFGTripleMap.prototype.getMapDataByMapId = function(mapId) {
        var mapStr = "";
        var res = cc.loader.getRes("data/" + this.cfgPath + mapId, cc.JsonAsset);
        if (res) {
          var tmpObj = res.json;
          mapStr = tmpObj.MapData;
        }
        return mapStr;
      };
      return CFGTripleMap;
    }();
    exports.CFGTripleMap = CFGTripleMap;
    cc._RF.pop();
  }, {} ],
  CellBase: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "1e76atfjXRFs6pgsRP71D7m", "CellBase");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.GenerateType = exports.CellType = void 0;
    var GameMath_1 = require("../../../../extend/utils/GameMath");
    var GridCommand_1 = require("../../commond/GridCommand");
    var EntityGroupID_1 = require("../../defines/EntityGroupID");
    var EntityID_1 = require("../../defines/EntityID");
    var IdentifierManager_1 = require("../../defines/IdentifierManager");
    var TMXConfigInfoKeys_1 = require("../../defines/TMXConfigInfoKeys");
    var EntityBase_1 = require("../EntityBase");
    var CellType;
    (function(CellType) {
      CellType[CellType["None"] = 0] = "None";
      CellType[CellType["Normal"] = 1] = "Normal";
      CellType[CellType["Conveyer"] = 2] = "Conveyer";
      CellType[CellType["MovablePlate"] = 3] = "MovablePlate";
    })(CellType = exports.CellType || (exports.CellType = {}));
    var GenerateType;
    (function(GenerateType) {
      GenerateType[GenerateType["None"] = 0] = "None";
      GenerateType[GenerateType["Default"] = 1] = "Default";
      GenerateType[GenerateType["Probabilistic"] = 2] = "Probabilistic";
      GenerateType[GenerateType["List"] = 3] = "List";
    })(GenerateType = exports.GenerateType || (exports.GenerateType = {}));
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var CellBase = function(_super) {
      __extends(CellBase, _super);
      function CellBase() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this._cellType = CellType.None;
        _this._crystalAttackPriority = 999;
        _this._isBoneCollector = false;
        _this._needGrass = false;
        _this._generateType = GenerateType.None;
        _this._generateCount = 0;
        _this._dropEntityMap = {};
        _this._dropList = [];
        _this._dropIndex = 0;
        _this._isWormholeEntrance = false;
        _this._wormholeDestination = cc.Vec2.ZERO;
        _this._isWormholeExit = false;
        _this._wormholeSource = cc.Vec2.ZERO;
        return _this;
      }
      CellBase.prototype.getCellType = function() {
        return this._cellType;
      };
      CellBase.prototype.getCrystalAttackPriority = function() {
        return this._crystalAttackPriority;
      };
      CellBase.prototype.setCrystalAttackPriority = function(priority) {
        this._crystalAttackPriority = priority;
      };
      CellBase.prototype.getIsBoneCollector = function() {
        return this._isBoneCollector;
      };
      CellBase.prototype.setIsBoneCollector = function(isBoneCollector) {
        this._isBoneCollector = isBoneCollector;
      };
      CellBase.prototype.getNeedGrass = function() {
        return this._needGrass;
      };
      CellBase.prototype.setNeedGrass = function(needGrass) {
        this._needGrass = needGrass;
      };
      CellBase.prototype.getGenerateType = function() {
        return this._generateType;
      };
      CellBase.prototype.setGenerateType = function(generateType) {
        this._generateType = generateType;
      };
      CellBase.prototype.getGenerateCount = function() {
        return this._generateCount;
      };
      CellBase.prototype.setGenerateCount = function(generateCount) {
        this._generateCount = generateCount;
      };
      CellBase.prototype.canGenerateItem = function() {
        switch (this._generateType) {
         case GenerateType.Default:
         case GenerateType.Probabilistic:
         case GenerateType.List:
          return true;
        }
        return false;
      };
      CellBase.prototype.nextItemID = function() {
        var result = EntityID_1.EntityID.None;
        switch (this._generateType) {
         case GenerateType.Default:
          result = this.getGrid().getGlobalRandomEntityID();
          break;

         case GenerateType.Probabilistic:
          var grid = this.getGrid();
          result = grid.getRandomEntityID(this._dropEntityMap, grid.getLimitedEntityMap(), grid.getLimitedGroupMap());
          if (this._generateCount > 0) {
            this._generateCount--;
            this._generateCount <= 0 && (this._generateType = GenerateType.Default);
          }
          break;

         case GenerateType.List:
          if (this._dropIndex < this._dropList.length) {
            var name = this._dropList[this._dropIndex];
            var entityID = IdentifierManager_1.default.getInstance().getEntityIDFromString(name);
            if (entityID != EntityID_1.EntityID.None) result = entityID; else {
              var groupID = IdentifierManager_1.default.getInstance().getEntityGroupIDFromString(name);
              if (groupID != EntityGroupID_1.EntityGroupID.None) {
                var globalDropEntityMap = this.getGrid().getDropEntityMap();
                var basicEntityIDs = IdentifierManager_1.default.getInstance().getEntityIDsFromEntityGroupID(EntityGroupID_1.EntityGroupID.ItemNormal);
                var totalProbability = 0;
                for (var _i = 0, basicEntityIDs_1 = basicEntityIDs; _i < basicEntityIDs_1.length; _i++) {
                  var entityID_1 = basicEntityIDs_1[_i];
                  var dropValue = globalDropEntityMap[entityID_1];
                  dropValue && (totalProbability += dropValue);
                }
                var availableEntityIDs = IdentifierManager_1.default.getInstance().getEntityIDsFromEntityGroupID(groupID);
                var randomValue = GameMath_1.default.randomInt(0, totalProbability);
                var sum = 0;
                for (var _a = 0, availableEntityIDs_1 = availableEntityIDs; _a < availableEntityIDs_1.length; _a++) {
                  var entityID_2 = availableEntityIDs_1[_a];
                  var basicEntityID = IdentifierManager_1.default.getInstance().getCorrespondingNormlaEntityID(entityID_2);
                  var dropValue = globalDropEntityMap[basicEntityID];
                  if (dropValue) {
                    sum += dropValue;
                    if (randomValue <= sum) {
                      result = entityID_2;
                      break;
                    }
                  }
                }
              }
            }
            if (result != EntityID_1.EntityID.None) {
              this._dropIndex = (this._dropIndex + 1) % this._dropList.length;
              if (this._generateCount > 0) {
                this._generateCount--;
                this._generateCount <= 0 && (this._generateType = GenerateType.Default);
              }
            }
          }
        }
        return result;
      };
      CellBase.prototype.getDropEntityMap = function() {
        return this._dropEntityMap;
      };
      CellBase.prototype.setDropEntityMap = function(dropEntityMap) {
        this._dropEntityMap = dropEntityMap;
      };
      CellBase.prototype.getDropList = function() {
        return this._dropList;
      };
      CellBase.prototype.setDropList = function(dropList) {
        this._dropList = dropList;
      };
      CellBase.prototype.getDropIndex = function() {
        return this._dropIndex;
      };
      CellBase.prototype.setDropIndex = function(dropIndex) {
        this._dropIndex = dropIndex;
      };
      CellBase.prototype.getIsWormholeEntrance = function() {
        return this._isWormholeEntrance;
      };
      CellBase.prototype.setIsWormholeEntrance = function(isWormholeEntrance) {
        this._isWormholeEntrance = isWormholeEntrance;
      };
      CellBase.prototype.getWormholeDestination = function() {
        return this._wormholeDestination;
      };
      CellBase.prototype.setWormholeDestination = function(wormholeDestination) {
        this._wormholeDestination = wormholeDestination;
      };
      CellBase.prototype.getIsWormholeExit = function() {
        return this._isWormholeExit;
      };
      CellBase.prototype.setIsWormholeExit = function(isWormholeExit) {
        this._isWormholeExit = isWormholeExit;
      };
      CellBase.prototype.getWormholeSource = function() {
        return this._wormholeSource;
      };
      CellBase.prototype.setWormholeSource = function(wormholeSource) {
        this._wormholeSource = wormholeSource;
      };
      CellBase.prototype.canHoldItem = function() {
        return true;
      };
      CellBase.prototype.canPassThrough = function() {
        return false;
      };
      CellBase.prototype.initDropEntityMap = function(keys, values) {
        this._dropEntityMap = {};
        var valuePair = IdentifierManager_1.default.getInstance().phraseKeyValuePairs(keys, values);
        for (var name in valuePair) {
          var value = Number(valuePair[name]);
          var entityID = IdentifierManager_1.default.getInstance().getEntityIDFromString(name);
          entityID != EntityID_1.EntityID.None && (this._dropEntityMap[entityID] = 100 * value);
        }
        var globalDropEntityMap = this.getGrid().getDropEntityMap();
        var basicColorEntityIDs = IdentifierManager_1.default.getInstance().getEntityIDsFromEntityGroupID(EntityGroupID_1.EntityGroupID.ItemNormal);
        var totalProbability = 0;
        for (var _i = 0, basicColorEntityIDs_1 = basicColorEntityIDs; _i < basicColorEntityIDs_1.length; _i++) {
          var entityID = basicColorEntityIDs_1[_i];
          var value = globalDropEntityMap[entityID];
          value && (totalProbability += value);
        }
        for (var name in valuePair) {
          var value = 100 * Number(valuePair[name]);
          var groupID = IdentifierManager_1.default.getInstance().getEntityGroupIDFromString(name);
          if (groupID != EntityGroupID_1.EntityGroupID.None) {
            var entityIDs = IdentifierManager_1.default.getInstance().getEntityIDsFromEntityGroupID(groupID);
            for (var _a = 0, entityIDs_1 = entityIDs; _a < entityIDs_1.length; _a++) {
              var entityID = entityIDs_1[_a];
              var basicEntityID = IdentifierManager_1.default.getInstance().getCorrespondingNormlaEntityID(entityID);
              var globalValue = globalDropEntityMap[basicEntityID];
              globalValue && (this._dropEntityMap[entityID] = value * (globalValue / totalProbability));
            }
          }
        }
      };
      CellBase.prototype.dealWithConfigMap = function(config) {
        _super.prototype.dealWithConfigMap.call(this, config);
        var crystalAttackPriority = config[TMXConfigInfoKeys_1.default.CFG_MATIC_CRYSTAL_ATK_POINT];
        crystalAttackPriority && this.setCrystalAttackPriority(Number(crystalAttackPriority));
        var dropTypeString = config[TMXConfigInfoKeys_1.default.CFG_DROP_KEY_TYPE];
        if (dropTypeString) {
          if (dropTypeString == TMXConfigInfoKeys_1.default.CFG_DROP_VALUE_TYPE_DEFAULT) this._generateType = GenerateType.Default; else if (dropTypeString == TMXConfigInfoKeys_1.default.CFG_DROP_VALUE_TYPE_NOT) this._generateType = GenerateType.None; else if (dropTypeString == TMXConfigInfoKeys_1.default.CFG_DROP_VALUE_TYPE_PROB) {
            this._generateType = GenerateType.Probabilistic;
            var types = config[TMXConfigInfoKeys_1.default.CFG_DROP_KEY_BOX];
            var values = config[TMXConfigInfoKeys_1.default.CFG_DROP_KEY_PROB];
            types && values && this.initDropEntityMap(types, values);
            var generateCount = config[TMXConfigInfoKeys_1.default.CFG_DROP_KEY_NUM];
            generateCount && (this._generateCount = Number(generateCount));
            GameMath_1.default.isEmptyObject(this._dropEntityMap) && (this._generateType = GenerateType.Default);
          } else if (dropTypeString == TMXConfigInfoKeys_1.default.CFG_DROP_VALUE_TYPE_LIST) {
            this._generateType = GenerateType.List;
            this._dropIndex = 0;
            GameMath_1.default.clearArray(this._dropList);
            var typesString = config[TMXConfigInfoKeys_1.default.CFG_DROP_KEY_BOX];
            if (typesString) {
              var types = IdentifierManager_1.default.getInstance().phraseTokens(typesString);
              for (var _i = 0, types_1 = types; _i < types_1.length; _i++) {
                var typeName = types_1[_i];
                var entityID = IdentifierManager_1.default.getInstance().getEntityIDFromString(typeName);
                if (entityID != EntityID_1.EntityID.None) this._dropList.push(typeName); else {
                  var groupID = IdentifierManager_1.default.getInstance().getEntityGroupIDFromString(typeName);
                  groupID != EntityGroupID_1.EntityGroupID.None && this._dropList.push(typeName);
                }
              }
              GameMath_1.default.isEmptyObject(this._dropList) && (this._generateType = GenerateType.Default);
              var generateCount = config[TMXConfigInfoKeys_1.default.CFG_DROP_KEY_NUM];
              generateCount && (this._generateCount = Number(generateCount));
            }
          }
        } else {
          var isTop = config[TMXConfigInfoKeys_1.default.CFG_DROP_KEY_IS_TOP];
          isTop && (this._generateType = GenerateType.Default);
        }
        var isBoneCollectorString = config[TMXConfigInfoKeys_1.default.CFG_MARK_BONE_COLLECTOR_KEY_TYPE];
        isBoneCollectorString && isBoneCollectorString == TMXConfigInfoKeys_1.default.CFG_MARK_BONE_COLLECTOR_VALUE_DEFAULT && this.setIsBoneCollector(true);
        var wormHoleString = config[TMXConfigInfoKeys_1.default.CFG_WORMHOLE_KEY_TYPE];
        if (wormHoleString) if (wormHoleString == TMXConfigInfoKeys_1.default.CFG_WORMHOLE_VALUE_ENTRANCE) {
          var postalString = config[TMXConfigInfoKeys_1.default.CFG_WORMHOLE_POSTAL_KEY_TYPE];
          if (postalString) {
            var postalPos = GameMath_1.default.getVec2FromConfigString(postalString);
            if (postalPos) {
              this.setWormholeDestination(postalPos);
              this.setIsWormholeEntrance(true);
            }
          }
        } else if (wormHoleString == TMXConfigInfoKeys_1.default.CFG_WORMHOLE_VALUE_EXIT) {
          var postalString = config[TMXConfigInfoKeys_1.default.CFG_WORMHOLE_POSTAL_KEY_TYPE];
          if (postalString) {
            var postalPos = GameMath_1.default.getVec2FromConfigString(postalString);
            if (postalPos) {
              this.setWormholeSource(postalPos);
              this.setIsWormholeExit(true);
              this.setGenerateType(GenerateType.None);
            }
          }
        } else if (wormHoleString == TMXConfigInfoKeys_1.default.CFG_WORMHOLE_VALUE_NONE) {
          this.setIsWormholeEntrance(false);
          this.setWormholeDestination(GameMath_1.default.INVALID_LOGICAL_POSITION);
          this.setIsWormholeExit(false);
          this.setWormholeSource(GameMath_1.default.INVALID_LOGICAL_POSITION);
        }
      };
      CellBase.prototype.onConvey = function() {
        return GameMath_1.default.INVALID_LOGICAL_POSITION;
      };
      CellBase.prototype.canExcuteCommand = function(command) {
        switch (command.type) {
         case GridCommand_1.GridCommandType.LayoutGrass:
          return this.canLayoutGrass();

         case GridCommand_1.GridCommandType.BombClean:
          return this.canCleanByBomb(command.cleanColor);
        }
        return false;
      };
      CellBase.prototype.excuteCommand = function(command) {
        if (!this.canExcuteCommand(command)) return;
        switch (command.type) {
         case GridCommand_1.GridCommandType.LayoutGrass:
          var cleanOption = EntityID_1.EntityCleanOption.create(EntityID_1.EntityCleanType.LayoutGrass, command.cleanRoot, command.cleanColor, command.createBombType, command.hitNeighbour, command.hitFloor, command.layoutGrass);
          this.onClean(cleanOption);
        }
      };
      CellBase.prototype.onClean = function(cleanOption) {
        this._onClean(cleanOption);
        this.setImmuneDamage(true);
      };
      CellBase.prototype._onClean = function(cleanOption) {};
      CellBase.prototype.canCleanByBomb = function(cleanColor) {
        if (!this.getImmuneDamage()) return this._canCleanByBomb(cleanColor);
        return false;
      };
      CellBase.prototype._canCleanByBomb = function(cleanColor) {
        return false;
      };
      CellBase.prototype.canLayoutGrass = function() {
        if (!this.getImmuneDamage()) return this._canLayoutGrass();
        return false;
      };
      CellBase.prototype._canLayoutGrass = function() {
        return false;
      };
      CellBase.prototype.initCell = function(grid, cellType) {
        _super.prototype.initEntity.call(this, grid, EntityID_1.EntityType.Cell);
        this._cellType = cellType;
        this._crystalAttackPriority = 999;
        this._isBoneCollector = false;
        this._needGrass = false;
        this._generateType = GenerateType.None;
        this._generateCount = 0;
        this._dropEntityMap = {};
        this._dropList.length = 0;
        this._dropIndex = 0;
        this._isWormholeEntrance = false;
        this._wormholeDestination = cc.Vec2.ZERO;
        this._isWormholeExit = false;
        this._wormholeSource = cc.Vec2.ZERO;
      };
      CellBase.prototype.start = function() {};
      CellBase.prototype.onDestroy = function() {
        _super.prototype.onDestroy.call(this);
        this._dropEntityMap = null;
        this._dropList = null;
        this._wormholeDestination = null;
        this._wormholeSource = null;
      };
      CellBase = __decorate([ ccclass ], CellBase);
      return CellBase;
    }(EntityBase_1.default);
    exports.default = CellBase;
    cc._RF.pop();
  }, {
    "../../../../extend/utils/GameMath": "GameMath",
    "../../commond/GridCommand": "GridCommand",
    "../../defines/EntityGroupID": "EntityGroupID",
    "../../defines/EntityID": "EntityID",
    "../../defines/IdentifierManager": "IdentifierManager",
    "../../defines/TMXConfigInfoKeys": "TMXConfigInfoKeys",
    "../EntityBase": "EntityBase"
  } ],
  CellConveyer: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "32e20Y7o/VAb6JnIIAsEY5X", "CellConveyer");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.CellConveyerDirection = void 0;
    var GameMath_1 = require("../../../../extend/utils/GameMath");
    var CollectionID_1 = require("../../defines/CollectionID");
    var EntityID_1 = require("../../defines/EntityID");
    var TMXConfigInfoKeys_1 = require("../../defines/TMXConfigInfoKeys");
    var EntityPrefabNodePool_1 = require("../EntityPrefabNodePool");
    var CellBase_1 = require("./CellBase");
    var CellNormal_1 = require("./CellNormal");
    var CellConveyerDirection;
    (function(CellConveyerDirection) {
      CellConveyerDirection[CellConveyerDirection["None"] = 0] = "None";
      CellConveyerDirection[CellConveyerDirection["Left"] = 1] = "Left";
      CellConveyerDirection[CellConveyerDirection["Right"] = 2] = "Right";
      CellConveyerDirection[CellConveyerDirection["Up"] = 3] = "Up";
      CellConveyerDirection[CellConveyerDirection["Down"] = 4] = "Down";
    })(CellConveyerDirection = exports.CellConveyerDirection || (exports.CellConveyerDirection = {}));
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var CellConveyer = function(_super) {
      __extends(CellConveyer, _super);
      function CellConveyer() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this._inDirection = CellConveyerDirection.None;
        _this._outDirection = CellConveyerDirection.None;
        _this._postalPos = GameMath_1.default.INVALID_LOGICAL_POSITION.clone();
        return _this;
      }
      CellConveyer.prototype.getCollectionID = function() {
        return CollectionID_1.CollectionID.CellConveyer;
      };
      CellConveyer.prototype.getEntityID = function() {
        var result = EntityID_1.EntityID.None;
        switch (this._inDirection) {
         case CellConveyerDirection.Left:
          switch (this._outDirection) {
           case CellConveyerDirection.Right:
            result = EntityID_1.EntityID.CellConveyerL2R;
            break;

           case CellConveyerDirection.Up:
            result = EntityID_1.EntityID.CellConveyerL2U;
            break;

           case CellConveyerDirection.Down:
            result = EntityID_1.EntityID.CellConveyerL2D;
          }
          break;

         case CellConveyerDirection.Right:
          switch (this._outDirection) {
           case CellConveyerDirection.Left:
            result = EntityID_1.EntityID.CellConveyerR2L;
            break;

           case CellConveyerDirection.Up:
            result = EntityID_1.EntityID.CellConveyerR2U;
            break;

           case CellConveyerDirection.Down:
            result = EntityID_1.EntityID.CellConveyerR2D;
          }
          break;

         case CellConveyerDirection.Up:
          switch (this._outDirection) {
           case CellConveyerDirection.Left:
            result = EntityID_1.EntityID.CellConveyerU2L;
            break;

           case CellConveyerDirection.Right:
            result = EntityID_1.EntityID.CellConveyerU2R;
            break;

           case CellConveyerDirection.Down:
            result = EntityID_1.EntityID.CellConveyerU2D;
          }
          break;

         case CellConveyerDirection.Down:
          switch (this._outDirection) {
           case CellConveyerDirection.Left:
            result = EntityID_1.EntityID.CellConveyerD2L;
            break;

           case CellConveyerDirection.Right:
            result = EntityID_1.EntityID.CellConveyerD2R;
            break;

           case CellConveyerDirection.Up:
            result = EntityID_1.EntityID.CellConveyerD2U;
          }
        }
        return result;
      };
      CellConveyer.prototype.getInDirection = function() {
        return this._inDirection;
      };
      CellConveyer.prototype.setInDirection = function(direction) {
        this._inDirection = direction;
      };
      CellConveyer.prototype.getOutDirection = function() {
        return this._outDirection;
      };
      CellConveyer.prototype.setOutDirection = function(direction) {
        this._outDirection = direction;
      };
      CellConveyer.prototype.getPostalPos = function() {
        return this._postalPos;
      };
      CellConveyer.prototype.setPostalPos = function(postal) {
        this._postalPos = postal;
      };
      CellConveyer.prototype.dealWithConfigMap = function(configMap) {
        _super.prototype.dealWithConfigMap.call(this, configMap);
        var conveyerString = configMap[TMXConfigInfoKeys_1.default.CFG_CONVEYER_POSTAL_KEY_TYPE];
        if (conveyerString) {
          var postalString = configMap[TMXConfigInfoKeys_1.default.CFG_CONVEYER_POSTAL_VALUE_KEY];
          postalString && (this._postalPos = GameMath_1.default.getVec2FromConfigString(postalString));
        }
      };
      CellConveyer.prototype.getInLogicalPos = function() {
        var result = this.getLogicalPos();
        if (!this._postalPos.equals(GameMath_1.default.INVALID_LOGICAL_POSITION)) {
          var cell = this.getGrid().getCellAtLogicalPos(this._postalPos);
          if (cell && cell.getCellType() == CellBase_1.CellType.Conveyer) {
            var conveyer = cell;
            switch (conveyer.getInDirection()) {
             case CellConveyerDirection.Left:
              result = this._postalPos.add(cc.v2(-1, 0));
              break;

             case CellConveyerDirection.Right:
              result = this._postalPos.add(cc.v2(1, 0));
              break;

             case CellConveyerDirection.Up:
              result = this._postalPos.add(cc.v2(0, 1));
              break;

             case CellConveyerDirection.Down:
              result = this._postalPos.add(cc.v2(0, -1));
            }
          }
        }
        return result;
      };
      CellConveyer.prototype.getOutLogicalPos = function() {
        var result = this.getLogicalPos().clone();
        if (this._postalPos.equals(GameMath_1.default.INVALID_LOGICAL_POSITION)) switch (this._outDirection) {
         case CellConveyerDirection.Left:
          result.addSelf(cc.v2(-1, 0));
          break;

         case CellConveyerDirection.Right:
          result.addSelf(cc.v2(1, 0));
          break;

         case CellConveyerDirection.Up:
          result.addSelf(cc.v2(0, 1));
          break;

         case CellConveyerDirection.Down:
          result.addSelf(cc.v2(0, -1));
        } else result = this._postalPos;
        return result;
      };
      CellConveyer.prototype.getDoppelgangerInLogicalPos = function() {
        return this.getLogicalPos();
      };
      CellConveyer.prototype.getDoppelgangerOutLogicalPos = function() {
        var result = this.getLogicalPos().clone();
        switch (this._outDirection) {
         case CellConveyerDirection.Left:
          result.addSelf(cc.v2(-1, 0));
          break;

         case CellConveyerDirection.Right:
          result.addSelf(cc.v2(1, 0));
          break;

         case CellConveyerDirection.Up:
          result.addSelf(cc.v2(0, 1));
          break;

         case CellConveyerDirection.Down:
          result.addSelf(cc.v2(0, -1));
        }
        return result;
      };
      CellConveyer.prototype.conveyerEntity = function(type, inPos, outPos) {
        var grid = this.getGrid();
        var logicalPos = this.getLogicalPos();
        var entity = grid.getEntity(type, logicalPos);
        if (entity) {
          entity.removeFromGrid();
          var layer = grid.getConveyerLayer();
          layer.addChild(entity.node);
          entity.node.setPosition(entity.getPixelPos(inPos));
          grid.addObstructs(entity);
          var targetPos = entity.getPixelPos(outPos);
          var action = cc.sequence(cc.moveTo(.4, targetPos), cc.callFunc(function() {
            grid.setEntity(entity, outPos);
            grid.removeObstructs(entity);
          }));
          entity.runAction(action);
        }
      };
      CellConveyer.prototype.conveyerDoppelganger = function(type, inPos, outPos) {
        var grid = this.getGrid();
        var logicalPos = this.getLogicalPos();
        var entity = grid.getEntity(type, logicalPos);
        if (entity) {
          var doppelganger_1 = entity.clone();
          if (doppelganger_1) {
            var layer = grid.getConveyerLayer();
            layer.addChild(doppelganger_1.node);
            doppelganger_1.node.setPosition(entity.getPixelPos(inPos));
            doppelganger_1.node.zIndex = entity.getTopZOrder();
            var targetPos = entity.getPixelPos(outPos);
            var action = cc.sequence(cc.moveTo(.4, targetPos), cc.callFunc(function() {
              doppelganger_1.node.destroy();
            }));
            doppelganger_1.runAction(action);
          }
        }
      };
      CellConveyer.prototype.onConvey = function() {
        var conveyerTypes = [ EntityID_1.EntityType.Popsicle, EntityID_1.EntityType.Floor, EntityID_1.EntityType.Rug, EntityID_1.EntityType.Item, EntityID_1.EntityType.Parasite ];
        var inPos = this.getInLogicalPos();
        var outPos = this.getOutLogicalPos();
        var doppelgangerInPos = this.getDoppelgangerInLogicalPos();
        var doppelgangerOutPos = this.getDoppelgangerOutLogicalPos();
        var needDoppelganger = false;
        this.getPostalPos().equals(GameMath_1.default.INVALID_LOGICAL_POSITION) || (needDoppelganger = true);
        for (var _i = 0, conveyerTypes_1 = conveyerTypes; _i < conveyerTypes_1.length; _i++) {
          var type = conveyerTypes_1[_i];
          needDoppelganger && this.conveyerDoppelganger(type, doppelgangerInPos, doppelgangerOutPos);
          this.conveyerEntity(type, inPos, outPos);
        }
        return outPos;
      };
      CellConveyer.prototype.initConveyer = function(grid, inDirection, outDirection) {
        _super.prototype.initCell.call(this, grid, CellBase_1.CellType.Conveyer);
        this._inDirection = inDirection;
        this._outDirection = outDirection;
        this._postalPos = GameMath_1.default.INVALID_LOGICAL_POSITION.clone();
        this.updatePuppet();
      };
      CellConveyer.createConveyer = function(grid, inDirection, outDirection) {
        var className = "CellConveyer";
        var prefabFileName = "match_scene/prefab/entity/cell/CellConveyer";
        var pool = EntityPrefabNodePool_1.default.getInstance();
        var component = pool.getPrefabNodeWithFileNameAndClassName(prefabFileName, className);
        if (component) {
          component.initConveyer(grid, inDirection, outDirection);
          return component;
        }
        return null;
      };
      CellConveyer.prototype.start = function() {};
      CellConveyer.prototype.onDestroy = function() {
        _super.prototype.onDestroy.call(this);
        this._postalPos = null;
      };
      CellConveyer = __decorate([ ccclass ], CellConveyer);
      return CellConveyer;
    }(CellNormal_1.default);
    exports.default = CellConveyer;
    cc._RF.pop();
  }, {
    "../../../../extend/utils/GameMath": "GameMath",
    "../../defines/CollectionID": "CollectionID",
    "../../defines/EntityID": "EntityID",
    "../../defines/TMXConfigInfoKeys": "TMXConfigInfoKeys",
    "../EntityPrefabNodePool": "EntityPrefabNodePool",
    "./CellBase": "CellBase",
    "./CellNormal": "CellNormal"
  } ],
  CellFactory: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "02f08L1m3FM44141aqW7gzu", "CellFactory");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var EntityID_1 = require("../../defines/EntityID");
    var IdentifierManager_1 = require("../../defines/IdentifierManager");
    var CellNormal_1 = require("./CellNormal");
    var CellConveyer_1 = require("./CellConveyer");
    var CellMovablePlate_1 = require("./CellMovablePlate");
    var CellFactory = function() {
      function CellFactory() {}
      CellFactory.generateCellWithEntityID = function(grid, entityID) {
        var cell = null;
        switch (entityID) {
         case EntityID_1.EntityID.CellNormal:
          cell = CellNormal_1.default.create(grid);
          break;

         case EntityID_1.EntityID.CellConveyerL2R:
          cell = CellConveyer_1.default.createConveyer(grid, CellConveyer_1.CellConveyerDirection.Left, CellConveyer_1.CellConveyerDirection.Right);
          break;

         case EntityID_1.EntityID.CellConveyerL2U:
          cell = CellConveyer_1.default.createConveyer(grid, CellConveyer_1.CellConveyerDirection.Left, CellConveyer_1.CellConveyerDirection.Up);
          break;

         case EntityID_1.EntityID.CellConveyerL2D:
          cell = CellConveyer_1.default.createConveyer(grid, CellConveyer_1.CellConveyerDirection.Left, CellConveyer_1.CellConveyerDirection.Down);
          break;

         case EntityID_1.EntityID.CellConveyerR2L:
          cell = CellConveyer_1.default.createConveyer(grid, CellConveyer_1.CellConveyerDirection.Right, CellConveyer_1.CellConveyerDirection.Left);
          break;

         case EntityID_1.EntityID.CellConveyerR2U:
          cell = CellConveyer_1.default.createConveyer(grid, CellConveyer_1.CellConveyerDirection.Right, CellConveyer_1.CellConveyerDirection.Up);
          break;

         case EntityID_1.EntityID.CellConveyerR2D:
          cell = CellConveyer_1.default.createConveyer(grid, CellConveyer_1.CellConveyerDirection.Right, CellConveyer_1.CellConveyerDirection.Down);
          break;

         case EntityID_1.EntityID.CellConveyerU2L:
          cell = CellConveyer_1.default.createConveyer(grid, CellConveyer_1.CellConveyerDirection.Up, CellConveyer_1.CellConveyerDirection.Left);
          break;

         case EntityID_1.EntityID.CellConveyerU2R:
          cell = CellConveyer_1.default.createConveyer(grid, CellConveyer_1.CellConveyerDirection.Up, CellConveyer_1.CellConveyerDirection.Right);
          break;

         case EntityID_1.EntityID.CellConveyerU2D:
          cell = CellConveyer_1.default.createConveyer(grid, CellConveyer_1.CellConveyerDirection.Up, CellConveyer_1.CellConveyerDirection.Down);
          break;

         case EntityID_1.EntityID.CellConveyerD2L:
          cell = CellConveyer_1.default.createConveyer(grid, CellConveyer_1.CellConveyerDirection.Down, CellConveyer_1.CellConveyerDirection.Left);
          break;

         case EntityID_1.EntityID.CellConveyerD2R:
          cell = CellConveyer_1.default.createConveyer(grid, CellConveyer_1.CellConveyerDirection.Down, CellConveyer_1.CellConveyerDirection.Right);
          break;

         case EntityID_1.EntityID.CellConveyerD2U:
          cell = CellConveyer_1.default.createConveyer(grid, CellConveyer_1.CellConveyerDirection.Down, CellConveyer_1.CellConveyerDirection.Up);
          break;

         case EntityID_1.EntityID.CellMovablePlate:
          cell = CellMovablePlate_1.default.create(grid);
        }
        return cell;
      };
      CellFactory.generateCellWithKindID = function(grid, kindID) {
        var entityID = IdentifierManager_1.default.getInstance().getEntityIDFromKindID(kindID);
        return this.generateCellWithEntityID(grid, entityID);
      };
      return CellFactory;
    }();
    exports.default = CellFactory;
    cc._RF.pop();
  }, {
    "../../defines/EntityID": "EntityID",
    "../../defines/IdentifierManager": "IdentifierManager",
    "./CellConveyer": "CellConveyer",
    "./CellMovablePlate": "CellMovablePlate",
    "./CellNormal": "CellNormal"
  } ],
  CellMovablePlate: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "12df3w6nXlK8ZWf3CHZXOMH", "CellMovablePlate");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var GameMath_1 = require("../../../../extend/utils/GameMath");
    var CollectionID_1 = require("../../defines/CollectionID");
    var EntityID_1 = require("../../defines/EntityID");
    var TMXConfigInfoKeys_1 = require("../../defines/TMXConfigInfoKeys");
    var EntityPrefabNodePool_1 = require("../EntityPrefabNodePool");
    var CellBase_1 = require("./CellBase");
    var CellNormal_1 = require("./CellNormal");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var CellMovablePlate = function(_super) {
      __extends(CellMovablePlate, _super);
      function CellMovablePlate() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this._movePath = [];
        _this._moveInterval = 1;
        _this._moveSteps = 1;
        _this._hasFirstMove = false;
        _this._firstMoveSteps = 0;
        _this._firstMoveInterval = 0;
        _this._currentInterval = 0;
        _this._currentPathIndex = 0;
        return _this;
      }
      CellMovablePlate.create = function(grid) {
        var className = "CellMovablePlate";
        var prefabFileName = "match_scene/prefab/entity/cell/CellMovablePlate";
        var pool = EntityPrefabNodePool_1.default.getInstance();
        var component = pool.getPrefabNodeWithFileNameAndClassName(prefabFileName, className);
        if (component) {
          component.init(grid);
          return component;
        }
        return null;
      };
      CellMovablePlate.prototype.init = function(grid) {
        _super.prototype.initCell.call(this, grid, CellBase_1.CellType.MovablePlate);
        this._movePath.length = 0;
        this._moveInterval = 1;
        this._moveSteps = 1;
        this._hasFirstMove = false;
        this._firstMoveSteps = 0;
        this._firstMoveInterval = 0;
        this._currentInterval = 0;
        this._currentPathIndex = 0;
      };
      CellMovablePlate.prototype.getCollectionID = function() {
        return CollectionID_1.CollectionID.CellMovablePlate;
      };
      CellMovablePlate.prototype.getEntityID = function() {
        return EntityID_1.EntityID.CellMovablePlate;
      };
      CellMovablePlate.prototype.dealWithConfigMap = function(configMap) {
        _super.prototype.dealWithConfigMap.call(this, configMap);
        var keyPoints = [];
        var path = configMap[TMXConfigInfoKeys_1.default.CFG_MOVABLE_PLATE_PATH_KEY_TYPE];
        if (path) {
          var count = 0;
          for (var key in path) count += 1;
          for (var index = 0; index < count; index++) {
            var pos = path[index];
            keyPoints.push(pos);
          }
        }
        if (keyPoints.length > 0) {
          var count = keyPoints.length;
          this._movePath.push(keyPoints[0]);
          for (var i = 0; i < count; i++) if (i + 1 < count) {
            var start = keyPoints[i];
            var end = keyPoints[i + 1];
            var offset = end.sub(start);
            var length = 0;
            var step = cc.Vec2.ZERO;
            if (0 == offset.x) {
              length = Math.abs(offset.y);
              step = offset.y > 0 ? cc.v2(0, 1) : cc.v2(0, -1);
            } else if (0 == offset.y) {
              length = Math.abs(offset.x);
              step = offset.x > 0 ? cc.v2(1, 0) : cc.v2(-1, 0);
            }
            for (var j = 1; j <= length; j++) {
              var pos = start.add(step.mul(j));
              this._movePath.push(pos);
            }
          }
          if (this._movePath[this._movePath.length - 1].equals(this._movePath[0])) this._movePath.pop(); else for (var index = this._movePath.length - 2; index > 0; index--) this._movePath.push(this._movePath[index]);
        }
        var moveSteps = configMap[TMXConfigInfoKeys_1.default.CFG_MOVABLE_PLATE_PATH_MOVE_TYPE];
        moveSteps && (this._moveSteps = Number(moveSteps));
        var moveInterval = configMap[TMXConfigInfoKeys_1.default.CFG_MOVABLE_PLATE_PATH_STEP_TYPE];
        moveInterval && (this._moveInterval = Number(moveInterval));
        var firstMoveSteps = configMap[TMXConfigInfoKeys_1.default.CFG_MOVABLE_PLATE_PATH_FIRST_MOVE_TYPE];
        if (firstMoveSteps) {
          this._firstMoveSteps = Number(firstMoveSteps);
          this._hasFirstMove = true;
        }
        var firstMoveInterval = configMap[TMXConfigInfoKeys_1.default.CFG_MOVABLE_PLATE_PATH_FIRST_STEP_TYPE];
        if (firstMoveInterval) {
          this._firstMoveInterval = Number(firstMoveInterval);
          this._hasFirstMove = true;
        }
      };
      CellMovablePlate.prototype.onConvey = function() {
        this._currentInterval += 1;
        var moveStep = 0;
        if (this._hasFirstMove) {
          if (this._currentInterval >= this._firstMoveInterval) {
            moveStep = this._firstMoveSteps;
            this._hasFirstMove = false;
            this._currentInterval = 0;
          }
        } else if (this._currentInterval >= this._moveInterval) {
          moveStep = this._moveSteps;
          this._currentInterval = 0;
        }
        if (moveStep > 0) {
          var movePath = [];
          movePath.push(this._movePath[this._currentPathIndex]);
          var pathCount = this._movePath.length;
          for (var i = 0; i < moveStep; i++) {
            this._currentPathIndex = (this._currentPathIndex + 1) % pathCount;
            movePath.push(this._movePath[this._currentPathIndex]);
          }
          if (movePath.length > 0) {
            var conveyerTypes = [ EntityID_1.EntityType.Cell, EntityID_1.EntityType.Popsicle, EntityID_1.EntityType.Floor, EntityID_1.EntityType.Rug, EntityID_1.EntityType.Item, EntityID_1.EntityType.Parasite ];
            for (var _i = 0, conveyerTypes_1 = conveyerTypes; _i < conveyerTypes_1.length; _i++) {
              var type = conveyerTypes_1[_i];
              this.moveEntity(type, movePath);
            }
            return movePath[movePath.length - 1];
          }
        }
        return GameMath_1.default.INVALID_LOGICAL_POSITION;
      };
      CellMovablePlate.prototype.moveEntity = function(entityType, path) {
        var grid = this.getGrid();
        var fristPos = path[0];
        var targetPos = path[path.length - 1];
        var entity = grid.getEntity(entityType, fristPos);
        if (entity) {
          entity.removeFromGridAndAddToEffect();
          grid.addObstructs(entity);
          var count = path.length;
          var steps = [];
          for (var i = 0; i < count; i++) steps.push(cc.moveTo(.4, entity.getPixelPos(path[i])));
          var callback = cc.callFunc(function() {
            grid.setEntity(entity, targetPos);
            grid.removeObstructs(entity);
          });
          steps.push(callback);
          entity.runAction(cc.sequence(steps));
        }
      };
      CellMovablePlate.prototype.start = function() {};
      CellMovablePlate.prototype.onDestroy = function() {
        _super.prototype.onDestroy.call(this);
        this._movePath = null;
      };
      CellMovablePlate = __decorate([ ccclass ], CellMovablePlate);
      return CellMovablePlate;
    }(CellNormal_1.default);
    exports.default = CellMovablePlate;
    cc._RF.pop();
  }, {
    "../../../../extend/utils/GameMath": "GameMath",
    "../../defines/CollectionID": "CollectionID",
    "../../defines/EntityID": "EntityID",
    "../../defines/TMXConfigInfoKeys": "TMXConfigInfoKeys",
    "../EntityPrefabNodePool": "EntityPrefabNodePool",
    "./CellBase": "CellBase",
    "./CellNormal": "CellNormal"
  } ],
  CellNormal: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "d65a12G7H5JrYgflbeXw41e", "CellNormal");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var CellBase_1 = require("./CellBase");
    var CollectionID_1 = require("../../defines/CollectionID");
    var EntityID_1 = require("../../defines/EntityID");
    var FloorGrass_1 = require("../floor/FloorGrass");
    var EntityPrefabNodePool_1 = require("../EntityPrefabNodePool");
    var GridCommand_1 = require("../../commond/GridCommand");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var CellNormal = function(_super) {
      __extends(CellNormal, _super);
      function CellNormal() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      CellNormal.create = function(grid) {
        var className = "CellNormal";
        var prefabFileName = "match_scene/prefab/entity/cell/CellNormal";
        var pool = EntityPrefabNodePool_1.default.getInstance();
        var component = pool.getPrefabNodeWithFileNameAndClassName(prefabFileName, className);
        if (component) {
          component.init(grid);
          return component;
        }
        return null;
      };
      CellNormal.prototype.init = function(grid) {
        _super.prototype.initCell.call(this, grid, CellBase_1.CellType.Normal);
      };
      CellNormal.prototype.canPassThrough = function() {
        if (this.canHoldItem()) {
          var grid = this.getGrid();
          if (grid) {
            var item = grid.getItemAtLogicalPos(this.getLogicalPos());
            if (item) return false;
            var parasite = grid.getParasiteAtLogicalPos(this.getLogicalPos());
            return !parasite || parasite.hostCanDrop();
          }
        }
        return false;
      };
      CellNormal.prototype.getCollectionID = function() {
        return CollectionID_1.CollectionID.CellNormal;
      };
      CellNormal.prototype.getEntityID = function() {
        return EntityID_1.EntityID.CellNormal;
      };
      CellNormal.prototype.canHoldItem = function() {
        return true;
      };
      CellNormal.prototype.getButterflyPriority = function(color, layoutGrass) {
        if (layoutGrass && this._canLayoutGrass()) {
          var item = this.getGrid().getItemAtLogicalPos(this.getLogicalPos());
          if (item && item.canLayoutGrass() && item.canExcuteCommand(GridCommand_1.default.BombClean(this.getLogicalPos(), color, layoutGrass))) return 1;
        }
        return _super.prototype.getButterflyPriority.call(this, color, layoutGrass);
      };
      CellNormal.prototype._canCleanByBomb = function(cleanColor) {
        return this._canLayoutGrass();
      };
      CellNormal.prototype._canLayoutGrass = function() {
        if (this.canHoldItem() && this.getNeedGrass()) return !this.getGrid().isGrassFloorAtLogicalPos(this.getLogicalPos());
        return false;
      };
      CellNormal.prototype._onClean = function(cleanOption) {
        if (cleanOption.layoutGrass) {
          var grass = FloorGrass_1.default.create(this.getGrid());
          this.getGrid().setFloorAtLogicalPos(grass, this.getLogicalPos());
          grass.grow();
          grass.onCollected();
        }
      };
      CellNormal = __decorate([ ccclass ], CellNormal);
      return CellNormal;
    }(CellBase_1.default);
    exports.default = CellNormal;
    cc._RF.pop();
  }, {
    "../../commond/GridCommand": "GridCommand",
    "../../defines/CollectionID": "CollectionID",
    "../../defines/EntityID": "EntityID",
    "../EntityPrefabNodePool": "EntityPrefabNodePool",
    "../floor/FloorGrass": "FloorGrass",
    "./CellBase": "CellBase"
  } ],
  CollectedTrainSupplyBar: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "c9815tJQWNIv4JFHwUMBuvr", "CollectedTrainSupplyBar");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var CollectedTrainSupplyItem_1 = require("./CollectedTrainSupplyItem");
    var GameCurrencyType_1 = require("../../../define/GameCurrencyType");
    var GameSceneBase_1 = require("../GameSceneBase");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var CollectedTrainSupplyBar = function(_super) {
      __extends(CollectedTrainSupplyBar, _super);
      function CollectedTrainSupplyBar() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.itemNodes = [];
        _this._gameScene = null;
        _this._supplyItems = [];
        return _this;
      }
      CollectedTrainSupplyBar.prototype.setSupplyData = function(data) {
        for (var key in data) {
          var amount = data[key];
          var itemID = Number(key);
          if (itemID) {
            var item = this.getItemWithSupplyItemID(itemID);
            item && item.setAmount(amount);
          }
        }
      };
      CollectedTrainSupplyBar.prototype.getItemWithSupplyItemID = function(itemID) {
        var result = null;
        for (var _i = 0, _a = this._supplyItems; _i < _a.length; _i++) {
          var supplyItem = _a[_i];
          if (supplyItem.getItemID() == itemID) {
            result = supplyItem;
            break;
          }
        }
        return result;
      };
      CollectedTrainSupplyBar.prototype.getWorldPosWithSupplyItemID = function(itemID) {
        var result = cc.Vec2.ZERO;
        var item = this.getItemWithSupplyItemID(itemID);
        item && (result = item.node.parent.convertToWorldSpaceAR(item.node.getPosition()));
        return result;
      };
      CollectedTrainSupplyBar.prototype.onLoad = function() {
        var canvas = cc.find("Canvas");
        canvas && (this._gameScene = canvas.getComponent(GameSceneBase_1.default));
        var supplyItemIDs = [ GameCurrencyType_1.GameCurrencyType.TrainFood, GameCurrencyType_1.GameCurrencyType.TrainSoap, GameCurrencyType_1.GameCurrencyType.TrainEyepatch, GameCurrencyType_1.GameCurrencyType.TrainHoe, GameCurrencyType_1.GameCurrencyType.GoldCoin ];
        for (var index = 0; index < this.itemNodes.length; index++) {
          var itemNode = this.itemNodes[index];
          var supplyItem = itemNode.getComponent(CollectedTrainSupplyItem_1.default);
          if (supplyItem) {
            supplyItem.setItemID(supplyItemIDs[index]);
            this._supplyItems.push(supplyItem);
          }
        }
      };
      CollectedTrainSupplyBar.prototype.start = function() {};
      CollectedTrainSupplyBar.prototype.onDestroy = function() {
        this.itemNodes = null;
        this._gameScene = null;
        this._supplyItems = null;
      };
      __decorate([ property([ cc.Node ]) ], CollectedTrainSupplyBar.prototype, "itemNodes", void 0);
      CollectedTrainSupplyBar = __decorate([ ccclass ], CollectedTrainSupplyBar);
      return CollectedTrainSupplyBar;
    }(cc.Component);
    exports.default = CollectedTrainSupplyBar;
    cc._RF.pop();
  }, {
    "../../../define/GameCurrencyType": "GameCurrencyType",
    "../GameSceneBase": "GameSceneBase",
    "./CollectedTrainSupplyItem": "CollectedTrainSupplyItem"
  } ],
  CollectedTrainSupplyItem: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "45dbbBZpypLmKH4Ia8SlBQb", "CollectedTrainSupplyItem");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var GameCurrencyType_1 = require("../../../define/GameCurrencyType");
    var UISpriteExt_1 = require("../../../component/UISpriteExt");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var CollectedTrainSupplyItem = function(_super) {
      __extends(CollectedTrainSupplyItem, _super);
      function CollectedTrainSupplyItem() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.icon = null;
        _this.amountLabel = null;
        _this._itemID = GameCurrencyType_1.GameCurrencyType.NoneType;
        _this._amount = 0;
        return _this;
      }
      CollectedTrainSupplyItem_1 = CollectedTrainSupplyItem;
      CollectedTrainSupplyItem.prototype.getItemID = function() {
        return this._itemID;
      };
      CollectedTrainSupplyItem.prototype.setItemID = function(itemID) {
        this._itemID = itemID;
        var frameName = "";
        switch (this._itemID) {
         case GameCurrencyType_1.GameCurrencyType.GoldCoin:
          frameName = "match_scene/texture/userInterface/match_goldcoin";
          break;

         case GameCurrencyType_1.GameCurrencyType.TrainFood:
          frameName = "match_scene/texture/userInterface/match_food";
          break;

         case GameCurrencyType_1.GameCurrencyType.TrainSoap:
          frameName = "match_scene/texture/userInterface/match_soap";
          break;

         case GameCurrencyType_1.GameCurrencyType.TrainEyepatch:
          frameName = "match_scene/texture/userInterface/match_eyepatch";
          break;

         case GameCurrencyType_1.GameCurrencyType.TrainHoe:
          frameName = "match_scene/texture/userInterface/match_hoe";
        }
        var component = this.icon.getComponent(UISpriteExt_1.default);
        component && (component.src = frameName);
      };
      CollectedTrainSupplyItem.prototype.getAmount = function() {
        return this._amount;
      };
      CollectedTrainSupplyItem.prototype.setAmount = function(amount) {
        var oldAmount = this._amount;
        this._amount = amount;
        this.amountLabel.string = this._amount.toString();
        if (oldAmount != this._amount) {
          this.amountLabel.node.stopActionByTag(1001);
          this.amountLabel.node.scale = 1;
          var amountAction = cc.sequence(cc.scaleTo(.05, 1.5).easing(cc.easeIn(2)), cc.scaleTo(.2, 1).easing(cc.easeOut(2)));
          amountAction.setTag(1001);
          this.amountLabel.node.runAction(amountAction);
          this.icon.node.stopActionByTag(1001);
          this.icon.node.scale = 1;
          var iconAction = cc.sequence(cc.scaleTo(.05, 1.5).easing(cc.easeIn(2)), cc.scaleTo(.2, 1).easing(cc.easeOut(2)));
          iconAction.setTag(1001);
          this.icon.node.runAction(iconAction);
        } else {
          this.amountLabel.node.scale = 1;
          this.icon.node.scale = 1;
        }
      };
      CollectedTrainSupplyItem.create = function(itemID) {
        var res = cc.loader.getRes("match_scene/prefab/userInterface/CollectedTrainSupplyItem", cc.Prefab);
        if (res) {
          var node = cc.instantiate(res);
          if (node) {
            var component = node.getComponent(CollectedTrainSupplyItem_1);
            if (component) {
              component.init(itemID);
              return component;
            }
          }
        }
        return null;
      };
      CollectedTrainSupplyItem.prototype.init = function(itemID) {
        this.setItemID(itemID);
        this.setAmount(0);
      };
      CollectedTrainSupplyItem.prototype.onLoad = function() {
        this.setAmount(0);
      };
      CollectedTrainSupplyItem.prototype.start = function() {};
      CollectedTrainSupplyItem.prototype.onDestroy = function() {
        this.icon = null;
        this.amountLabel = null;
      };
      var CollectedTrainSupplyItem_1;
      __decorate([ property(cc.Sprite) ], CollectedTrainSupplyItem.prototype, "icon", void 0);
      __decorate([ property(cc.Label) ], CollectedTrainSupplyItem.prototype, "amountLabel", void 0);
      CollectedTrainSupplyItem = CollectedTrainSupplyItem_1 = __decorate([ ccclass ], CollectedTrainSupplyItem);
      return CollectedTrainSupplyItem;
    }(cc.Component);
    exports.default = CollectedTrainSupplyItem;
    cc._RF.pop();
  }, {
    "../../../component/UISpriteExt": "UISpriteExt",
    "../../../define/GameCurrencyType": "GameCurrencyType"
  } ],
  CollectionGroupID: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "205c4fOpN9NKK7VL6iAtw8R", "CollectionGroupID");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.CollectionGroupID = void 0;
    var CollectionID_1 = require("./CollectionID");
    var CollectionGroupID;
    (function(CollectionGroupID) {
      CollectionGroupID[CollectionGroupID["None"] = 0] = "None";
      CollectionGroupID[CollectionGroupID["ItemBombButterfly"] = 602] = "ItemBombButterfly";
      CollectionGroupID[CollectionGroupID["ItemBombRow"] = 603] = "ItemBombRow";
      CollectionGroupID[CollectionGroupID["ItemBombColumn"] = 604] = "ItemBombColumn";
      CollectionGroupID[CollectionGroupID["ItemBombCross"] = 605] = "ItemBombCross";
      CollectionGroupID[CollectionGroupID["ItemBombRange"] = 606] = "ItemBombRange";
      CollectionGroupID[CollectionGroupID["ItemPaw"] = 621] = "ItemPaw";
    })(CollectionGroupID = exports.CollectionGroupID || (exports.CollectionGroupID = {}));
    var CollectionGroupIDManager = function() {
      function CollectionGroupIDManager() {
        this.String_To_CollectionGroupID_Map = {};
        this.CollectionGroupID_To_CollectionIDs_Map = {};
        this.CollectionGroupID_To_FrameName_Map = {};
        this.initString_To_CollectionGroupID_Map();
        this.initCollectionGroupID_To_CollectionIDs_Map();
        this.initCollectionGroupID_To_FrameName_Map();
      }
      CollectionGroupIDManager.getInstance = function() {
        null == this.instance && (this.instance = new CollectionGroupIDManager());
        return this.instance;
      };
      CollectionGroupIDManager.prototype.initString_To_CollectionGroupID_Map = function() {
        this.String_To_CollectionGroupID_Map["butterfly"] = CollectionGroupID.ItemBombButterfly;
        this.String_To_CollectionGroupID_Map["hLine"] = CollectionGroupID.ItemBombRow;
        this.String_To_CollectionGroupID_Map["vLine"] = CollectionGroupID.ItemBombColumn;
        this.String_To_CollectionGroupID_Map["cross"] = CollectionGroupID.ItemBombCross;
        this.String_To_CollectionGroupID_Map["boom"] = CollectionGroupID.ItemBombRange;
        this.String_To_CollectionGroupID_Map["paw"] = CollectionGroupID.ItemPaw;
      };
      CollectionGroupIDManager.prototype.initCollectionGroupID_To_CollectionIDs_Map = function() {
        this.CollectionGroupID_To_CollectionIDs_Map[CollectionGroupID.ItemBombButterfly] = [ CollectionID_1.CollectionID.ItemBombButterflyRed, CollectionID_1.CollectionID.ItemBombButterflyGreen, CollectionID_1.CollectionID.ItemBombButterflyBlue, CollectionID_1.CollectionID.ItemBombButterflyYellow, CollectionID_1.CollectionID.ItemBombButterflyOrange, CollectionID_1.CollectionID.ItemBombButterflyPurple ];
        this.CollectionGroupID_To_CollectionIDs_Map[CollectionGroupID.ItemBombRow] = [ CollectionID_1.CollectionID.ItemBombRowRed, CollectionID_1.CollectionID.ItemBombRowGreen, CollectionID_1.CollectionID.ItemBombRowBlue, CollectionID_1.CollectionID.ItemBombRowYellow, CollectionID_1.CollectionID.ItemBombRowOrange, CollectionID_1.CollectionID.ItemBombRowPurple ];
        this.CollectionGroupID_To_CollectionIDs_Map[CollectionGroupID.ItemBombColumn] = [ CollectionID_1.CollectionID.ItemBombColumnRed, CollectionID_1.CollectionID.ItemBombColumnGreen, CollectionID_1.CollectionID.ItemBombColumnBlue, CollectionID_1.CollectionID.ItemBombColumnYellow, CollectionID_1.CollectionID.ItemBombColumnOrange, CollectionID_1.CollectionID.ItemBombColumnPurple ];
        this.CollectionGroupID_To_CollectionIDs_Map[CollectionGroupID.ItemBombCross] = [ CollectionID_1.CollectionID.ItemBombCrossRed, CollectionID_1.CollectionID.ItemBombCrossGreen, CollectionID_1.CollectionID.ItemBombCrossBlue, CollectionID_1.CollectionID.ItemBombCrossYellow, CollectionID_1.CollectionID.ItemBombCrossOrange, CollectionID_1.CollectionID.ItemBombCrossPurple ];
        this.CollectionGroupID_To_CollectionIDs_Map[CollectionGroupID.ItemBombRange] = [ CollectionID_1.CollectionID.ItemBombRangeRed, CollectionID_1.CollectionID.ItemBombRangeGreen, CollectionID_1.CollectionID.ItemBombRangeBlue, CollectionID_1.CollectionID.ItemBombRangeYellow, CollectionID_1.CollectionID.ItemBombRangeOrange, CollectionID_1.CollectionID.ItemBombRangePurple ];
        this.CollectionGroupID_To_CollectionIDs_Map[CollectionGroupID.ItemPaw] = [ CollectionID_1.CollectionID.ItemPawRed, CollectionID_1.CollectionID.ItemPawGreen, CollectionID_1.CollectionID.ItemPawBlue, CollectionID_1.CollectionID.ItemPawYellow, CollectionID_1.CollectionID.ItemPawOrange, CollectionID_1.CollectionID.ItemPawPurple ];
      };
      CollectionGroupIDManager.prototype.initCollectionGroupID_To_FrameName_Map = function() {
        this.CollectionGroupID_To_FrameName_Map[CollectionGroupID.ItemBombButterfly] = "butterfly_chromatic";
        this.CollectionGroupID_To_FrameName_Map[CollectionGroupID.ItemBombRow] = "hline_chromatic";
        this.CollectionGroupID_To_FrameName_Map[CollectionGroupID.ItemBombColumn] = "vline_chromatic";
        this.CollectionGroupID_To_FrameName_Map[CollectionGroupID.ItemBombCross] = "cross_chromatic";
        this.CollectionGroupID_To_FrameName_Map[CollectionGroupID.ItemBombRange] = "boom_chromatic";
        this.CollectionGroupID_To_FrameName_Map[CollectionGroupID.ItemPaw] = "paw_chromatic";
      };
      CollectionGroupIDManager.prototype.getCollectionGroupIDFromString = function(name) {
        var result = this.String_To_CollectionGroupID_Map[name];
        if (result) return result;
        return CollectionGroupID.None;
      };
      CollectionGroupIDManager.prototype.getFrameNameFromCollectionGroupID = function(groupID) {
        var rootPath = "texture/match/entities/";
        var result = this.CollectionGroupID_To_FrameName_Map[groupID];
        if (result) return rootPath + result;
        return rootPath + "unknow/unknow";
      };
      CollectionGroupIDManager.prototype.getCollectionIDsFromCollectionGroupID = function(groupID) {
        var result = this.CollectionGroupID_To_CollectionIDs_Map[groupID];
        if (result) return result;
        return [];
      };
      CollectionGroupIDManager.prototype.getCollectionGroupIDFromCollectionID = function(collectionID) {
        var tempMap = this.CollectionGroupID_To_CollectionIDs_Map;
        for (var key in tempMap) if (tempMap.hasOwnProperty(key)) {
          var entityIDs = tempMap[key];
          for (var _i = 0, entityIDs_1 = entityIDs; _i < entityIDs_1.length; _i++) {
            var id = entityIDs_1[_i];
            if (id == collectionID) {
              var result = Number(key);
              return result;
            }
          }
        }
        return CollectionGroupID.None;
      };
      CollectionGroupIDManager.instance = null;
      return CollectionGroupIDManager;
    }();
    exports.default = CollectionGroupIDManager;
    cc._RF.pop();
  }, {
    "./CollectionID": "CollectionID"
  } ],
  CollectionID: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "1829cV8DKtJD6IusGMizH7W", "CollectionID");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.CollectionIDManager = exports.CollectionID = void 0;
    var CollectionID;
    (function(CollectionID) {
      CollectionID[CollectionID["None"] = 0] = "None";
      CollectionID[CollectionID["Frame"] = 101] = "Frame";
      CollectionID[CollectionID["CellNormal"] = 10101] = "CellNormal";
      CollectionID[CollectionID["CellConveyer"] = 20101] = "CellConveyer";
      CollectionID[CollectionID["CellMovablePlate"] = 20201] = "CellMovablePlate";
      CollectionID[CollectionID["PopsicleNormal"] = 30101] = "PopsicleNormal";
      CollectionID[CollectionID["PopsicleBoom"] = 30201] = "PopsicleBoom";
      CollectionID[CollectionID["PopsicleLine"] = 30301] = "PopsicleLine";
      CollectionID[CollectionID["FloorGrass"] = 40101] = "FloorGrass";
      CollectionID[CollectionID["FloorIce"] = 40201] = "FloorIce";
      CollectionID[CollectionID["FloorChanger"] = 40301] = "FloorChanger";
      CollectionID[CollectionID["FloorDouble"] = 40401] = "FloorDouble";
      CollectionID[CollectionID["FloorRoad"] = 40501] = "FloorRoad";
      CollectionID[CollectionID["RugJam"] = 50101] = "RugJam";
      CollectionID[CollectionID["ItemNormalRed"] = 60101] = "ItemNormalRed";
      CollectionID[CollectionID["ItemNormalGreen"] = 60102] = "ItemNormalGreen";
      CollectionID[CollectionID["ItemNormalBlue"] = 60103] = "ItemNormalBlue";
      CollectionID[CollectionID["ItemNormalYellow"] = 60104] = "ItemNormalYellow";
      CollectionID[CollectionID["ItemNormalOrange"] = 60105] = "ItemNormalOrange";
      CollectionID[CollectionID["ItemNormalPurple"] = 60106] = "ItemNormalPurple";
      CollectionID[CollectionID["ItemBombButterflyRed"] = 60201] = "ItemBombButterflyRed";
      CollectionID[CollectionID["ItemBombButterflyGreen"] = 60202] = "ItemBombButterflyGreen";
      CollectionID[CollectionID["ItemBombButterflyBlue"] = 60203] = "ItemBombButterflyBlue";
      CollectionID[CollectionID["ItemBombButterflyYellow"] = 60204] = "ItemBombButterflyYellow";
      CollectionID[CollectionID["ItemBombButterflyOrange"] = 60205] = "ItemBombButterflyOrange";
      CollectionID[CollectionID["ItemBombButterflyPurple"] = 60206] = "ItemBombButterflyPurple";
      CollectionID[CollectionID["ItemBombButterflyChromatic"] = 60207] = "ItemBombButterflyChromatic";
      CollectionID[CollectionID["ItemBombRowRed"] = 60301] = "ItemBombRowRed";
      CollectionID[CollectionID["ItemBombRowGreen"] = 60302] = "ItemBombRowGreen";
      CollectionID[CollectionID["ItemBombRowBlue"] = 60303] = "ItemBombRowBlue";
      CollectionID[CollectionID["ItemBombRowYellow"] = 60304] = "ItemBombRowYellow";
      CollectionID[CollectionID["ItemBombRowOrange"] = 60305] = "ItemBombRowOrange";
      CollectionID[CollectionID["ItemBombRowPurple"] = 60306] = "ItemBombRowPurple";
      CollectionID[CollectionID["ItemBombRowChromatic"] = 60307] = "ItemBombRowChromatic";
      CollectionID[CollectionID["ItemBombColumnRed"] = 60401] = "ItemBombColumnRed";
      CollectionID[CollectionID["ItemBombColumnGreen"] = 60402] = "ItemBombColumnGreen";
      CollectionID[CollectionID["ItemBombColumnBlue"] = 60403] = "ItemBombColumnBlue";
      CollectionID[CollectionID["ItemBombColumnYellow"] = 60404] = "ItemBombColumnYellow";
      CollectionID[CollectionID["ItemBombColumnOrange"] = 60405] = "ItemBombColumnOrange";
      CollectionID[CollectionID["ItemBombColumnPurple"] = 60406] = "ItemBombColumnPurple";
      CollectionID[CollectionID["ItemBombColumnChromatic"] = 60407] = "ItemBombColumnChromatic";
      CollectionID[CollectionID["ItemBombCrossRed"] = 60501] = "ItemBombCrossRed";
      CollectionID[CollectionID["ItemBombCrossGreen"] = 60502] = "ItemBombCrossGreen";
      CollectionID[CollectionID["ItemBombCrossBlue"] = 60503] = "ItemBombCrossBlue";
      CollectionID[CollectionID["ItemBombCrossYellow"] = 60504] = "ItemBombCrossYellow";
      CollectionID[CollectionID["ItemBombCrossOrange"] = 60505] = "ItemBombCrossOrange";
      CollectionID[CollectionID["ItemBombCrossPurple"] = 60506] = "ItemBombCrossPurple";
      CollectionID[CollectionID["ItemBombCrossChromatic"] = 60507] = "ItemBombCrossChromatic";
      CollectionID[CollectionID["ItemBombRangeRed"] = 60601] = "ItemBombRangeRed";
      CollectionID[CollectionID["ItemBombRangeGreen"] = 60602] = "ItemBombRangeGreen";
      CollectionID[CollectionID["ItemBombRangeBlue"] = 60603] = "ItemBombRangeBlue";
      CollectionID[CollectionID["ItemBombRangeYellow"] = 60604] = "ItemBombRangeYellow";
      CollectionID[CollectionID["ItemBombRangeOrange"] = 60605] = "ItemBombRangeOrange";
      CollectionID[CollectionID["ItemBombRangePurple"] = 60606] = "ItemBombRangePurple";
      CollectionID[CollectionID["ItemBombRangeChromatic"] = 60607] = "ItemBombRangeChromatic";
      CollectionID[CollectionID["ItemBombRainbow"] = 60701] = "ItemBombRainbow";
      CollectionID[CollectionID["ItemBlock"] = 60801] = "ItemBlock";
      CollectionID[CollectionID["ItemDoughnut"] = 60901] = "ItemDoughnut";
      CollectionID[CollectionID["ItemMagicCrystal"] = 61001] = "ItemMagicCrystal";
      CollectionID[CollectionID["ItemWatermelon"] = 61101] = "ItemWatermelon";
      CollectionID[CollectionID["ItemFruitCake"] = 61201] = "ItemFruitCake";
      CollectionID[CollectionID["ItemMower"] = 61401] = "ItemMower";
      CollectionID[CollectionID["ItemBone"] = 61501] = "ItemBone";
      CollectionID[CollectionID["ItemChestnut"] = 61601] = "ItemChestnut";
      CollectionID[CollectionID["ItemFireworks"] = 61701] = "ItemFireworks";
      CollectionID[CollectionID["ItemFireWormBottle"] = 61301] = "ItemFireWormBottle";
      CollectionID[CollectionID["ItemPuppy"] = 62001] = "ItemPuppy";
      CollectionID[CollectionID["ItemPawRed"] = 62101] = "ItemPawRed";
      CollectionID[CollectionID["ItemPawGreen"] = 62102] = "ItemPawGreen";
      CollectionID[CollectionID["ItemPawBlue"] = 62103] = "ItemPawBlue";
      CollectionID[CollectionID["ItemPawYellow"] = 62104] = "ItemPawYellow";
      CollectionID[CollectionID["ItemPawOrange"] = 62105] = "ItemPawOrange";
      CollectionID[CollectionID["ItemPawPurple"] = 62106] = "ItemPawPurple";
      CollectionID[CollectionID["ItemPawChromatic"] = 62107] = "ItemPawChromatic";
      CollectionID[CollectionID["ItemBalloon"] = 62201] = "ItemBalloon";
      CollectionID[CollectionID["ItemDogHouse"] = 62301] = "ItemDogHouse";
      CollectionID[CollectionID["ItemJamBottle"] = 62401] = "ItemJamBottle";
      CollectionID[CollectionID["ItemHoneyComb"] = 62601] = "ItemHoneyComb";
      CollectionID[CollectionID["ItemStatue"] = 62801] = "ItemStatue";
      CollectionID[CollectionID["ParasiteIceCube"] = 70101] = "ParasiteIceCube";
      CollectionID[CollectionID["ParasiteShackle"] = 70201] = "ParasiteShackle";
      CollectionID[CollectionID["ParasiteHoney"] = 70301] = "ParasiteHoney";
      CollectionID[CollectionID["ParasiteGiftBoxRed"] = 70401] = "ParasiteGiftBoxRed";
      CollectionID[CollectionID["ParasiteGiftBoxGreen"] = 70402] = "ParasiteGiftBoxGreen";
      CollectionID[CollectionID["ParasiteGiftBoxBlue"] = 70403] = "ParasiteGiftBoxBlue";
      CollectionID[CollectionID["ParasiteGiftBoxYellow"] = 70404] = "ParasiteGiftBoxYellow";
      CollectionID[CollectionID["ParasiteGiftBoxOrange"] = 70405] = "ParasiteGiftBoxOrange";
      CollectionID[CollectionID["ParasiteGiftBoxPurple"] = 70406] = "ParasiteGiftBoxPurple";
      CollectionID[CollectionID["MarkerBoneCollector"] = 80101] = "MarkerBoneCollector";
      CollectionID[CollectionID["MarkWormholeEntrance"] = 80201] = "MarkWormholeEntrance";
      CollectionID[CollectionID["MarkWormholeExit"] = 80301] = "MarkWormholeExit";
      CollectionID[CollectionID["FenceVine"] = 80401] = "FenceVine";
      CollectionID[CollectionID["MarkerDropMachine"] = 80801] = "MarkerDropMachine";
      CollectionID[CollectionID["MarkerNormal"] = 80901] = "MarkerNormal";
      CollectionID[CollectionID["FlyerFireWorm"] = 90101] = "FlyerFireWorm";
      CollectionID[CollectionID["FlyerFireworksEnergy"] = 90201] = "FlyerFireworksEnergy";
    })(CollectionID = exports.CollectionID || (exports.CollectionID = {}));
    var CollectionIDManager = function() {
      function CollectionIDManager() {
        this.String_To_CollectID_Map = {};
        this.CollectionID_To_FrameName_Map = {};
        this.initString_To_CollectID_Map();
        this.initCollectionID_To_FrameName_Map();
      }
      CollectionIDManager.getInstance = function() {
        null == this.instance && (this.instance = new CollectionIDManager());
        return this.instance;
      };
      CollectionIDManager.prototype.initString_To_CollectID_Map = function() {
        this.String_To_CollectID_Map["popsicles"] = CollectionID.PopsicleNormal;
        this.String_To_CollectID_Map["popsiclesBoom"] = CollectionID.PopsicleBoom;
        this.String_To_CollectID_Map["popsiclesLine"] = CollectionID.PopsicleLine;
        this.String_To_CollectID_Map["grass"] = CollectionID.FloorGrass;
        this.String_To_CollectID_Map["jam"] = CollectionID.RugJam;
        this.String_To_CollectID_Map["red"] = CollectionID.ItemNormalRed;
        this.String_To_CollectID_Map["green"] = CollectionID.ItemNormalGreen;
        this.String_To_CollectID_Map["blue"] = CollectionID.ItemNormalBlue;
        this.String_To_CollectID_Map["yellow"] = CollectionID.ItemNormalYellow;
        this.String_To_CollectID_Map["orange"] = CollectionID.ItemNormalOrange;
        this.String_To_CollectID_Map["purple"] = CollectionID.ItemNormalPurple;
        this.String_To_CollectID_Map["butterflyRed"] = CollectionID.ItemBombButterflyRed;
        this.String_To_CollectID_Map["butterflyGreen"] = CollectionID.ItemBombButterflyGreen;
        this.String_To_CollectID_Map["butterflyBlue"] = CollectionID.ItemBombButterflyBlue;
        this.String_To_CollectID_Map["butterflyYellow"] = CollectionID.ItemBombButterflyYellow;
        this.String_To_CollectID_Map["butterflyOrange"] = CollectionID.ItemBombButterflyOrange;
        this.String_To_CollectID_Map["butterflyPurple"] = CollectionID.ItemBombButterflyPurple;
        this.String_To_CollectID_Map["hLineRed"] = CollectionID.ItemBombRowRed;
        this.String_To_CollectID_Map["hLineGreen"] = CollectionID.ItemBombRowGreen;
        this.String_To_CollectID_Map["hLineBlue"] = CollectionID.ItemBombRowBlue;
        this.String_To_CollectID_Map["hLineYellow"] = CollectionID.ItemBombRowYellow;
        this.String_To_CollectID_Map["hLineOrange"] = CollectionID.ItemBombRowOrange;
        this.String_To_CollectID_Map["hLinePurple"] = CollectionID.ItemBombRowPurple;
        this.String_To_CollectID_Map["vLineRed"] = CollectionID.ItemBombColumnRed;
        this.String_To_CollectID_Map["vLineGreen"] = CollectionID.ItemBombColumnGreen;
        this.String_To_CollectID_Map["vLineBlue"] = CollectionID.ItemBombColumnBlue;
        this.String_To_CollectID_Map["vLineYellow"] = CollectionID.ItemBombColumnYellow;
        this.String_To_CollectID_Map["vLineOrange"] = CollectionID.ItemBombColumnOrange;
        this.String_To_CollectID_Map["vLinePurple"] = CollectionID.ItemBombColumnPurple;
        this.String_To_CollectID_Map["crossRed"] = CollectionID.ItemBombCrossRed;
        this.String_To_CollectID_Map["crossGreen"] = CollectionID.ItemBombCrossGreen;
        this.String_To_CollectID_Map["crossBlue"] = CollectionID.ItemBombCrossBlue;
        this.String_To_CollectID_Map["crossYellow"] = CollectionID.ItemBombCrossYellow;
        this.String_To_CollectID_Map["crossOrange"] = CollectionID.ItemBombCrossOrange;
        this.String_To_CollectID_Map["crossPurple"] = CollectionID.ItemBombCrossPurple;
        this.String_To_CollectID_Map["boomRed"] = CollectionID.ItemBombRangeRed;
        this.String_To_CollectID_Map["boomGreen"] = CollectionID.ItemBombRangeGreen;
        this.String_To_CollectID_Map["boomBlue"] = CollectionID.ItemBombRangeBlue;
        this.String_To_CollectID_Map["boomYellow"] = CollectionID.ItemBombRangeYellow;
        this.String_To_CollectID_Map["boomOrange"] = CollectionID.ItemBombRangeOrange;
        this.String_To_CollectID_Map["boomPurple"] = CollectionID.ItemBombRangePurple;
        this.String_To_CollectID_Map["pawRed"] = CollectionID.ItemPawRed;
        this.String_To_CollectID_Map["pawGreen"] = CollectionID.ItemPawGreen;
        this.String_To_CollectID_Map["pawBlue"] = CollectionID.ItemPawBlue;
        this.String_To_CollectID_Map["pawYellow"] = CollectionID.ItemPawYellow;
        this.String_To_CollectID_Map["pawOrange"] = CollectionID.ItemPawOrange;
        this.String_To_CollectID_Map["pawPurple"] = CollectionID.ItemPawPurple;
        this.String_To_CollectID_Map["pawChromatic"] = CollectionID.ItemPawChromatic;
        this.String_To_CollectID_Map["rainbow"] = CollectionID.ItemBombRainbow;
        this.String_To_CollectID_Map["block"] = CollectionID.ItemBlock;
        this.String_To_CollectID_Map["doughnut"] = CollectionID.ItemDoughnut;
        this.String_To_CollectID_Map["watermelon"] = CollectionID.ItemWatermelon;
        this.String_To_CollectID_Map["fruitCake"] = CollectionID.ItemFruitCake;
        this.String_To_CollectID_Map["bone"] = CollectionID.ItemBone;
        this.String_To_CollectID_Map["nut"] = CollectionID.ItemChestnut;
        this.String_To_CollectID_Map["puppy"] = CollectionID.ItemPuppy;
        this.String_To_CollectID_Map["statue"] = CollectionID.ItemStatue;
        this.String_To_CollectID_Map["iceCube"] = CollectionID.ParasiteIceCube;
        this.String_To_CollectID_Map["honey"] = CollectionID.ParasiteHoney;
        this.String_To_CollectID_Map["fireworm"] = CollectionID.FlyerFireWorm;
      };
      CollectionIDManager.prototype.initCollectionID_To_FrameName_Map = function() {
        this.CollectionID_To_FrameName_Map[CollectionID.PopsicleNormal] = "popsicles";
        this.CollectionID_To_FrameName_Map[CollectionID.PopsicleBoom] = "popsiclesboom";
        this.CollectionID_To_FrameName_Map[CollectionID.PopsicleLine] = "popsiclesline";
        this.CollectionID_To_FrameName_Map[CollectionID.FloorGrass] = "grass";
        this.CollectionID_To_FrameName_Map[CollectionID.RugJam] = "jam";
        this.CollectionID_To_FrameName_Map[CollectionID.ItemNormalRed] = "red";
        this.CollectionID_To_FrameName_Map[CollectionID.ItemNormalGreen] = "green";
        this.CollectionID_To_FrameName_Map[CollectionID.ItemNormalBlue] = "blue";
        this.CollectionID_To_FrameName_Map[CollectionID.ItemNormalYellow] = "yellow";
        this.CollectionID_To_FrameName_Map[CollectionID.ItemNormalOrange] = "orange";
        this.CollectionID_To_FrameName_Map[CollectionID.ItemNormalPurple] = "purple";
        this.CollectionID_To_FrameName_Map[CollectionID.ItemBombButterflyRed] = "butterfly_red";
        this.CollectionID_To_FrameName_Map[CollectionID.ItemBombButterflyGreen] = "butterfly_green";
        this.CollectionID_To_FrameName_Map[CollectionID.ItemBombButterflyBlue] = "butterfly_blue";
        this.CollectionID_To_FrameName_Map[CollectionID.ItemBombButterflyYellow] = "butterfly_yellow";
        this.CollectionID_To_FrameName_Map[CollectionID.ItemBombButterflyOrange] = "butterfly_orange";
        this.CollectionID_To_FrameName_Map[CollectionID.ItemBombButterflyPurple] = "butterfly_purple";
        this.CollectionID_To_FrameName_Map[CollectionID.ItemBombRowRed] = "hline_red";
        this.CollectionID_To_FrameName_Map[CollectionID.ItemBombRowGreen] = "hline_green";
        this.CollectionID_To_FrameName_Map[CollectionID.ItemBombRowBlue] = "hline_blue";
        this.CollectionID_To_FrameName_Map[CollectionID.ItemBombRowYellow] = "hline_yellow";
        this.CollectionID_To_FrameName_Map[CollectionID.ItemBombRowOrange] = "hline_orange";
        this.CollectionID_To_FrameName_Map[CollectionID.ItemBombRowPurple] = "hline_purple";
        this.CollectionID_To_FrameName_Map[CollectionID.ItemBombColumnRed] = "vline_red";
        this.CollectionID_To_FrameName_Map[CollectionID.ItemBombColumnGreen] = "vline_green";
        this.CollectionID_To_FrameName_Map[CollectionID.ItemBombColumnBlue] = "vline_blue";
        this.CollectionID_To_FrameName_Map[CollectionID.ItemBombColumnYellow] = "vline_yellow";
        this.CollectionID_To_FrameName_Map[CollectionID.ItemBombColumnOrange] = "vline_orange";
        this.CollectionID_To_FrameName_Map[CollectionID.ItemBombColumnPurple] = "vline_purple";
        this.CollectionID_To_FrameName_Map[CollectionID.ItemBombCrossRed] = "cross_red";
        this.CollectionID_To_FrameName_Map[CollectionID.ItemBombCrossGreen] = "cross_green";
        this.CollectionID_To_FrameName_Map[CollectionID.ItemBombCrossBlue] = "cross_blue";
        this.CollectionID_To_FrameName_Map[CollectionID.ItemBombCrossYellow] = "cross_yellow";
        this.CollectionID_To_FrameName_Map[CollectionID.ItemBombCrossOrange] = "cross_orange";
        this.CollectionID_To_FrameName_Map[CollectionID.ItemBombCrossPurple] = "cross_purple";
        this.CollectionID_To_FrameName_Map[CollectionID.ItemBombRangeRed] = "boom_red";
        this.CollectionID_To_FrameName_Map[CollectionID.ItemBombRangeGreen] = "boom_green";
        this.CollectionID_To_FrameName_Map[CollectionID.ItemBombRangeBlue] = "boom_blue";
        this.CollectionID_To_FrameName_Map[CollectionID.ItemBombRangeYellow] = "boom_yellow";
        this.CollectionID_To_FrameName_Map[CollectionID.ItemBombRangeOrange] = "boom_orange";
        this.CollectionID_To_FrameName_Map[CollectionID.ItemBombRangePurple] = "boom_purple";
        this.CollectionID_To_FrameName_Map[CollectionID.ItemPawRed] = "paw_red";
        this.CollectionID_To_FrameName_Map[CollectionID.ItemPawGreen] = "paw_green";
        this.CollectionID_To_FrameName_Map[CollectionID.ItemPawBlue] = "paw_blue";
        this.CollectionID_To_FrameName_Map[CollectionID.ItemPawYellow] = "paw_yellow";
        this.CollectionID_To_FrameName_Map[CollectionID.ItemPawOrange] = "paw_orange";
        this.CollectionID_To_FrameName_Map[CollectionID.ItemPawPurple] = "paw_purple";
        this.CollectionID_To_FrameName_Map[CollectionID.ItemPawChromatic] = "paw_chromatic";
        this.CollectionID_To_FrameName_Map[CollectionID.ItemBombRainbow] = "rainbow";
        this.CollectionID_To_FrameName_Map[CollectionID.ItemBlock] = "block";
        this.CollectionID_To_FrameName_Map[CollectionID.ItemDoughnut] = "doughnut";
        this.CollectionID_To_FrameName_Map[CollectionID.ItemWatermelon] = "watermelon";
        this.CollectionID_To_FrameName_Map[CollectionID.ItemFruitCake] = "fruit_cake";
        this.CollectionID_To_FrameName_Map[CollectionID.ItemBone] = "bone";
        this.CollectionID_To_FrameName_Map[CollectionID.ItemChestnut] = "nut";
        this.CollectionID_To_FrameName_Map[CollectionID.ItemPuppy] = "doghouse";
        this.CollectionID_To_FrameName_Map[CollectionID.ItemStatue] = "statue";
        this.CollectionID_To_FrameName_Map[CollectionID.ParasiteIceCube] = "ice_cube";
        this.CollectionID_To_FrameName_Map[CollectionID.ParasiteHoney] = "honey";
        this.CollectionID_To_FrameName_Map[CollectionID.FlyerFireWorm] = "fireworm";
      };
      CollectionIDManager.prototype.getCollectionIDFromString = function(name) {
        var result = this.String_To_CollectID_Map[name];
        if (result) return result;
        return CollectionID.None;
      };
      CollectionIDManager.prototype.getCollectionNameFromID = function(collectionID) {
        var tmpMap = this.String_To_CollectID_Map;
        for (var key in tmpMap) if (tmpMap[key] == collectionID) return key;
        return "";
      };
      CollectionIDManager.prototype.getFrameNameFromCollectionID = function(collectionID) {
        var result = this.CollectionID_To_FrameName_Map[collectionID];
        if (result) return "common/texture/icons/match/" + result;
        return "icons_unknow.png";
      };
      CollectionIDManager.instance = null;
      return CollectionIDManager;
    }();
    exports.CollectionIDManager = CollectionIDManager;
    cc._RF.pop();
  }, {} ],
  CompleteBanner: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "a424ej74+9FtqSHuSid96eK", "CompleteBanner");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var IGame_1 = require("../../../base/IGame");
    var IdentifierManager_1 = require("../defines/IdentifierManager");
    var GameSceneBase_1 = require("../GameSceneBase");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var CompleteBanner = function(_super) {
      __extends(CompleteBanner, _super);
      function CompleteBanner() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.maskView = null;
        _this.title = null;
        _this._completeCallback = null;
        _this._displayDuraion = 0;
        return _this;
      }
      CompleteBanner_1 = CompleteBanner;
      CompleteBanner.create = function(level, completeCallback, hideLevel) {
        void 0 === completeCallback && (completeCallback = null);
        void 0 === hideLevel && (hideLevel = false);
        var res = cc.loader.getRes("match_scene/prefab/userInterface/CompleteBanner", cc.Prefab);
        if (res) {
          var node = cc.instantiate(res);
          if (node) {
            var component = node.getComponent(CompleteBanner_1);
            component && component.init(level, completeCallback, hideLevel);
            return component;
          }
        }
      };
      CompleteBanner.prototype.init = function(level, completeCallback, hideLevel) {
        this._completeCallback = completeCallback;
        this.title.string = hideLevel ? " " : "\u7b2c" + level.toString() + "\u5173";
      };
      CompleteBanner.prototype.start = function() {
        var canvas = cc.find("Canvas");
        if (canvas) {
          var gameScene = canvas.getComponent(GameSceneBase_1.default);
          gameScene.reportStepComplete();
        }
        var anim = this.node.getComponent(cc.Animation);
        anim.play("appear");
        IGame_1.default.playAudio(IdentifierManager_1.default.getInstance().getMatchAudioFilePath("voice_level_complete"));
      };
      CompleteBanner.prototype.didAppear = function() {
        this._displayDuraion = 2.2;
        this.maskView.on("touchstart", this.onTouchStart, this);
        var anim = this.node.getComponent(cc.Animation);
        anim.play("idle");
      };
      CompleteBanner.prototype.update = function(dt) {
        dt *= cc.director.getScheduler().getTimeScale();
        if (this._displayDuraion > 0) {
          this._displayDuraion -= dt;
          if (this._displayDuraion <= 0) {
            var anim = this.node.getComponent(cc.Animation);
            anim.play("disappear");
          }
        }
      };
      CompleteBanner.prototype.didDisappear = function() {
        this._completeCallback && this._completeCallback.call(this, null);
        this.node.destroy();
      };
      CompleteBanner.prototype.onTouchStart = function(evt) {
        if (this._displayDuraion > 0) {
          this._displayDuraion = 0;
          var anim = this.node.getComponent(cc.Animation);
          anim.play("disappear");
        }
      };
      CompleteBanner.prototype.onDestroy = function() {
        this._completeCallback = null;
      };
      var CompleteBanner_1;
      __decorate([ property(cc.Node) ], CompleteBanner.prototype, "maskView", void 0);
      __decorate([ property(cc.Label) ], CompleteBanner.prototype, "title", void 0);
      CompleteBanner = CompleteBanner_1 = __decorate([ ccclass ], CompleteBanner);
      return CompleteBanner;
    }(cc.Component);
    exports.default = CompleteBanner;
    cc._RF.pop();
  }, {
    "../../../base/IGame": "IGame",
    "../GameSceneBase": "GameSceneBase",
    "../defines/IdentifierManager": "IdentifierManager"
  } ],
  CurveToAction: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "db301QLdplCI7YyTIu10qCl", "CurveToAction");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var GameMath_1 = require("../utils/GameMath");
    var CurveToAction = function() {
      function CurveToAction() {}
      CurveToAction.create = function(duration, starPoint, endPoint) {
        var dis = endPoint.sub(starPoint);
        var angleDes = Math.atan2(dis.x, dis.y) / Math.PI * 180;
        var offsetR = 40 + Math.floor(5 * Math.random() + 1);
        Math.random() > .5 && (offsetR = -offsetR);
        angleDes += offsetR;
        angleDes %= 360;
        angleDes < 0 && (angleDes = 360 + angleDes);
        angleDes - 90 >= 180 ? angleDes = 360 - (angleDes - 90) : angleDes -= 90;
        var r = .5 * GameMath_1.default.getDistance(starPoint, endPoint);
        var rangle = angleDes * Math.PI / 180;
        var x1 = starPoint.x + r * Math.cos(rangle);
        var y1 = starPoint.y + r * Math.sin(rangle);
        var bezier = [ cc.v2(x1, y1), cc.v2(endPoint.x, endPoint.y), cc.v2(endPoint.x, endPoint.y) ];
        var bezierTo = cc.bezierTo(duration, bezier);
        return bezierTo;
      };
      CurveToAction.createNotRandom = function(duration, starPoint, endPoint) {
        var dis = endPoint.sub(starPoint);
        var angleDes = Math.atan2(dis.x, dis.y) / Math.PI * 180;
        angleDes -= 160;
        angleDes %= 360;
        angleDes < 0 && (angleDes = 360 + angleDes);
        angleDes - 90 >= 180 ? angleDes = 360 - (angleDes - 90) : angleDes -= 90;
        var r = .6 * GameMath_1.default.getDistance(endPoint, starPoint);
        var rangle = angleDes * Math.PI / 180;
        var x1 = endPoint.x + r * Math.cos(rangle);
        var y1 = endPoint.y + r * Math.sin(rangle);
        var bezier = [ cc.v2(x1, y1), cc.v2(endPoint.x, endPoint.y), cc.v2(endPoint.x, endPoint.y) ];
        var bezierTo = cc.bezierTo(duration, bezier);
        return bezierTo;
      };
      return CurveToAction;
    }();
    exports.default = CurveToAction;
    cc._RF.pop();
  }, {
    "../utils/GameMath": "GameMath"
  } ],
  EMatchType: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "0130d0SxItD+YnSeo0XLmFV", "EMatchType");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.GameConfigModelType = exports.GameType = void 0;
    var GameType;
    (function(GameType) {
      GameType[GameType["None"] = 0] = "None";
      GameType[GameType["Order"] = 1] = "Order";
      GameType[GameType["Grass"] = 2] = "Grass";
      GameType[GameType["Popsicle"] = 3] = "Popsicle";
      GameType[GameType["Path"] = 4] = "Path";
    })(GameType = exports.GameType || (exports.GameType = {}));
    var GameConfigModelType;
    (function(GameConfigModelType) {
      GameConfigModelType[GameConfigModelType["GCM_ErrorNoneData"] = -1] = "GCM_ErrorNoneData";
      GameConfigModelType[GameConfigModelType["GCM_CFGTripleLevelOrder"] = 1] = "GCM_CFGTripleLevelOrder";
      GameConfigModelType[GameConfigModelType["GCM_CFGTripleLevelGrass"] = 2] = "GCM_CFGTripleLevelGrass";
      GameConfigModelType[GameConfigModelType["GCM_CFGTripleLevelPopsicles"] = 3] = "GCM_CFGTripleLevelPopsicles";
      GameConfigModelType[GameConfigModelType["GCM_CFGTripleLevelPath"] = 4] = "GCM_CFGTripleLevelPath";
    })(GameConfigModelType = exports.GameConfigModelType || (exports.GameConfigModelType = {}));
    cc._RF.pop();
  }, {} ],
  EViewZIndex: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "a9494x5BupII5JSMiCa1xNF", "EViewZIndex");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.EViewZIndex = void 0;
    var EViewZIndex;
    (function(EViewZIndex) {
      EViewZIndex[EViewZIndex["None"] = 0] = "None";
      EViewZIndex[EViewZIndex["Panel"] = 100] = "Panel";
      EViewZIndex[EViewZIndex["Effect"] = 9e3] = "Effect";
      EViewZIndex[EViewZIndex["Guide"] = 1e4] = "Guide";
      EViewZIndex[EViewZIndex["Tip"] = 15e3] = "Tip";
      EViewZIndex[EViewZIndex["MessageBox"] = 2e4] = "MessageBox";
      EViewZIndex[EViewZIndex["Loading"] = 3e4] = "Loading";
    })(EViewZIndex = exports.EViewZIndex || (exports.EViewZIndex = {}));
    cc._RF.pop();
  }, {} ],
  EntityBase: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "20875pTlgdNUphN/J11RRZC", "EntityBase");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var GameMath_1 = require("../../../extend/utils/GameMath");
    var CollectionID_1 = require("../defines/CollectionID");
    var EntityID_1 = require("../defines/EntityID");
    var IdentifierManager_1 = require("../defines/IdentifierManager");
    var PowerID_1 = require("../defines/PowerID");
    var TMXConfigInfoKeys_1 = require("../defines/TMXConfigInfoKeys");
    var EntityPrefabNodePool_1 = require("./EntityPrefabNodePool");
    var EntityStateWait_1 = require("./state/concreteState/EntityStateWait");
    var EntityStateMachine_1 = require("./state/EntityStateMachine");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var EntityBase = function(_super) {
      __extends(EntityBase, _super);
      function EntityBase() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this._puppet = null;
        _this._stateMachine = null;
        _this._occupyArea = cc.rect(0, 0, 0, 0);
        _this._tileSize = cc.size(0, 0);
        _this._visible = true;
        _this._grid = null;
        _this._entityType = EntityID_1.EntityType.None;
        _this._entityColor = EntityID_1.EntityColor.None;
        _this._fireWorksAttackedPriority = EntityBase_1.DEFAULT_FIREWORKS_ATTACKED_PRIORITY;
        _this._missileAttackedPriority = EntityBase_1.DEFAULT_MISSILE_PRIORITY;
        _this._immuneDamage = false;
        _this._prefabFileName = "";
        _this._path = [];
        return _this;
      }
      EntityBase_1 = EntityBase;
      EntityBase.getEntitySpriteFarme = function(frameName) {
        var result = null;
        var spriteFrame = cc.loader.getRes(frameName, cc.SpriteFrame);
        spriteFrame && (result = spriteFrame);
        return result;
      };
      EntityBase.prototype.getPuppet = function() {
        return this._puppet;
      };
      EntityBase.prototype.setPuppetSpriteFrameName = function(frameName) {
        var spriteFrame = EntityBase_1.getEntitySpriteFarme(frameName);
        if (spriteFrame && this._puppet) {
          var sprite = this._puppet.getComponent(cc.Sprite);
          sprite && (sprite.spriteFrame = spriteFrame);
        }
      };
      EntityBase.prototype.updatePuppet = function() {
        var frameName = IdentifierManager_1.default.getInstance().getFrameNameFromEntityID(this.getEntityID());
        this.setPuppetSpriteFrameName(frameName);
      };
      EntityBase.prototype.getVisible = function() {
        return this._visible;
      };
      EntityBase.prototype.setVisible = function(visible) {
        this._visible = visible;
        this._visible ? this.node.opacity = 255 : this.node.opacity = 0;
      };
      EntityBase.prototype.playAnimation = function(name) {
        var anim = this.node.getComponent(cc.Animation);
        if (anim) return anim.play(name);
        return null;
      };
      EntityBase.prototype.pauseAnimation = function(name) {
        var anim = this.node.getComponent(cc.Animation);
        anim && null != anim.getAnimationState(name) && anim.pause(name);
        return null;
      };
      EntityBase.prototype.setCurrentAnimationTime = function(time, name) {
        var anim = this.node.getComponent(cc.Animation);
        anim && null != anim.getAnimationState(name) && anim.setCurrentTime(time, name);
        return null;
      };
      EntityBase.prototype.getAnimationState = function(name) {
        var anim = this.node.getComponent(cc.Animation);
        if (anim) return anim.getAnimationState(name);
        return null;
      };
      EntityBase.prototype.getCurrentAnimationClipName = function() {
        var anim = this.getComponent(cc.Animation);
        if (anim) {
          var clip = anim.currentClip;
          if (clip) return clip.name;
        }
        return "";
      };
      EntityBase.prototype.getContentSize = function() {
        return this.node.getContentSize();
      };
      EntityBase.prototype.setContentSize = function(size) {
        this.node.setContentSize(size);
      };
      EntityBase.prototype.runAction = function(action) {
        return this.node.runAction(action);
      };
      EntityBase.prototype.clone = function() {
        return null;
      };
      EntityBase.prototype.getEntityComponent = function() {
        return null;
      };
      EntityBase.prototype.getGrid = function() {
        return this._grid;
      };
      EntityBase.prototype.getEntityType = function() {
        return this._entityType;
      };
      EntityBase.prototype.onCollected = function() {
        var collectFactor = 1;
        var floor = this.getGrid().getFloorAtLogicalPos(this.getLogicalPos());
        floor && floor.getEntityID() == EntityID_1.EntityID.FloorDouble && (collectFactor = 2);
        for (var i = 0; i < collectFactor; i++) {
          this.getGrid().chargeFlyer(this);
          this.getGrid().createCollectedEntityFlyer(this);
          this.getGrid().collectEntity(this);
        }
      };
      EntityBase.prototype.isTargetCollection = function() {
        return this.getGrid().isTargetCollectionID(this.getCollectionID());
      };
      EntityBase.prototype.removeFromGrid = function() {
        this.getGrid().removeEntity(this.getEntityType(), this.getLogicalPos());
      };
      EntityBase.prototype.removeFromGridAndAddToEffect = function() {
        this.removeFromGrid();
        this.node.parent = this.getGrid().node;
        this.setPixelPos(this.getLogicalPos());
        this.node.zIndex = this.getTopZOrder();
      };
      EntityBase.prototype.shiftToEffectLayer = function() {
        this.getGrid().shiftEntityToEffectLayer(this);
      };
      EntityBase.prototype.getEntityColor = function() {
        return this._entityColor;
      };
      EntityBase.prototype.setEntityColor = function(color) {
        this._entityColor = color;
        this.updatePuppet();
      };
      EntityBase.prototype.getFireWorksAttackedPriority = function() {
        return this._fireWorksAttackedPriority;
      };
      EntityBase.prototype.setFireWorksAttackedPriority = function(priority) {
        this._fireWorksAttackedPriority = priority;
      };
      EntityBase.prototype.getMissileAttackedPriority = function() {
        return this._missileAttackedPriority;
      };
      EntityBase.prototype.setMissileAttackedPriority = function(priority) {
        this._missileAttackedPriority = priority;
      };
      EntityBase.prototype.getImmuneDamage = function() {
        return this._immuneDamage;
      };
      EntityBase.prototype.setImmuneDamage = function(immuneDamage) {
        this._immuneDamage = immuneDamage;
      };
      EntityBase.prototype.getCurrentStateType = function() {
        var state = this.getCurrentState();
        return state.getType();
      };
      EntityBase.prototype.getCurrentState = function() {
        var state = this._stateMachine.getCurrentState();
        return state;
      };
      EntityBase.prototype.setCurrentState = function(state) {
        this._stateMachine.setCurrentState(state);
      };
      EntityBase.prototype.dealWithConfigMap = function(config) {
        var fireworkAttackedPriority = config[TMXConfigInfoKeys_1.default.CFG_FIREWORK_ATTACKED_PRIORITY];
        if (fireworkAttackedPriority) {
          var priority = Number(fireworkAttackedPriority);
          this.setFireWorksAttackedPriority(priority);
        }
        var missileAttackedPriority = config[TMXConfigInfoKeys_1.default.CFG_MISSILE_ATTACKED_PRIORITY];
        if (missileAttackedPriority) {
          var priority = Number(missileAttackedPriority);
          this.setMissileAttackedPriority(priority);
        }
      };
      EntityBase.prototype.getEntityID = function() {
        return EntityID_1.EntityID.None;
      };
      EntityBase.prototype.getPrefabFileName = function() {
        return this._prefabFileName;
      };
      EntityBase.prototype.setPrefabFileName = function(fileName) {
        return this._prefabFileName = fileName;
      };
      EntityBase.prototype.getCollectionID = function() {
        return CollectionID_1.CollectionID.None;
      };
      EntityBase.prototype.getProducedTrainSupplyMaps = function() {
        return {};
      };
      EntityBase.prototype.getPowerID = function() {
        return PowerID_1.PowerID.None;
      };
      EntityBase.prototype.getScore = function() {
        return 0;
      };
      EntityBase.prototype.getButterflyPriority = function(cleanColor, willLayoutGrass) {
        return IdentifierManager_1.default.getInstance().getDefaultButterflyPriorityFromEntityID(this.getEntityID());
      };
      EntityBase.prototype.getLogicalPos = function() {
        return this._occupyArea.origin;
      };
      EntityBase.prototype.setLogicalPos = function(pos) {
        this._occupyArea.origin = pos;
        this.node.setPosition(this.getPixelPos(pos));
        this.node.zIndex = this.getBottomZOrder();
      };
      EntityBase.prototype.getPixelPos = function(logicalPos) {
        var contentSize = this.getContentSize();
        var offset = cc.v2(.5 * contentSize.width - .5 * this._tileSize.width, .5 * contentSize.height - .5 * this._tileSize.height);
        var pixePos = this.getGrid().getPixelPosFromLogicalPos(logicalPos).add(offset);
        return pixePos;
      };
      EntityBase.prototype.setPixelPos = function(logicalPos) {
        this.node.setPosition(this.getPixelPos(logicalPos));
      };
      EntityBase.prototype.getTopZOrder = function() {
        return this.getGrid().getTopZOrderForEnity(this);
      };
      EntityBase.prototype.getBottomZOrder = function() {
        return this.getGrid().getBottomZOrderForEnity(this);
      };
      EntityBase.prototype.getLogicalSize = function() {
        return this._occupyArea.size;
      };
      EntityBase.prototype.getOccupyArea = function() {
        return this._occupyArea;
      };
      EntityBase.prototype.getPath = function() {
        return this._path;
      };
      EntityBase.prototype.addStepToPath = function(step) {
        this._path.push(step);
      };
      EntityBase.prototype.clearPath = function() {
        GameMath_1.default.clearArray(this._path);
      };
      EntityBase.prototype.canExcuteCommand = function(command) {
        return false;
      };
      EntityBase.prototype.excuteCommand = function(command) {};
      EntityBase.prototype.initEntity = function(grid, entityType, width, height) {
        void 0 === width && (width = 1);
        void 0 === height && (height = 1);
        this._grid = grid;
        if (this._grid) {
          this._puppet = this.node.getChildByName("puppet");
          this._entityType = entityType;
          this._occupyArea.width = width;
          this._occupyArea.height = height;
          this._tileSize = this._grid.getCellSize();
          var size = cc.size(this._tileSize.width * width, this._tileSize.height * height);
          this.node.setContentSize(size);
          this.node.setAnchorPoint(cc.v2(.5, .5));
        }
        this._stateMachine = EntityStateMachine_1.default.create(this);
        this.setCurrentState(EntityStateWait_1.default.create());
      };
      EntityBase.prototype.onLoad = function() {};
      EntityBase.prototype.update = function(dt) {
        dt *= cc.director.getScheduler().getTimeScale();
        this._stateMachine.update(dt);
      };
      EntityBase.prototype.onDestroy = function() {
        this._puppet = null;
        this._stateMachine = null;
        this._occupyArea = null;
        this._tileSize = null;
        this._grid = null;
        this._prefabFileName = null;
        this._path = null;
      };
      EntityBase.prototype.destoryWithRecycle = function(recycle) {
        void 0 === recycle && (recycle = false);
        if (recycle) {
          this.resetForRecycle();
          this.node.removeFromParent(true);
          EntityPrefabNodePool_1.default.getInstance().putPrefabNode(this);
        } else this.node.destroy();
      };
      EntityBase.prototype.resetForRecycle = function() {
        this.node.scale = 1;
        this.node.angle = 0;
        this.node.opacity = 255;
        this._grid = null;
        this._stateMachine = null;
        this._fireWorksAttackedPriority = EntityBase_1.DEFAULT_FIREWORKS_ATTACKED_PRIORITY;
        this._missileAttackedPriority = EntityBase_1.DEFAULT_MISSILE_PRIORITY;
        this.clearPath();
        this.setImmuneDamage(false);
        this.setVisible(true);
      };
      EntityBase.prototype.selfDestory = function(recycle) {
        var _this = this;
        void 0 === recycle && (recycle = false);
        this.removeFromGridAndAddToEffect();
        this.getGrid().addObstructs(this);
        this.runAction(cc.sequence(cc.delayTime(.05), cc.callFunc(function() {
          _this.getGrid().removeObstructs(_this);
          _this.destoryWithRecycle(recycle);
        })));
      };
      EntityBase.prototype.selfHurt = function() {
        var _this = this;
        this.getGrid().addObstructs(this);
        this.runAction(cc.sequence(cc.delayTime(.05), cc.callFunc(function() {
          _this.getGrid().removeObstructs(_this);
        })));
      };
      var EntityBase_1;
      EntityBase.DEFAULT_MISSILE_PRIORITY = 9999;
      EntityBase.DEFAULT_FIREWORKS_ATTACKED_PRIORITY = 999;
      EntityBase = EntityBase_1 = __decorate([ ccclass ], EntityBase);
      return EntityBase;
    }(cc.Component);
    exports.default = EntityBase;
    cc._RF.pop();
  }, {
    "../../../extend/utils/GameMath": "GameMath",
    "../defines/CollectionID": "CollectionID",
    "../defines/EntityID": "EntityID",
    "../defines/IdentifierManager": "IdentifierManager",
    "../defines/PowerID": "PowerID",
    "../defines/TMXConfigInfoKeys": "TMXConfigInfoKeys",
    "./EntityPrefabNodePool": "EntityPrefabNodePool",
    "./state/EntityStateMachine": "EntityStateMachine",
    "./state/concreteState/EntityStateWait": "EntityStateWait"
  } ],
  EntityEventBase: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "1fb3fX4Ql1HwqVHj2p1CjB8", "EntityEventBase");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.EntityEventType = void 0;
    var EntityEventType;
    (function(EntityEventType) {
      EntityEventType[EntityEventType["EntityChanged"] = 0] = "EntityChanged";
    })(EntityEventType = exports.EntityEventType || (exports.EntityEventType = {}));
    var EntityEventBase = function(_super) {
      __extends(EntityEventBase, _super);
      function EntityEventBase(type) {
        var _this = _super.call(this, EntityEventBase.ENTITY_EVENT_KEY, true) || this;
        _this._type = type;
        return _this;
      }
      EntityEventBase.prototype.getEventType = function() {
        return this._type;
      };
      EntityEventBase.ENTITY_EVENT_KEY = "ENTITY_EVENT_KEY";
      return EntityEventBase;
    }(cc.Event.EventCustom);
    exports.default = EntityEventBase;
    cc._RF.pop();
  }, {} ],
  EntityEventChanged: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "bb7a4OkVYJIVYRpuFBNn4HX", "EntityEventChanged");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var EntityEventBase_1 = require("./EntityEventBase");
    var EntityEventChanged = function(_super) {
      __extends(EntityEventChanged, _super);
      function EntityEventChanged(entity) {
        var _this = _super.call(this, EntityEventBase_1.EntityEventType.EntityChanged) || this;
        _this._entity = entity;
        return _this;
      }
      EntityEventChanged.prototype.getEntity = function() {
        return this._entity;
      };
      EntityEventChanged.create = function(entity) {
        return new EntityEventChanged(entity);
      };
      return EntityEventChanged;
    }(EntityEventBase_1.default);
    exports.default = EntityEventChanged;
    cc._RF.pop();
  }, {
    "./EntityEventBase": "EntityEventBase"
  } ],
  EntityGroupID: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "74011RMezNNIZygITMSa8FQ", "EntityGroupID");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.EntityGroupID = void 0;
    var EntityID_1 = require("./EntityID");
    var EntityGroupID;
    (function(EntityGroupID) {
      EntityGroupID[EntityGroupID["None"] = 0] = "None";
      EntityGroupID[EntityGroupID["ItemNormal"] = 601] = "ItemNormal";
      EntityGroupID[EntityGroupID["ItemBombButterfly"] = 602] = "ItemBombButterfly";
      EntityGroupID[EntityGroupID["ItemBombRow"] = 603] = "ItemBombRow";
      EntityGroupID[EntityGroupID["ItemBombColumn"] = 604] = "ItemBombColumn";
      EntityGroupID[EntityGroupID["ItemBombCross"] = 605] = "ItemBombCross";
      EntityGroupID[EntityGroupID["ItemBombRange"] = 606] = "ItemBombRange";
      EntityGroupID[EntityGroupID["ItemPaw"] = 621] = "ItemPaw";
      EntityGroupID[EntityGroupID["ParasiteGiftBox"] = 704] = "ParasiteGiftBox";
    })(EntityGroupID = exports.EntityGroupID || (exports.EntityGroupID = {}));
    var EntityGroupIDManager = function() {
      function EntityGroupIDManager() {
        this.String_To_EntityGroupID_Map = {};
        this.EntityGroupID_To_EntityIDs_Map = {};
        this.EntityGroupID_To_FrameName_Map = {};
        this.initString_To_EntityGroupID_Map();
        this.initEntityGroupID_To_EntityIDs_Map();
        this.initEntityGroupID_To_FrameName_Map();
      }
      EntityGroupIDManager.getInstance = function() {
        null == this.instance && (this.instance = new EntityGroupIDManager());
        return this.instance;
      };
      EntityGroupIDManager.prototype.initString_To_EntityGroupID_Map = function() {
        this.String_To_EntityGroupID_Map["fruit"] = EntityGroupID.ItemNormal;
        this.String_To_EntityGroupID_Map["butterfly"] = EntityGroupID.ItemBombButterfly;
        this.String_To_EntityGroupID_Map["hLine"] = EntityGroupID.ItemBombRow;
        this.String_To_EntityGroupID_Map["vLine"] = EntityGroupID.ItemBombColumn;
        this.String_To_EntityGroupID_Map["cross"] = EntityGroupID.ItemBombCross;
        this.String_To_EntityGroupID_Map["boom"] = EntityGroupID.ItemBombRange;
        this.String_To_EntityGroupID_Map["paw"] = EntityGroupID.ItemPaw;
        this.String_To_EntityGroupID_Map["giftBox"] = EntityGroupID.ParasiteGiftBox;
      };
      EntityGroupIDManager.prototype.initEntityGroupID_To_EntityIDs_Map = function() {
        this.EntityGroupID_To_EntityIDs_Map[EntityGroupID.ItemNormal] = [ EntityID_1.EntityID.ItemNormalRed, EntityID_1.EntityID.ItemNormalGreen, EntityID_1.EntityID.ItemNormalBlue, EntityID_1.EntityID.ItemNormalYellow, EntityID_1.EntityID.ItemNormalOrange, EntityID_1.EntityID.ItemNormalPurple ];
        this.EntityGroupID_To_EntityIDs_Map[EntityGroupID.ItemBombButterfly] = [ EntityID_1.EntityID.ItemBombButterflyRed, EntityID_1.EntityID.ItemBombButterflyGreen, EntityID_1.EntityID.ItemBombButterflyBlue, EntityID_1.EntityID.ItemBombButterflyYellow, EntityID_1.EntityID.ItemBombButterflyOrange, EntityID_1.EntityID.ItemBombButterflyPurple ];
        this.EntityGroupID_To_EntityIDs_Map[EntityGroupID.ItemBombRow] = [ EntityID_1.EntityID.ItemBombRowRed, EntityID_1.EntityID.ItemBombRowGreen, EntityID_1.EntityID.ItemBombRowBlue, EntityID_1.EntityID.ItemBombRowYellow, EntityID_1.EntityID.ItemBombRowOrange, EntityID_1.EntityID.ItemBombRowPurple ];
        this.EntityGroupID_To_EntityIDs_Map[EntityGroupID.ItemBombColumn] = [ EntityID_1.EntityID.ItemBombColumnRed, EntityID_1.EntityID.ItemBombColumnGreen, EntityID_1.EntityID.ItemBombColumnBlue, EntityID_1.EntityID.ItemBombColumnYellow, EntityID_1.EntityID.ItemBombColumnOrange, EntityID_1.EntityID.ItemBombColumnPurple ];
        this.EntityGroupID_To_EntityIDs_Map[EntityGroupID.ItemBombCross] = [ EntityID_1.EntityID.ItemBombCrossRed, EntityID_1.EntityID.ItemBombCrossGreen, EntityID_1.EntityID.ItemBombCrossBlue, EntityID_1.EntityID.ItemBombCrossYellow, EntityID_1.EntityID.ItemBombCrossOrange, EntityID_1.EntityID.ItemBombCrossPurple ];
        this.EntityGroupID_To_EntityIDs_Map[EntityGroupID.ItemBombRange] = [ EntityID_1.EntityID.ItemBombRangeRed, EntityID_1.EntityID.ItemBombRangeGreen, EntityID_1.EntityID.ItemBombRangeBlue, EntityID_1.EntityID.ItemBombRangeYellow, EntityID_1.EntityID.ItemBombRangeOrange, EntityID_1.EntityID.ItemBombRangePurple ];
        this.EntityGroupID_To_EntityIDs_Map[EntityGroupID.ItemPaw] = [ EntityID_1.EntityID.ItemPawRed, EntityID_1.EntityID.ItemPawGreen, EntityID_1.EntityID.ItemPawBlue, EntityID_1.EntityID.ItemPawYellow, EntityID_1.EntityID.ItemPawOrange, EntityID_1.EntityID.ItemPawPurple ];
        this.EntityGroupID_To_EntityIDs_Map[EntityGroupID.ParasiteGiftBox] = [ EntityID_1.EntityID.ParasiteGiftBoxRed, EntityID_1.EntityID.ParasiteGiftBoxGreen, EntityID_1.EntityID.ParasiteGiftBoxBlue, EntityID_1.EntityID.ParasiteGiftBoxYellow, EntityID_1.EntityID.ParasiteGiftBoxOrange, EntityID_1.EntityID.ParasiteGiftBoxPurple ];
      };
      EntityGroupIDManager.prototype.initEntityGroupID_To_FrameName_Map = function() {
        this.EntityGroupID_To_FrameName_Map[EntityGroupID.ItemNormal] = "items/60701.png";
        this.EntityGroupID_To_FrameName_Map[EntityGroupID.ItemBombButterfly] = "items/60207.png";
        this.EntityGroupID_To_FrameName_Map[EntityGroupID.ItemBombRow] = "items/60307.png";
        this.EntityGroupID_To_FrameName_Map[EntityGroupID.ItemBombColumn] = "items/60407.png";
        this.EntityGroupID_To_FrameName_Map[EntityGroupID.ItemBombCross] = "items/60507.png";
        this.EntityGroupID_To_FrameName_Map[EntityGroupID.ItemBombRange] = "items/60607.png";
        this.EntityGroupID_To_FrameName_Map[EntityGroupID.ItemPaw] = "items/62107.png";
        this.EntityGroupID_To_FrameName_Map[EntityGroupID.ParasiteGiftBox] = "parasites/70407.png";
      };
      EntityGroupIDManager.prototype.getEntityGroupIDFromString = function(name) {
        var result = this.String_To_EntityGroupID_Map[name];
        if (result) return result;
        return EntityGroupID.None;
      };
      EntityGroupIDManager.prototype.getFrameNameFromEntityGroupID = function(groupID) {
        var rootPath = "match_scene/texture/entities/";
        var result = this.EntityGroupID_To_FrameName_Map[groupID];
        if (result) return rootPath + result;
        return rootPath + "unknow/unknow";
      };
      EntityGroupIDManager.prototype.getEntityIDsFromEntityGroupID = function(groupID) {
        var result = this.EntityGroupID_To_EntityIDs_Map[groupID];
        if (result) return result;
        return [];
      };
      EntityGroupIDManager.prototype.getEntityGroupIDFromEntityID = function(entityID) {
        var tempMap = this.EntityGroupID_To_EntityIDs_Map;
        for (var key in tempMap) if (tempMap.hasOwnProperty(key)) {
          var entityIDs = tempMap[key];
          for (var _i = 0, entityIDs_1 = entityIDs; _i < entityIDs_1.length; _i++) {
            var id = entityIDs_1[_i];
            if (id == entityID) {
              var result = Number(key);
              return result;
            }
          }
        }
        return EntityGroupID.None;
      };
      EntityGroupIDManager.instance = null;
      return EntityGroupIDManager;
    }();
    exports.default = EntityGroupIDManager;
    cc._RF.pop();
  }, {
    "./EntityID": "EntityID"
  } ],
  EntityID: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "1dadeMCXIxKvJaZzPD5dR/5", "EntityID");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.EntityIDManager = exports.HurtAnimationInfo = exports.EntityDropStep = exports.EntityDropStepType = exports.EntityChargeOption = exports.EntityChangeOption = exports.EntityCleanOption = exports.EntityCleanType = exports.EntityColor = exports.EntityType = exports.EntityID = void 0;
    var ItemBombBase_1 = require("../entity/item/color/bomb/ItemBombBase");
    var CollectionID_1 = require("./CollectionID");
    var EntityBase_1 = require("../entity/EntityBase");
    var EntityID;
    (function(EntityID) {
      EntityID[EntityID["None"] = 0] = "None";
      EntityID[EntityID["Frame"] = 1] = "Frame";
      EntityID[EntityID["CellNormal"] = 10101] = "CellNormal";
      EntityID[EntityID["CellConveyerD2U"] = 20101] = "CellConveyerD2U";
      EntityID[EntityID["CellConveyerL2R"] = 20102] = "CellConveyerL2R";
      EntityID[EntityID["CellConveyerU2D"] = 20103] = "CellConveyerU2D";
      EntityID[EntityID["CellConveyerR2L"] = 20104] = "CellConveyerR2L";
      EntityID[EntityID["CellConveyerD2L"] = 20105] = "CellConveyerD2L";
      EntityID[EntityID["CellConveyerL2U"] = 20106] = "CellConveyerL2U";
      EntityID[EntityID["CellConveyerU2R"] = 20107] = "CellConveyerU2R";
      EntityID[EntityID["CellConveyerR2D"] = 20108] = "CellConveyerR2D";
      EntityID[EntityID["CellConveyerD2R"] = 20109] = "CellConveyerD2R";
      EntityID[EntityID["CellConveyerR2U"] = 20110] = "CellConveyerR2U";
      EntityID[EntityID["CellConveyerU2L"] = 20111] = "CellConveyerU2L";
      EntityID[EntityID["CellConveyerL2D"] = 20112] = "CellConveyerL2D";
      EntityID[EntityID["CellMovablePlate"] = 20201] = "CellMovablePlate";
      EntityID[EntityID["PopsicleNormal"] = 30101] = "PopsicleNormal";
      EntityID[EntityID["PopsicleNormal_1x1"] = 30101] = "PopsicleNormal_1x1";
      EntityID[EntityID["PopsicleNormal_1x2"] = 30102] = "PopsicleNormal_1x2";
      EntityID[EntityID["PopsicleNormal_2x2"] = 30103] = "PopsicleNormal_2x2";
      EntityID[EntityID["PopsicleNormal_2x3"] = 30104] = "PopsicleNormal_2x3";
      EntityID[EntityID["PopsicleNormal_3x3"] = 30105] = "PopsicleNormal_3x3";
      EntityID[EntityID["PopsicleNormal_3x4"] = 30106] = "PopsicleNormal_3x4";
      EntityID[EntityID["PopsicleBoom"] = 30201] = "PopsicleBoom";
      EntityID[EntityID["PopsicleBoom_2x2"] = 30201] = "PopsicleBoom_2x2";
      EntityID[EntityID["PopsicleBoom_1x1"] = 30202] = "PopsicleBoom_1x1";
      EntityID[EntityID["PopsicleLine"] = 30301] = "PopsicleLine";
      EntityID[EntityID["FloorGrass"] = 40101] = "FloorGrass";
      EntityID[EntityID["FloorIceHp1"] = 40201] = "FloorIceHp1";
      EntityID[EntityID["FloorIceHp2"] = 40202] = "FloorIceHp2";
      EntityID[EntityID["FloorIceHp3"] = 40203] = "FloorIceHp3";
      EntityID[EntityID["FloorIceHp4"] = 40204] = "FloorIceHp4";
      EntityID[EntityID["FloorChangerRed"] = 40301] = "FloorChangerRed";
      EntityID[EntityID["FloorChangerGreen"] = 40302] = "FloorChangerGreen";
      EntityID[EntityID["FloorChangerBlue"] = 40303] = "FloorChangerBlue";
      EntityID[EntityID["FloorChangerYellow"] = 40304] = "FloorChangerYellow";
      EntityID[EntityID["FloorChangerOrange"] = 40305] = "FloorChangerOrange";
      EntityID[EntityID["FloorChangerPurple"] = 40306] = "FloorChangerPurple";
      EntityID[EntityID["FloorDouble"] = 40401] = "FloorDouble";
      EntityID[EntityID["FloorRoadLineVU"] = 40501] = "FloorRoadLineVU";
      EntityID[EntityID["FloorRoadLineHR"] = 40502] = "FloorRoadLineHR";
      EntityID[EntityID["FloorRoadLineVD"] = 40503] = "FloorRoadLineVD";
      EntityID[EntityID["FloorRoadLineHL"] = 40504] = "FloorRoadLineHL";
      EntityID[EntityID["FloorRoadTurnLdD"] = 40505] = "FloorRoadTurnLdD";
      EntityID[EntityID["FloorRoadTurnLuL"] = 40506] = "FloorRoadTurnLuL";
      EntityID[EntityID["FloorRoadTurnRuU"] = 40507] = "FloorRoadTurnRuU";
      EntityID[EntityID["FloorRoadTurnRdR"] = 40508] = "FloorRoadTurnRdR";
      EntityID[EntityID["FloorRoadTurnRdD"] = 40509] = "FloorRoadTurnRdD";
      EntityID[EntityID["FloorRoadTurnRuR"] = 40510] = "FloorRoadTurnRuR";
      EntityID[EntityID["FloorRoadTurnLuU"] = 40511] = "FloorRoadTurnLuU";
      EntityID[EntityID["FloorRoadTurnLdL"] = 40512] = "FloorRoadTurnLdL";
      EntityID[EntityID["FloorRoadStartPoint"] = 40601] = "FloorRoadStartPoint";
      EntityID[EntityID["RugJam"] = 50101] = "RugJam";
      EntityID[EntityID["ItemNormalRed"] = 60101] = "ItemNormalRed";
      EntityID[EntityID["ItemNormalGreen"] = 60102] = "ItemNormalGreen";
      EntityID[EntityID["ItemNormalBlue"] = 60103] = "ItemNormalBlue";
      EntityID[EntityID["ItemNormalYellow"] = 60104] = "ItemNormalYellow";
      EntityID[EntityID["ItemNormalOrange"] = 60105] = "ItemNormalOrange";
      EntityID[EntityID["ItemNormalPurple"] = 60106] = "ItemNormalPurple";
      EntityID[EntityID["ItemBombButterflyRed"] = 60201] = "ItemBombButterflyRed";
      EntityID[EntityID["ItemBombButterflyGreen"] = 60202] = "ItemBombButterflyGreen";
      EntityID[EntityID["ItemBombButterflyBlue"] = 60203] = "ItemBombButterflyBlue";
      EntityID[EntityID["ItemBombButterflyYellow"] = 60204] = "ItemBombButterflyYellow";
      EntityID[EntityID["ItemBombButterflyOrange"] = 60205] = "ItemBombButterflyOrange";
      EntityID[EntityID["ItemBombButterflyPurple"] = 60206] = "ItemBombButterflyPurple";
      EntityID[EntityID["ItemBombRowRed"] = 60301] = "ItemBombRowRed";
      EntityID[EntityID["ItemBombRowGreen"] = 60302] = "ItemBombRowGreen";
      EntityID[EntityID["ItemBombRowBlue"] = 60303] = "ItemBombRowBlue";
      EntityID[EntityID["ItemBombRowYellow"] = 60304] = "ItemBombRowYellow";
      EntityID[EntityID["ItemBombRowOrange"] = 60305] = "ItemBombRowOrange";
      EntityID[EntityID["ItemBombRowPurple"] = 60306] = "ItemBombRowPurple";
      EntityID[EntityID["ItemBombColumnRed"] = 60401] = "ItemBombColumnRed";
      EntityID[EntityID["ItemBombColumnGreen"] = 60402] = "ItemBombColumnGreen";
      EntityID[EntityID["ItemBombColumnBlue"] = 60403] = "ItemBombColumnBlue";
      EntityID[EntityID["ItemBombColumnYellow"] = 60404] = "ItemBombColumnYellow";
      EntityID[EntityID["ItemBombColumnOrange"] = 60405] = "ItemBombColumnOrange";
      EntityID[EntityID["ItemBombColumnPurple"] = 60406] = "ItemBombColumnPurple";
      EntityID[EntityID["ItemBombCrossRed"] = 60501] = "ItemBombCrossRed";
      EntityID[EntityID["ItemBombCrossGreen"] = 60502] = "ItemBombCrossGreen";
      EntityID[EntityID["ItemBombCrossBlue"] = 60503] = "ItemBombCrossBlue";
      EntityID[EntityID["ItemBombCrossYellow"] = 60504] = "ItemBombCrossYellow";
      EntityID[EntityID["ItemBombCrossOrange"] = 60505] = "ItemBombCrossOrange";
      EntityID[EntityID["ItemBombCrossPurple"] = 60506] = "ItemBombCrossPurple";
      EntityID[EntityID["ItemBombRangeRed"] = 60601] = "ItemBombRangeRed";
      EntityID[EntityID["ItemBombRangeGreen"] = 60602] = "ItemBombRangeGreen";
      EntityID[EntityID["ItemBombRangeBlue"] = 60603] = "ItemBombRangeBlue";
      EntityID[EntityID["ItemBombRangeYellow"] = 60604] = "ItemBombRangeYellow";
      EntityID[EntityID["ItemBombRangeOrange"] = 60605] = "ItemBombRangeOrange";
      EntityID[EntityID["ItemBombRangePurple"] = 60606] = "ItemBombRangePurple";
      EntityID[EntityID["ItemBombRainbow"] = 60701] = "ItemBombRainbow";
      EntityID[EntityID["ItemBlockHp1"] = 60801] = "ItemBlockHp1";
      EntityID[EntityID["ItemBlockHp2"] = 60802] = "ItemBlockHp2";
      EntityID[EntityID["ItemBlockHp3"] = 60803] = "ItemBlockHp3";
      EntityID[EntityID["ItemBlockHp4"] = 60804] = "ItemBlockHp4";
      EntityID[EntityID["ItemBlockHp5"] = 60805] = "ItemBlockHp5";
      EntityID[EntityID["ItemBlockHp6"] = 60806] = "ItemBlockHp6";
      EntityID[EntityID["ItemDoughnutHp1"] = 60901] = "ItemDoughnutHp1";
      EntityID[EntityID["ItemDoughnutHp2"] = 60902] = "ItemDoughnutHp2";
      EntityID[EntityID["ItemDoughnutHp3"] = 60903] = "ItemDoughnutHp3";
      EntityID[EntityID["ItemMagicCrystal"] = 61001] = "ItemMagicCrystal";
      EntityID[EntityID["ItemWatermelon"] = 61101] = "ItemWatermelon";
      EntityID[EntityID["ItemFruitCake"] = 61201] = "ItemFruitCake";
      EntityID[EntityID["ItemFireWormBottle"] = 61301] = "ItemFireWormBottle";
      EntityID[EntityID["ItemMowerUp"] = 61401] = "ItemMowerUp";
      EntityID[EntityID["ItemMowerRight"] = 61402] = "ItemMowerRight";
      EntityID[EntityID["ItemMowerDown"] = 61403] = "ItemMowerDown";
      EntityID[EntityID["ItemMowerLeft"] = 61404] = "ItemMowerLeft";
      EntityID[EntityID["ItemBone"] = 61501] = "ItemBone";
      EntityID[EntityID["ItemChestnut"] = 61601] = "ItemChestnut";
      EntityID[EntityID["ItemFireworksHp1"] = 61701] = "ItemFireworksHp1";
      EntityID[EntityID["ItemFireworksHp2"] = 61702] = "ItemFireworksHp2";
      EntityID[EntityID["ItemFireworksHp3"] = 61703] = "ItemFireworksHp3";
      EntityID[EntityID["ItemFireworksHp4"] = 61704] = "ItemFireworksHp4";
      EntityID[EntityID["ItemPuppy"] = 62001] = "ItemPuppy";
      EntityID[EntityID["ItemPawRed"] = 62101] = "ItemPawRed";
      EntityID[EntityID["ItemPawGreen"] = 62102] = "ItemPawGreen";
      EntityID[EntityID["ItemPawBlue"] = 62103] = "ItemPawBlue";
      EntityID[EntityID["ItemPawYellow"] = 62104] = "ItemPawYellow";
      EntityID[EntityID["ItemPawOrange"] = 62105] = "ItemPawOrange";
      EntityID[EntityID["ItemPawPurple"] = 62106] = "ItemPawPurple";
      EntityID[EntityID["ItemBalloon"] = 62201] = "ItemBalloon";
      EntityID[EntityID["ItemDogHouse"] = 62301] = "ItemDogHouse";
      EntityID[EntityID["ItemJamBottle"] = 62401] = "ItemJamBottle";
      EntityID[EntityID["ItemHoneyComb"] = 62601] = "ItemHoneyComb";
      EntityID[EntityID["ItemStatueHp1"] = 62801] = "ItemStatueHp1";
      EntityID[EntityID["ItemStatueHp2"] = 62802] = "ItemStatueHp2";
      EntityID[EntityID["ItemStatueHp3"] = 62803] = "ItemStatueHp3";
      EntityID[EntityID["ParasiteIceCubeHp1"] = 70101] = "ParasiteIceCubeHp1";
      EntityID[EntityID["ParasiteIceCubeHp2"] = 70102] = "ParasiteIceCubeHp2";
      EntityID[EntityID["ParasiteIceCubeHp3"] = 70103] = "ParasiteIceCubeHp3";
      EntityID[EntityID["ParasiteIceCubeHp4"] = 70104] = "ParasiteIceCubeHp4";
      EntityID[EntityID["ParasiteIceCubeHp5"] = 70105] = "ParasiteIceCubeHp5";
      EntityID[EntityID["ParasiteIceCubeHp6"] = 70106] = "ParasiteIceCubeHp6";
      EntityID[EntityID["ParasiteShackleHp1"] = 70201] = "ParasiteShackleHp1";
      EntityID[EntityID["ParasiteShackleHp2"] = 70202] = "ParasiteShackleHp2";
      EntityID[EntityID["ParasiteShackleHp3"] = 70203] = "ParasiteShackleHp3";
      EntityID[EntityID["ParasiteHoneyHp1"] = 70301] = "ParasiteHoneyHp1";
      EntityID[EntityID["ParasiteHoneyHp2"] = 70302] = "ParasiteHoneyHp2";
      EntityID[EntityID["ParasiteGiftBoxRed"] = 70401] = "ParasiteGiftBoxRed";
      EntityID[EntityID["ParasiteGiftBoxGreen"] = 70402] = "ParasiteGiftBoxGreen";
      EntityID[EntityID["ParasiteGiftBoxBlue"] = 70403] = "ParasiteGiftBoxBlue";
      EntityID[EntityID["ParasiteGiftBoxYellow"] = 70404] = "ParasiteGiftBoxYellow";
      EntityID[EntityID["ParasiteGiftBoxOrange"] = 70405] = "ParasiteGiftBoxOrange";
      EntityID[EntityID["ParasiteGiftBoxPurple"] = 70406] = "ParasiteGiftBoxPurple";
      EntityID[EntityID["MarkBoneCollector"] = 80101] = "MarkBoneCollector";
      EntityID[EntityID["MarkWormholeEntrance"] = 80201] = "MarkWormholeEntrance";
      EntityID[EntityID["MarkWormholeExit"] = 80301] = "MarkWormholeExit";
      EntityID[EntityID["FenceVineVertical"] = 80401] = "FenceVineVertical";
      EntityID[EntityID["FenceVineHorizontal"] = 80501] = "FenceVineHorizontal";
      EntityID[EntityID["MarkDropMachine"] = 80801] = "MarkDropMachine";
      EntityID[EntityID["MarkNormal"] = 80901] = "MarkNormal";
      EntityID[EntityID["FlyerMissileRed"] = 90101] = "FlyerMissileRed";
      EntityID[EntityID["FlyerMissileGreen"] = 90102] = "FlyerMissileGreen";
      EntityID[EntityID["FlyerMissileBlue"] = 90103] = "FlyerMissileBlue";
      EntityID[EntityID["FlyerMissileYellow"] = 90104] = "FlyerMissileYellow";
      EntityID[EntityID["FlyerMissileOrange"] = 90105] = "FlyerMissileOrange";
      EntityID[EntityID["FlyerMissilePurple"] = 90106] = "FlyerMissilePurple";
      EntityID[EntityID["FlyerCannonRed"] = 90201] = "FlyerCannonRed";
      EntityID[EntityID["FlyerCannonGreen"] = 90202] = "FlyerCannonGreen";
      EntityID[EntityID["FlyerCannonBlue"] = 90203] = "FlyerCannonBlue";
      EntityID[EntityID["FlyerCannonYellow"] = 90204] = "FlyerCannonYellow";
      EntityID[EntityID["FlyerCannonOrange"] = 90205] = "FlyerCannonOrange";
      EntityID[EntityID["FlyerCannonPurple"] = 90206] = "FlyerCannonPurple";
      EntityID[EntityID["FlyerCannonWhite"] = 90207] = "FlyerCannonWhite";
      EntityID[EntityID["FlyerBombRed"] = 90301] = "FlyerBombRed";
      EntityID[EntityID["FlyerBombGreen"] = 90302] = "FlyerBombGreen";
      EntityID[EntityID["FlyerBombBlue"] = 90303] = "FlyerBombBlue";
      EntityID[EntityID["FlyerBombYellow"] = 90304] = "FlyerBombYellow";
      EntityID[EntityID["FlyerBombOrange"] = 90305] = "FlyerBombOrange";
      EntityID[EntityID["FlyerBombPurple"] = 90306] = "FlyerBombPurple";
      EntityID[EntityID["FlyerBombWhite"] = 90307] = "FlyerBombWhite";
      EntityID[EntityID["FlyerNuclear"] = 90401] = "FlyerNuclear";
      EntityID[EntityID["FlyerLaser"] = 90501] = "FlyerLaser";
      EntityID[EntityID["FlyerLaserBullet"] = 90502] = "FlyerLaserBullet";
      EntityID[EntityID["FlyerPopsicelLine"] = 90601] = "FlyerPopsicelLine";
      EntityID[EntityID["FlyerPopsicelBomb"] = 90701] = "FlyerPopsicelBomb";
      EntityID[EntityID["FlyerCollectedEntity"] = 90801] = "FlyerCollectedEntity";
      EntityID[EntityID["FlyerChargeEntity"] = 90802] = "FlyerChargeEntity";
      EntityID[EntityID["FlyerCollectedSupply"] = 90803] = "FlyerCollectedSupply";
      EntityID[EntityID["FlyerMoreStep"] = 90804] = "FlyerMoreStep";
      EntityID[EntityID["FlyerAnimationBomb1x1"] = 90901] = "FlyerAnimationBomb1x1";
      EntityID[EntityID["FlyerAnimationCommonHurt"] = 90902] = "FlyerAnimationCommonHurt";
      EntityID[EntityID["FlyerAnimationFocusFrame"] = 90903] = "FlyerAnimationFocusFrame";
      EntityID[EntityID["FlyerAnimationHighlightedCell"] = 90904] = "FlyerAnimationHighlightedCell";
      EntityID[EntityID["FlyerAnimationItemMarked"] = 90905] = "FlyerAnimationItemMarked";
      EntityID[EntityID["FlyerAnimationBombCross"] = 90906] = "FlyerAnimationBombCross";
      EntityID[EntityID["FlyerAnimationFloorIceDie"] = 91001] = "FlyerAnimationFloorIceDie";
      EntityID[EntityID["FlyerAnimationRugJamDie"] = 91002] = "FlyerAnimationRugJamDie";
      EntityID[EntityID["FlyerAnimationItemNormalRedDie"] = 91003] = "FlyerAnimationItemNormalRedDie";
      EntityID[EntityID["FlyerAnimationItemNormalGreenDie"] = 91004] = "FlyerAnimationItemNormalGreenDie";
      EntityID[EntityID["FlyerAnimationItemNormalBlueDie"] = 91005] = "FlyerAnimationItemNormalBlueDie";
      EntityID[EntityID["FlyerAnimationItemNormalYellowDie"] = 91006] = "FlyerAnimationItemNormalYellowDie";
      EntityID[EntityID["FlyerAnimationItemNormalOrangeDie"] = 91007] = "FlyerAnimationItemNormalOrangeDie";
      EntityID[EntityID["FlyerAnimationItemNormalPurpleDie"] = 91008] = "FlyerAnimationItemNormalPurpleDie";
      EntityID[EntityID["FlyerAnimationItemBlockDie"] = 91009] = "FlyerAnimationItemBlockDie";
      EntityID[EntityID["FlyerAnimationItemDoughnutDie"] = 91010] = "FlyerAnimationItemDoughnutDie";
      EntityID[EntityID["FlyerAnimationItemWatermelonDie"] = 91011] = "FlyerAnimationItemWatermelonDie";
      EntityID[EntityID["FlyerAnimationItemFruitCakeDie"] = 91012] = "FlyerAnimationItemFruitCakeDie";
      EntityID[EntityID["FlyerAnimationItemFirewormBottleDie"] = 91013] = "FlyerAnimationItemFirewormBottleDie";
      EntityID[EntityID["FlyerAnimationItemChestnutDie"] = 91014] = "FlyerAnimationItemChestnutDie";
      EntityID[EntityID["FlyerAnimationItemJamBottleDie"] = 91015] = "FlyerAnimationItemJamBottleDie";
      EntityID[EntityID["FlyerAnimationItemStatueDie"] = 91016] = "FlyerAnimationItemStatueDie";
      EntityID[EntityID["FlyerAnimationParasiteIceCubeDie"] = 91101] = "FlyerAnimationParasiteIceCubeDie";
      EntityID[EntityID["FlyerAnimationParasiteShackleDie"] = 91102] = "FlyerAnimationParasiteShackleDie";
      EntityID[EntityID["FlyerAnimationParasiteHoneyDie"] = 91103] = "FlyerAnimationParasiteHoneyDie";
      EntityID[EntityID["FlyerAnimationParasiteGiftBoxRedDie"] = 91104] = "FlyerAnimationParasiteGiftBoxRedDie";
      EntityID[EntityID["FlyerAnimationParasiteGiftBoxGreenDie"] = 91105] = "FlyerAnimationParasiteGiftBoxGreenDie";
      EntityID[EntityID["FlyerAnimationParasiteGiftBoxBlueDie"] = 91106] = "FlyerAnimationParasiteGiftBoxBlueDie";
      EntityID[EntityID["FlyerAnimationParasiteGiftBoxYellowDie"] = 91107] = "FlyerAnimationParasiteGiftBoxYellowDie";
      EntityID[EntityID["FlyerAnimationParasiteGiftBoxOrangeDie"] = 91108] = "FlyerAnimationParasiteGiftBoxOrangeDie";
      EntityID[EntityID["FlyerAnimationParasiteGiftBoxPurpleDie"] = 91109] = "FlyerAnimationParasiteGiftBoxPurpleDie";
      EntityID[EntityID["FlyerHammer"] = 91201] = "FlyerHammer";
      EntityID[EntityID["FlyerMower"] = 91301] = "FlyerMower";
      EntityID[EntityID["FlyerFireworks"] = 91401] = "FlyerFireworks";
    })(EntityID = exports.EntityID || (exports.EntityID = {}));
    var EntityType;
    (function(EntityType) {
      EntityType[EntityType["None"] = 0] = "None";
      EntityType[EntityType["Frame"] = 1] = "Frame";
      EntityType[EntityType["Cell"] = 2] = "Cell";
      EntityType[EntityType["Floor"] = 3] = "Floor";
      EntityType[EntityType["Rug"] = 4] = "Rug";
      EntityType[EntityType["Popsicle"] = 5] = "Popsicle";
      EntityType[EntityType["Item"] = 6] = "Item";
      EntityType[EntityType["Parasite"] = 7] = "Parasite";
      EntityType[EntityType["Fences"] = 8] = "Fences";
      EntityType[EntityType["Flyer"] = 9] = "Flyer";
      EntityType[EntityType["Marker"] = 10] = "Marker";
    })(EntityType = exports.EntityType || (exports.EntityType = {}));
    var EntityColor;
    (function(EntityColor) {
      EntityColor[EntityColor["None"] = -1] = "None";
      EntityColor[EntityColor["Begin"] = 0] = "Begin";
      EntityColor[EntityColor["Red"] = 0] = "Red";
      EntityColor[EntityColor["Green"] = 1] = "Green";
      EntityColor[EntityColor["Blue"] = 2] = "Blue";
      EntityColor[EntityColor["Yellow"] = 3] = "Yellow";
      EntityColor[EntityColor["Orange"] = 4] = "Orange";
      EntityColor[EntityColor["Purple"] = 5] = "Purple";
      EntityColor[EntityColor["End"] = 5] = "End";
    })(EntityColor = exports.EntityColor || (exports.EntityColor = {}));
    var EntityCleanType;
    (function(EntityCleanType) {
      EntityCleanType[EntityCleanType["None"] = 0] = "None";
      EntityCleanType[EntityCleanType["Bomb"] = 1] = "Bomb";
      EntityCleanType[EntityCleanType["Match"] = 2] = "Match";
      EntityCleanType[EntityCleanType["Neighbor"] = 3] = "Neighbor";
      EntityCleanType[EntityCleanType["Floor"] = 4] = "Floor";
      EntityCleanType[EntityCleanType["Popsicle"] = 5] = "Popsicle";
      EntityCleanType[EntityCleanType["Suicide"] = 6] = "Suicide";
      EntityCleanType[EntityCleanType["Activate"] = 7] = "Activate";
      EntityCleanType[EntityCleanType["LayoutGrass"] = 8] = "LayoutGrass";
      EntityCleanType[EntityCleanType["Terminate"] = 9] = "Terminate";
    })(EntityCleanType = exports.EntityCleanType || (exports.EntityCleanType = {}));
    var EntityCleanOption = function() {
      function EntityCleanOption(CleanType, CleanRoot, CleanColor, CreateBombType, HitNeighbour, HitFloor, LayoutGrass) {
        this.cleanType = CleanType;
        this.cleanRoot = CleanRoot;
        this.cleanColor = CleanColor;
        this.createBombType = CreateBombType;
        this.hitNeighbour = HitNeighbour;
        this.hitFloor = HitFloor;
        this.layoutGrass = LayoutGrass;
      }
      EntityCleanOption.create = function(CleanType, CleanRoot, CleanColor, CreateBombType, HitNeighbour, HitFloor, LayoutGrass) {
        void 0 === CleanColor && (CleanColor = EntityColor.None);
        void 0 === CreateBombType && (CreateBombType = ItemBombBase_1.ItemBombType.None);
        void 0 === HitNeighbour && (HitNeighbour = false);
        void 0 === HitFloor && (HitFloor = false);
        void 0 === LayoutGrass && (LayoutGrass = false);
        return new EntityCleanOption(CleanType, CleanRoot, CleanColor, CreateBombType, HitNeighbour, HitFloor, LayoutGrass);
      };
      return EntityCleanOption;
    }();
    exports.EntityCleanOption = EntityCleanOption;
    var EntityChangeOption = function() {
      function EntityChangeOption(TargetID, CollectOld) {
        this.targetID = TargetID;
        this.collectOld = CollectOld;
      }
      EntityChangeOption.create = function(TargetID, CollectOld) {
        return new EntityChangeOption(TargetID, CollectOld);
      };
      return EntityChangeOption;
    }();
    exports.EntityChangeOption = EntityChangeOption;
    var EntityChargeOption = function() {
      function EntityChargeOption(ChargeID, ChargeAmount) {
        this.chargeID = CollectionID_1.CollectionID.None;
        this.chargeAmount = 0;
        this.chargeID = ChargeID;
        this.chargeAmount = ChargeAmount;
      }
      EntityChargeOption.create = function(ChargeID, ChargeAmount) {
        return new EntityChargeOption(ChargeID, ChargeAmount);
      };
      return EntityChargeOption;
    }();
    exports.EntityChargeOption = EntityChargeOption;
    var EntityDropStepType;
    (function(EntityDropStepType) {
      EntityDropStepType[EntityDropStepType["Hide"] = 0] = "Hide";
      EntityDropStepType[EntityDropStepType["Born"] = 1] = "Born";
      EntityDropStepType[EntityDropStepType["Stay"] = 2] = "Stay";
      EntityDropStepType[EntityDropStepType["Drop"] = 3] = "Drop";
      EntityDropStepType[EntityDropStepType["Wormhole"] = 4] = "Wormhole";
    })(EntityDropStepType = exports.EntityDropStepType || (exports.EntityDropStepType = {}));
    var EntityDropStep = function() {
      function EntityDropStep(Type, LogicalPos) {
        this.type = Type;
        this.logicalPos = LogicalPos;
      }
      EntityDropStep.create = function(Type, LogicalPos) {
        return new EntityDropStep(Type, LogicalPos);
      };
      return EntityDropStep;
    }();
    exports.EntityDropStep = EntityDropStep;
    var HurtAnimationInfo = function() {
      function HurtAnimationInfo(FileName, EntityID) {
        this.fileName = "";
        this.entityID = 0;
        this.fileName = FileName;
        this.entityID = EntityID;
      }
      HurtAnimationInfo.create = function(FileName, EntityID) {
        return new HurtAnimationInfo(FileName, EntityID);
      };
      return HurtAnimationInfo;
    }();
    exports.HurtAnimationInfo = HurtAnimationInfo;
    var EntityIDManager = function() {
      function EntityIDManager() {
        this.String_To_EntityID_Map = {};
        this.EntityID_To_FrameName_Map = {};
        this.EntityID_To_ButterflyPriority_Map = {};
        this.EntityID_To_NormalEntityID_Map = {};
        this.EntityID_To_EntityColor_Map = {};
        this.EntityID_To_DieAnimationPath_Map = {};
        this.initString_To_EntityID_Map();
        this.initEntityID_To_FrameName_Map();
        this.initEntityID_To_ButterflyPriority_Map();
        this.initEntityID_To_NormalEntityID_Map();
        this.initEntityID_To_EntityColor_Map();
        this.initEntityID_To_DieAnimationPath_Map();
      }
      EntityIDManager.getInstance = function() {
        null == this.instance && (this.instance = new EntityIDManager());
        return this.instance;
      };
      EntityIDManager.prototype.initString_To_EntityID_Map = function() {
        this.String_To_EntityID_Map["popsicles"] = EntityID.PopsicleNormal;
        this.String_To_EntityID_Map["popsiclesLine"] = EntityID.PopsicleLine;
        this.String_To_EntityID_Map["popsiclesBoom"] = EntityID.PopsicleBoom;
        this.String_To_EntityID_Map["grass"] = EntityID.FloorGrass;
        this.String_To_EntityID_Map["doubler"] = EntityID.FloorDouble;
        this.String_To_EntityID_Map["ice1"] = EntityID.FloorIceHp1;
        this.String_To_EntityID_Map["ice2"] = EntityID.FloorIceHp2;
        this.String_To_EntityID_Map["ice3"] = EntityID.FloorIceHp3;
        this.String_To_EntityID_Map["ice4"] = EntityID.FloorIceHp4;
        this.String_To_EntityID_Map["changerRed"] = EntityID.FloorChangerRed;
        this.String_To_EntityID_Map["changerGreen"] = EntityID.FloorChangerGreen;
        this.String_To_EntityID_Map["changerBlue"] = EntityID.FloorChangerBlue;
        this.String_To_EntityID_Map["changerYellow"] = EntityID.FloorChangerYellow;
        this.String_To_EntityID_Map["changerOrange"] = EntityID.FloorChangerOrange;
        this.String_To_EntityID_Map["changerPurple"] = EntityID.FloorChangerPurple;
        this.String_To_EntityID_Map["jam"] = EntityID.RugJam;
        this.String_To_EntityID_Map["red"] = EntityID.ItemNormalRed;
        this.String_To_EntityID_Map["green"] = EntityID.ItemNormalGreen;
        this.String_To_EntityID_Map["blue"] = EntityID.ItemNormalBlue;
        this.String_To_EntityID_Map["yellow"] = EntityID.ItemNormalYellow;
        this.String_To_EntityID_Map["orange"] = EntityID.ItemNormalOrange;
        this.String_To_EntityID_Map["purple"] = EntityID.ItemNormalPurple;
        this.String_To_EntityID_Map["butterflyRed"] = EntityID.ItemBombButterflyRed;
        this.String_To_EntityID_Map["butterflyGreen"] = EntityID.ItemBombButterflyGreen;
        this.String_To_EntityID_Map["butterflyBlue"] = EntityID.ItemBombButterflyBlue;
        this.String_To_EntityID_Map["butterflyYellow"] = EntityID.ItemBombButterflyYellow;
        this.String_To_EntityID_Map["butterflyOrange"] = EntityID.ItemBombButterflyOrange;
        this.String_To_EntityID_Map["butterflyPurple"] = EntityID.ItemBombButterflyPurple;
        this.String_To_EntityID_Map["hLineRed"] = EntityID.ItemBombRowRed;
        this.String_To_EntityID_Map["hLineGreen"] = EntityID.ItemBombRowGreen;
        this.String_To_EntityID_Map["hLineBlue"] = EntityID.ItemBombRowBlue;
        this.String_To_EntityID_Map["hLineYellow"] = EntityID.ItemBombRowYellow;
        this.String_To_EntityID_Map["hLineOrange"] = EntityID.ItemBombRowOrange;
        this.String_To_EntityID_Map["hLinePurple"] = EntityID.ItemBombRowPurple;
        this.String_To_EntityID_Map["vLineRed"] = EntityID.ItemBombColumnRed;
        this.String_To_EntityID_Map["vLineGreen"] = EntityID.ItemBombColumnGreen;
        this.String_To_EntityID_Map["vLineBlue"] = EntityID.ItemBombColumnBlue;
        this.String_To_EntityID_Map["vLineYellow"] = EntityID.ItemBombColumnYellow;
        this.String_To_EntityID_Map["vLineOrange"] = EntityID.ItemBombColumnOrange;
        this.String_To_EntityID_Map["vLinePurple"] = EntityID.ItemBombColumnPurple;
        this.String_To_EntityID_Map["crossRed"] = EntityID.ItemBombCrossRed;
        this.String_To_EntityID_Map["crossGreen"] = EntityID.ItemBombCrossGreen;
        this.String_To_EntityID_Map["crossBlue"] = EntityID.ItemBombCrossBlue;
        this.String_To_EntityID_Map["crossYellow"] = EntityID.ItemBombCrossYellow;
        this.String_To_EntityID_Map["crossOrange"] = EntityID.ItemBombCrossOrange;
        this.String_To_EntityID_Map["crossPurple"] = EntityID.ItemBombCrossPurple;
        this.String_To_EntityID_Map["boomRed"] = EntityID.ItemBombRangeRed;
        this.String_To_EntityID_Map["boomGreen"] = EntityID.ItemBombRangeGreen;
        this.String_To_EntityID_Map["boomBlue"] = EntityID.ItemBombRangeBlue;
        this.String_To_EntityID_Map["boomYellow"] = EntityID.ItemBombRangeYellow;
        this.String_To_EntityID_Map["boomOrange"] = EntityID.ItemBombRangeOrange;
        this.String_To_EntityID_Map["boomPurple"] = EntityID.ItemBombRangePurple;
        this.String_To_EntityID_Map["pawRed"] = EntityID.ItemPawRed;
        this.String_To_EntityID_Map["pawGreen"] = EntityID.ItemPawGreen;
        this.String_To_EntityID_Map["pawBlue"] = EntityID.ItemPawBlue;
        this.String_To_EntityID_Map["pawYellow"] = EntityID.ItemPawYellow;
        this.String_To_EntityID_Map["pawOrange"] = EntityID.ItemPawOrange;
        this.String_To_EntityID_Map["pawPurple"] = EntityID.ItemPawPurple;
        this.String_To_EntityID_Map["rainbow"] = EntityID.ItemBombRainbow;
        this.String_To_EntityID_Map["block1"] = EntityID.ItemBlockHp1;
        this.String_To_EntityID_Map["block2"] = EntityID.ItemBlockHp2;
        this.String_To_EntityID_Map["block3"] = EntityID.ItemBlockHp3;
        this.String_To_EntityID_Map["block4"] = EntityID.ItemBlockHp4;
        this.String_To_EntityID_Map["block5"] = EntityID.ItemBlockHp5;
        this.String_To_EntityID_Map["block6"] = EntityID.ItemBlockHp6;
        this.String_To_EntityID_Map["doughnut1"] = EntityID.ItemDoughnutHp1;
        this.String_To_EntityID_Map["doughnut2"] = EntityID.ItemDoughnutHp2;
        this.String_To_EntityID_Map["doughnut3"] = EntityID.ItemDoughnutHp3;
        this.String_To_EntityID_Map["magicCrystal"] = EntityID.ItemMagicCrystal;
        this.String_To_EntityID_Map["watermelon"] = EntityID.ItemWatermelon;
        this.String_To_EntityID_Map["bone"] = EntityID.ItemBone;
        this.String_To_EntityID_Map["mower"] = EntityID.ItemMowerUp;
        this.String_To_EntityID_Map["nut"] = EntityID.ItemChestnut;
        this.String_To_EntityID_Map["puppy"] = EntityID.ItemPuppy;
        this.String_To_EntityID_Map["honeyComb"] = EntityID.ItemHoneyComb;
        this.String_To_EntityID_Map["jamBottle"] = EntityID.ItemJamBottle;
        this.String_To_EntityID_Map["statue1"] = EntityID.ItemStatueHp1;
        this.String_To_EntityID_Map["statue2"] = EntityID.ItemStatueHp2;
        this.String_To_EntityID_Map["statue3"] = EntityID.ItemStatueHp3;
        this.String_To_EntityID_Map["iceCube1"] = EntityID.ParasiteIceCubeHp1;
        this.String_To_EntityID_Map["iceCube2"] = EntityID.ParasiteIceCubeHp2;
        this.String_To_EntityID_Map["iceCube3"] = EntityID.ParasiteIceCubeHp3;
        this.String_To_EntityID_Map["iceCube4"] = EntityID.ParasiteIceCubeHp4;
        this.String_To_EntityID_Map["iceCube5"] = EntityID.ParasiteIceCubeHp5;
        this.String_To_EntityID_Map["iceCube6"] = EntityID.ParasiteIceCubeHp6;
        this.String_To_EntityID_Map["chain1"] = EntityID.ParasiteShackleHp1;
        this.String_To_EntityID_Map["chain2"] = EntityID.ParasiteShackleHp2;
        this.String_To_EntityID_Map["chain3"] = EntityID.ParasiteShackleHp3;
        this.String_To_EntityID_Map["honey1"] = EntityID.ParasiteHoneyHp1;
        this.String_To_EntityID_Map["honey2"] = EntityID.ParasiteHoneyHp2;
        this.String_To_EntityID_Map["fireworks1"] = EntityID.ItemFireworksHp1;
        this.String_To_EntityID_Map["fireworks2"] = EntityID.ItemFireworksHp2;
        this.String_To_EntityID_Map["fireworks3"] = EntityID.ItemFireworksHp3;
        this.String_To_EntityID_Map["fireworks4"] = EntityID.ItemFireworksHp4;
        this.String_To_EntityID_Map["giftBoxRed"] = EntityID.ParasiteGiftBoxRed;
        this.String_To_EntityID_Map["giftBoxGreen"] = EntityID.ParasiteGiftBoxGreen;
        this.String_To_EntityID_Map["giftBoxBlue"] = EntityID.ParasiteGiftBoxBlue;
        this.String_To_EntityID_Map["giftBoxYellow"] = EntityID.ParasiteGiftBoxYellow;
        this.String_To_EntityID_Map["giftBoxOrange"] = EntityID.ParasiteGiftBoxOrange;
        this.String_To_EntityID_Map["giftBoxPurple"] = EntityID.ParasiteGiftBoxPurple;
      };
      EntityIDManager.prototype.initEntityID_To_FrameName_Map = function() {
        this.EntityID_To_FrameName_Map[EntityID.None] = "unknow/unknow";
        this.EntityID_To_FrameName_Map[EntityID.CellNormal] = "cells/10101";
        this.EntityID_To_FrameName_Map[EntityID.CellConveyerD2U] = "conveyers/20101";
        this.EntityID_To_FrameName_Map[EntityID.CellConveyerL2R] = "conveyers/20102";
        this.EntityID_To_FrameName_Map[EntityID.CellConveyerU2D] = "conveyers/20103";
        this.EntityID_To_FrameName_Map[EntityID.CellConveyerR2L] = "conveyers/20104";
        this.EntityID_To_FrameName_Map[EntityID.CellConveyerD2L] = "conveyers/20105";
        this.EntityID_To_FrameName_Map[EntityID.CellConveyerL2U] = "conveyers/20106";
        this.EntityID_To_FrameName_Map[EntityID.CellConveyerU2R] = "conveyers/20107";
        this.EntityID_To_FrameName_Map[EntityID.CellConveyerR2D] = "conveyers/20108";
        this.EntityID_To_FrameName_Map[EntityID.CellConveyerD2R] = "conveyers/20109";
        this.EntityID_To_FrameName_Map[EntityID.CellConveyerR2U] = "conveyers/20110";
        this.EntityID_To_FrameName_Map[EntityID.CellConveyerU2L] = "conveyers/20111";
        this.EntityID_To_FrameName_Map[EntityID.CellConveyerL2D] = "conveyers/20112";
        this.EntityID_To_FrameName_Map[EntityID.CellMovablePlate] = "conveyers/20201";
        this.EntityID_To_FrameName_Map[EntityID.PopsicleNormal] = "popsicles/30101";
        this.EntityID_To_FrameName_Map[EntityID.PopsicleNormal_1x1] = "popsicles/30101";
        this.EntityID_To_FrameName_Map[EntityID.PopsicleNormal_1x2] = "popsicles/30102";
        this.EntityID_To_FrameName_Map[EntityID.PopsicleNormal_2x2] = "popsicles/30103";
        this.EntityID_To_FrameName_Map[EntityID.PopsicleNormal_2x3] = "popsicles/30104";
        this.EntityID_To_FrameName_Map[EntityID.PopsicleNormal_3x3] = "popsicles/30105";
        this.EntityID_To_FrameName_Map[EntityID.PopsicleNormal_3x4] = "popsicles/30106";
        this.EntityID_To_FrameName_Map[EntityID.PopsicleBoom] = "popsicles/30201";
        this.EntityID_To_FrameName_Map[EntityID.PopsicleBoom_2x2] = "popsicles/30201";
        this.EntityID_To_FrameName_Map[EntityID.PopsicleBoom_1x1] = "popsicles/30202";
        this.EntityID_To_FrameName_Map[EntityID.PopsicleLine] = "popsicles/30301";
        this.EntityID_To_FrameName_Map[EntityID.FloorGrass] = "floors/40101";
        this.EntityID_To_FrameName_Map[EntityID.FloorIceHp1] = "floors/40201";
        this.EntityID_To_FrameName_Map[EntityID.FloorIceHp2] = "floors/40202";
        this.EntityID_To_FrameName_Map[EntityID.FloorIceHp3] = "floors/40203";
        this.EntityID_To_FrameName_Map[EntityID.FloorIceHp4] = "floors/40204";
        this.EntityID_To_FrameName_Map[EntityID.FloorChangerRed] = "floors/40301";
        this.EntityID_To_FrameName_Map[EntityID.FloorChangerGreen] = "floors/40302";
        this.EntityID_To_FrameName_Map[EntityID.FloorChangerBlue] = "floors/40303";
        this.EntityID_To_FrameName_Map[EntityID.FloorChangerYellow] = "floors/40304";
        this.EntityID_To_FrameName_Map[EntityID.FloorChangerOrange] = "floors/40305";
        this.EntityID_To_FrameName_Map[EntityID.FloorChangerPurple] = "floors/40306";
        this.EntityID_To_FrameName_Map[EntityID.FloorDouble] = "floors/40401";
        this.EntityID_To_FrameName_Map[EntityID.FloorRoadLineVU] = "floors/40501";
        this.EntityID_To_FrameName_Map[EntityID.FloorRoadLineHR] = "floors/40502";
        this.EntityID_To_FrameName_Map[EntityID.FloorRoadLineVD] = "floors/40503";
        this.EntityID_To_FrameName_Map[EntityID.FloorRoadLineHL] = "floors/40504";
        this.EntityID_To_FrameName_Map[EntityID.FloorRoadTurnLdD] = "floors/40505";
        this.EntityID_To_FrameName_Map[EntityID.FloorRoadTurnLuL] = "floors/40506";
        this.EntityID_To_FrameName_Map[EntityID.FloorRoadTurnRuU] = "floors/40507";
        this.EntityID_To_FrameName_Map[EntityID.FloorRoadTurnRdR] = "floors/40508";
        this.EntityID_To_FrameName_Map[EntityID.FloorRoadTurnRdD] = "floors/40509";
        this.EntityID_To_FrameName_Map[EntityID.FloorRoadTurnRuR] = "floors/40510";
        this.EntityID_To_FrameName_Map[EntityID.FloorRoadTurnLuU] = "floors/40511";
        this.EntityID_To_FrameName_Map[EntityID.FloorRoadTurnLdL] = "floors/40512";
        this.EntityID_To_FrameName_Map[EntityID.FloorRoadStartPoint] = "floors/40601";
        this.EntityID_To_FrameName_Map[EntityID.RugJam] = "rugs/50101";
        this.EntityID_To_FrameName_Map[EntityID.ItemNormalRed] = "items/60101";
        this.EntityID_To_FrameName_Map[EntityID.ItemNormalGreen] = "items/60102";
        this.EntityID_To_FrameName_Map[EntityID.ItemNormalBlue] = "items/60103";
        this.EntityID_To_FrameName_Map[EntityID.ItemNormalYellow] = "items/60104";
        this.EntityID_To_FrameName_Map[EntityID.ItemNormalOrange] = "items/60105";
        this.EntityID_To_FrameName_Map[EntityID.ItemNormalPurple] = "items/60106";
        this.EntityID_To_FrameName_Map[EntityID.ItemBombButterflyRed] = "items/60201";
        this.EntityID_To_FrameName_Map[EntityID.ItemBombButterflyGreen] = "items/60202";
        this.EntityID_To_FrameName_Map[EntityID.ItemBombButterflyBlue] = "items/60203";
        this.EntityID_To_FrameName_Map[EntityID.ItemBombButterflyYellow] = "items/60204";
        this.EntityID_To_FrameName_Map[EntityID.ItemBombButterflyOrange] = "items/60205";
        this.EntityID_To_FrameName_Map[EntityID.ItemBombButterflyPurple] = "items/60206";
        this.EntityID_To_FrameName_Map[EntityID.ItemBombRowRed] = "items/60301";
        this.EntityID_To_FrameName_Map[EntityID.ItemBombRowGreen] = "items/60302";
        this.EntityID_To_FrameName_Map[EntityID.ItemBombRowBlue] = "items/60303";
        this.EntityID_To_FrameName_Map[EntityID.ItemBombRowYellow] = "items/60304";
        this.EntityID_To_FrameName_Map[EntityID.ItemBombRowOrange] = "items/60305";
        this.EntityID_To_FrameName_Map[EntityID.ItemBombRowPurple] = "items/60306";
        this.EntityID_To_FrameName_Map[EntityID.ItemBombColumnRed] = "items/60401";
        this.EntityID_To_FrameName_Map[EntityID.ItemBombColumnGreen] = "items/60402";
        this.EntityID_To_FrameName_Map[EntityID.ItemBombColumnBlue] = "items/60403";
        this.EntityID_To_FrameName_Map[EntityID.ItemBombColumnYellow] = "items/60404";
        this.EntityID_To_FrameName_Map[EntityID.ItemBombColumnOrange] = "items/60405";
        this.EntityID_To_FrameName_Map[EntityID.ItemBombColumnPurple] = "items/60406";
        this.EntityID_To_FrameName_Map[EntityID.ItemBombCrossRed] = "items/60501";
        this.EntityID_To_FrameName_Map[EntityID.ItemBombCrossGreen] = "items/60502";
        this.EntityID_To_FrameName_Map[EntityID.ItemBombCrossBlue] = "items/60503";
        this.EntityID_To_FrameName_Map[EntityID.ItemBombCrossYellow] = "items/60504";
        this.EntityID_To_FrameName_Map[EntityID.ItemBombCrossOrange] = "items/60505";
        this.EntityID_To_FrameName_Map[EntityID.ItemBombCrossPurple] = "items/60506";
        this.EntityID_To_FrameName_Map[EntityID.ItemBombRangeRed] = "items/60601";
        this.EntityID_To_FrameName_Map[EntityID.ItemBombRangeGreen] = "items/60602";
        this.EntityID_To_FrameName_Map[EntityID.ItemBombRangeBlue] = "items/60603";
        this.EntityID_To_FrameName_Map[EntityID.ItemBombRangeYellow] = "items/60604";
        this.EntityID_To_FrameName_Map[EntityID.ItemBombRangeOrange] = "items/60605";
        this.EntityID_To_FrameName_Map[EntityID.ItemBombRangePurple] = "items/60606";
        this.EntityID_To_FrameName_Map[EntityID.ItemBombRainbow] = "items/60701";
        this.EntityID_To_FrameName_Map[EntityID.ItemBlockHp1] = "items/60801";
        this.EntityID_To_FrameName_Map[EntityID.ItemBlockHp2] = "items/60802";
        this.EntityID_To_FrameName_Map[EntityID.ItemBlockHp3] = "items/60803";
        this.EntityID_To_FrameName_Map[EntityID.ItemBlockHp4] = "items/60804";
        this.EntityID_To_FrameName_Map[EntityID.ItemBlockHp5] = "items/60805";
        this.EntityID_To_FrameName_Map[EntityID.ItemBlockHp6] = "items/60806";
        this.EntityID_To_FrameName_Map[EntityID.ItemDoughnutHp1] = "items/60901";
        this.EntityID_To_FrameName_Map[EntityID.ItemDoughnutHp2] = "items/60902";
        this.EntityID_To_FrameName_Map[EntityID.ItemDoughnutHp3] = "items/60903";
        this.EntityID_To_FrameName_Map[EntityID.ItemMagicCrystal] = "items/61001";
        this.EntityID_To_FrameName_Map[EntityID.ItemWatermelon] = "items/61101";
        this.EntityID_To_FrameName_Map[EntityID.ItemFruitCake] = "items/61201";
        this.EntityID_To_FrameName_Map[EntityID.ItemFireWormBottle] = "items/61301";
        this.EntityID_To_FrameName_Map[EntityID.ItemMowerUp] = "items/61401";
        this.EntityID_To_FrameName_Map[EntityID.ItemMowerRight] = "items/61402";
        this.EntityID_To_FrameName_Map[EntityID.ItemMowerDown] = "items/61403";
        this.EntityID_To_FrameName_Map[EntityID.ItemMowerLeft] = "items/61404";
        this.EntityID_To_FrameName_Map[EntityID.ItemBone] = "items/61501";
        this.EntityID_To_FrameName_Map[EntityID.ItemChestnut] = "items/61601";
        this.EntityID_To_FrameName_Map[EntityID.ItemFireworksHp1] = "items/61701";
        this.EntityID_To_FrameName_Map[EntityID.ItemFireworksHp2] = "items/61702";
        this.EntityID_To_FrameName_Map[EntityID.ItemFireworksHp3] = "items/61703";
        this.EntityID_To_FrameName_Map[EntityID.ItemFireworksHp4] = "items/61704";
        this.EntityID_To_FrameName_Map[EntityID.ItemPuppy] = "items/62001";
        this.EntityID_To_FrameName_Map[EntityID.ItemPawRed] = "items/62101";
        this.EntityID_To_FrameName_Map[EntityID.ItemPawGreen] = "items/62102";
        this.EntityID_To_FrameName_Map[EntityID.ItemPawBlue] = "items/62103";
        this.EntityID_To_FrameName_Map[EntityID.ItemPawYellow] = "items/62104";
        this.EntityID_To_FrameName_Map[EntityID.ItemPawOrange] = "items/62105";
        this.EntityID_To_FrameName_Map[EntityID.ItemPawPurple] = "items/62106";
        this.EntityID_To_FrameName_Map[EntityID.ItemBalloon] = "items/62201";
        this.EntityID_To_FrameName_Map[EntityID.ItemDogHouse] = "items/62301";
        this.EntityID_To_FrameName_Map[EntityID.ItemJamBottle] = "items/62401";
        this.EntityID_To_FrameName_Map[EntityID.ItemHoneyComb] = "items/62601";
        this.EntityID_To_FrameName_Map[EntityID.ItemStatueHp1] = "items/62801";
        this.EntityID_To_FrameName_Map[EntityID.ItemStatueHp2] = "items/62802";
        this.EntityID_To_FrameName_Map[EntityID.ItemStatueHp3] = "items/62803";
        this.EntityID_To_FrameName_Map[EntityID.ParasiteIceCubeHp1] = "parasites/70101";
        this.EntityID_To_FrameName_Map[EntityID.ParasiteIceCubeHp2] = "parasites/70102";
        this.EntityID_To_FrameName_Map[EntityID.ParasiteIceCubeHp3] = "parasites/70103";
        this.EntityID_To_FrameName_Map[EntityID.ParasiteIceCubeHp4] = "parasites/70104";
        this.EntityID_To_FrameName_Map[EntityID.ParasiteIceCubeHp5] = "parasites/70105";
        this.EntityID_To_FrameName_Map[EntityID.ParasiteIceCubeHp6] = "parasites/70106";
        this.EntityID_To_FrameName_Map[EntityID.ParasiteShackleHp1] = "parasites/70201";
        this.EntityID_To_FrameName_Map[EntityID.ParasiteShackleHp2] = "parasites/70202";
        this.EntityID_To_FrameName_Map[EntityID.ParasiteShackleHp3] = "parasites/70203";
        this.EntityID_To_FrameName_Map[EntityID.ParasiteHoneyHp1] = "parasites/70301";
        this.EntityID_To_FrameName_Map[EntityID.ParasiteHoneyHp2] = "parasites/70302";
        this.EntityID_To_FrameName_Map[EntityID.ParasiteGiftBoxRed] = "parasites/70401";
        this.EntityID_To_FrameName_Map[EntityID.ParasiteGiftBoxGreen] = "parasites/70402";
        this.EntityID_To_FrameName_Map[EntityID.ParasiteGiftBoxBlue] = "parasites/70403";
        this.EntityID_To_FrameName_Map[EntityID.ParasiteGiftBoxYellow] = "parasites/70404";
        this.EntityID_To_FrameName_Map[EntityID.ParasiteGiftBoxOrange] = "parasites/70405";
        this.EntityID_To_FrameName_Map[EntityID.ParasiteGiftBoxPurple] = "parasites/70406";
        this.EntityID_To_FrameName_Map[EntityID.MarkBoneCollector] = "marks/80101";
        this.EntityID_To_FrameName_Map[EntityID.MarkWormholeEntrance] = "marks/80201";
        this.EntityID_To_FrameName_Map[EntityID.MarkWormholeExit] = "marks/80301";
        this.EntityID_To_FrameName_Map[EntityID.FenceVineVertical] = "marks/80401";
        this.EntityID_To_FrameName_Map[EntityID.FenceVineHorizontal] = "marks/80501";
        this.EntityID_To_FrameName_Map[EntityID.MarkDropMachine] = "marks/80801";
        this.EntityID_To_FrameName_Map[EntityID.FlyerMissileRed] = "flyers/90101";
        this.EntityID_To_FrameName_Map[EntityID.FlyerMissileGreen] = "flyers/90102";
        this.EntityID_To_FrameName_Map[EntityID.FlyerMissileBlue] = "flyers/90103";
        this.EntityID_To_FrameName_Map[EntityID.FlyerMissileYellow] = "flyers/90104";
        this.EntityID_To_FrameName_Map[EntityID.FlyerMissileOrange] = "flyers/90105";
        this.EntityID_To_FrameName_Map[EntityID.FlyerMissilePurple] = "flyers/90106";
        this.EntityID_To_FrameName_Map[EntityID.FlyerCannonRed] = "flyers/90201";
        this.EntityID_To_FrameName_Map[EntityID.FlyerCannonGreen] = "flyers/90202";
        this.EntityID_To_FrameName_Map[EntityID.FlyerCannonBlue] = "flyers/90203";
        this.EntityID_To_FrameName_Map[EntityID.FlyerCannonYellow] = "flyers/90204";
        this.EntityID_To_FrameName_Map[EntityID.FlyerCannonOrange] = "flyers/90205";
        this.EntityID_To_FrameName_Map[EntityID.FlyerCannonPurple] = "flyers/90206";
        this.EntityID_To_FrameName_Map[EntityID.FlyerMower] = "items/61401";
      };
      EntityIDManager.prototype.initEntityID_To_ButterflyPriority_Map = function() {
        this.EntityID_To_ButterflyPriority_Map[EntityID.FloorIceHp1] = 2;
        this.EntityID_To_ButterflyPriority_Map[EntityID.FloorIceHp2] = 2;
        this.EntityID_To_ButterflyPriority_Map[EntityID.FloorIceHp3] = 2;
        this.EntityID_To_ButterflyPriority_Map[EntityID.FloorIceHp4] = 2;
        this.EntityID_To_ButterflyPriority_Map[EntityID.ItemNormalRed] = 4;
        this.EntityID_To_ButterflyPriority_Map[EntityID.ItemNormalGreen] = 4;
        this.EntityID_To_ButterflyPriority_Map[EntityID.ItemNormalBlue] = 4;
        this.EntityID_To_ButterflyPriority_Map[EntityID.ItemNormalYellow] = 4;
        this.EntityID_To_ButterflyPriority_Map[EntityID.ItemNormalOrange] = 4;
        this.EntityID_To_ButterflyPriority_Map[EntityID.ItemNormalPurple] = 4;
        this.EntityID_To_ButterflyPriority_Map[EntityID.ItemBlockHp1] = 1;
        this.EntityID_To_ButterflyPriority_Map[EntityID.ItemBlockHp2] = 1;
        this.EntityID_To_ButterflyPriority_Map[EntityID.ItemBlockHp3] = 1;
        this.EntityID_To_ButterflyPriority_Map[EntityID.ItemBlockHp4] = 1;
        this.EntityID_To_ButterflyPriority_Map[EntityID.ItemBlockHp5] = 1;
        this.EntityID_To_ButterflyPriority_Map[EntityID.ItemBlockHp6] = 1;
        this.EntityID_To_ButterflyPriority_Map[EntityID.ItemDoughnutHp1] = 2;
        this.EntityID_To_ButterflyPriority_Map[EntityID.ItemDoughnutHp2] = 2;
        this.EntityID_To_ButterflyPriority_Map[EntityID.ItemDoughnutHp3] = 2;
        this.EntityID_To_ButterflyPriority_Map[EntityID.ItemPawRed] = 1;
        this.EntityID_To_ButterflyPriority_Map[EntityID.ItemPawGreen] = 1;
        this.EntityID_To_ButterflyPriority_Map[EntityID.ItemPawBlue] = 1;
        this.EntityID_To_ButterflyPriority_Map[EntityID.ItemPawYellow] = 1;
        this.EntityID_To_ButterflyPriority_Map[EntityID.ItemPawOrange] = 1;
        this.EntityID_To_ButterflyPriority_Map[EntityID.ItemPawPurple] = 1;
        this.EntityID_To_ButterflyPriority_Map[EntityID.ItemJamBottle] = 2;
        this.EntityID_To_ButterflyPriority_Map[EntityID.ItemFireWormBottle] = 2;
        this.EntityID_To_ButterflyPriority_Map[EntityID.ItemChestnut] = 2;
        this.EntityID_To_ButterflyPriority_Map[EntityID.ItemWatermelon] = 2;
        this.EntityID_To_ButterflyPriority_Map[EntityID.ItemFireworksHp1] = 2;
        this.EntityID_To_ButterflyPriority_Map[EntityID.ItemFireworksHp2] = 2;
        this.EntityID_To_ButterflyPriority_Map[EntityID.ItemFireworksHp3] = 2;
        this.EntityID_To_ButterflyPriority_Map[EntityID.ItemFireworksHp4] = 2;
        this.EntityID_To_ButterflyPriority_Map[EntityID.ItemStatueHp1] = 1;
        this.EntityID_To_ButterflyPriority_Map[EntityID.ItemStatueHp2] = 1;
        this.EntityID_To_ButterflyPriority_Map[EntityID.ItemStatueHp3] = 1;
        this.EntityID_To_ButterflyPriority_Map[EntityID.ParasiteIceCubeHp1] = 1;
        this.EntityID_To_ButterflyPriority_Map[EntityID.ParasiteIceCubeHp2] = 1;
        this.EntityID_To_ButterflyPriority_Map[EntityID.ParasiteIceCubeHp3] = 1;
        this.EntityID_To_ButterflyPriority_Map[EntityID.ParasiteIceCubeHp4] = 1;
        this.EntityID_To_ButterflyPriority_Map[EntityID.ParasiteIceCubeHp5] = 1;
        this.EntityID_To_ButterflyPriority_Map[EntityID.ParasiteIceCubeHp6] = 1;
        this.EntityID_To_ButterflyPriority_Map[EntityID.ParasiteShackleHp1] = 1;
        this.EntityID_To_ButterflyPriority_Map[EntityID.ParasiteShackleHp2] = 1;
        this.EntityID_To_ButterflyPriority_Map[EntityID.ParasiteShackleHp3] = 1;
        this.EntityID_To_ButterflyPriority_Map[EntityID.ParasiteHoneyHp1] = 1;
        this.EntityID_To_ButterflyPriority_Map[EntityID.ParasiteHoneyHp2] = 1;
        this.EntityID_To_ButterflyPriority_Map[EntityID.ParasiteGiftBoxRed] = 1;
        this.EntityID_To_ButterflyPriority_Map[EntityID.ParasiteGiftBoxGreen] = 1;
        this.EntityID_To_ButterflyPriority_Map[EntityID.ParasiteGiftBoxBlue] = 1;
        this.EntityID_To_ButterflyPriority_Map[EntityID.ParasiteGiftBoxYellow] = 1;
        this.EntityID_To_ButterflyPriority_Map[EntityID.ParasiteGiftBoxOrange] = 1;
        this.EntityID_To_ButterflyPriority_Map[EntityID.ParasiteGiftBoxPurple] = 1;
      };
      EntityIDManager.prototype.initEntityID_To_NormalEntityID_Map = function() {
        this.EntityID_To_NormalEntityID_Map[EntityID.ItemNormalRed] = EntityID.ItemNormalRed;
        this.EntityID_To_NormalEntityID_Map[EntityID.ItemNormalGreen] = EntityID.ItemNormalGreen;
        this.EntityID_To_NormalEntityID_Map[EntityID.ItemNormalBlue] = EntityID.ItemNormalBlue;
        this.EntityID_To_NormalEntityID_Map[EntityID.ItemNormalYellow] = EntityID.ItemNormalYellow;
        this.EntityID_To_NormalEntityID_Map[EntityID.ItemNormalOrange] = EntityID.ItemNormalOrange;
        this.EntityID_To_NormalEntityID_Map[EntityID.ItemNormalPurple] = EntityID.ItemNormalPurple;
        this.EntityID_To_NormalEntityID_Map[EntityID.ItemBombButterflyRed] = EntityID.ItemNormalRed;
        this.EntityID_To_NormalEntityID_Map[EntityID.ItemBombButterflyGreen] = EntityID.ItemNormalGreen;
        this.EntityID_To_NormalEntityID_Map[EntityID.ItemBombButterflyBlue] = EntityID.ItemNormalBlue;
        this.EntityID_To_NormalEntityID_Map[EntityID.ItemBombButterflyYellow] = EntityID.ItemNormalYellow;
        this.EntityID_To_NormalEntityID_Map[EntityID.ItemBombButterflyOrange] = EntityID.ItemNormalOrange;
        this.EntityID_To_NormalEntityID_Map[EntityID.ItemBombButterflyPurple] = EntityID.ItemNormalPurple;
        this.EntityID_To_NormalEntityID_Map[EntityID.ItemBombRowRed] = EntityID.ItemNormalRed;
        this.EntityID_To_NormalEntityID_Map[EntityID.ItemBombRowGreen] = EntityID.ItemNormalGreen;
        this.EntityID_To_NormalEntityID_Map[EntityID.ItemBombRowBlue] = EntityID.ItemNormalBlue;
        this.EntityID_To_NormalEntityID_Map[EntityID.ItemBombRowYellow] = EntityID.ItemNormalYellow;
        this.EntityID_To_NormalEntityID_Map[EntityID.ItemBombRowOrange] = EntityID.ItemNormalOrange;
        this.EntityID_To_NormalEntityID_Map[EntityID.ItemBombRowPurple] = EntityID.ItemNormalPurple;
        this.EntityID_To_NormalEntityID_Map[EntityID.ItemBombColumnRed] = EntityID.ItemNormalRed;
        this.EntityID_To_NormalEntityID_Map[EntityID.ItemBombColumnGreen] = EntityID.ItemNormalGreen;
        this.EntityID_To_NormalEntityID_Map[EntityID.ItemBombColumnBlue] = EntityID.ItemNormalBlue;
        this.EntityID_To_NormalEntityID_Map[EntityID.ItemBombColumnYellow] = EntityID.ItemNormalYellow;
        this.EntityID_To_NormalEntityID_Map[EntityID.ItemBombColumnOrange] = EntityID.ItemNormalOrange;
        this.EntityID_To_NormalEntityID_Map[EntityID.ItemBombColumnPurple] = EntityID.ItemNormalPurple;
        this.EntityID_To_NormalEntityID_Map[EntityID.ItemBombCrossRed] = EntityID.ItemNormalRed;
        this.EntityID_To_NormalEntityID_Map[EntityID.ItemBombCrossGreen] = EntityID.ItemNormalGreen;
        this.EntityID_To_NormalEntityID_Map[EntityID.ItemBombCrossBlue] = EntityID.ItemNormalBlue;
        this.EntityID_To_NormalEntityID_Map[EntityID.ItemBombCrossYellow] = EntityID.ItemNormalYellow;
        this.EntityID_To_NormalEntityID_Map[EntityID.ItemBombCrossOrange] = EntityID.ItemNormalOrange;
        this.EntityID_To_NormalEntityID_Map[EntityID.ItemBombCrossPurple] = EntityID.ItemNormalPurple;
        this.EntityID_To_NormalEntityID_Map[EntityID.ItemBombRangeRed] = EntityID.ItemNormalRed;
        this.EntityID_To_NormalEntityID_Map[EntityID.ItemBombRangeGreen] = EntityID.ItemNormalGreen;
        this.EntityID_To_NormalEntityID_Map[EntityID.ItemBombRangeBlue] = EntityID.ItemNormalBlue;
        this.EntityID_To_NormalEntityID_Map[EntityID.ItemBombRangeYellow] = EntityID.ItemNormalYellow;
        this.EntityID_To_NormalEntityID_Map[EntityID.ItemBombRangeOrange] = EntityID.ItemNormalOrange;
        this.EntityID_To_NormalEntityID_Map[EntityID.ItemBombRangePurple] = EntityID.ItemNormalPurple;
        this.EntityID_To_NormalEntityID_Map[EntityID.ItemPawRed] = EntityID.ItemNormalRed;
        this.EntityID_To_NormalEntityID_Map[EntityID.ItemPawGreen] = EntityID.ItemNormalGreen;
        this.EntityID_To_NormalEntityID_Map[EntityID.ItemPawBlue] = EntityID.ItemNormalBlue;
        this.EntityID_To_NormalEntityID_Map[EntityID.ItemPawYellow] = EntityID.ItemNormalYellow;
        this.EntityID_To_NormalEntityID_Map[EntityID.ItemPawOrange] = EntityID.ItemNormalOrange;
        this.EntityID_To_NormalEntityID_Map[EntityID.ItemPawPurple] = EntityID.ItemNormalPurple;
        this.EntityID_To_NormalEntityID_Map[EntityID.ParasiteGiftBoxRed] = EntityID.ItemNormalRed;
        this.EntityID_To_NormalEntityID_Map[EntityID.ParasiteGiftBoxGreen] = EntityID.ItemNormalGreen;
        this.EntityID_To_NormalEntityID_Map[EntityID.ParasiteGiftBoxBlue] = EntityID.ItemNormalBlue;
        this.EntityID_To_NormalEntityID_Map[EntityID.ParasiteGiftBoxYellow] = EntityID.ItemNormalYellow;
        this.EntityID_To_NormalEntityID_Map[EntityID.ParasiteGiftBoxOrange] = EntityID.ItemNormalOrange;
        this.EntityID_To_NormalEntityID_Map[EntityID.ParasiteGiftBoxPurple] = EntityID.ItemNormalPurple;
      };
      EntityIDManager.prototype.initEntityID_To_EntityColor_Map = function() {
        this.EntityID_To_EntityColor_Map[EntityID.ItemNormalRed] = EntityColor.Red;
        this.EntityID_To_EntityColor_Map[EntityID.ItemNormalGreen] = EntityColor.Green;
        this.EntityID_To_EntityColor_Map[EntityID.ItemNormalBlue] = EntityColor.Blue;
        this.EntityID_To_EntityColor_Map[EntityID.ItemNormalYellow] = EntityColor.Yellow;
        this.EntityID_To_EntityColor_Map[EntityID.ItemNormalOrange] = EntityColor.Orange;
        this.EntityID_To_EntityColor_Map[EntityID.ItemNormalPurple] = EntityColor.Purple;
        this.EntityID_To_EntityColor_Map[EntityID.ItemBombButterflyRed] = EntityColor.Red;
        this.EntityID_To_EntityColor_Map[EntityID.ItemBombButterflyGreen] = EntityColor.Green;
        this.EntityID_To_EntityColor_Map[EntityID.ItemBombButterflyBlue] = EntityColor.Blue;
        this.EntityID_To_EntityColor_Map[EntityID.ItemBombButterflyYellow] = EntityColor.Yellow;
        this.EntityID_To_EntityColor_Map[EntityID.ItemBombButterflyOrange] = EntityColor.Orange;
        this.EntityID_To_EntityColor_Map[EntityID.ItemBombButterflyPurple] = EntityColor.Purple;
        this.EntityID_To_EntityColor_Map[EntityID.ItemBombRowRed] = EntityColor.Red;
        this.EntityID_To_EntityColor_Map[EntityID.ItemBombRowGreen] = EntityColor.Green;
        this.EntityID_To_EntityColor_Map[EntityID.ItemBombRowBlue] = EntityColor.Blue;
        this.EntityID_To_EntityColor_Map[EntityID.ItemBombRowYellow] = EntityColor.Yellow;
        this.EntityID_To_EntityColor_Map[EntityID.ItemBombRowOrange] = EntityColor.Orange;
        this.EntityID_To_EntityColor_Map[EntityID.ItemBombRowPurple] = EntityColor.Purple;
        this.EntityID_To_EntityColor_Map[EntityID.ItemBombColumnRed] = EntityColor.Red;
        this.EntityID_To_EntityColor_Map[EntityID.ItemBombColumnGreen] = EntityColor.Green;
        this.EntityID_To_EntityColor_Map[EntityID.ItemBombColumnBlue] = EntityColor.Blue;
        this.EntityID_To_EntityColor_Map[EntityID.ItemBombColumnYellow] = EntityColor.Yellow;
        this.EntityID_To_EntityColor_Map[EntityID.ItemBombColumnOrange] = EntityColor.Orange;
        this.EntityID_To_EntityColor_Map[EntityID.ItemBombColumnPurple] = EntityColor.Purple;
        this.EntityID_To_EntityColor_Map[EntityID.ItemBombCrossRed] = EntityColor.Red;
        this.EntityID_To_EntityColor_Map[EntityID.ItemBombCrossGreen] = EntityColor.Green;
        this.EntityID_To_EntityColor_Map[EntityID.ItemBombCrossBlue] = EntityColor.Blue;
        this.EntityID_To_EntityColor_Map[EntityID.ItemBombCrossYellow] = EntityColor.Yellow;
        this.EntityID_To_EntityColor_Map[EntityID.ItemBombCrossOrange] = EntityColor.Orange;
        this.EntityID_To_EntityColor_Map[EntityID.ItemBombCrossPurple] = EntityColor.Purple;
        this.EntityID_To_EntityColor_Map[EntityID.ItemBombRangeRed] = EntityColor.Red;
        this.EntityID_To_EntityColor_Map[EntityID.ItemBombRangeGreen] = EntityColor.Green;
        this.EntityID_To_EntityColor_Map[EntityID.ItemBombRangeBlue] = EntityColor.Blue;
        this.EntityID_To_EntityColor_Map[EntityID.ItemBombRangeYellow] = EntityColor.Yellow;
        this.EntityID_To_EntityColor_Map[EntityID.ItemBombRangeOrange] = EntityColor.Orange;
        this.EntityID_To_EntityColor_Map[EntityID.ItemBombRangePurple] = EntityColor.Purple;
        this.EntityID_To_EntityColor_Map[EntityID.ItemPawRed] = EntityColor.Red;
        this.EntityID_To_EntityColor_Map[EntityID.ItemPawGreen] = EntityColor.Green;
        this.EntityID_To_EntityColor_Map[EntityID.ItemPawBlue] = EntityColor.Blue;
        this.EntityID_To_EntityColor_Map[EntityID.ItemPawYellow] = EntityColor.Yellow;
        this.EntityID_To_EntityColor_Map[EntityID.ItemPawOrange] = EntityColor.Orange;
        this.EntityID_To_EntityColor_Map[EntityID.ItemPawPurple] = EntityColor.Purple;
        this.EntityID_To_NormalEntityID_Map[EntityID.ParasiteGiftBoxRed] = EntityColor.Red;
        this.EntityID_To_NormalEntityID_Map[EntityID.ParasiteGiftBoxGreen] = EntityColor.Green;
        this.EntityID_To_NormalEntityID_Map[EntityID.ParasiteGiftBoxBlue] = EntityColor.Blue;
        this.EntityID_To_NormalEntityID_Map[EntityID.ParasiteGiftBoxYellow] = EntityColor.Yellow;
        this.EntityID_To_NormalEntityID_Map[EntityID.ParasiteGiftBoxOrange] = EntityColor.Orange;
        this.EntityID_To_NormalEntityID_Map[EntityID.ParasiteGiftBoxPurple] = EntityColor.Purple;
      };
      EntityIDManager.prototype.initEntityID_To_DieAnimationPath_Map = function() {
        var root = "match_scene/prefab/entity/animation/";
        this.EntityID_To_DieAnimationPath_Map[EntityID.FloorIceHp1] = HurtAnimationInfo.create(root + "AnimationIceDie", EntityID.FlyerAnimationFloorIceDie);
        this.EntityID_To_DieAnimationPath_Map[EntityID.FloorIceHp2] = HurtAnimationInfo.create(root + "AnimationIceDie", EntityID.FlyerAnimationFloorIceDie);
        this.EntityID_To_DieAnimationPath_Map[EntityID.FloorIceHp3] = HurtAnimationInfo.create(root + "AnimationIceDie", EntityID.FlyerAnimationFloorIceDie);
        this.EntityID_To_DieAnimationPath_Map[EntityID.FloorIceHp4] = HurtAnimationInfo.create(root + "AnimationIceDie", EntityID.FlyerAnimationFloorIceDie);
        this.EntityID_To_DieAnimationPath_Map[EntityID.RugJam] = HurtAnimationInfo.create(root + "AnimationJamDie", EntityID.FlyerAnimationRugJamDie);
        this.EntityID_To_DieAnimationPath_Map[EntityID.ItemNormalRed] = HurtAnimationInfo.create(root + "AnimationFruitDieRed", EntityID.FlyerAnimationItemNormalRedDie);
        this.EntityID_To_DieAnimationPath_Map[EntityID.ItemNormalGreen] = HurtAnimationInfo.create(root + "AnimationFruitDieGreen", EntityID.FlyerAnimationItemNormalGreenDie);
        this.EntityID_To_DieAnimationPath_Map[EntityID.ItemNormalBlue] = HurtAnimationInfo.create(root + "AnimationFruitDieBlue", EntityID.FlyerAnimationItemNormalBlueDie);
        this.EntityID_To_DieAnimationPath_Map[EntityID.ItemNormalYellow] = HurtAnimationInfo.create(root + "AnimationFruitDieYellow", EntityID.FlyerAnimationItemNormalYellowDie);
        this.EntityID_To_DieAnimationPath_Map[EntityID.ItemNormalOrange] = HurtAnimationInfo.create(root + "AnimationFruitDieOrange", EntityID.FlyerAnimationItemNormalOrangeDie);
        this.EntityID_To_DieAnimationPath_Map[EntityID.ItemNormalPurple] = HurtAnimationInfo.create(root + "AnimationFruitDiePurple", EntityID.FlyerAnimationItemNormalPurpleDie);
        this.EntityID_To_DieAnimationPath_Map[EntityID.ItemBlockHp1] = HurtAnimationInfo.create(root + "AnimationBlockDie", EntityID.FlyerAnimationItemBlockDie);
        this.EntityID_To_DieAnimationPath_Map[EntityID.ItemDoughnutHp1] = HurtAnimationInfo.create(root + "AnimationDoughnutDie", EntityID.FlyerAnimationItemDoughnutDie);
        this.EntityID_To_DieAnimationPath_Map[EntityID.ItemWatermelon] = HurtAnimationInfo.create(root + "AnimationWatermelonHurt", EntityID.FlyerAnimationItemWatermelonDie);
        this.EntityID_To_DieAnimationPath_Map[EntityID.ItemFruitCake] = HurtAnimationInfo.create(root + "AnimationFruitCakeDie", EntityID.FlyerAnimationItemFruitCakeDie);
        this.EntityID_To_DieAnimationPath_Map[EntityID.ItemFireWormBottle] = HurtAnimationInfo.create(root + "AnimationFireWormBottleDie", EntityID.FlyerAnimationItemFirewormBottleDie);
        this.EntityID_To_DieAnimationPath_Map[EntityID.ItemChestnut] = HurtAnimationInfo.create(root + "AnimationChestnutDie", EntityID.FlyerAnimationItemChestnutDie);
        this.EntityID_To_DieAnimationPath_Map[EntityID.ItemJamBottle] = HurtAnimationInfo.create(root + "AnimationJamBottleDie", EntityID.FlyerAnimationItemJamBottleDie);
        this.EntityID_To_DieAnimationPath_Map[EntityID.ItemStatueHp1] = HurtAnimationInfo.create(root + "AnimationStatueDie", EntityID.FlyerAnimationItemStatueDie);
        this.EntityID_To_DieAnimationPath_Map[EntityID.ParasiteIceCubeHp1] = HurtAnimationInfo.create(root + "AnimationIceCubeDie", EntityID.FlyerAnimationParasiteIceCubeDie);
        this.EntityID_To_DieAnimationPath_Map[EntityID.ParasiteShackleHp1] = HurtAnimationInfo.create(root + "AnimationShackleDie", EntityID.FlyerAnimationParasiteShackleDie);
        this.EntityID_To_DieAnimationPath_Map[EntityID.ParasiteHoneyHp1] = HurtAnimationInfo.create(root + "AnimationHoneyDie", EntityID.FlyerAnimationParasiteHoneyDie);
        this.EntityID_To_DieAnimationPath_Map[EntityID.ParasiteHoneyHp2] = HurtAnimationInfo.create(root + "AnimationHoneyDie", EntityID.FlyerAnimationParasiteHoneyDie);
        this.EntityID_To_DieAnimationPath_Map[EntityID.ParasiteGiftBoxRed] = HurtAnimationInfo.create(root + "AnimationGiftBoxRedDie", EntityID.FlyerAnimationParasiteGiftBoxRedDie);
        this.EntityID_To_DieAnimationPath_Map[EntityID.ParasiteGiftBoxGreen] = HurtAnimationInfo.create(root + "AnimationGiftBoxGreenDie", EntityID.FlyerAnimationParasiteGiftBoxGreenDie);
        this.EntityID_To_DieAnimationPath_Map[EntityID.ParasiteGiftBoxBlue] = HurtAnimationInfo.create(root + "AnimationGiftBoxBlueDie", EntityID.FlyerAnimationParasiteGiftBoxBlueDie);
        this.EntityID_To_DieAnimationPath_Map[EntityID.ParasiteGiftBoxYellow] = HurtAnimationInfo.create(root + "AnimationGiftBoxYellowDie", EntityID.FlyerAnimationParasiteGiftBoxYellowDie);
        this.EntityID_To_DieAnimationPath_Map[EntityID.ParasiteGiftBoxOrange] = HurtAnimationInfo.create(root + "AnimationGiftBoxOrangeDie", EntityID.FlyerAnimationParasiteGiftBoxOrangeDie);
        this.EntityID_To_DieAnimationPath_Map[EntityID.ParasiteGiftBoxPurple] = HurtAnimationInfo.create(root + "AnimationGiftBoxPurpleDie", EntityID.FlyerAnimationParasiteGiftBoxPurpleDie);
      };
      EntityIDManager.prototype.getEntityIDFromString = function(name) {
        var result = this.String_To_EntityID_Map[name];
        if (result) return result;
        return EntityID.None;
      };
      EntityIDManager.prototype.getFrameNameFromEntityID = function(entityID) {
        var rootPath = "match_scene/texture/entities/";
        var result = this.EntityID_To_FrameName_Map[entityID];
        if (result) return rootPath + result;
        return rootPath + "unknow/unknow";
      };
      EntityIDManager.prototype.getHurtAnimationInfoFromEntityID = function(entityID) {
        var result = this.EntityID_To_DieAnimationPath_Map[entityID];
        if (result) return result;
        return null;
      };
      EntityIDManager.prototype.getDefaultButterflyPriorityFromEntityID = function(entityID) {
        var result = this.EntityID_To_ButterflyPriority_Map[entityID];
        if (result) return result;
        return EntityBase_1.default.DEFAULT_MISSILE_PRIORITY;
      };
      EntityIDManager.prototype.getCorrespondingNormlaEntityID = function(entityID) {
        var result = this.EntityID_To_NormalEntityID_Map[entityID];
        if (result) return result;
        return EntityID.None;
      };
      EntityIDManager.prototype.getEntityColorWithEntityID = function(entityID) {
        var result = EntityColor.None;
        this.EntityID_To_EntityColor_Map.hasOwnProperty(entityID) && (result = this.EntityID_To_EntityColor_Map[entityID]);
        return result;
      };
      EntityIDManager.instance = null;
      return EntityIDManager;
    }();
    exports.EntityIDManager = EntityIDManager;
    cc._RF.pop();
  }, {
    "../entity/EntityBase": "EntityBase",
    "../entity/item/color/bomb/ItemBombBase": "ItemBombBase",
    "./CollectionID": "CollectionID"
  } ],
  EntityPrefabNodePool: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "8f1148VqL5HuLhhkrCsSuMr", "EntityPrefabNodePool");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var GameMath_1 = require("../../../extend/utils/GameMath");
    var EntityPrefabNodePool = function() {
      function EntityPrefabNodePool() {
        this._prefabNodePools = {};
      }
      EntityPrefabNodePool.getInstance = function() {
        null == this.instance && (this.instance = new EntityPrefabNodePool());
        return this.instance;
      };
      EntityPrefabNodePool.prototype.getPrefabNodeWithFileNameAndClassName = function(fileName, className) {
        var node = null;
        var nodePool = this._prefabNodePools[fileName];
        if (nodePool && nodePool.size() > 0) node = nodePool.get(); else {
          var res = cc.loader.getRes(fileName, cc.Prefab);
          res && (node = cc.instantiate(res));
        }
        if (node) {
          var component = node.getComponent(className);
          if (!component) {
            component = node.addComponent(className);
            component.setPrefabFileName(fileName);
          }
          return component;
        }
        return null;
      };
      EntityPrefabNodePool.prototype.putPrefabNode = function(entity) {
        if (!entity) return;
        var prefabFileName = entity.getPrefabFileName();
        if ("" != prefabFileName) {
          this._prefabNodePools.hasOwnProperty(prefabFileName) || (this._prefabNodePools[prefabFileName] = new cc.NodePool());
          var nodePool = this._prefabNodePools[prefabFileName];
          nodePool.size() < 100 && nodePool.put(entity.node);
        }
      };
      EntityPrefabNodePool.prototype.clear = function() {
        for (var key in this._prefabNodePools) {
          var pool = this._prefabNodePools[key];
          pool.clear();
        }
        GameMath_1.default.clearObject(this._prefabNodePools);
      };
      EntityPrefabNodePool.instance = null;
      return EntityPrefabNodePool;
    }();
    exports.default = EntityPrefabNodePool;
    cc._RF.pop();
  }, {
    "../../../extend/utils/GameMath": "GameMath"
  } ],
  EntityStateBase: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "c1293Qu15xBB6zFurj5SxDm", "EntityStateBase");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.EntityStateType = void 0;
    var EntityStateType;
    (function(EntityStateType) {
      EntityStateType[EntityStateType["None"] = -1] = "None";
      EntityStateType[EntityStateType["Wait"] = 0] = "Wait";
      EntityStateType[EntityStateType["Drop"] = 1] = "Drop";
      EntityStateType[EntityStateType["Swap"] = 2] = "Swap";
      EntityStateType[EntityStateType["Clean"] = 3] = "Clean";
      EntityStateType[EntityStateType["Shuffle"] = 4] = "Shuffle";
      EntityStateType[EntityStateType["Replace"] = 5] = "Replace";
      EntityStateType[EntityStateType["Upgrade"] = 6] = "Upgrade";
      EntityStateType[EntityStateType["ChangeColor"] = 7] = "ChangeColor";
      EntityStateType[EntityStateType["Generate"] = 8] = "Generate";
      EntityStateType[EntityStateType["Butterfly"] = 9] = "Butterfly";
    })(EntityStateType = exports.EntityStateType || (exports.EntityStateType = {}));
    var EntityStateBase = function() {
      function EntityStateBase(Type) {
        this._type = EntityStateType.None;
        this._type = Type;
      }
      EntityStateBase.prototype.getType = function() {
        return this._type;
      };
      EntityStateBase.prototype.enter = function(entity) {};
      EntityStateBase.prototype.update = function(entity, delta) {};
      EntityStateBase.prototype.exit = function(entity) {};
      return EntityStateBase;
    }();
    exports.default = EntityStateBase;
    cc._RF.pop();
  }, {} ],
  EntityStateMachine: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "e176ePKYI9GTp1sqLAduimO", "EntityStateMachine");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var StateMachineBase_1 = require("../../fsm/StateMachineBase");
    var EntityStateMachine = function(_super) {
      __extends(EntityStateMachine, _super);
      function EntityStateMachine() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      EntityStateMachine.create = function(entity) {
        return new EntityStateMachine(entity);
      };
      return EntityStateMachine;
    }(StateMachineBase_1.default);
    exports.default = EntityStateMachine;
    cc._RF.pop();
  }, {
    "../../fsm/StateMachineBase": "StateMachineBase"
  } ],
  EntityStateWait: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "fd5f7gpMOpAMqefk3jl0Pb5", "EntityStateWait");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var EntityStateBase_1 = require("../EntityStateBase");
    var EntityStateWait = function(_super) {
      __extends(EntityStateWait, _super);
      function EntityStateWait() {
        return _super.call(this, EntityStateBase_1.EntityStateType.Wait) || this;
      }
      EntityStateWait.create = function() {
        return new EntityStateWait();
      };
      return EntityStateWait;
    }(EntityStateBase_1.default);
    exports.default = EntityStateWait;
    cc._RF.pop();
  }, {
    "../EntityStateBase": "EntityStateBase"
  } ],
  FenceBase: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "7c0dccJg0dMmrea/eNOxoMZ", "FenceBase");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.FenceType = void 0;
    var EntityID_1 = require("../../defines/EntityID");
    var EntityBase_1 = require("../EntityBase");
    var FencePos_1 = require("./FencePos");
    var FenceType;
    (function(FenceType) {
      FenceType[FenceType["None"] = 0] = "None";
      FenceType[FenceType["Vine"] = 1] = "Vine";
    })(FenceType = exports.FenceType || (exports.FenceType = {}));
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var FenceBase = function(_super) {
      __extends(FenceBase, _super);
      function FenceBase() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this._fenceType = FenceType.None;
        _this._fencePos = FencePos_1.default.create(cc.Vec2.ZERO, cc.v2(0, 1));
        return _this;
      }
      FenceBase.prototype.getFenceType = function() {
        return this._fenceType;
      };
      FenceBase.prototype.getFencePos = function() {
        return this._fencePos;
      };
      FenceBase.prototype.setFencePos = function(fencePos) {
        this._fencePos = fencePos;
        var pixelPosA = this.getGrid().getPixelPosFromLogicalPos(this._fencePos.posA);
        var pixelPosB = this.getGrid().getPixelPosFromLogicalPos(this._fencePos.posB);
        var center = pixelPosA.add(pixelPosB).mul(.5);
        this.node.setPosition(center);
        this.node.zIndex = this.getGrid().getBottomZOrder(this.getEntityType(), this._fencePos.posA);
        this.updatePuppet();
      };
      FenceBase.prototype.removeFromGridAndAddToEffect = function() {
        this.removeFromGrid();
        this.node.parent = this.getGrid().node;
        this.setFencePos(this.getFencePos());
        this.node.zIndex = this.getTopZOrder();
      };
      FenceBase.prototype.initFence = function(grid, fenceType) {
        _super.prototype.initEntity.call(this, grid, EntityID_1.EntityType.Fences, 1, 1);
        this._fenceType = fenceType;
        this._fencePos = FencePos_1.default.create(cc.Vec2.ZERO, cc.v2(0, 1));
      };
      FenceBase.prototype.onDestroy = function() {
        _super.prototype.onDestroy.call(this);
        this._fencePos = null;
      };
      FenceBase = __decorate([ ccclass ], FenceBase);
      return FenceBase;
    }(EntityBase_1.default);
    exports.default = FenceBase;
    cc._RF.pop();
  }, {
    "../../defines/EntityID": "EntityID",
    "../EntityBase": "EntityBase",
    "./FencePos": "FencePos"
  } ],
  FenceFactory: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "f16d45VvjBPpojHuqK69FZa", "FenceFactory");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var EntityID_1 = require("../../defines/EntityID");
    var IdentifierManager_1 = require("../../defines/IdentifierManager");
    var FenceVine_1 = require("./FenceVine");
    var FencePos_1 = require("./FencePos");
    var FenceFactory = function() {
      function FenceFactory() {}
      FenceFactory.generateItemWithEntityID = function(grid, logicalPos, entityID) {
        var fence = null;
        switch (entityID) {
         case EntityID_1.EntityID.FenceVineHorizontal:
          fence = FenceVine_1.default.create(grid);
          fence.setFencePos(FencePos_1.default.create(logicalPos, logicalPos.add(cc.v2(0, -1))));
          break;

         case EntityID_1.EntityID.FenceVineVertical:
          fence = FenceVine_1.default.create(grid);
          fence.setFencePos(FencePos_1.default.create(logicalPos, logicalPos.add(cc.v2(-1, 0))));
        }
        return fence;
      };
      FenceFactory.generateItemWithKindID = function(grid, logicalPos, kindID) {
        var entityID = IdentifierManager_1.default.getInstance().getEntityIDFromKindID(kindID);
        return this.generateItemWithEntityID(grid, logicalPos, entityID);
      };
      return FenceFactory;
    }();
    exports.default = FenceFactory;
    cc._RF.pop();
  }, {
    "../../defines/EntityID": "EntityID",
    "../../defines/IdentifierManager": "IdentifierManager",
    "./FencePos": "FencePos",
    "./FenceVine": "FenceVine"
  } ],
  FencePos: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "f2b47gRmLJPPZtXasQjqqji", "FencePos");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.FencePosType = void 0;
    var GameMath_1 = require("../../../../extend/utils/GameMath");
    var FencePosType;
    (function(FencePosType) {
      FencePosType[FencePosType["None"] = 0] = "None";
      FencePosType[FencePosType["Horizontal"] = 1] = "Horizontal";
      FencePosType[FencePosType["Vertical"] = 2] = "Vertical";
    })(FencePosType = exports.FencePosType || (exports.FencePosType = {}));
    var FencePos = function() {
      function FencePos(posA, posB) {
        this.posA = posA;
        this.posB = posB;
      }
      FencePos.create = function(PosA, PosB) {
        var offset = PosA.sub(PosB);
        if (0 == offset.x && 1 == Math.abs(offset.y) || 0 == offset.y && 1 == Math.abs(offset.x)) return GameMath_1.default.vec2Less(PosA, PosB) ? new FencePos(PosA, PosB) : new FencePos(PosB, PosA);
        return null;
      };
      FencePos.prototype.getFencePosType = function() {
        var result = FencePosType.None;
        var offset = this.posA.sub(this.posB);
        0 == offset.x && 1 == Math.abs(offset.y) ? result = FencePosType.Horizontal : 0 == offset.y && 1 == Math.abs(offset.x) && (result = FencePosType.Vertical);
        return result;
      };
      FencePos.prototype.equals = function(fencePos) {
        if (this.posA.equals(fencePos.posA) && this.posB.equals(fencePos.posB)) return true;
        return false;
      };
      return FencePos;
    }();
    exports.default = FencePos;
    cc._RF.pop();
  }, {
    "../../../../extend/utils/GameMath": "GameMath"
  } ],
  FenceVine: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "43dee1zz81GnqX9wk7R0ivO", "FenceVine");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var FenceBase_1 = require("./FenceBase");
    var CollectionID_1 = require("../../defines/CollectionID");
    var EntityID_1 = require("../../defines/EntityID");
    var EntityPrefabNodePool_1 = require("../EntityPrefabNodePool");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var FenceVine = function(_super) {
      __extends(FenceVine, _super);
      function FenceVine() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      FenceVine.create = function(grid) {
        var className = "FenceVine";
        var prefabFileName = "match_scene/prefab/entity/fence/FenceVine";
        var pool = EntityPrefabNodePool_1.default.getInstance();
        var component = pool.getPrefabNodeWithFileNameAndClassName(prefabFileName, className);
        if (component) {
          component.init(grid);
          return component;
        }
        return null;
      };
      FenceVine.prototype.init = function(grid) {
        _super.prototype.initFence.call(this, grid, FenceBase_1.FenceType.Vine);
      };
      FenceVine.prototype.getCollectionID = function() {
        return CollectionID_1.CollectionID.FenceVine;
      };
      FenceVine.prototype.getEntityID = function() {
        return this.getFencePos().posA.y == this.getFencePos().posB.y ? EntityID_1.EntityID.FenceVineVertical : EntityID_1.EntityID.FenceVineHorizontal;
      };
      FenceVine.prototype.start = function() {};
      FenceVine = __decorate([ ccclass ], FenceVine);
      return FenceVine;
    }(FenceBase_1.default);
    exports.default = FenceVine;
    cc._RF.pop();
  }, {
    "../../defines/CollectionID": "CollectionID",
    "../../defines/EntityID": "EntityID",
    "../EntityPrefabNodePool": "EntityPrefabNodePool",
    "./FenceBase": "FenceBase"
  } ],
  FloorBase: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "9037apHv89Aa7VLHC8UdRBR", "FloorBase");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.FloorType = void 0;
    var EntityID_1 = require("../../defines/EntityID");
    var EntityBase_1 = require("../EntityBase");
    var GridCommand_1 = require("../../commond/GridCommand");
    var FloorType;
    (function(FloorType) {
      FloorType[FloorType["Ice"] = 0] = "Ice";
      FloorType[FloorType["Double"] = 1] = "Double";
      FloorType[FloorType["Road"] = 2] = "Road";
      FloorType[FloorType["Changer"] = 3] = "Changer";
      FloorType[FloorType["Grass"] = 4] = "Grass";
    })(FloorType = exports.FloorType || (exports.FloorType = {}));
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var FloorBase = function(_super) {
      __extends(FloorBase, _super);
      function FloorBase() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this._type = null;
        return _this;
      }
      FloorBase.prototype.getFloorType = function() {
        return this._type;
      };
      FloorBase.prototype.initFloor = function(grid, type) {
        _super.prototype.initEntity.call(this, grid, EntityID_1.EntityType.Floor);
        this._type = type;
      };
      FloorBase.prototype.getType = function() {
        return this._type;
      };
      FloorBase.prototype.canExcuteCommand = function(command) {
        switch (command.type) {
         case GridCommand_1.GridCommandType.BombClean:
          return this.canCleanByBomb(command.cleanColor);

         case GridCommand_1.GridCommandType.FloorClean:
          return this.canBeFloorClean();

         case GridCommand_1.GridCommandType.TerminateClean:
          return this.canCleanByTerminate(command.cleanColor);
        }
        return false;
      };
      FloorBase.prototype.excuteCommand = function(command) {
        if (!this.canExcuteCommand(command)) return;
        switch (command.type) {
         case GridCommand_1.GridCommandType.BombClean:
          this.onClean(EntityID_1.EntityCleanOption.create(EntityID_1.EntityCleanType.Bomb, command.cleanRoot, command.cleanColor, command.createBombType, command.hitNeighbour, command.hitFloor, command.layoutGrass));
          break;

         case GridCommand_1.GridCommandType.FloorClean:
          this.onClean(EntityID_1.EntityCleanOption.create(EntityID_1.EntityCleanType.Floor, command.cleanRoot, command.cleanColor, command.createBombType, command.hitNeighbour, command.hitFloor, command.layoutGrass));
          break;

         case GridCommand_1.GridCommandType.TerminateClean:
          this.onClean(EntityID_1.EntityCleanOption.create(EntityID_1.EntityCleanType.Terminate, command.cleanRoot, command.cleanColor, command.createBombType, command.hitNeighbour, command.hitFloor, command.layoutGrass));
        }
      };
      FloorBase.prototype.canCleanByTerminate = function(cleanColor) {
        return this._canCleanByTerminate(cleanColor);
      };
      FloorBase.prototype.canCleanByBomb = function(cleanColor) {
        if (!this.getImmuneDamage()) return this._canCleanByBomb(cleanColor);
        return false;
      };
      FloorBase.prototype.canBeFloorClean = function() {
        if (!this.getImmuneDamage()) return this._canBeFloorClean();
        return false;
      };
      FloorBase.prototype.onClean = function(cleanOption) {
        this._onClean(cleanOption);
        this.setImmuneDamage(true);
      };
      FloorBase.prototype.removeFromGrid = function() {
        this.getGrid().removeFloorAtLogicalPos(this.getLogicalPos());
      };
      FloorBase.prototype._canCleanByTerminate = function(cleanColor) {
        return false;
      };
      FloorBase.prototype._canCleanByBomb = function(cleanColor) {
        return false;
      };
      FloorBase.prototype._canBeFloorClean = function() {
        return false;
      };
      FloorBase.prototype._onClean = function(cleanOption) {};
      FloorBase = __decorate([ ccclass ], FloorBase);
      return FloorBase;
    }(EntityBase_1.default);
    exports.default = FloorBase;
    cc._RF.pop();
  }, {
    "../../commond/GridCommand": "GridCommand",
    "../../defines/EntityID": "EntityID",
    "../EntityBase": "EntityBase"
  } ],
  FloorChanger: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "a3909XA8H5GkozAd/QsoYj3", "FloorChanger");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var FloorBase_1 = require("./FloorBase");
    var EntityID_1 = require("../../defines/EntityID");
    var CollectionID_1 = require("../../defines/CollectionID");
    var EntityPrefabNodePool_1 = require("../EntityPrefabNodePool");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var FloorChanger = function(_super) {
      __extends(FloorChanger, _super);
      function FloorChanger() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      FloorChanger_1 = FloorChanger;
      FloorChanger.create = function(grid, entityColor) {
        var className = "FloorChanger";
        var prefabFileName = "match_scene/prefab/entity/floor/FloorChanger";
        var pool = EntityPrefabNodePool_1.default.getInstance();
        var component = pool.getPrefabNodeWithFileNameAndClassName(prefabFileName, className);
        if (component) {
          component.init(grid, entityColor);
          return component;
        }
        return null;
      };
      FloorChanger.prototype.clone = function() {
        return FloorChanger_1.create(this.getGrid(), this.getEntityColor());
      };
      FloorChanger.prototype.getCollectionID = function() {
        return CollectionID_1.CollectionID.FloorChanger;
      };
      FloorChanger.prototype.getEntityID = function() {
        var result = EntityID_1.EntityID.None;
        switch (this.getEntityColor()) {
         case EntityID_1.EntityColor.Red:
          result = EntityID_1.EntityID.FloorChangerRed;
          break;

         case EntityID_1.EntityColor.Green:
          result = EntityID_1.EntityID.FloorChangerGreen;
          break;

         case EntityID_1.EntityColor.Blue:
          result = EntityID_1.EntityID.FloorChangerBlue;
          break;

         case EntityID_1.EntityColor.Yellow:
          result = EntityID_1.EntityID.FloorChangerYellow;
          break;

         case EntityID_1.EntityColor.Orange:
          result = EntityID_1.EntityID.FloorChangerOrange;
          break;

         case EntityID_1.EntityColor.Purple:
          result = EntityID_1.EntityID.FloorChangerPurple;
        }
        return result;
      };
      FloorChanger.prototype._canCleanByBomb = function(cleanColor) {
        return false;
      };
      FloorChanger.prototype._canBeFloorClean = function() {
        return false;
      };
      FloorChanger.prototype.init = function(grid, entityColor) {
        _super.prototype.initFloor.call(this, grid, FloorBase_1.FloorType.Changer);
        this.setEntityColor(entityColor);
      };
      var FloorChanger_1;
      FloorChanger = FloorChanger_1 = __decorate([ ccclass ], FloorChanger);
      return FloorChanger;
    }(FloorBase_1.default);
    exports.default = FloorChanger;
    cc._RF.pop();
  }, {
    "../../defines/CollectionID": "CollectionID",
    "../../defines/EntityID": "EntityID",
    "../EntityPrefabNodePool": "EntityPrefabNodePool",
    "./FloorBase": "FloorBase"
  } ],
  FloorDoubler: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "b6b152yClhGyq3QyKqmQjng", "FloorDoubler");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var FloorBase_1 = require("./FloorBase");
    var EntityID_1 = require("../../defines/EntityID");
    var CollectionID_1 = require("../../defines/CollectionID");
    var EntityPrefabNodePool_1 = require("../EntityPrefabNodePool");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var FloorDoubler = function(_super) {
      __extends(FloorDoubler, _super);
      function FloorDoubler() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      FloorDoubler_1 = FloorDoubler;
      FloorDoubler.create = function(grid) {
        var className = "FloorDoubler";
        var prefabFileName = "match_scene/prefab/entity/floor/FloorDoubler";
        var pool = EntityPrefabNodePool_1.default.getInstance();
        var component = pool.getPrefabNodeWithFileNameAndClassName(prefabFileName, className);
        if (component) {
          component.init(grid);
          return component;
        }
        return null;
      };
      FloorDoubler.prototype.clone = function() {
        return FloorDoubler_1.create(this.getGrid());
      };
      FloorDoubler.prototype.getCollectionID = function() {
        return CollectionID_1.CollectionID.FloorDouble;
      };
      FloorDoubler.prototype.getEntityID = function() {
        return EntityID_1.EntityID.FloorDouble;
      };
      FloorDoubler.prototype._canCleanByBomb = function(cleanColor) {
        return false;
      };
      FloorDoubler.prototype._canBeFloorClean = function() {
        return false;
      };
      FloorDoubler.prototype.init = function(grid) {
        _super.prototype.initFloor.call(this, grid, FloorBase_1.FloorType.Double);
      };
      var FloorDoubler_1;
      FloorDoubler = FloorDoubler_1 = __decorate([ ccclass ], FloorDoubler);
      return FloorDoubler;
    }(FloorBase_1.default);
    exports.default = FloorDoubler;
    cc._RF.pop();
  }, {
    "../../defines/CollectionID": "CollectionID",
    "../../defines/EntityID": "EntityID",
    "../EntityPrefabNodePool": "EntityPrefabNodePool",
    "./FloorBase": "FloorBase"
  } ],
  FloorFactory: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "61013XVaBlI0phUgcjUM2SI", "FloorFactory");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var EntityID_1 = require("../../defines/EntityID");
    var IdentifierManager_1 = require("../../defines/IdentifierManager");
    var FloorRoad_1 = require("./FloorRoad");
    var FloorIce_1 = require("./FloorIce");
    var FloorGrass_1 = require("./FloorGrass");
    var FloorChanger_1 = require("./FloorChanger");
    var FloorDoubler_1 = require("./FloorDoubler");
    var FloorFactory = function() {
      function FloorFactory() {}
      FloorFactory.generateFloorWithEntityID = function(grid, entityID) {
        var floor = null;
        switch (entityID) {
         case EntityID_1.EntityID.FloorIceHp1:
         case EntityID_1.EntityID.FloorIceHp2:
         case EntityID_1.EntityID.FloorIceHp3:
         case EntityID_1.EntityID.FloorIceHp4:
          var color = entityID - EntityID_1.EntityID.FloorIceHp1 + 1;
          floor = FloorIce_1.default.create(grid, color);
          break;

         case EntityID_1.EntityID.FloorRoadLineVU:
          floor = FloorRoad_1.default.create(grid, FloorRoad_1.FloorRoadDirection.Down, FloorRoad_1.FloorRoadDirection.Up);
          break;

         case EntityID_1.EntityID.FloorRoadLineHR:
          floor = FloorRoad_1.default.create(grid, FloorRoad_1.FloorRoadDirection.Left, FloorRoad_1.FloorRoadDirection.Right);
          break;

         case EntityID_1.EntityID.FloorRoadLineVD:
          floor = FloorRoad_1.default.create(grid, FloorRoad_1.FloorRoadDirection.Up, FloorRoad_1.FloorRoadDirection.Down);
          break;

         case EntityID_1.EntityID.FloorRoadLineHL:
          floor = FloorRoad_1.default.create(grid, FloorRoad_1.FloorRoadDirection.Right, FloorRoad_1.FloorRoadDirection.Left);
          break;

         case EntityID_1.EntityID.FloorRoadTurnLdD:
          floor = FloorRoad_1.default.create(grid, FloorRoad_1.FloorRoadDirection.Left, FloorRoad_1.FloorRoadDirection.Down);
          break;

         case EntityID_1.EntityID.FloorRoadTurnLuL:
          floor = FloorRoad_1.default.create(grid, FloorRoad_1.FloorRoadDirection.Up, FloorRoad_1.FloorRoadDirection.Left);
          break;

         case EntityID_1.EntityID.FloorRoadTurnRuU:
          floor = FloorRoad_1.default.create(grid, FloorRoad_1.FloorRoadDirection.Right, FloorRoad_1.FloorRoadDirection.Up);
          break;

         case EntityID_1.EntityID.FloorRoadTurnRdR:
          floor = FloorRoad_1.default.create(grid, FloorRoad_1.FloorRoadDirection.Down, FloorRoad_1.FloorRoadDirection.Right);
          break;

         case EntityID_1.EntityID.FloorRoadTurnRdD:
          floor = FloorRoad_1.default.create(grid, FloorRoad_1.FloorRoadDirection.Right, FloorRoad_1.FloorRoadDirection.Down);
          break;

         case EntityID_1.EntityID.FloorRoadTurnRuR:
          floor = FloorRoad_1.default.create(grid, FloorRoad_1.FloorRoadDirection.Up, FloorRoad_1.FloorRoadDirection.Right);
          break;

         case EntityID_1.EntityID.FloorRoadTurnLuU:
          floor = FloorRoad_1.default.create(grid, FloorRoad_1.FloorRoadDirection.Left, FloorRoad_1.FloorRoadDirection.Up);
          break;

         case EntityID_1.EntityID.FloorRoadTurnLdL:
          floor = FloorRoad_1.default.create(grid, FloorRoad_1.FloorRoadDirection.Down, FloorRoad_1.FloorRoadDirection.Left);
          break;

         case EntityID_1.EntityID.FloorChangerRed:
         case EntityID_1.EntityID.FloorChangerGreen:
         case EntityID_1.EntityID.FloorChangerBlue:
         case EntityID_1.EntityID.FloorChangerYellow:
         case EntityID_1.EntityID.FloorChangerOrange:
         case EntityID_1.EntityID.FloorChangerPurple:
          var color = entityID - EntityID_1.EntityID.FloorChangerRed + EntityID_1.EntityColor.Red;
          if (color >= EntityID_1.EntityColor.Begin && color <= EntityID_1.EntityColor.End) {
            floor = FloorChanger_1.default.create(grid, color);
            floor && floor.setEntityColor(color);
          }
          break;

         case EntityID_1.EntityID.FloorGrass:
          floor = FloorGrass_1.default.create(grid);
          break;

         case EntityID_1.EntityID.FloorDouble:
          floor = FloorDoubler_1.default.create(grid);
        }
        return floor;
      };
      FloorFactory.generateFloorWithKindID = function(grid, kindID) {
        var entityID = IdentifierManager_1.default.getInstance().getEntityIDFromKindID(kindID);
        return this.generateFloorWithEntityID(grid, entityID);
      };
      return FloorFactory;
    }();
    exports.default = FloorFactory;
    cc._RF.pop();
  }, {
    "../../defines/EntityID": "EntityID",
    "../../defines/IdentifierManager": "IdentifierManager",
    "./FloorChanger": "FloorChanger",
    "./FloorDoubler": "FloorDoubler",
    "./FloorGrass": "FloorGrass",
    "./FloorIce": "FloorIce",
    "./FloorRoad": "FloorRoad"
  } ],
  FloorGrass: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "4f7adZ00spJH4JKTGCbEMKL", "FloorGrass");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var IGame_1 = require("../../../../base/IGame");
    var CollectionID_1 = require("../../defines/CollectionID");
    var EntityID_1 = require("../../defines/EntityID");
    var IdentifierManager_1 = require("../../defines/IdentifierManager");
    var EntityPrefabNodePool_1 = require("../EntityPrefabNodePool");
    var FloorBase_1 = require("./FloorBase");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var FloorGrass = function(_super) {
      __extends(FloorGrass, _super);
      function FloorGrass() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      FloorGrass_1 = FloorGrass;
      FloorGrass.create = function(grid) {
        var className = "FloorGrass";
        var prefabFileName = "match_scene/prefab/entity/floor/FloorGrass";
        var pool = EntityPrefabNodePool_1.default.getInstance();
        var component = pool.getPrefabNodeWithFileNameAndClassName(prefabFileName, className);
        if (component) {
          component.init(grid);
          return component;
        }
        return null;
      };
      FloorGrass.prototype.clone = function() {
        return FloorGrass_1.create(this.getGrid());
      };
      FloorGrass.prototype.getCollectionID = function() {
        return CollectionID_1.CollectionID.FloorGrass;
      };
      FloorGrass.prototype.getEntityID = function() {
        return EntityID_1.EntityID.FloorGrass;
      };
      FloorGrass.prototype.getScore = function() {
        return 200;
      };
      FloorGrass.prototype.onCollected = function() {
        this.getGrid().isTargetCollectionID(this.getCollectionID()) && this.getGrid().updateTargetBarUIWithDelta(this.getCollectionID(), -1);
        this.getGrid().collectEntity(this);
      };
      FloorGrass.prototype.grow = function() {
        this.getGrid().gainScoreWithEntity(this);
        this.playAnimation("grow");
        this.selfHurt();
        IGame_1.default.playAudio(IdentifierManager_1.default.getInstance().getMatchAudioFilePath("grass"));
      };
      FloorGrass.prototype.init = function(grid) {
        _super.prototype.initFloor.call(this, grid, FloorBase_1.FloorType.Grass);
      };
      var FloorGrass_1;
      FloorGrass = FloorGrass_1 = __decorate([ ccclass ], FloorGrass);
      return FloorGrass;
    }(FloorBase_1.default);
    exports.default = FloorGrass;
    cc._RF.pop();
  }, {
    "../../../../base/IGame": "IGame",
    "../../defines/CollectionID": "CollectionID",
    "../../defines/EntityID": "EntityID",
    "../../defines/IdentifierManager": "IdentifierManager",
    "../EntityPrefabNodePool": "EntityPrefabNodePool",
    "./FloorBase": "FloorBase"
  } ],
  FloorIce: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "00356zqv0lMGrQ3DtOo4LJc", "FloorIce");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var FloorBase_1 = require("./FloorBase");
    var CollectionID_1 = require("../../defines/CollectionID");
    var EntityID_1 = require("../../defines/EntityID");
    var GridCommand_1 = require("../../commond/GridCommand");
    var FlyerAnimation_1 = require("../flyer/FlyerAnimation");
    var IGame_1 = require("../../../../base/IGame");
    var IdentifierManager_1 = require("../../defines/IdentifierManager");
    var EntityPrefabNodePool_1 = require("../EntityPrefabNodePool");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var FloorIce = function(_super) {
      __extends(FloorIce, _super);
      function FloorIce() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this._healthPoint = 0;
        return _this;
      }
      FloorIce_1 = FloorIce;
      FloorIce.create = function(grid, healthPoint) {
        var className = "FloorIce";
        var prefabFileName = "match_scene/prefab/entity/floor/FloorIce";
        var pool = EntityPrefabNodePool_1.default.getInstance();
        var component = pool.getPrefabNodeWithFileNameAndClassName(prefabFileName, className);
        if (component) {
          component.init(grid, healthPoint);
          return component;
        }
        return null;
      };
      FloorIce.prototype.clone = function() {
        return FloorIce_1.create(this.getGrid(), this.getHealthPoint());
      };
      FloorIce.prototype.getCollectionID = function() {
        return CollectionID_1.CollectionID.FloorIce;
      };
      FloorIce.prototype.getEntityID = function() {
        var result = EntityID_1.EntityID.None;
        switch (this.getHealthPoint()) {
         case 1:
          result = EntityID_1.EntityID.FloorIceHp1;
          break;

         case 2:
          result = EntityID_1.EntityID.FloorIceHp2;
          break;

         case 3:
          result = EntityID_1.EntityID.FloorIceHp3;
          break;

         case 4:
          result = EntityID_1.EntityID.FloorIceHp4;
        }
        return result;
      };
      FloorIce.prototype.getScore = function() {
        return 50;
      };
      FloorIce.prototype.getButterflyPriority = function(color, layoutGrass) {
        var popsicle = this.getGrid().getPopsicleAtLogicalPos(this.getLogicalPos());
        if (popsicle) {
          var coverItem = this.getGrid().getItemAtLogicalPos(this.getLogicalPos());
          return coverItem && coverItem.canExcuteCommand(GridCommand_1.default.BombClean(this.getLogicalPos(), color, layoutGrass)), 
          1;
        }
        return _super.prototype.getButterflyPriority.call(this, color, layoutGrass);
      };
      FloorIce.prototype._canCleanByTerminate = function(cleanColor) {
        return true;
      };
      FloorIce.prototype._canCleanByBomb = function(cleanColor) {
        return false;
      };
      FloorIce.prototype._canBeFloorClean = function() {
        return true;
      };
      FloorIce.prototype._onClean = function(cleanOption) {
        var rate = 1;
        if (cleanOption.cleanType == EntityID_1.EntityCleanType.Terminate) {
          rate = this.getHealthPoint();
          this.setHealthPoint(1);
        }
        this.getGrid().gainScoreWithEntity(this, rate);
        if (this.getHealthPoint() <= 1) {
          this.setVisible(false);
          if (!this.isTargetCollection()) {
            var flyer = FlyerAnimation_1.default.createDieAnimation(this.getGrid(), this.getEntityID());
            this.getGrid().setFlyerAtLogicalPos(flyer, this.getLogicalPos());
            IGame_1.default.playAudio(IdentifierManager_1.default.getInstance().getMatchAudioFilePath("ice"));
          }
          this.onCollected();
          this.selfDestory();
          this.getGrid().dispatchCommand(this.getLogicalPos(), GridCommand_1.default.PopsicleClean(), 0);
        } else {
          this.setHealthPoint(this.getHealthPoint() - 1);
          this.selfHurt();
          var flyer = FlyerAnimation_1.default.createDieAnimation(this.getGrid(), this.getEntityID());
          this.getGrid().setFlyerAtLogicalPos(flyer, this.getLogicalPos());
          IGame_1.default.playAudio(IdentifierManager_1.default.getInstance().getMatchAudioFilePath("ice"));
          flyer.node.zIndex = this.getTopZOrder();
        }
      };
      FloorIce.prototype.init = function(grid, healthPoint) {
        _super.prototype.initFloor.call(this, grid, FloorBase_1.FloorType.Ice);
        this.setHealthPoint(healthPoint);
      };
      FloorIce.prototype.getHealthPoint = function() {
        return this._healthPoint;
      };
      FloorIce.prototype.setHealthPoint = function(val) {
        this._healthPoint = val;
        this.updatePuppet();
      };
      var FloorIce_1;
      FloorIce = FloorIce_1 = __decorate([ ccclass ], FloorIce);
      return FloorIce;
    }(FloorBase_1.default);
    exports.default = FloorIce;
    cc._RF.pop();
  }, {
    "../../../../base/IGame": "IGame",
    "../../commond/GridCommand": "GridCommand",
    "../../defines/CollectionID": "CollectionID",
    "../../defines/EntityID": "EntityID",
    "../../defines/IdentifierManager": "IdentifierManager",
    "../EntityPrefabNodePool": "EntityPrefabNodePool",
    "../flyer/FlyerAnimation": "FlyerAnimation",
    "./FloorBase": "FloorBase"
  } ],
  FloorRoad: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "22062qWI8hHPZ93a4Z/Vw1l", "FloorRoad");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.FloorRoadDirection = void 0;
    var CollectionID_1 = require("../../defines/CollectionID");
    var EntityID_1 = require("../../defines/EntityID");
    var FloorBase_1 = require("./FloorBase");
    var EntityPrefabNodePool_1 = require("../EntityPrefabNodePool");
    var FloorRoadDirection;
    (function(FloorRoadDirection) {
      FloorRoadDirection[FloorRoadDirection["Left"] = 0] = "Left";
      FloorRoadDirection[FloorRoadDirection["Up"] = 1] = "Up";
      FloorRoadDirection[FloorRoadDirection["Right"] = 2] = "Right";
      FloorRoadDirection[FloorRoadDirection["Down"] = 3] = "Down";
    })(FloorRoadDirection = exports.FloorRoadDirection || (exports.FloorRoadDirection = {}));
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var FloorRoad = function(_super) {
      __extends(FloorRoad, _super);
      function FloorRoad() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this._isStartPoint = false;
        _this._inDirection = FloorRoadDirection.Left;
        _this._outDirection = FloorRoadDirection.Up;
        return _this;
      }
      FloorRoad_1 = FloorRoad;
      FloorRoad.create = function(grid, inDirection, outDirection) {
        var className = "FloorRoad";
        var prefabFileName = "match_scene/prefab/entity/floor/FloorRoad";
        var pool = EntityPrefabNodePool_1.default.getInstance();
        var component = pool.getPrefabNodeWithFileNameAndClassName(prefabFileName, className);
        if (component) {
          component.init(grid, inDirection, outDirection);
          return component;
        }
        return null;
      };
      FloorRoad.prototype.clone = function() {
        return FloorRoad_1.create(this.getGrid(), this._inDirection, this._outDirection);
      };
      FloorRoad.prototype.init = function(grid, inDircetion, outDirection) {
        _super.prototype.initFloor.call(this, grid, FloorBase_1.FloorType.Road);
        this.setInDirection(inDircetion);
        this.setOutDirection(outDirection);
        this.updatePuppet();
      };
      FloorRoad.prototype.getCollectionID = function() {
        return CollectionID_1.CollectionID.FloorRoad;
      };
      FloorRoad.prototype.getEntityID = function() {
        if (this.getIsStartPoint()) return EntityID_1.EntityID.FloorRoadStartPoint;
        var result = EntityID_1.EntityID.None;
        switch (this._inDirection) {
         case FloorRoadDirection.Left:
          switch (this._outDirection) {
           case FloorRoadDirection.Right:
            result = EntityID_1.EntityID.FloorRoadLineHR;
            break;

           case FloorRoadDirection.Up:
            result = EntityID_1.EntityID.FloorRoadTurnLuU;
            break;

           case FloorRoadDirection.Down:
            result = EntityID_1.EntityID.FloorRoadTurnLdD;
          }
          break;

         case FloorRoadDirection.Right:
          switch (this._outDirection) {
           case FloorRoadDirection.Left:
            result = EntityID_1.EntityID.FloorRoadLineHL;
            break;

           case FloorRoadDirection.Up:
            result = EntityID_1.EntityID.FloorRoadTurnRuU;
            break;

           case FloorRoadDirection.Down:
            result = EntityID_1.EntityID.FloorRoadTurnRdD;
          }
          break;

         case FloorRoadDirection.Up:
          switch (this._outDirection) {
           case FloorRoadDirection.Left:
            result = EntityID_1.EntityID.FloorRoadTurnLuL;
            break;

           case FloorRoadDirection.Right:
            result = EntityID_1.EntityID.FloorRoadTurnRuR;
            break;

           case FloorRoadDirection.Down:
            result = EntityID_1.EntityID.FloorRoadLineVD;
          }
          break;

         case FloorRoadDirection.Down:
          switch (this._outDirection) {
           case FloorRoadDirection.Left:
            result = EntityID_1.EntityID.FloorRoadTurnLdL;
            break;

           case FloorRoadDirection.Right:
            result = EntityID_1.EntityID.FloorRoadTurnRdR;
            break;

           case FloorRoadDirection.Up:
            result = EntityID_1.EntityID.FloorRoadLineVU;
          }
        }
        return result;
      };
      FloorRoad.prototype.getIsStartPoint = function() {
        return this._isStartPoint;
      };
      FloorRoad.prototype.setIsStartPoint = function(val) {
        this._isStartPoint = val;
        this.updatePuppet();
      };
      FloorRoad.prototype.getInDirection = function() {
        return this._inDirection;
      };
      FloorRoad.prototype.setInDirection = function(val) {
        this._inDirection = val;
      };
      FloorRoad.prototype.getOutDirection = function() {
        return this._outDirection;
      };
      FloorRoad.prototype.setOutDirection = function(val) {
        this._outDirection = val;
      };
      var FloorRoad_1;
      FloorRoad = FloorRoad_1 = __decorate([ ccclass ], FloorRoad);
      return FloorRoad;
    }(FloorBase_1.default);
    exports.default = FloorRoad;
    cc._RF.pop();
  }, {
    "../../defines/CollectionID": "CollectionID",
    "../../defines/EntityID": "EntityID",
    "../EntityPrefabNodePool": "EntityPrefabNodePool",
    "./FloorBase": "FloorBase"
  } ],
  FlyerAnimation: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "a037d+MRTZIoKgX8nH4xQqC", "FlyerAnimation");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.FlyerAnimationType = void 0;
    var EntityID_1 = require("../../defines/EntityID");
    var IdentifierManager_1 = require("../../defines/IdentifierManager");
    var EntityPrefabNodePool_1 = require("../EntityPrefabNodePool");
    var FlyerBase_1 = require("./FlyerBase");
    var FlyerAnimationType;
    (function(FlyerAnimationType) {
      FlyerAnimationType[FlyerAnimationType["Bomb1x1"] = 0] = "Bomb1x1";
      FlyerAnimationType[FlyerAnimationType["CommonHurt"] = 1] = "CommonHurt";
      FlyerAnimationType[FlyerAnimationType["FocusFrame"] = 2] = "FocusFrame";
      FlyerAnimationType[FlyerAnimationType["HighlightedCell"] = 3] = "HighlightedCell";
      FlyerAnimationType[FlyerAnimationType["ItemMarked"] = 4] = "ItemMarked";
      FlyerAnimationType[FlyerAnimationType["BombCross"] = 5] = "BombCross";
    })(FlyerAnimationType = exports.FlyerAnimationType || (exports.FlyerAnimationType = {}));
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var FlyerAnimation = function(_super) {
      __extends(FlyerAnimation, _super);
      function FlyerAnimation() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this._autoRemoveOnFinish = false;
        _this._entityID = EntityID_1.EntityID.None;
        return _this;
      }
      FlyerAnimation.prototype.getAutoRemoveOnFinish = function() {
        return this._autoRemoveOnFinish;
      };
      FlyerAnimation.prototype.setAutoRemoveOnFinish = function(auto) {
        this._autoRemoveOnFinish = auto;
      };
      FlyerAnimation.prototype.getEntityID = function() {
        return this._entityID;
      };
      FlyerAnimation.prototype.launch = function() {
        var _this = this;
        var state = this.playAnimation("default");
        if (this._autoRemoveOnFinish) if (state) {
          var action = cc.sequence(cc.delayTime(state.duration), cc.callFunc(function() {
            _this.getGrid().removeObstructs(_this);
            _this.destoryWithRecycle(true);
          }));
          this.runAction(action);
        } else {
          this.getGrid().removeObstructs(this);
          this.destoryWithRecycle(true);
        }
      };
      FlyerAnimation.prototype.init = function(grid, entityID, autoRemove) {
        this._entityID = entityID;
        _super.prototype.initFlyer.call(this, grid, FlyerBase_1.FlyerType.Animation);
        this.setAutoRemoveOnFinish(autoRemove);
      };
      FlyerAnimation.create = function(grid, entityID, filePatth, autoRemove) {
        void 0 === autoRemove && (autoRemove = true);
        var className = "FlyerAnimation";
        var prefabFileName = filePatth;
        var pool = EntityPrefabNodePool_1.default.getInstance();
        var component = pool.getPrefabNodeWithFileNameAndClassName(prefabFileName, className);
        if (component) {
          component.init(grid, entityID, autoRemove);
          return component;
        }
        return null;
      };
      FlyerAnimation.createDieAnimation = function(grid, entityID, autoRemove) {
        void 0 === autoRemove && (autoRemove = true);
        var info = IdentifierManager_1.default.getInstance().getHurtAnimationInfoPathFromEntityID(entityID);
        if (info) return this.create(grid, info.entityID, info.fileName, autoRemove);
        return null;
      };
      FlyerAnimation.createAnimationWithType = function(grid, type, autoRemove) {
        void 0 === autoRemove && (autoRemove = true);
        var path = null;
        var entityID = EntityID_1.EntityID.None;
        switch (type) {
         case FlyerAnimationType.Bomb1x1:
          path = "match_scene/prefab/entity/animation/AnimationBomb1x1";
          entityID = EntityID_1.EntityID.FlyerAnimationBomb1x1;
          break;

         case FlyerAnimationType.CommonHurt:
          path = "match_scene/prefab/entity/animation/AnimationCommonHurt";
          entityID = EntityID_1.EntityID.FlyerAnimationCommonHurt;
          break;

         case FlyerAnimationType.FocusFrame:
          path = "match_scene/prefab/entity/animation/AnimationFocusFrame";
          entityID = EntityID_1.EntityID.FlyerAnimationFocusFrame;
          break;

         case FlyerAnimationType.HighlightedCell:
          path = "match_scene/prefab/entity/animation/AnimationHighlightedCell";
          entityID = EntityID_1.EntityID.FlyerAnimationHighlightedCell;
          break;

         case FlyerAnimationType.ItemMarked:
          path = "match_scene/prefab/entity/animation/AnimationItemMarked";
          entityID = EntityID_1.EntityID.FlyerAnimationItemMarked;
          break;

         case FlyerAnimationType.BombCross:
          path = "match_scene/prefab/entity/animation/AnimationFireworkBoom";
          entityID = EntityID_1.EntityID.FlyerAnimationBombCross;
        }
        if (path) return this.create(grid, entityID, path, autoRemove);
        return null;
      };
      FlyerAnimation.prototype.start = function() {};
      FlyerAnimation = __decorate([ ccclass ], FlyerAnimation);
      return FlyerAnimation;
    }(FlyerBase_1.default);
    exports.default = FlyerAnimation;
    cc._RF.pop();
  }, {
    "../../defines/EntityID": "EntityID",
    "../../defines/IdentifierManager": "IdentifierManager",
    "../EntityPrefabNodePool": "EntityPrefabNodePool",
    "./FlyerBase": "FlyerBase"
  } ],
  FlyerBase: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "9a942L29kNCR4kK6I0NvvB6", "FlyerBase");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.FlyerType = void 0;
    var GameMath_1 = require("../../../../extend/utils/GameMath");
    var CollectionID_1 = require("../../defines/CollectionID");
    var EntityID_1 = require("../../defines/EntityID");
    var EntityBase_1 = require("../EntityBase");
    var GridCommand_1 = require("../../commond/GridCommand");
    var FlyerType;
    (function(FlyerType) {
      FlyerType[FlyerType["None"] = 0] = "None";
      FlyerType[FlyerType["Missile"] = 1] = "Missile";
      FlyerType[FlyerType["Cannon"] = 2] = "Cannon";
      FlyerType[FlyerType["Mower"] = 3] = "Mower";
      FlyerType[FlyerType["Bomb"] = 4] = "Bomb";
      FlyerType[FlyerType["NuclearBomb"] = 5] = "NuclearBomb";
      FlyerType[FlyerType["LasetBullet"] = 6] = "LasetBullet";
      FlyerType[FlyerType["Laser"] = 7] = "Laser";
      FlyerType[FlyerType["Hammer"] = 8] = "Hammer";
      FlyerType[FlyerType["PopsicleLine"] = 9] = "PopsicleLine";
      FlyerType[FlyerType["PopsicleBomb"] = 10] = "PopsicleBomb";
      FlyerType[FlyerType["Animation"] = 11] = "Animation";
      FlyerType[FlyerType["CollectedEntity"] = 12] = "CollectedEntity";
      FlyerType[FlyerType["CollectedSupply"] = 13] = "CollectedSupply";
      FlyerType[FlyerType["MoreStep"] = 14] = "MoreStep";
      FlyerType[FlyerType["Charger"] = 15] = "Charger";
      FlyerType[FlyerType["ComboWord"] = 16] = "ComboWord";
      FlyerType[FlyerType["FireworksMissile"] = 17] = "FireworksMissile";
      FlyerType[FlyerType["FireworksCannon"] = 18] = "FireworksCannon";
      FlyerType[FlyerType["Score"] = 19] = "Score";
    })(FlyerType = exports.FlyerType || (exports.FlyerType = {}));
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var FlyerBase = function(_super) {
      __extends(FlyerBase, _super);
      function FlyerBase() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this._flyerType = FlyerType.None;
        return _this;
      }
      FlyerBase.prototype.getFlyerType = function() {
        return this._flyerType;
      };
      FlyerBase.prototype.getCollectionID = function() {
        return CollectionID_1.CollectionID.None;
      };
      FlyerBase.prototype.launch = function() {};
      FlyerBase.prototype.initFlyer = function(grid, flyerType) {
        _super.prototype.initEntity.call(this, grid, EntityID_1.EntityType.Flyer);
        this._flyerType = flyerType;
      };
      FlyerBase.prototype.getAttackPos = function(color, layoutGrass) {
        var targetPos = cc.v2(-1, -1);
        var targetPriority = EntityBase_1.default.DEFAULT_MISSILE_PRIORITY;
        var grid = this.getGrid();
        var entityTypes = [ EntityID_1.EntityType.Parasite, EntityID_1.EntityType.Item, EntityID_1.EntityType.Rug, EntityID_1.EntityType.Floor, EntityID_1.EntityType.Popsicle, EntityID_1.EntityType.Cell ];
        var cellsMap = grid.getCellsMap();
        var checkPositions = [];
        var attackedPositions = grid.getAttackedPosition();
        for (var key in cellsMap) {
          var cell = cellsMap[key];
          var checkPos = cell.getLogicalPos();
          -1 == GameMath_1.default.indexOf(attackedPositions, checkPos) && checkPositions.push(checkPos);
        }
        GameMath_1.default.shuffleArray(checkPositions);
        for (var _i = 0, checkPositions_1 = checkPositions; _i < checkPositions_1.length; _i++) {
          var checkPos = checkPositions_1[_i];
          if (-1 == GameMath_1.default.indexOf(attackedPositions, checkPos)) {
            var minPriority = EntityBase_1.default.DEFAULT_MISSILE_PRIORITY;
            var canAttackTop = false;
            for (var _a = 0, entityTypes_1 = entityTypes; _a < entityTypes_1.length; _a++) {
              var entityType = entityTypes_1[_a];
              var entity = grid.getEntity(entityType, checkPos);
              if (entity) {
                entityType == EntityID_1.EntityType.Parasite || entityType == EntityID_1.EntityType.Item ? entity.canExcuteCommand(GridCommand_1.default.BombClean(this.getLogicalPos(), color, layoutGrass)) && (canAttackTop = true) : canAttackTop = true;
                if (!canAttackTop) break;
                var butterflyPriority = entity.getButterflyPriority(color, layoutGrass);
                butterflyPriority < minPriority && (minPriority = butterflyPriority);
              }
            }
            if (canAttackTop && minPriority < targetPriority) {
              targetPriority = minPriority;
              targetPos = checkPos;
            }
          }
        }
        if (targetPos.equals(cc.v2(-1, -1))) if (checkPositions.length > 0) {
          var index = GameMath_1.default.randomInt(0, checkPositions.length - 1);
          targetPos = checkPositions[index];
        } else while (1) {
          var x = GameMath_1.default.randomInt(0, grid.getGridSize().width - 1);
          var y = GameMath_1.default.randomInt(0, grid.getGridSize().height - 1);
          var checkPos = cc.v2(x, y);
          var cell = grid.getCellAtLogicalPos(checkPos);
          if (cell) {
            targetPos = checkPos;
            break;
          }
        }
        return targetPos;
      };
      FlyerBase = __decorate([ ccclass ], FlyerBase);
      return FlyerBase;
    }(EntityBase_1.default);
    exports.default = FlyerBase;
    cc._RF.pop();
  }, {
    "../../../../extend/utils/GameMath": "GameMath",
    "../../commond/GridCommand": "GridCommand",
    "../../defines/CollectionID": "CollectionID",
    "../../defines/EntityID": "EntityID",
    "../EntityBase": "EntityBase"
  } ],
  FlyerBomb: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "b5e89npFaFGwZn7qQrZFl3O", "FlyerBomb");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var IGame_1 = require("../../../../base/IGame");
    var GameMath_1 = require("../../../../extend/utils/GameMath");
    var GridCommand_1 = require("../../commond/GridCommand");
    var EntityID_1 = require("../../defines/EntityID");
    var IdentifierManager_1 = require("../../defines/IdentifierManager");
    var EntityPrefabNodePool_1 = require("../EntityPrefabNodePool");
    var FlyerBase_1 = require("./FlyerBase");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var FlyerBomb = function(_super) {
      __extends(FlyerBomb, _super);
      function FlyerBomb() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.FLYER_BOMB_DURATION = .2;
        _this._launched = false;
        _this._bombDuration = 0;
        _this._lastBombRingIndex = 0;
        _this._canLayoutGrass = false;
        _this._origin = cc.Vec2.ZERO;
        _this._radius = 0;
        return _this;
      }
      FlyerBomb.prototype.getCanLayoutGrass = function() {
        return this._canLayoutGrass;
      };
      FlyerBomb.prototype.setCanLayoutGrass = function(canLayoutGrass) {
        this._canLayoutGrass = canLayoutGrass;
      };
      FlyerBomb.prototype.getOrigin = function() {
        return this._origin;
      };
      FlyerBomb.prototype.setOrigin = function(origin) {
        this._origin = origin;
      };
      FlyerBomb.prototype.getRadius = function() {
        return this._radius;
      };
      FlyerBomb.prototype.setRadius = function(radius) {
        this._radius = radius;
      };
      FlyerBomb.prototype.getEntityID = function() {
        var result = EntityID_1.EntityID.FlyerBombWhite;
        switch (this.getEntityColor()) {
         case EntityID_1.EntityColor.Red:
          result = EntityID_1.EntityID.FlyerBombRed;
          break;

         case EntityID_1.EntityColor.Green:
          result = EntityID_1.EntityID.FlyerBombGreen;
          break;

         case EntityID_1.EntityColor.Blue:
          result = EntityID_1.EntityID.FlyerBombBlue;
          break;

         case EntityID_1.EntityColor.Yellow:
          result = EntityID_1.EntityID.FlyerBombYellow;
          break;

         case EntityID_1.EntityColor.Orange:
          result = EntityID_1.EntityID.FlyerBombOrange;
          break;

         case EntityID_1.EntityColor.Purple:
          result = EntityID_1.EntityID.FlyerBombPurple;
        }
        return result;
      };
      FlyerBomb.prototype.launch = function() {
        var _this = this;
        if (this._launched) return;
        var willAttackPositions = GameMath_1.default.enumerateRingPos(this._origin, 0, this._radius);
        for (var _i = 0, willAttackPositions_1 = willAttackPositions; _i < willAttackPositions_1.length; _i++) {
          var pos = willAttackPositions_1[_i];
          this.getGrid().recordAttackedPosition(pos);
        }
        this._launched = true;
        IGame_1.default.playAudio(IdentifierManager_1.default.getInstance().getMatchAudioFilePath("eliminate_special_bomb"));
        this._bombDuration = 0;
        this._lastBombRingIndex = -1;
        this._launched = true;
        this.getGrid().addObstructs(this);
        var state = this.playAnimation("default");
        if (state) {
          var action = cc.sequence(cc.delayTime(state.duration), cc.callFunc(function() {
            _this.getGrid().removeObstructs(_this);
            _this.destoryWithRecycle(true);
          }));
          this.runAction(action);
        }
      };
      FlyerBomb.prototype.update = function(dt) {
        if (false == this._launched) return;
        dt *= cc.director.getScheduler().getTimeScale();
        this._bombDuration += dt;
        var currentRingIndex = Math.min(this._radius, Math.floor(this._radius * this._bombDuration / this.FLYER_BOMB_DURATION));
        if (currentRingIndex > this._lastBombRingIndex) {
          var positions = GameMath_1.default.enumerateRingPos(this._origin, this._lastBombRingIndex + 1, currentRingIndex);
          var grid = this.getGrid();
          for (var _i = 0, positions_1 = positions; _i < positions_1.length; _i++) {
            var pos = positions_1[_i];
            grid.dispatchCommand(pos, GridCommand_1.default.BombClean(this._origin, this.getEntityColor(), this.getCanLayoutGrass()), 0);
            grid.highlightedCell(pos);
          }
          this._lastBombRingIndex = currentRingIndex;
          this._lastBombRingIndex >= this._radius && grid.removeObstructs(this);
        }
      };
      FlyerBomb.prototype.onDestroy = function() {
        _super.prototype.onDestroy.call(this);
        this._origin = null;
      };
      FlyerBomb.create = function(grid, color, layoutGrass, origin, raidus) {
        var filePath = "match_scene/prefab/entity/flyer/FlyerBomb";
        switch (color) {
         case EntityID_1.EntityColor.Red:
          filePath += "Red";
          break;

         case EntityID_1.EntityColor.Green:
          filePath += "Green";
          break;

         case EntityID_1.EntityColor.Blue:
          filePath += "Blue";
          break;

         case EntityID_1.EntityColor.Yellow:
          filePath += "Yellow";
          break;

         case EntityID_1.EntityColor.Orange:
          filePath += "Orange";
          break;

         case EntityID_1.EntityColor.Purple:
          filePath += "Purple";
          break;

         case EntityID_1.EntityColor.None:
          filePath += "White";
        }
        var className = "FlyerBomb";
        var prefabFileName = filePath;
        var pool = EntityPrefabNodePool_1.default.getInstance();
        var component = pool.getPrefabNodeWithFileNameAndClassName(prefabFileName, className);
        if (component) {
          component.init(grid, color, layoutGrass, origin, raidus);
          return component;
        }
        return null;
      };
      FlyerBomb.prototype.init = function(grid, color, layoutGrass, origin, raidus) {
        _super.prototype.initFlyer.call(this, grid, FlyerBase_1.FlyerType.Bomb);
        this.setEntityColor(color);
        this.setCanLayoutGrass(layoutGrass);
        this.setOrigin(origin);
        this.setRadius(raidus);
        this.FLYER_BOMB_DURATION = .2;
        this._launched = false;
        this._bombDuration = 0;
        this._lastBombRingIndex = 0;
      };
      FlyerBomb = __decorate([ ccclass ], FlyerBomb);
      return FlyerBomb;
    }(FlyerBase_1.default);
    exports.default = FlyerBomb;
    cc._RF.pop();
  }, {
    "../../../../base/IGame": "IGame",
    "../../../../extend/utils/GameMath": "GameMath",
    "../../commond/GridCommand": "GridCommand",
    "../../defines/EntityID": "EntityID",
    "../../defines/IdentifierManager": "IdentifierManager",
    "../EntityPrefabNodePool": "EntityPrefabNodePool",
    "./FlyerBase": "FlyerBase"
  } ],
  FlyerBullet: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "a50f3jyIYZIQJjeDurF/Hmm", "FlyerBullet");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var IGame_1 = require("../../../../base/IGame");
    var GameMath_1 = require("../../../../extend/utils/GameMath");
    var GridCommand_1 = require("../../commond/GridCommand");
    var EntityID_1 = require("../../defines/EntityID");
    var IdentifierManager_1 = require("../../defines/IdentifierManager");
    var EntityPrefabNodePool_1 = require("../EntityPrefabNodePool");
    var ItemBombBase_1 = require("../item/color/bomb/ItemBombBase");
    var ItemFactory_1 = require("../item/ItemFactory");
    var FlyerBase_1 = require("./FlyerBase");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var FlyerBullet = function(_super) {
      __extends(FlyerBullet, _super);
      function FlyerBullet() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this._duration = 0;
        _this._startPos = cc.Vec2.ZERO;
        _this._targetPos = cc.Vec2.ZERO;
        _this._bombType = ItemBombBase_1.ItemBombType.None;
        _this._launched = false;
        return _this;
      }
      FlyerBullet.prototype.getEntityID = function() {
        return EntityID_1.EntityID.FlyerLaserBullet;
      };
      FlyerBullet.prototype.launch = function() {
        var _this = this;
        if (this._launched) return;
        this._launched = true;
        this._bombType != ItemBombBase_1.ItemBombType.None ? IGame_1.default.playAudio(IdentifierManager_1.default.getInstance().getMatchAudioFilePath("eliminate_special_color")) : IGame_1.default.playAudio(IdentifierManager_1.default.getInstance().getMatchAudioFilePath("eliminate_special_colorline"));
        var grid = this.getGrid();
        var startPos = this.getPixelPos(this._startPos);
        var targetPos = grid.getPixelPosFromLogicalPos(this._targetPos);
        this.setPixelPos(this._startPos);
        this.node.scale = .25;
        var move = cc.spawn(cc.moveTo(this._duration, targetPos).easing(cc.easeInOut(2)), cc.scaleTo(this._duration, 1));
        var callback = cc.callFunc(function() {
          if (_this._bombType != ItemBombBase_1.ItemBombType.None) {
            grid.highlightedCell(_this._targetPos);
            var item = grid.getItemAtLogicalPos(_this._targetPos);
            if (item && item.canUpgradeByRainbow()) {
              var bombType = _this._bombType;
              _this._bombType != ItemBombBase_1.ItemBombType.Row && _this._bombType != ItemBombBase_1.ItemBombType.Column || (bombType = GameMath_1.default.randomInt(0, 100) < 50 ? ItemBombBase_1.ItemBombType.Row : ItemBombBase_1.ItemBombType.Column);
              var item_1 = ItemFactory_1.default.generateEffectBombItem(grid, bombType, _this.getEntityColor());
              item_1 && grid.dispatchCommand(_this._targetPos, GridCommand_1.default.Change(item_1.getEntityID(), true), 0);
            }
          }
          grid.removeObstructs(_this);
          _this.destoryWithRecycle(true);
        });
        this.runAction(cc.sequence(move, callback));
      };
      FlyerBullet.create = function(grid, duration, startPos, targetPos, color, bombType, layoutGrass) {
        var className = "FlyerBullet";
        var prefabFileName = "match_scene/prefab/entity/flyer/FlyerBullet";
        var pool = EntityPrefabNodePool_1.default.getInstance();
        var component = pool.getPrefabNodeWithFileNameAndClassName(prefabFileName, className);
        if (component) {
          component.init(grid, duration, startPos, targetPos, color, bombType, layoutGrass);
          return component;
        }
        return null;
      };
      FlyerBullet.prototype.init = function(grid, duration, startPos, targetPos, color, bombType, layoutGrass) {
        _super.prototype.initFlyer.call(this, grid, FlyerBase_1.FlyerType.LasetBullet);
        this.setEntityColor(color);
        this._duration = duration;
        this._startPos = startPos;
        this._targetPos = targetPos;
        this._bombType = bombType;
        this._launched = false;
      };
      FlyerBullet = __decorate([ ccclass ], FlyerBullet);
      return FlyerBullet;
    }(FlyerBase_1.default);
    exports.default = FlyerBullet;
    cc._RF.pop();
  }, {
    "../../../../base/IGame": "IGame",
    "../../../../extend/utils/GameMath": "GameMath",
    "../../commond/GridCommand": "GridCommand",
    "../../defines/EntityID": "EntityID",
    "../../defines/IdentifierManager": "IdentifierManager",
    "../EntityPrefabNodePool": "EntityPrefabNodePool",
    "../item/ItemFactory": "ItemFactory",
    "../item/color/bomb/ItemBombBase": "ItemBombBase",
    "./FlyerBase": "FlyerBase"
  } ],
  FlyerCannon: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "ed22f2oJ+JNrqZht0pA5g8R", "FlyerCannon");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var GameMath_1 = require("../../../../extend/utils/GameMath");
    var GridCommand_1 = require("../../commond/GridCommand");
    var EntityID_1 = require("../../defines/EntityID");
    var EntityPrefabNodePool_1 = require("../EntityPrefabNodePool");
    var FlyerAnimation_1 = require("./FlyerAnimation");
    var FlyerBase_1 = require("./FlyerBase");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var FlyerCannon = function(_super) {
      __extends(FlyerCannon, _super);
      function FlyerCannon() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this._hitOrigin = false;
        _this._launched = false;
        _this._aliveArea = cc.rect(0, 0, 0, 0);
        _this._speed = 0;
        _this._lastCellPostion = cc.v2(-1, -1);
        _this._startFly = false;
        _this._layoutGrass = false;
        _this._origin = cc.Vec2.ZERO;
        _this._direction = cc.Vec2.ZERO;
        return _this;
      }
      FlyerCannon_1 = FlyerCannon;
      FlyerCannon.prototype.getEntityID = function() {
        var result = EntityID_1.EntityID.FlyerCannonWhite;
        switch (this.getEntityColor()) {
         case EntityID_1.EntityColor.None:
          result = EntityID_1.EntityID.FlyerCannonWhite;
          break;

         case EntityID_1.EntityColor.Red:
          result = EntityID_1.EntityID.FlyerCannonRed;
          break;

         case EntityID_1.EntityColor.Green:
          result = EntityID_1.EntityID.FlyerCannonGreen;
          break;

         case EntityID_1.EntityColor.Blue:
          result = EntityID_1.EntityID.FlyerCannonBlue;
          break;

         case EntityID_1.EntityColor.Yellow:
          result = EntityID_1.EntityID.FlyerCannonYellow;
          break;

         case EntityID_1.EntityColor.Orange:
          result = EntityID_1.EntityID.FlyerCannonOrange;
          break;

         case EntityID_1.EntityColor.Purple:
          result = EntityID_1.EntityID.FlyerCannonPurple;
        }
        return result;
      };
      FlyerCannon.prototype.getLayoutGrass = function() {
        return this._layoutGrass;
      };
      FlyerCannon.prototype.setLayourGrass = function(layoutGrass) {
        this._layoutGrass = layoutGrass;
      };
      FlyerCannon.prototype.getOrigin = function() {
        return this._origin;
      };
      FlyerCannon.prototype.setOrigin = function(origin) {
        this._origin = origin;
      };
      FlyerCannon.prototype.getDirection = function() {
        return this._direction;
      };
      FlyerCannon.prototype.setDirection = function(direction) {
        this._direction = direction;
        var rotation = GameMath_1.default.getAngle(cc.Vec2.ZERO, direction);
        this._puppet.angle = -rotation;
      };
      FlyerCannon.prototype.launch = function() {
        var _this = this;
        if (this._launched) return;
        var willAttackPos = this._origin.clone();
        var grid = this.getGrid();
        var validLogicalRect = cc.rect(0, 0, grid.getGridSize().width, grid.getGridSize().height);
        while (1) {
          if (!GameMath_1.default.rectContainsPoint(validLogicalRect, willAttackPos)) break;
          grid.recordAttackedPosition(willAttackPos.clone());
          willAttackPos.addSelf(this._direction);
        }
        this._launched = true;
        this.setOrigin(this.getOrigin());
        this._lastCellPostion = this._origin;
        this._hitOrigin && (this._lastCellPostion = this._lastCellPostion.sub(this._direction));
        this._launched = true;
        this._speed = FlyerCannon_1.FLYER_CANNON_START_SPEED;
        grid.addObstructs(this);
        var state = this.playAnimation("default");
        if (state) {
          var action = cc.sequence(cc.delayTime(state.duration), cc.callFunc(function() {
            _this._startFly = true;
          }));
          this.runAction(action);
        } else this._startFly = true;
      };
      FlyerCannon.prototype.update = function(dt) {
        if (false == this._launched) return;
        if (false == this._startFly) return;
        dt *= cc.director.getScheduler().getTimeScale();
        var grid = this.getGrid();
        this._speed = GameMath_1.default.clamp(this._speed + FlyerCannon_1.FLYER_CANNON_ACCELERATION * dt, FlyerCannon_1.FLYER_CANNON_MIN_SPEED, FlyerCannon_1.FLYER_CANNON_MAX_SPEED);
        var newPosition = this.node.getPosition().add(this._direction.normalize().mul(this._speed).mul(dt));
        this.node.setPosition(newPosition);
        var newCellPos = grid.getLogicalPosFromPixelPos(newPosition);
        if (!newCellPos.equals(this._lastCellPostion)) {
          var offset = newCellPos.sub(this._lastCellPostion);
          var count = offset.mag() / this._direction.mag();
          for (var i = 0; i < count; i++) {
            var pos = this._lastCellPostion.add(this._direction.mul(i + 1));
            var blocked = false;
            var item = grid.getItemAtLogicalPos(pos);
            item && item.canBlockBombRay() && (blocked = true);
            var cell = grid.getCellAtLogicalPos(pos);
            if (cell) {
              grid.dispatchCommand(pos, GridCommand_1.default.BombClean(this.getOrigin(), this.getEntityColor(), this._layoutGrass), 0);
              grid.highlightedCell(pos);
            }
            if (blocked) {
              var flyer = FlyerAnimation_1.default.createAnimationWithType(this.getGrid(), FlyerAnimation_1.FlyerAnimationType.Bomb1x1);
              grid.setFlyerAtLogicalPos(flyer, pos);
              grid.removeObstructs(this);
              this.destoryWithRecycle(true);
            }
            if (grid.isGrassFloorAtLogicalPos(pos)) {
              var item_1 = grid.getItemAtLogicalPos(pos);
              item_1 ? item_1.canMatch() && item_1.canSwap() && item_1.canLayoutGrass() && (this._layoutGrass = true) : this._layoutGrass = true;
            }
          }
          this._lastCellPostion = newCellPos;
        }
        if (!GameMath_1.default.rectContainsPoint(this._aliveArea, this.node.getPosition())) {
          grid.removeObstructs(this);
          this.destoryWithRecycle(false);
        }
      };
      FlyerCannon.create = function(grid, color, layoutGrass, origin, direction, hitOrigin) {
        var filePath = "match_scene/prefab/entity/flyer/FlyerCannon";
        switch (color) {
         case EntityID_1.EntityColor.Red:
          filePath += "Red";
          break;

         case EntityID_1.EntityColor.Green:
          filePath += "Green";
          break;

         case EntityID_1.EntityColor.Blue:
          filePath += "Blue";
          break;

         case EntityID_1.EntityColor.Yellow:
          filePath += "Yellow";
          break;

         case EntityID_1.EntityColor.Orange:
          filePath += "Orange";
          break;

         case EntityID_1.EntityColor.Purple:
          filePath += "Purple";
          break;

         case EntityID_1.EntityColor.None:
          filePath += "White";
        }
        var className = "FlyerCannon";
        var prefabFileName = filePath;
        var pool = EntityPrefabNodePool_1.default.getInstance();
        var component = pool.getPrefabNodeWithFileNameAndClassName(prefabFileName, className);
        if (component) {
          component.init(grid, color, layoutGrass, origin, direction, hitOrigin);
          return component;
        }
        return null;
      };
      FlyerCannon.prototype.onDestroy = function() {
        _super.prototype.onDestroy.call(this);
        this._aliveArea = null;
        this._lastCellPostion = null;
      };
      FlyerCannon.prototype.init = function(grid, color, layoutGrass, origin, direction, hitOrigin) {
        _super.prototype.initFlyer.call(this, grid, FlyerBase_1.FlyerType.Cannon);
        this.setEntityColor(color);
        this.setLayourGrass(layoutGrass);
        this.setOrigin(origin);
        this.setDirection(direction);
        this._speed = 0;
        this._lastCellPostion = cc.v2(-1, -1);
        this._hitOrigin = hitOrigin;
        this._launched = false;
        this._startFly = false;
        this._aliveArea = cc.rect(-2e3, -2e3, 4e3, 4e3);
      };
      var FlyerCannon_1;
      FlyerCannon.FLYER_CANNON_MIN_SPEED = 500;
      FlyerCannon.FLYER_CANNON_MAX_SPEED = 5e3;
      FlyerCannon.FLYER_CANNON_START_SPEED = 500;
      FlyerCannon.FLYER_CANNON_ACCELERATION = 5e3;
      FlyerCannon.FLYER_CANNON_TAIL_FADE_DURATION = .4;
      FlyerCannon = FlyerCannon_1 = __decorate([ ccclass ], FlyerCannon);
      return FlyerCannon;
    }(FlyerBase_1.default);
    exports.default = FlyerCannon;
    cc._RF.pop();
  }, {
    "../../../../extend/utils/GameMath": "GameMath",
    "../../commond/GridCommand": "GridCommand",
    "../../defines/EntityID": "EntityID",
    "../EntityPrefabNodePool": "EntityPrefabNodePool",
    "./FlyerAnimation": "FlyerAnimation",
    "./FlyerBase": "FlyerBase"
  } ],
  FlyerChargeEntity: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "0990dLX67ZOTKPKYsRPAzLM", "FlyerChargeEntity");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var UISpriteExt_1 = require("../../../../component/UISpriteExt");
    var CurveToAction_1 = require("../../../../extend/action/CurveToAction");
    var GridCommand_1 = require("../../commond/GridCommand");
    var CollectionID_1 = require("../../defines/CollectionID");
    var EntityID_1 = require("../../defines/EntityID");
    var IdentifierManager_1 = require("../../defines/IdentifierManager");
    var EntityPrefabNodePool_1 = require("../EntityPrefabNodePool");
    var FlyerBase_1 = require("./FlyerBase");
    var GameMath_1 = require("../../../../extend/utils/GameMath");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var FlyerChargeEntity = function(_super) {
      __extends(FlyerChargeEntity, _super);
      function FlyerChargeEntity() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this._collectionID = CollectionID_1.CollectionID.None;
        _this._origin = cc.Vec2.ZERO;
        _this._targetPos = cc.Vec2.ZERO;
        return _this;
      }
      FlyerChargeEntity.create = function(grid, collectionID, origin, targetPos) {
        var className = "FlyerChargeEntity";
        var prefabFileName = "match_scene/prefab/entity/flyer/FlyerChargeEntity";
        var pool = EntityPrefabNodePool_1.default.getInstance();
        var component = pool.getPrefabNodeWithFileNameAndClassName(prefabFileName, className);
        if (component) {
          component.init(grid, collectionID, origin, targetPos);
          return component;
        }
        return null;
      };
      FlyerChargeEntity.prototype.init = function(grid, collectionID, origin, targetPos) {
        _super.prototype.initFlyer.call(this, grid, FlyerBase_1.FlyerType.Charger);
        this.setOrigin(origin);
        this.setTargetPos(targetPos);
        this._collectionID = collectionID;
        this.updatePuppet();
      };
      FlyerChargeEntity.prototype.updatePuppet = function() {
        var frameName = IdentifierManager_1.default.getInstance().getFrameNameFromCollectionID(this._collectionID);
        var component = this._puppet.getComponent(UISpriteExt_1.default);
        component && (component.src = frameName);
      };
      FlyerChargeEntity.prototype.getCollectionID = function() {
        return CollectionID_1.CollectionID.None;
      };
      FlyerChargeEntity.prototype.getEntityID = function() {
        return EntityID_1.EntityID.FlyerChargeEntity;
      };
      FlyerChargeEntity.prototype.getOrigin = function() {
        return this._origin;
      };
      FlyerChargeEntity.prototype.setOrigin = function(origin) {
        this._origin = origin;
      };
      FlyerChargeEntity.prototype.getTargetPos = function() {
        return this._targetPos;
      };
      FlyerChargeEntity.prototype.setTargetPos = function(target) {
        this._targetPos = target;
      };
      FlyerChargeEntity.prototype.launch = function() {
        var _this = this;
        var startPos = this.getGrid().getPixelPosFromLogicalPos(this._origin);
        var targetPos = this.getGrid().getPixelPosFromLogicalPos(this._targetPos);
        var distance = GameMath_1.default.getDistance(startPos, targetPos);
        var speed = 600;
        var duration = distance / speed;
        this.node.setPosition(startPos);
        this.getGrid().addObstructs(this);
        var move = cc.spawn(CurveToAction_1.default.create(duration, startPos, targetPos).easing(cc.easeOut(2)), cc.scaleTo(duration, .35));
        var callback = cc.callFunc(function() {
          _this.getGrid().dispatchCommand(_this._targetPos, GridCommand_1.default.Charge(_this._collectionID, 1), 0);
          _this.getGrid().removeObstructs(_this);
          _this.destoryWithRecycle(true);
        });
        var action = cc.sequence(move, callback);
        this.node.runAction(action);
      };
      FlyerChargeEntity.prototype.start = function() {};
      FlyerChargeEntity.prototype.onDestroy = function() {
        _super.prototype.onDestroy.call(this);
        this._origin = null;
        this._targetPos = null;
      };
      FlyerChargeEntity = __decorate([ ccclass ], FlyerChargeEntity);
      return FlyerChargeEntity;
    }(FlyerBase_1.default);
    exports.default = FlyerChargeEntity;
    cc._RF.pop();
  }, {
    "../../../../component/UISpriteExt": "UISpriteExt",
    "../../../../extend/action/CurveToAction": "CurveToAction",
    "../../../../extend/utils/GameMath": "GameMath",
    "../../commond/GridCommand": "GridCommand",
    "../../defines/CollectionID": "CollectionID",
    "../../defines/EntityID": "EntityID",
    "../../defines/IdentifierManager": "IdentifierManager",
    "../EntityPrefabNodePool": "EntityPrefabNodePool",
    "./FlyerBase": "FlyerBase"
  } ],
  FlyerCollectedEntity: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "bbd07p2JUZPAZ1jZwx9rT6I", "FlyerCollectedEntity");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var UISpriteExt_1 = require("../../../../component/UISpriteExt");
    var CurveToAction_1 = require("../../../../extend/action/CurveToAction");
    var CollectionID_1 = require("../../defines/CollectionID");
    var EntityID_1 = require("../../defines/EntityID");
    var IdentifierManager_1 = require("../../defines/IdentifierManager");
    var EntityPrefabNodePool_1 = require("../EntityPrefabNodePool");
    var FlyerBase_1 = require("./FlyerBase");
    var GameMath_1 = require("../../../../extend/utils/GameMath");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var FlyerCollectedEntity = function(_super) {
      __extends(FlyerCollectedEntity, _super);
      function FlyerCollectedEntity() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this._collectionID = CollectionID_1.CollectionID.None;
        _this._delta = 0;
        _this._origin = cc.Vec2.ZERO;
        return _this;
      }
      FlyerCollectedEntity.create = function(grid, collectionID, delta, origin) {
        var className = "FlyerCollectedEntity";
        var prefabFileName = "match_scene/prefab/entity/flyer/FlyerCollectedEntity";
        var pool = EntityPrefabNodePool_1.default.getInstance();
        var component = pool.getPrefabNodeWithFileNameAndClassName(prefabFileName, className);
        if (component) {
          component.init(grid, collectionID, delta, origin);
          return component;
        }
        return null;
      };
      FlyerCollectedEntity.prototype.init = function(grid, collectionID, delta, origin) {
        _super.prototype.initFlyer.call(this, grid, FlyerBase_1.FlyerType.CollectedEntity);
        this.setOrigin(origin);
        this._collectionID = collectionID;
        this._delta = delta;
        this.updatePuppet();
      };
      FlyerCollectedEntity.prototype.updatePuppet = function() {
        var frameName = IdentifierManager_1.default.getInstance().getFrameNameFromCollectionID(this._collectionID);
        var component = this._puppet.getComponent(UISpriteExt_1.default);
        component && (component.src = frameName);
      };
      FlyerCollectedEntity.prototype.getCollectionID = function() {
        return CollectionID_1.CollectionID.None;
      };
      FlyerCollectedEntity.prototype.getEntityID = function() {
        return EntityID_1.EntityID.FlyerCollectedEntity;
      };
      FlyerCollectedEntity.prototype.getOrigin = function() {
        return this._origin;
      };
      FlyerCollectedEntity.prototype.setOrigin = function(origin) {
        this._origin = origin;
      };
      FlyerCollectedEntity.prototype.launch = function() {
        var _this = this;
        var startPos = this.getGrid().getPixelPosFromLogicalPos(this._origin);
        var targetWorldPos = this.getGrid().getWorldPosForTarget(this._collectionID);
        var targetPos = this.getGrid().node.convertToNodeSpaceAR(targetWorldPos);
        var distance = GameMath_1.default.getDistance(startPos, targetPos);
        var speed = 1e3;
        var duration = distance / speed;
        this.node.setPosition(startPos);
        var move = cc.spawn(CurveToAction_1.default.create(duration, startPos, targetPos), cc.scaleTo(duration, .75));
        var callback = cc.callFunc(function() {
          _this.getGrid().updateTargetBarUIWithDelta(_this._collectionID, _this._delta);
          _this.destoryWithRecycle(true);
        });
        var action = cc.sequence(move, callback);
        this.node.runAction(action);
      };
      FlyerCollectedEntity.prototype.start = function() {};
      FlyerCollectedEntity.prototype.onDestroy = function() {
        _super.prototype.onDestroy.call(this);
        this._origin = null;
      };
      FlyerCollectedEntity = __decorate([ ccclass ], FlyerCollectedEntity);
      return FlyerCollectedEntity;
    }(FlyerBase_1.default);
    exports.default = FlyerCollectedEntity;
    cc._RF.pop();
  }, {
    "../../../../component/UISpriteExt": "UISpriteExt",
    "../../../../extend/action/CurveToAction": "CurveToAction",
    "../../../../extend/utils/GameMath": "GameMath",
    "../../defines/CollectionID": "CollectionID",
    "../../defines/EntityID": "EntityID",
    "../../defines/IdentifierManager": "IdentifierManager",
    "../EntityPrefabNodePool": "EntityPrefabNodePool",
    "./FlyerBase": "FlyerBase"
  } ],
  FlyerCollectedSupply: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "9db28Q4LD9KUI+O1/xnCPuZ", "FlyerCollectedSupply");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var IGame_1 = require("../../../../base/IGame");
    var GameCurrencyType_1 = require("../../../../define/GameCurrencyType");
    var GameMath_1 = require("../../../../extend/utils/GameMath");
    var CollectionID_1 = require("../../defines/CollectionID");
    var EntityID_1 = require("../../defines/EntityID");
    var IdentifierManager_1 = require("../../defines/IdentifierManager");
    var EntityPrefabNodePool_1 = require("../EntityPrefabNodePool");
    var FlyerBase_1 = require("./FlyerBase");
    var CurveToAction_1 = require("../../../../extend/action/CurveToAction");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var FlyerCollectedSupply = function(_super) {
      __extends(FlyerCollectedSupply, _super);
      function FlyerCollectedSupply() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this._itemID = GameCurrencyType_1.GameCurrencyType.NoneType;
        _this._delay = 0;
        _this._itemAmount = 0;
        _this._origin = cc.Vec2.ZERO;
        return _this;
      }
      FlyerCollectedSupply.prototype.getItemID = function() {
        return this._itemID;
      };
      FlyerCollectedSupply.prototype.setItemID = function(itemID) {
        this._itemID = itemID;
        this.updatePuppet();
      };
      FlyerCollectedSupply.prototype.getAmount = function() {
        return this._itemAmount;
      };
      FlyerCollectedSupply.prototype.setAmount = function(amount) {
        this._itemAmount = amount;
      };
      FlyerCollectedSupply.create = function(grid, itemID, itemAmount, origin, delay) {
        void 0 === delay && (delay = 0);
        var className = "FlyerCollectedSupply";
        var prefabFileName = "match_scene/prefab/entity/flyer/FlyerCollectedSupply";
        var pool = EntityPrefabNodePool_1.default.getInstance();
        var component = pool.getPrefabNodeWithFileNameAndClassName(prefabFileName, className);
        if (component) {
          component.init(grid, itemID, itemAmount, origin, delay);
          return component;
        }
        return null;
      };
      FlyerCollectedSupply.prototype.init = function(grid, itemID, itemAmount, origin, delay) {
        void 0 === delay && (delay = 0);
        _super.prototype.initFlyer.call(this, grid, FlyerBase_1.FlyerType.CollectedSupply);
        this.setOrigin(origin);
        this.setAmount(itemAmount);
        this.setItemID(itemID);
        this._delay = delay;
      };
      FlyerCollectedSupply.prototype.updatePuppet = function() {
        var frameName = "";
        switch (this.getItemID()) {
         case GameCurrencyType_1.GameCurrencyType.TrainFood:
          frameName = "match_scene/texture/entities/flyers/90202";
          break;

         case GameCurrencyType_1.GameCurrencyType.TrainSoap:
          frameName = "match_scene/texture/entities/flyers/90205";
          break;

         case GameCurrencyType_1.GameCurrencyType.TrainEyepatch:
          frameName = "match_scene/texture/entities/flyers/90201";
          break;

         case GameCurrencyType_1.GameCurrencyType.TrainHoe:
          frameName = "match_scene/texture/entities/flyers/90204";
          break;

         case GameCurrencyType_1.GameCurrencyType.GoldCoin:
          frameName = "match_scene/texture/entities/flyers/90203";
        }
        this.setPuppetSpriteFrameName(frameName);
      };
      FlyerCollectedSupply.prototype.getCollectionID = function() {
        return CollectionID_1.CollectionID.None;
      };
      FlyerCollectedSupply.prototype.getEntityID = function() {
        return EntityID_1.EntityID.FlyerCollectedSupply;
      };
      FlyerCollectedSupply.prototype.getOrigin = function() {
        return this._origin;
      };
      FlyerCollectedSupply.prototype.setOrigin = function(origin) {
        this._origin = origin;
      };
      FlyerCollectedSupply.prototype.launch = function() {
        var _this = this;
        var startPos = this.getGrid().getPixelPosFromLogicalPos(this._origin);
        var targetWorldPos = this.getGrid().getWorldPosForSupply(this._itemID);
        var targetPos = this.getGrid().node.convertToNodeSpaceAR(targetWorldPos);
        var distance = GameMath_1.default.getDistance(startPos, targetPos);
        var speed = 750;
        var targetScale = 1.25;
        var endScale = 1.5;
        if (this._itemID == GameCurrencyType_1.GameCurrencyType.GoldCoin) {
          targetScale = 1;
          endScale = 1;
          speed = 1100;
        }
        this.getGrid().addFlyerObstructs(this);
        this.node.setPosition(startPos);
        this.node.setScale(0);
        var acitons = [];
        var minRadius = Math.round(.75 * this.getGrid().getCellSize().width);
        var maxRadius = Math.round(1.5 * this.getGrid().getCellSize().width);
        var radius = GameMath_1.default.randomInt(minRadius, maxRadius);
        var angle = GameMath_1.default.randomInt(0, 360);
        var radian = angle / 180 * Math.PI;
        var jumpTargetPos = cc.v2(startPos.x + radius * Math.cos(radian), startPos.y + radius * Math.sin(radian));
        this._delay > 0 && acitons.push(cc.delayTime(this._delay));
        acitons.push(cc.spawn(cc.scaleTo(.3, targetScale).easing(cc.easeBackOut()), cc.moveTo(.3, jumpTargetPos).easing(cc.easeOut(2))));
        acitons.push(cc.delayTime(.1));
        var duration = distance / speed;
        acitons.push(cc.spawn(CurveToAction_1.default.create(duration, jumpTargetPos, targetPos), cc.scaleTo(duration, endScale)));
        acitons.push(cc.callFunc(function() {
          _this.getGrid().updateSupplyBarUIWithDelta(_this._itemID, _this._itemAmount);
          IGame_1.default.playAudio(IdentifierManager_1.default.getInstance().getMatchAudioFilePath("coincollect"));
          _this.getGrid().removeFlyerObstructs(_this);
          _this.destoryWithRecycle(true);
        }));
        var action = cc.sequence(acitons);
        this.node.runAction(action);
      };
      FlyerCollectedSupply.prototype.start = function() {};
      FlyerCollectedSupply.prototype.onDestroy = function() {
        _super.prototype.onDestroy.call(this);
        this._origin = null;
      };
      FlyerCollectedSupply = __decorate([ ccclass ], FlyerCollectedSupply);
      return FlyerCollectedSupply;
    }(FlyerBase_1.default);
    exports.default = FlyerCollectedSupply;
    cc._RF.pop();
  }, {
    "../../../../base/IGame": "IGame",
    "../../../../define/GameCurrencyType": "GameCurrencyType",
    "../../../../extend/action/CurveToAction": "CurveToAction",
    "../../../../extend/utils/GameMath": "GameMath",
    "../../defines/CollectionID": "CollectionID",
    "../../defines/EntityID": "EntityID",
    "../../defines/IdentifierManager": "IdentifierManager",
    "../EntityPrefabNodePool": "EntityPrefabNodePool",
    "./FlyerBase": "FlyerBase"
  } ],
  FlyerComboWord: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "dadb601ldxCH71mA/Yhi4jF", "FlyerComboWord");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var FlyerBase_1 = require("./FlyerBase");
    var EntityID_1 = require("../../defines/EntityID");
    var EntityPrefabNodePool_1 = require("../EntityPrefabNodePool");
    var IGame_1 = require("../../../../base/IGame");
    var IdentifierManager_1 = require("../../defines/IdentifierManager");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var FlyerComboWord = function(_super) {
      __extends(FlyerComboWord, _super);
      function FlyerComboWord() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this._comboCount = 0;
        _this._needObstruct = false;
        _this._autoRemoveOnFinish = false;
        return _this;
      }
      FlyerComboWord.create = function(grid, combo, needObstruct, autoRemove) {
        void 0 === needObstruct && (needObstruct = false);
        void 0 === autoRemove && (autoRemove = true);
        var className = "FlyerComboWord";
        var prefabFileName = "match_scene/prefab/entity/flyer/FlyerComboWord";
        var pool = EntityPrefabNodePool_1.default.getInstance();
        var component = pool.getPrefabNodeWithFileNameAndClassName(prefabFileName, className);
        if (component) {
          component.init(grid, combo, needObstruct, autoRemove);
          return component;
        }
        return null;
      };
      FlyerComboWord.prototype.init = function(grid, combo, needObstruct, autoRemove) {
        void 0 === needObstruct && (needObstruct = false);
        _super.prototype.initFlyer.call(this, grid, FlyerBase_1.FlyerType.Animation);
        this._comboCount = combo;
        this.setAutoRemoveOnFinish(autoRemove);
        var filePathRoot = "texture/match/entities/effects/combo_word/";
        if (this._comboCount < 4) {
          filePathRoot += "fresh";
          IGame_1.default.playAudio(IdentifierManager_1.default.getInstance().getMatchAudioFilePath("voice_combo1"));
        } else if (this._comboCount < 5) {
          filePathRoot += "sweet";
          IGame_1.default.playAudio(IdentifierManager_1.default.getInstance().getMatchAudioFilePath("voice_combo2"));
        } else if (this._comboCount < 6) {
          filePathRoot += "tasty";
          IGame_1.default.playAudio(IdentifierManager_1.default.getInstance().getMatchAudioFilePath("voice_combo3"));
        } else if (this._comboCount < 8) {
          filePathRoot += "fantastic";
          IGame_1.default.playAudio(IdentifierManager_1.default.getInstance().getMatchAudioFilePath("voice_combo4"));
        } else {
          filePathRoot += "incredible";
          IGame_1.default.playAudio(IdentifierManager_1.default.getInstance().getMatchAudioFilePath("voice_combo5"));
        }
        this.setPuppetSpriteFrameName(filePathRoot);
        this._needObstruct = needObstruct;
      };
      FlyerComboWord.prototype.getAutoRemoveOnFinish = function() {
        return this._autoRemoveOnFinish;
      };
      FlyerComboWord.prototype.setAutoRemoveOnFinish = function(auto) {
        this._autoRemoveOnFinish = auto;
      };
      FlyerComboWord.prototype.getEntityID = function() {
        return EntityID_1.EntityID.None;
      };
      FlyerComboWord.prototype.launch = function() {
        var _this = this;
        var size = this.getGrid().node.getContentSize();
        this.node.setPosition(cc.v2(.5 * size.width, .5 * size.height + 60));
        this._needObstruct && this.getGrid().addObstructs(this);
        var state = this.playAnimation("default");
        if (this._autoRemoveOnFinish) if (state) {
          var action = cc.sequence(cc.delayTime(state.duration), cc.callFunc(function() {
            _this.getGrid().removeObstructs(_this);
            _this.destoryWithRecycle(true);
          }));
          this.runAction(action);
        } else {
          this.getGrid().removeObstructs(this);
          this.destoryWithRecycle(true);
        }
      };
      FlyerComboWord = __decorate([ ccclass ], FlyerComboWord);
      return FlyerComboWord;
    }(FlyerBase_1.default);
    exports.default = FlyerComboWord;
    cc._RF.pop();
  }, {
    "../../../../base/IGame": "IGame",
    "../../defines/EntityID": "EntityID",
    "../../defines/IdentifierManager": "IdentifierManager",
    "../EntityPrefabNodePool": "EntityPrefabNodePool",
    "./FlyerBase": "FlyerBase"
  } ],
  FlyerFireworksMissile: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "4cb6btiEwNALoC/zc5vQJ+o", "FlyerFireworksMissile");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var IGame_1 = require("../../../../base/IGame");
    var GameMath_1 = require("../../../../extend/utils/GameMath");
    var GridCommand_1 = require("../../commond/GridCommand");
    var EntityID_1 = require("../../defines/EntityID");
    var IdentifierManager_1 = require("../../defines/IdentifierManager");
    var EntityPrefabNodePool_1 = require("../EntityPrefabNodePool");
    var FlyerBase_1 = require("./FlyerBase");
    var FlyerAnimation_1 = require("./FlyerAnimation");
    var EntityBase_1 = require("../EntityBase");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var FlyerFireworksMissile = function(_super) {
      __extends(FlyerFireworksMissile, _super);
      function FlyerFireworksMissile() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this._layoutGrass = false;
        _this._launched = false;
        _this._currentMaxCentrifugalForce = 0;
        _this._targetPos = cc.v2(0, 0);
        _this._targetLogicalPos = cc.v2(0, 0);
        _this._velocity = cc.v2(0, 0);
        return _this;
      }
      FlyerFireworksMissile_1 = FlyerFireworksMissile;
      FlyerFireworksMissile.prototype.setVelocity = function(velocity) {
        this._velocity = velocity;
        if (this._velocity.mag() > 1e-6) {
          var angle = GameMath_1.default.getAngle(cc.v2(0, 100), this._velocity, cc.v2(0, 100), true);
          this._puppet.angle = -angle;
        }
      };
      FlyerFireworksMissile.create = function(grid, layoutGrass) {
        var className = "FlyerFireworksMissile";
        var filePath = "match_scene/prefab/entity/flyer/FlyerFireworksMissile";
        var prefabFileName = filePath;
        var pool = EntityPrefabNodePool_1.default.getInstance();
        var component = pool.getPrefabNodeWithFileNameAndClassName(prefabFileName, className);
        if (component) {
          component.init(grid, layoutGrass);
          return component;
        }
        return null;
      };
      FlyerFireworksMissile.prototype.init = function(grid, layoutGrass) {
        _super.prototype.initFlyer.call(this, grid, FlyerBase_1.FlyerType.FireworksMissile);
        this._layoutGrass = layoutGrass;
        this._launched = false;
      };
      FlyerFireworksMissile.prototype.getEntityID = function() {
        return EntityID_1.EntityID.FlyerFireworks;
      };
      FlyerFireworksMissile.prototype.getAttackPos = function(color, layoutGrass) {
        var targetPos = cc.v2(-1, -1);
        var targetPriority = EntityBase_1.default.DEFAULT_FIREWORKS_ATTACKED_PRIORITY;
        var grid = this.getGrid();
        var entityTypes = [ EntityID_1.EntityType.Parasite, EntityID_1.EntityType.Item, EntityID_1.EntityType.Rug, EntityID_1.EntityType.Floor, EntityID_1.EntityType.Popsicle, EntityID_1.EntityType.Cell ];
        var cellsMap = grid.getCellsMap();
        var checkPositions = [];
        var attackedPositions = grid.getAttackedPosition();
        for (var key in cellsMap) {
          var cell = cellsMap[key];
          var checkPos = cell.getLogicalPos();
          -1 == GameMath_1.default.indexOf(attackedPositions, checkPos) && checkPositions.push(checkPos);
        }
        GameMath_1.default.shuffleArray(checkPositions);
        for (var _i = 0, checkPositions_1 = checkPositions; _i < checkPositions_1.length; _i++) {
          var checkPos = checkPositions_1[_i];
          if (-1 == GameMath_1.default.indexOf(attackedPositions, checkPos)) {
            var minPriority = EntityBase_1.default.DEFAULT_FIREWORKS_ATTACKED_PRIORITY;
            var canAttackTop = false;
            for (var _a = 0, entityTypes_1 = entityTypes; _a < entityTypes_1.length; _a++) {
              var entityType = entityTypes_1[_a];
              var entity = grid.getEntity(entityType, checkPos);
              if (entity) {
                entityType == EntityID_1.EntityType.Parasite || entityType == EntityID_1.EntityType.Item ? entity.canExcuteCommand(GridCommand_1.default.BombClean(this.getLogicalPos(), color, layoutGrass)) && (canAttackTop = true) : canAttackTop = true;
                if (!canAttackTop) break;
                var butterflyPriority = entity.getFireWorksAttackedPriority();
                butterflyPriority < minPriority && (minPriority = butterflyPriority);
              }
            }
            if (canAttackTop && minPriority < targetPriority) {
              targetPriority = minPriority;
              targetPos = checkPos;
            }
          }
        }
        (targetPriority >= EntityBase_1.default.DEFAULT_FIREWORKS_ATTACKED_PRIORITY || targetPos.equals(cc.v2(-1, -1))) && (targetPos = _super.prototype.getAttackPos.call(this, color, layoutGrass));
        return targetPos;
      };
      FlyerFireworksMissile.prototype.launch = function() {
        if (this._launched) return;
        this._launched = true;
        IGame_1.default.playAudio(IdentifierManager_1.default.getInstance().getMatchAudioFilePath("fireworks"));
        var grid = this.getGrid();
        this._targetLogicalPos = this.getAttackPos(this.getEntityColor(), this._layoutGrass);
        this._targetPos = grid.getPixelPosFromLogicalPos(this._targetLogicalPos);
        var offsets = [ cc.v2(0, 0), cc.v2(0, 1), cc.v2(0, -1), cc.v2(1, 0), cc.v2(-1, 0) ];
        for (var _i = 0, offsets_1 = offsets; _i < offsets_1.length; _i++) {
          var offset = offsets_1[_i];
          var attackPos = this._targetLogicalPos.add(offset);
          grid.recordAttackedPosition(attackPos);
        }
        grid.addObstructs(this);
        this.setVelocity(cc.v2(0, FlyerFireworksMissile_1.maxSpeed));
        this._currentMaxCentrifugalForce = FlyerFireworksMissile_1.startCentrifugalForce;
      };
      FlyerFireworksMissile.prototype.update = function(dt) {
        if (false == this._launched) return;
        this._currentMaxCentrifugalForce = Math.min(FlyerFireworksMissile_1.maxCentrifugalForce, (FlyerFireworksMissile_1.maxCentrifugalForce - FlyerFireworksMissile_1.startCentrifugalForce) * dt + this._currentMaxCentrifugalForce);
        var offset = this._targetPos.sub(this.node.getPosition());
        var grid = this.getGrid();
        var cellSize = grid.getCellSize();
        if (offset.mag() < .5 * cellSize.width) {
          var flyer = FlyerAnimation_1.default.createAnimationWithType(grid, FlyerAnimation_1.FlyerAnimationType.BombCross, true);
          grid.setFlyerAtLogicalPos(flyer, this._targetLogicalPos);
          var offsets = [ cc.v2(0, 0), cc.v2(0, 1), cc.v2(0, -1), cc.v2(1, 0), cc.v2(-1, 0) ];
          for (var _i = 0, offsets_2 = offsets; _i < offsets_2.length; _i++) {
            var offset_1 = offsets_2[_i];
            var attackPos = this._targetLogicalPos.add(offset_1);
            grid.dispatchCommand(attackPos, GridCommand_1.default.BombClean(attackPos, EntityID_1.EntityColor.None, this._layoutGrass), 0);
            grid.highlightedCell(this._targetLogicalPos);
            grid.bombCell(attackPos);
          }
          grid.removeObstructs(this);
          this.destoryWithRecycle(false);
        }
        var desireVelocity = offset.normalize().mul(FlyerFireworksMissile_1.maxSpeed);
        var desireForce = desireVelocity.sub(this._velocity).mul(60);
        var accelerateShadow = (this._velocity.x * desireForce.x + this._velocity.y * desireForce.y) / this._velocity.mag();
        var accelerateForce = this._velocity.normalize().mul(accelerateShadow);
        var centrifugalForce = desireForce.sub(accelerateForce);
        centrifugalForce.mag() > this._currentMaxCentrifugalForce && (desireForce = desireForce.mul(this._currentMaxCentrifugalForce / centrifugalForce.mag()));
        var force = desireForce.normalize().mul(Math.min(FlyerFireworksMissile_1.maxForce, desireForce.mag()));
        var acceleration = force;
        var newVelocity = this._velocity.add(acceleration.mul(dt));
        var speed = Math.min(newVelocity.mag(), FlyerFireworksMissile_1.maxSpeed);
        this.setVelocity(newVelocity.normalize().mul(speed));
        this.node.setPosition(this.node.getPosition().add(this._velocity.mul(dt)));
      };
      var FlyerFireworksMissile_1;
      FlyerFireworksMissile.maxSpeed = 1e3;
      FlyerFireworksMissile.maxForce = 5e3;
      FlyerFireworksMissile.maxCentrifugalForce = FlyerFireworksMissile_1.maxForce;
      FlyerFireworksMissile.startCentrifugalForce = 800;
      FlyerFireworksMissile = FlyerFireworksMissile_1 = __decorate([ ccclass ], FlyerFireworksMissile);
      return FlyerFireworksMissile;
    }(FlyerBase_1.default);
    exports.default = FlyerFireworksMissile;
    cc._RF.pop();
  }, {
    "../../../../base/IGame": "IGame",
    "../../../../extend/utils/GameMath": "GameMath",
    "../../commond/GridCommand": "GridCommand",
    "../../defines/EntityID": "EntityID",
    "../../defines/IdentifierManager": "IdentifierManager",
    "../EntityBase": "EntityBase",
    "../EntityPrefabNodePool": "EntityPrefabNodePool",
    "./FlyerAnimation": "FlyerAnimation",
    "./FlyerBase": "FlyerBase"
  } ],
  FlyerHammer: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "3a9a3X8hGVHRpC9svntGQs6", "FlyerHammer");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var FlyerBase_1 = require("./FlyerBase");
    var EntityID_1 = require("../../defines/EntityID");
    var IGame_1 = require("../../../../base/IGame");
    var IdentifierManager_1 = require("../../defines/IdentifierManager");
    var GridCommand_1 = require("../../commond/GridCommand");
    var GameCurrencyType_1 = require("../../../../define/GameCurrencyType");
    var EntityPrefabNodePool_1 = require("../EntityPrefabNodePool");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var FlyerHammer = function(_super) {
      __extends(FlyerHammer, _super);
      function FlyerHammer() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this._targetPos = cc.Vec2.ZERO;
        _this._launched = false;
        return _this;
      }
      FlyerHammer.create = function(grid, targetPos) {
        var className = "FlyerHammer";
        var prefabFileName = "match_scene/prefab/entity/flyer/FlyerHammer";
        var pool = EntityPrefabNodePool_1.default.getInstance();
        var component = pool.getPrefabNodeWithFileNameAndClassName(prefabFileName, className);
        if (component) {
          component.init(grid, targetPos);
          return component;
        }
        return null;
      };
      FlyerHammer.prototype.init = function(grid, targetPos) {
        _super.prototype.initFlyer.call(this, grid, FlyerBase_1.FlyerType.Hammer);
        this._targetPos = targetPos;
        this._launched = false;
      };
      FlyerHammer.prototype.getEntityID = function() {
        return EntityID_1.EntityID.FlyerHammer;
      };
      FlyerHammer.prototype.launch = function() {
        var _this = this;
        if (this._launched) return;
        this._launched = true;
        var worldPos = this.getGrid().getWorldPosForGear(GameCurrencyType_1.GameCurrencyType.AidHammer);
        var nodePos = this.getGrid().node.convertToNodeSpaceAR(worldPos);
        this.node.setPosition(nodePos);
        var grid = this.getGrid();
        var targetPixelPos = grid.getPixelPosFromLogicalPos(this._targetPos);
        grid.addObstructs(this);
        var action = cc.sequence(cc.moveTo(.33, targetPixelPos), cc.callFunc(function() {
          var state = _this.playAnimation("default");
          if (state) {
            var action_1 = cc.sequence(cc.delayTime(state.duration), cc.callFunc(function() {
              grid.removeObstructs(_this);
              _this.destoryWithRecycle(true);
            }));
            _this.runAction(action_1);
          } else {
            grid.removeObstructs(_this);
            _this.destoryWithRecycle(true);
          }
        }));
        this.runAction(action);
      };
      FlyerHammer.prototype.onHitted = function() {
        IGame_1.default.playAudio(IdentifierManager_1.default.getInstance().getMatchAudioFilePath("prop_hammer"));
        this.getGrid().dispatchCommand(this._targetPos, GridCommand_1.default.BombClean(this._targetPos, EntityID_1.EntityColor.None, false), 0);
      };
      FlyerHammer.prototype.onDestroy = function() {
        _super.prototype.onDestroy.call(this);
        this._targetPos = null;
      };
      FlyerHammer = __decorate([ ccclass ], FlyerHammer);
      return FlyerHammer;
    }(FlyerBase_1.default);
    exports.default = FlyerHammer;
    cc._RF.pop();
  }, {
    "../../../../base/IGame": "IGame",
    "../../../../define/GameCurrencyType": "GameCurrencyType",
    "../../commond/GridCommand": "GridCommand",
    "../../defines/EntityID": "EntityID",
    "../../defines/IdentifierManager": "IdentifierManager",
    "../EntityPrefabNodePool": "EntityPrefabNodePool",
    "./FlyerBase": "FlyerBase"
  } ],
  FlyerLaser: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "94b14HIgQBBu6ACfmoMDclM", "FlyerLaser");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var EntityID_1 = require("../../defines/EntityID");
    var GridBase_1 = require("../../grid/GridBase");
    var ItemBombBase_1 = require("../item/color/bomb/ItemBombBase");
    var FlyerBase_1 = require("./FlyerBase");
    var GameMath_1 = require("../../../../extend/utils/GameMath");
    var FlyerBullet_1 = require("./FlyerBullet");
    var GridCommand_1 = require("../../commond/GridCommand");
    var FlyerAnimation_1 = require("./FlyerAnimation");
    var EntityPrefabNodePool_1 = require("../EntityPrefabNodePool");
    var FlyerLaserState;
    (function(FlyerLaserState) {
      FlyerLaserState[FlyerLaserState["None"] = 0] = "None";
      FlyerLaserState[FlyerLaserState["LockTarget"] = 1] = "LockTarget";
      FlyerLaserState[FlyerLaserState["WaitLastLaser"] = 2] = "WaitLastLaser";
      FlyerLaserState[FlyerLaserState["DestroyTarget"] = 3] = "DestroyTarget";
    })(FlyerLaserState || (FlyerLaserState = {}));
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var FlyerLaser = function(_super) {
      __extends(FlyerLaser, _super);
      function FlyerLaser() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this._marks = [];
        _this._targetPositions = [];
        _this._origin = cc.Vec2.ZERO;
        _this._findTargetInterval = 0;
        _this._state = FlyerLaserState.None;
        _this._laserColor = EntityID_1.EntityColor.None;
        _this._laserBombType = ItemBombBase_1.ItemBombType.None;
        _this._laserLayoutGrass = false;
        _this._lastLaserDuration = 0;
        _this._rainbowItem = null;
        _this._launched = false;
        return _this;
      }
      FlyerLaser.prototype._shootOneLaser = function(duration) {
        var grid = this.getGrid();
        var effectPostions = [];
        var itemsMap = grid.getItemsMap();
        for (var key in itemsMap) {
          var item = itemsMap[key];
          item.canMatch() && item.getEntityColor() == this._laserColor && -1 == GameMath_1.default.indexOf(this._targetPositions, item.getLogicalPos()) && effectPostions.push(item.getLogicalPos());
        }
        if (effectPostions.length <= 0) return false;
        var index = GameMath_1.default.randomInt(0, effectPostions.length - 1);
        var pos = effectPostions[index];
        this._targetPositions.push(pos);
        var bullet = FlyerBullet_1.default.create(grid, duration, this._origin, pos, this._laserColor, this._laserBombType, this._laserLayoutGrass);
        grid.setFlyerAtLogicalPos(bullet, pos);
        var mark = FlyerAnimation_1.default.createAnimationWithType(grid, FlyerAnimation_1.FlyerAnimationType.ItemMarked, false);
        grid.setFlyerAtLogicalPos(mark, pos);
        mark.setVisible(false);
        var showMark = cc.sequence(cc.delayTime(duration), cc.callFunc(function() {
          mark.setVisible(true);
        }));
        mark.runAction(showMark);
        this._marks.push(mark);
        return true;
      };
      FlyerLaser.prototype.getEntityID = function() {
        return EntityID_1.EntityID.FlyerLaser;
      };
      FlyerLaser.prototype.launch = function() {
        if (this._launched) return;
        var grid = this.getGrid();
        var itemsMap = grid.getItemsMap();
        for (var key in itemsMap) {
          var item = itemsMap[key];
          item.canMatch() && item.getEntityColor() == this._laserColor && grid.recordAttackedPosition(item.getLogicalPos());
        }
        this._launched = true;
        if (this._rainbowItem) {
          this._rainbowItem.node.setScale(1.2);
          this._rainbowItem.node.zIndex = GridBase_1.default.ZORDER_EFFECT;
          this._rainbowItem.shiftToEffectLayer();
        }
        this._state = FlyerLaserState.LockTarget;
        this._lastLaserDuration = .2;
        this.getGrid().addObstructs(this);
      };
      FlyerLaser.prototype.update = function(dt) {
        switch (this._state) {
         case FlyerLaserState.LockTarget:
          var angleDelta = GameMath_1.default.clamp(180 + 30 * this._targetPositions.length, 180, 3581);
          this._rainbowItem.node.angle += -angleDelta * dt;
          this._findTargetInterval -= dt;
          if (this._findTargetInterval <= 0) {
            var duration = GameMath_1.default.clamp(.5 - .03 * this._targetPositions.length, .2, .5);
            var interval = GameMath_1.default.clamp(.2 - .015 * this._targetPositions.length, .05, .2);
            this._lastLaserDuration = duration;
            this._findTargetInterval = interval;
            var launched = this._shootOneLaser(duration);
            if (!launched) {
              this._state = FlyerLaserState.WaitLastLaser;
              this._findTargetInterval += this._lastLaserDuration;
            }
          }
          break;

         case FlyerLaserState.WaitLastLaser:
          var angleDelta = GameMath_1.default.clamp(180 + 30 * this._targetPositions.length, 180, 3581);
          this._rainbowItem.node.angle += -angleDelta * dt;
          this._findTargetInterval -= dt;
          if (this._findTargetInterval <= 0) {
            this._rainbowItem.runAction(cc.rotateBy(1, angleDelta).repeatForever());
            this._state = FlyerLaserState.DestroyTarget;
          }
          break;

         case FlyerLaserState.DestroyTarget:
          this._state = FlyerLaserState.None;
          var grid = this.getGrid();
          for (var _i = 0, _a = this._marks; _i < _a.length; _i++) {
            var mark = _a[_i];
            mark.destoryWithRecycle(true);
          }
          this._marks.length = 0;
          this._rainbowItem.excuteCommand(GridCommand_1.default.SuicideClean(this._origin, EntityID_1.EntityColor.None, this._laserLayoutGrass));
          for (var _b = 0, _c = this._targetPositions; _b < _c.length; _b++) {
            var checkPos = _c[_b];
            grid.dispatchCommand(checkPos, GridCommand_1.default.MatchClean(checkPos, 0, this._laserLayoutGrass), 0);
            grid.highlightedCell(checkPos);
            grid.bombCell(checkPos);
          }
          grid.removeObstructs(this);
          this.destoryWithRecycle(true);
        }
      };
      FlyerLaser.create = function(grid, rainbow, origin, color, type, layoutGrass) {
        var className = "FlyerLaser";
        var prefabFileName = "match_scene/prefab/entity/flyer/FlyerLaser";
        var pool = EntityPrefabNodePool_1.default.getInstance();
        var component = pool.getPrefabNodeWithFileNameAndClassName(prefabFileName, className);
        if (component) {
          component.init(grid, rainbow, origin, color, type, layoutGrass);
          return component;
        }
        return null;
      };
      FlyerLaser.prototype.init = function(grid, rainbow, origin, color, type, layoutGrass) {
        _super.prototype.initFlyer.call(this, grid, FlyerBase_1.FlyerType.Laser);
        this._marks.length = 0;
        this._targetPositions.length = 0;
        this._findTargetInterval = 0;
        this._state = FlyerLaserState.None;
        this._lastLaserDuration = 0;
        this._rainbowItem = rainbow;
        this._origin = origin;
        this._laserColor = color;
        this._laserBombType = type;
        this._laserLayoutGrass = layoutGrass;
        this._launched = false;
      };
      FlyerLaser.prototype.start = function() {};
      FlyerLaser.prototype.onDestroy = function() {
        _super.prototype.onDestroy.call(this);
        this._marks = null;
        this._targetPositions = null;
        this._origin = null;
        this._rainbowItem = null;
      };
      FlyerLaser = __decorate([ ccclass ], FlyerLaser);
      return FlyerLaser;
    }(FlyerBase_1.default);
    exports.default = FlyerLaser;
    cc._RF.pop();
  }, {
    "../../../../extend/utils/GameMath": "GameMath",
    "../../commond/GridCommand": "GridCommand",
    "../../defines/EntityID": "EntityID",
    "../../grid/GridBase": "GridBase",
    "../EntityPrefabNodePool": "EntityPrefabNodePool",
    "../item/color/bomb/ItemBombBase": "ItemBombBase",
    "./FlyerAnimation": "FlyerAnimation",
    "./FlyerBase": "FlyerBase",
    "./FlyerBullet": "FlyerBullet"
  } ],
  FlyerMissile: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "badd5GmheBGkIEFeljzviPE", "FlyerMissile");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.FlyerMissileType = void 0;
    var IGame_1 = require("../../../../base/IGame");
    var Pair_1 = require("../../../../base/Pair");
    var OrbitTrack_1 = require("../../../../extend/action/OrbitTrack");
    var GameMath_1 = require("../../../../extend/utils/GameMath");
    var GridCommand_1 = require("../../commond/GridCommand");
    var EntityID_1 = require("../../defines/EntityID");
    var IdentifierManager_1 = require("../../defines/IdentifierManager");
    var EntityPrefabNodePool_1 = require("../EntityPrefabNodePool");
    var FlyerBase_1 = require("./FlyerBase");
    var FlyerBomb_1 = require("./FlyerBomb");
    var FlyerCannon_1 = require("./FlyerCannon");
    var EntityBase_1 = require("../EntityBase");
    var FlyerMissileType;
    (function(FlyerMissileType) {
      FlyerMissileType[FlyerMissileType["None"] = 0] = "None";
      FlyerMissileType[FlyerMissileType["Dot"] = 1] = "Dot";
      FlyerMissileType[FlyerMissileType["Row"] = 2] = "Row";
      FlyerMissileType[FlyerMissileType["Column"] = 3] = "Column";
      FlyerMissileType[FlyerMissileType["Cross"] = 4] = "Cross";
      FlyerMissileType[FlyerMissileType["Range"] = 5] = "Range";
    })(FlyerMissileType = exports.FlyerMissileType || (exports.FlyerMissileType = {}));
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var FlyerMissile = function(_super) {
      __extends(FlyerMissile, _super);
      function FlyerMissile() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this._missileType = FlyerMissileType.None;
        _this._layoutGrass = false;
        _this._launched = false;
        return _this;
      }
      FlyerMissile.prototype.getEntityID = function() {
        var result = EntityID_1.EntityID.None;
        switch (this.getEntityColor()) {
         case EntityID_1.EntityColor.Red:
          result = EntityID_1.EntityID.FlyerMissileRed;
          break;

         case EntityID_1.EntityColor.Green:
          result = EntityID_1.EntityID.FlyerMissileGreen;
          break;

         case EntityID_1.EntityColor.Blue:
          result = EntityID_1.EntityID.FlyerMissileBlue;
          break;

         case EntityID_1.EntityColor.Yellow:
          result = EntityID_1.EntityID.FlyerMissileYellow;
          break;

         case EntityID_1.EntityColor.Orange:
          result = EntityID_1.EntityID.FlyerMissileOrange;
          break;

         case EntityID_1.EntityColor.Purple:
          result = EntityID_1.EntityID.FlyerMissilePurple;
        }
        return result;
      };
      FlyerMissile.create = function(grid, missileType, color, layoutGrass) {
        var filePath = "match_scene/prefab/entity/flyer/FlyerMissile";
        switch (color) {
         case EntityID_1.EntityColor.Red:
          filePath += "Red";
          break;

         case EntityID_1.EntityColor.Green:
          filePath += "Green";
          break;

         case EntityID_1.EntityColor.Blue:
          filePath += "Blue";
          break;

         case EntityID_1.EntityColor.Yellow:
          filePath += "Yellow";
          break;

         case EntityID_1.EntityColor.Orange:
          filePath += "Orange";
          break;

         case EntityID_1.EntityColor.Purple:
          filePath += "Purple";
          break;

         case EntityID_1.EntityColor.None:
          filePath += "White";
        }
        var className = "FlyerMissile";
        var prefabFileName = filePath;
        var pool = EntityPrefabNodePool_1.default.getInstance();
        var component = pool.getPrefabNodeWithFileNameAndClassName(prefabFileName, className);
        if (component) {
          component.init(grid, missileType, color, layoutGrass);
          return component;
        }
        return null;
      };
      FlyerMissile.prototype.init = function(grid, missileType, color, layoutGrass) {
        _super.prototype.initFlyer.call(this, grid, FlyerBase_1.FlyerType.Missile);
        this.setEntityColor(color);
        this._missileType = missileType;
        this._layoutGrass = layoutGrass;
        this._launched = false;
      };
      FlyerMissile.prototype.getAttackPos = function(color, layoutGrass) {
        var targetPos = cc.v2(-1, -1);
        var targetPriority = EntityBase_1.default.DEFAULT_MISSILE_PRIORITY;
        var grid = this.getGrid();
        var entityTypes = [ EntityID_1.EntityType.Item ];
        var cellsMap = grid.getCellsMap();
        var checkPositions = [];
        var attackedPositions = grid.getAttackedPosition();
        for (var key in cellsMap) {
          var cell = cellsMap[key];
          var checkPos = cell.getLogicalPos();
          -1 == GameMath_1.default.indexOf(attackedPositions, checkPos) && checkPositions.push(checkPos);
        }
        GameMath_1.default.shuffleArray(checkPositions);
        for (var _i = 0, checkPositions_1 = checkPositions; _i < checkPositions_1.length; _i++) {
          var checkPos = checkPositions_1[_i];
          if (-1 == GameMath_1.default.indexOf(attackedPositions, checkPos)) {
            var minPriority = EntityBase_1.default.DEFAULT_MISSILE_PRIORITY;
            var canAttackTop = false;
            for (var _a = 0, entityTypes_1 = entityTypes; _a < entityTypes_1.length; _a++) {
              var entityType = entityTypes_1[_a];
              var entity = grid.getEntity(entityType, checkPos);
              if (entity) {
                entityType == EntityID_1.EntityType.Parasite || entityType == EntityID_1.EntityType.Item ? entity.canExcuteCommand(GridCommand_1.default.BombClean(this.getLogicalPos(), color, layoutGrass)) && (canAttackTop = true) : canAttackTop = true;
                if (!canAttackTop) break;
                var butterflyPriority = entity.getMissileAttackedPriority();
                butterflyPriority < minPriority && (minPriority = butterflyPriority);
              }
            }
            if (canAttackTop && minPriority < targetPriority) {
              targetPriority = minPriority;
              targetPos = checkPos;
            }
          }
        }
        (targetPriority >= EntityBase_1.default.DEFAULT_MISSILE_PRIORITY || targetPos.equals(cc.v2(-1, -1))) && (targetPos = _super.prototype.getAttackPos.call(this, color, layoutGrass));
        return targetPos;
      };
      FlyerMissile.prototype.launch = function() {
        var _this = this;
        if (this._launched) return;
        this._launched = true;
        IGame_1.default.playAudio(IdentifierManager_1.default.getInstance().getMatchAudioFilePath("eliminate_special_cube"));
        var grid = this.getGrid();
        var targetPos = this.getAttackPos(this.getEntityColor(), this._layoutGrass);
        var targetPixelPos = grid.getPixelPosFromLogicalPos(targetPos);
        grid.addObstructs(this);
        this._puppet.angle = -45;
        var speed = 1100;
        var acceleration = 2;
        var cellSize = grid.getCellSize();
        var radius = GameMath_1.default.randomInt(cellSize.width, 1.5 * cellSize.width);
        var actions = [];
        var state = this.playAnimation("default");
        state && actions.push(cc.delayTime(state.duration));
        var move = OrbitTrack_1.default.createWithSpeed(speed, this.node.getPosition(), targetPixelPos, cc.v2(1, 1), radius, true).easing(cc.easeIn(acceleration));
        var scaleAction = cc.sequence(cc.scaleTo(.25 * move.getDuration(), 1.2).easing(cc.easeIn(2)), cc.delayTime(.5 * move.getDuration()), cc.scaleTo(.25 * move.getDuration(), 1).easing(cc.easeOut(2)));
        actions.push(cc.spawn(move, scaleAction));
        var attackCallBack = null;
        var gridSize = grid.getGridSize();
        switch (this._missileType) {
         case FlyerMissileType.Dot:
          grid.recordAttackedPosition(targetPos);
          attackCallBack = cc.callFunc(function() {
            IGame_1.default.playAudio(IdentifierManager_1.default.getInstance().getMatchAudioFilePath("eliminate_special_cube2"));
            grid.dispatchCommand(targetPos, GridCommand_1.default.BombClean(targetPos, _this.getEntityColor(), _this._layoutGrass), 0);
          });
          break;

         case FlyerMissileType.Row:
          var rayDirections_4 = [ new Pair_1.Pair(cc.v2(1, 0), true), new Pair_1.Pair(cc.v2(-1, 0), false) ];
          for (var _i = 0, rayDirections_1 = rayDirections_4; _i < rayDirections_1.length; _i++) {
            var raydirection = rayDirections_1[_i];
            var willAttackPos = targetPos.clone();
            var direction = raydirection.first;
            var validLogicalRect = cc.rect(0, 0, gridSize.width, gridSize.height);
            while (1) {
              if (!GameMath_1.default.rectContainsPoint(validLogicalRect, willAttackPos)) break;
              grid.recordAttackedPosition(willAttackPos.clone());
              willAttackPos.addSelf(direction);
            }
          }
          attackCallBack = cc.callFunc(function() {
            IGame_1.default.playAudio(IdentifierManager_1.default.getInstance().getMatchAudioFilePath("eliminate_special_line"));
            var grid = _this.getGrid();
            for (var _i = 0, rayDirections_5 = rayDirections_4; _i < rayDirections_5.length; _i++) {
              var ray = rayDirections_5[_i];
              var cannon = FlyerCannon_1.default.create(grid, _this.getEntityColor(), _this._layoutGrass, targetPos, ray.first, ray.second);
              grid.setFlyerAtLogicalPos(cannon, targetPos);
            }
          });
          break;

         case FlyerMissileType.Column:
          var rayDirections_6 = [ new Pair_1.Pair(cc.v2(0, 1), true), new Pair_1.Pair(cc.v2(0, -1), false) ];
          for (var _a = 0, rayDirections_2 = rayDirections_6; _a < rayDirections_2.length; _a++) {
            var raydirection = rayDirections_2[_a];
            var willAttackPos = targetPos.clone();
            var direction = raydirection.first;
            var validLogicalRect = cc.rect(0, 0, gridSize.width, gridSize.height);
            while (1) {
              if (!GameMath_1.default.rectContainsPoint(validLogicalRect, willAttackPos)) break;
              grid.recordAttackedPosition(willAttackPos.clone());
              willAttackPos.addSelf(direction);
            }
          }
          attackCallBack = cc.callFunc(function() {
            IGame_1.default.playAudio(IdentifierManager_1.default.getInstance().getMatchAudioFilePath("eliminate_special_line"));
            var grid = _this.getGrid();
            for (var _i = 0, rayDirections_7 = rayDirections_6; _i < rayDirections_7.length; _i++) {
              var ray = rayDirections_7[_i];
              var cannon = FlyerCannon_1.default.create(grid, _this.getEntityColor(), _this._layoutGrass, targetPos, ray.first, ray.second);
              grid.setFlyerAtLogicalPos(cannon, targetPos);
            }
          });
          break;

         case FlyerMissileType.Cross:
          var rayDirections_8 = [ new Pair_1.Pair(cc.v2(1, 1), true), new Pair_1.Pair(cc.v2(-1, -1), false), new Pair_1.Pair(cc.v2(1, -1), false), new Pair_1.Pair(cc.v2(-1, 1), false) ];
          for (var _b = 0, rayDirections_3 = rayDirections_8; _b < rayDirections_3.length; _b++) {
            var raydirection = rayDirections_3[_b];
            var willAttackPos = targetPos.clone();
            var direction = raydirection.first;
            var validLogicalRect = cc.rect(0, 0, gridSize.width, gridSize.height);
            while (1) {
              if (!GameMath_1.default.rectContainsPoint(validLogicalRect, willAttackPos)) break;
              grid.recordAttackedPosition(willAttackPos.clone());
              willAttackPos.addSelf(direction);
            }
          }
          attackCallBack = cc.callFunc(function() {
            IGame_1.default.playAudio(IdentifierManager_1.default.getInstance().getMatchAudioFilePath("eliminate_special_cross"));
            var grid = _this.getGrid();
            for (var _i = 0, rayDirections_9 = rayDirections_8; _i < rayDirections_9.length; _i++) {
              var ray = rayDirections_9[_i];
              var cannon = FlyerCannon_1.default.create(grid, _this.getEntityColor(), _this._layoutGrass, targetPos, ray.first, ray.second);
              grid.setFlyerAtLogicalPos(cannon, targetPos);
            }
          });
          break;

         case FlyerMissileType.Range:
          var willAttackPositions = GameMath_1.default.enumerateRingPos(targetPos, 0, 2);
          for (var _c = 0, willAttackPositions_1 = willAttackPositions; _c < willAttackPositions_1.length; _c++) {
            var pos = willAttackPositions_1[_c];
            this.getGrid().recordAttackedPosition(pos);
          }
          attackCallBack = cc.callFunc(function() {
            IGame_1.default.playAudio(IdentifierManager_1.default.getInstance().getMatchAudioFilePath("eliminate_special_bomb"));
            var bomb = FlyerBomb_1.default.create(grid, _this.getEntityColor(), _this._layoutGrass, targetPos, 2);
            grid.setFlyerAtLogicalPos(bomb, targetPos);
          });
        }
        attackCallBack && actions.push(attackCallBack);
        var destoryCallBack = cc.callFunc(function() {
          grid.highlightedCell(targetPos);
          grid.bombCell(targetPos);
          grid.removeObstructs(_this);
          _this.destoryWithRecycle(false);
        });
        actions.push(destoryCallBack);
        this.runAction(cc.sequence(actions));
      };
      FlyerMissile = __decorate([ ccclass ], FlyerMissile);
      return FlyerMissile;
    }(FlyerBase_1.default);
    exports.default = FlyerMissile;
    cc._RF.pop();
  }, {
    "../../../../base/IGame": "IGame",
    "../../../../base/Pair": "Pair",
    "../../../../extend/action/OrbitTrack": "OrbitTrack",
    "../../../../extend/utils/GameMath": "GameMath",
    "../../commond/GridCommand": "GridCommand",
    "../../defines/EntityID": "EntityID",
    "../../defines/IdentifierManager": "IdentifierManager",
    "../EntityBase": "EntityBase",
    "../EntityPrefabNodePool": "EntityPrefabNodePool",
    "./FlyerBase": "FlyerBase",
    "./FlyerBomb": "FlyerBomb",
    "./FlyerCannon": "FlyerCannon"
  } ],
  FlyerMoreStep: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "40513I2751OnJMUUczoreem", "FlyerMoreStep");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var FlyerBase_1 = require("./FlyerBase");
    var EntityPrefabNodePool_1 = require("../EntityPrefabNodePool");
    var CollectionID_1 = require("../../defines/CollectionID");
    var EntityID_1 = require("../../defines/EntityID");
    var GameMath_1 = require("../../../../extend/utils/GameMath");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var FlyerMoreStep = function(_super) {
      __extends(FlyerMoreStep, _super);
      function FlyerMoreStep() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.amountLabel = null;
        _this._extraStep = 0;
        _this._origin = cc.Vec2.ZERO;
        return _this;
      }
      FlyerMoreStep.create = function(grid, stepAmout, origin) {
        var className = "FlyerMoreStep";
        var prefabFileName = "match_scene/prefab/entity/flyer/FlyerMoreStep";
        var pool = EntityPrefabNodePool_1.default.getInstance();
        var component = pool.getPrefabNodeWithFileNameAndClassName(prefabFileName, className);
        if (component) {
          component.init(grid, stepAmout, origin);
          return component;
        }
        return null;
      };
      FlyerMoreStep.prototype.init = function(grid, stepAmout, origin) {
        _super.prototype.initFlyer.call(this, grid, FlyerBase_1.FlyerType.MoreStep);
        this.setOrigin(origin);
        this._extraStep = stepAmout;
        this.amountLabel.string = "+" + this._extraStep.toString();
      };
      FlyerMoreStep.prototype.updatePuppet = function() {};
      FlyerMoreStep.prototype.getCollectionID = function() {
        return CollectionID_1.CollectionID.None;
      };
      FlyerMoreStep.prototype.getEntityID = function() {
        return EntityID_1.EntityID.FlyerMoreStep;
      };
      FlyerMoreStep.prototype.getOrigin = function() {
        return this._origin;
      };
      FlyerMoreStep.prototype.setOrigin = function(origin) {
        this._origin = origin;
      };
      FlyerMoreStep.prototype.launch = function() {
        var _this = this;
        var startPos = this.getGrid().getPixelPosFromLogicalPos(this._origin);
        var targetWorldPos = this.getGrid().getWorldPosForStep();
        var targetPos = this.getGrid().node.convertToNodeSpaceAR(targetWorldPos);
        var distance = GameMath_1.default.getDistance(startPos, targetPos);
        var speed = 1e3;
        var duration = distance / speed;
        this.node.setPosition(startPos);
        var jumpOut = cc.scaleTo(.3, 2).easing(cc.easeBackOut());
        var move = cc.spawn(cc.moveTo(duration, targetPos), cc.scaleTo(duration, .75));
        var callback = cc.callFunc(function() {
          _this.getGrid().updateStepBarUIWithDelta(_this._extraStep);
          _this.destoryWithRecycle(true);
        });
        var action = cc.sequence(jumpOut, move, callback);
        this.node.runAction(action);
      };
      FlyerMoreStep.prototype.start = function() {};
      FlyerMoreStep.prototype.onDestroy = function() {
        _super.prototype.onDestroy.call(this);
        this.amountLabel = null;
        this._origin = null;
      };
      __decorate([ property(cc.Label) ], FlyerMoreStep.prototype, "amountLabel", void 0);
      FlyerMoreStep = __decorate([ ccclass ], FlyerMoreStep);
      return FlyerMoreStep;
    }(FlyerBase_1.default);
    exports.default = FlyerMoreStep;
    cc._RF.pop();
  }, {
    "../../../../extend/utils/GameMath": "GameMath",
    "../../defines/CollectionID": "CollectionID",
    "../../defines/EntityID": "EntityID",
    "../EntityPrefabNodePool": "EntityPrefabNodePool",
    "./FlyerBase": "FlyerBase"
  } ],
  FlyerMower: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "82042M+oSRGx583C/+LLR8V", "FlyerMower");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.FlyerMowerDirection = void 0;
    var FlyerBase_1 = require("./FlyerBase");
    var EntityID_1 = require("../../defines/EntityID");
    var GameMath_1 = require("../../../../extend/utils/GameMath");
    var GridCommand_1 = require("../../commond/GridCommand");
    var EntityPrefabNodePool_1 = require("../EntityPrefabNodePool");
    var IdentifierManager_1 = require("../../defines/IdentifierManager");
    var IGame_1 = require("../../../../base/IGame");
    var FlyerMowerDirection;
    (function(FlyerMowerDirection) {
      FlyerMowerDirection[FlyerMowerDirection["Up"] = 0] = "Up";
      FlyerMowerDirection[FlyerMowerDirection["Right"] = 1] = "Right";
      FlyerMowerDirection[FlyerMowerDirection["Down"] = 2] = "Down";
      FlyerMowerDirection[FlyerMowerDirection["Left"] = 3] = "Left";
    })(FlyerMowerDirection = exports.FlyerMowerDirection || (exports.FlyerMowerDirection = {}));
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var FlyerMower = function(_super) {
      __extends(FlyerMower, _super);
      function FlyerMower() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this._launched = false;
        _this._aliveArea = cc.rect(0, 0, 0, 0);
        _this._speed = 0;
        _this._lastCellPostion = cc.Vec2.ZERO;
        _this._startFly = false;
        _this._hadPlayMoveAction = false;
        _this._layoutGrass = false;
        _this._origin = cc.Vec2.ZERO;
        _this._direction = FlyerMowerDirection.Up;
        return _this;
      }
      FlyerMower_1 = FlyerMower;
      FlyerMower.create = function(grid, layoutGrass, origin, direction) {
        var filePath = "match_scene/prefab/entity/flyer/FlyerMower";
        var className = "FlyerMower";
        var prefabFileName = filePath;
        var pool = EntityPrefabNodePool_1.default.getInstance();
        var component = pool.getPrefabNodeWithFileNameAndClassName(prefabFileName, className);
        if (component) {
          component.init(grid, layoutGrass, origin, direction);
          return component;
        }
        return null;
      };
      FlyerMower.prototype.init = function(grid, layoutGrass, origin, direction) {
        _super.prototype.initFlyer.call(this, grid, FlyerBase_1.FlyerType.Mower);
        this.setLayourGrass(layoutGrass);
        this.setOrigin(origin);
        this.setDirection(direction);
        this._speed = 0;
        this._lastCellPostion = cc.v2(-1, -1);
        this._launched = false;
        this._startFly = false;
        this._hadPlayMoveAction = false;
        this._aliveArea = cc.rect(-2e3, -2e3, 4e3, 4e3);
      };
      FlyerMower.prototype.getEntityID = function() {
        return EntityID_1.EntityID.FlyerMower;
      };
      FlyerMower.prototype.getLayoutGrass = function() {
        return this._layoutGrass;
      };
      FlyerMower.prototype.setLayourGrass = function(layoutGrass) {
        this._layoutGrass = layoutGrass;
      };
      FlyerMower.prototype.getOrigin = function() {
        return this._origin;
      };
      FlyerMower.prototype.setOrigin = function(origin) {
        this._origin = origin;
      };
      FlyerMower.prototype.getDirection = function() {
        return this._direction;
      };
      FlyerMower.prototype.setDirection = function(direction) {
        this._direction = direction;
        var stepDirection = this.getStepDirection();
        var rotation = GameMath_1.default.getAngle(cc.Vec2.ZERO, stepDirection);
        this._puppet.angle = -rotation;
      };
      FlyerMower.prototype.getStepDirection = function() {
        var result = cc.v2(0, 1);
        switch (this._direction) {
         case FlyerMowerDirection.Up:
          result = cc.v2(0, 1);
          break;

         case FlyerMowerDirection.Right:
          result = cc.v2(1, 0);
          break;

         case FlyerMowerDirection.Down:
          result = cc.v2(0, -1);
          break;

         case FlyerMowerDirection.Left:
          result = cc.v2(-1, 0);
        }
        return result;
      };
      FlyerMower.prototype.launch = function() {
        var _this = this;
        if (this._launched) return;
        IGame_1.default.playAudio(IdentifierManager_1.default.getInstance().getMatchAudioFilePath("mower"));
        var willAttackPos = this._origin.clone();
        var grid = this.getGrid();
        var validLogicalRect = cc.rect(0, 0, grid.getGridSize().width, grid.getGridSize().height);
        while (1) {
          if (!GameMath_1.default.rectContainsPoint(validLogicalRect, willAttackPos)) break;
          grid.recordAttackedPosition(willAttackPos.clone());
          willAttackPos.addSelf(this.getStepDirection());
        }
        this._launched = true;
        this.setOrigin(this.getOrigin());
        this._lastCellPostion = this._origin;
        this._launched = true;
        this._speed = FlyerMower_1.FLYER_MOWER_START_SPEED;
        grid.addObstructs(this);
        var state = this.playAnimation("jump");
        if (state) {
          var action = cc.sequence(cc.delayTime(state.duration), cc.callFunc(function() {
            _this._startFly = true;
          }));
          this.runAction(action);
        } else this._startFly = true;
      };
      FlyerMower.prototype.update = function(dt) {
        if (false == this._launched) return;
        if (false == this._startFly) return;
        if (false == this._hadPlayMoveAction) {
          this.playAnimation("move");
          this._hadPlayMoveAction = true;
        }
        dt *= cc.director.getScheduler().getTimeScale();
        var grid = this.getGrid();
        var stepDirection = this.getStepDirection();
        this._speed = GameMath_1.default.clamp(this._speed + FlyerMower_1.FLYER_MOWER_ACCELERATION * dt, FlyerMower_1.FLYER_MOWER_MIN_SPEED, FlyerMower_1.FLYER_MOWER_MAX_SPEED);
        var newPosition = this.node.getPosition().add(stepDirection.normalize().mul(this._speed).mul(dt));
        this.node.setPosition(newPosition);
        var newCellPos = grid.getLogicalPosFromPixelPos(newPosition);
        if (!newCellPos.equals(this._lastCellPostion)) {
          var offset = newCellPos.sub(this._lastCellPostion);
          var count = offset.mag() / stepDirection.mag();
          for (var i = 0; i < count; i++) {
            var pos = this._lastCellPostion.add(stepDirection.mul(i + 1));
            var cell = grid.getCellAtLogicalPos(pos);
            if (cell) {
              grid.dispatchCommand(pos, GridCommand_1.default.TerminateClean(this.getOrigin(), this.getEntityColor(), this._layoutGrass), 0);
              grid.highlightedCell(pos);
            }
            if (grid.isGrassFloorAtLogicalPos(pos)) {
              var item = grid.getItemAtLogicalPos(pos);
              item ? item.canMatch() && item.canSwap() && item.canLayoutGrass() && (this._layoutGrass = true) : this._layoutGrass = true;
            }
          }
          this._lastCellPostion = newCellPos;
        }
        if (!GameMath_1.default.rectContainsPoint(this._aliveArea, this.node.getPosition())) {
          grid.removeObstructs(this);
          this.destoryWithRecycle(false);
        }
      };
      FlyerMower.prototype.onDestroy = function() {
        _super.prototype.onDestroy.call(this);
        this._aliveArea = null;
        this._lastCellPostion = null;
        this._origin = null;
      };
      var FlyerMower_1;
      FlyerMower.FLYER_MOWER_MIN_SPEED = 500;
      FlyerMower.FLYER_MOWER_MAX_SPEED = 2e3;
      FlyerMower.FLYER_MOWER_START_SPEED = 500;
      FlyerMower.FLYER_MOWER_ACCELERATION = 1e3;
      FlyerMower = FlyerMower_1 = __decorate([ ccclass ], FlyerMower);
      return FlyerMower;
    }(FlyerBase_1.default);
    exports.default = FlyerMower;
    cc._RF.pop();
  }, {
    "../../../../base/IGame": "IGame",
    "../../../../extend/utils/GameMath": "GameMath",
    "../../commond/GridCommand": "GridCommand",
    "../../defines/EntityID": "EntityID",
    "../../defines/IdentifierManager": "IdentifierManager",
    "../EntityPrefabNodePool": "EntityPrefabNodePool",
    "./FlyerBase": "FlyerBase"
  } ],
  FlyerNuclear: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "1ecc9gFBUVEuI1nup3K/Svg", "FlyerNuclear");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var EntityID_1 = require("../../defines/EntityID");
    var GridBase_1 = require("../../grid/GridBase");
    var FlyerBase_1 = require("./FlyerBase");
    var GameMath_1 = require("../../../../extend/utils/GameMath");
    var GridCommand_1 = require("../../commond/GridCommand");
    var IGame_1 = require("../../../../base/IGame");
    var IdentifierManager_1 = require("../../defines/IdentifierManager");
    var EntityPrefabNodePool_1 = require("../EntityPrefabNodePool");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var FlyerNuclear = function(_super) {
      __extends(FlyerNuclear, _super);
      function FlyerNuclear() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.FLYER_NUCLEAR_BOMB_DURATION = 2;
        _this._shouldLayoutGrass = false;
        _this._origin = cc.Vec2.ZERO;
        _this._radius = 0;
        _this._launched = false;
        _this._bombDuration = 0;
        _this._lastBombRingIndex = 0;
        return _this;
      }
      FlyerNuclear.prototype.getShouldLayoutGrass = function() {
        return this._shouldLayoutGrass;
      };
      FlyerNuclear.prototype.setShouldLayoutGrass = function(shouldLayoutGrass) {
        this._shouldLayoutGrass = shouldLayoutGrass;
      };
      FlyerNuclear.prototype.getOrigin = function() {
        return this._origin;
      };
      FlyerNuclear.prototype.setOrigin = function(origin) {
        this._origin = origin;
      };
      FlyerNuclear.prototype.getRadius = function() {
        return this._radius;
      };
      FlyerNuclear.prototype.setRadius = function(radius) {
        this._radius = radius;
      };
      FlyerNuclear.prototype.getEntityID = function() {
        return EntityID_1.EntityID.FlyerNuclear;
      };
      FlyerNuclear.prototype.init = function(grid, layoutGrass, origin, raidus) {
        _super.prototype.initFlyer.call(this, grid, FlyerBase_1.FlyerType.NuclearBomb);
        this.setRadius(raidus);
        this.setOrigin(origin);
        this.setEntityColor(EntityID_1.EntityColor.None);
        this.setShouldLayoutGrass(layoutGrass);
        this._launched = false;
        this._bombDuration = 0;
        this._lastBombRingIndex = 0;
      };
      FlyerNuclear.create = function(grid, layoutGrass, origin, raidus) {
        void 0 === raidus && (raidus = GridBase_1.default.MAX_GRID_HEIGHT + GridBase_1.default.MAX_GRID_WIDTH);
        var className = "FlyerNuclear";
        var prefabFileName = "match_scene/prefab/entity/flyer/FlyerNuclear";
        var pool = EntityPrefabNodePool_1.default.getInstance();
        var component = pool.getPrefabNodeWithFileNameAndClassName(prefabFileName, className);
        if (component) {
          component.init(grid, layoutGrass, origin, raidus);
          return component;
        }
        return null;
      };
      FlyerNuclear.prototype.launch = function() {
        var _this = this;
        if (this._launched) return;
        this._launched = true;
        IGame_1.default.playAudio(IdentifierManager_1.default.getInstance().getMatchAudioFilePath("eliminate_special_colorcolor"));
        this._bombDuration = 0;
        this._lastBombRingIndex = -1;
        var grid = this.getGrid();
        grid.addObstructs(this);
        var size = grid.getGridSize();
        var conners = [ cc.v2(0, 0), cc.v2(size.width - 1, 0), cc.v2(0, size.height - 1), cc.v2(size.width - 1, size.height - 1) ];
        var maxDistanceSquared = 0;
        var originPixel = grid.getPixelPosFromLogicalPos(this._origin);
        for (var _i = 0, conners_1 = conners; _i < conners_1.length; _i++) {
          var conner = conners_1[_i];
          var connerPixel = grid.getPixelPosFromLogicalPos(conner);
          var distanceSquared = GameMath_1.default.getDistanceSQ(originPixel, connerPixel);
          distanceSquared > maxDistanceSquared && (maxDistanceSquared = distanceSquared);
        }
        var distance = Math.min(Math.sqrt(maxDistanceSquared), 1270);
        this.node.setScale(distance / 135);
        var state = this.playAnimation("default");
        if (state) {
          var action = cc.sequence(cc.delayTime(state.duration), cc.callFunc(function() {
            _this.destoryWithRecycle(false);
          }));
          this.runAction(action);
        }
      };
      FlyerNuclear.prototype.update = function(delta) {
        if (false == this._launched) return;
        this._bombDuration += delta;
        var currentRingIndex = Math.min(this._radius, Math.floor(this._radius * this._bombDuration / this.FLYER_NUCLEAR_BOMB_DURATION));
        if (currentRingIndex > this._lastBombRingIndex) {
          var positions = GameMath_1.default.enumerateRingPos(this._origin, this._lastBombRingIndex + 1, currentRingIndex);
          var grid = this.getGrid();
          for (var _i = 0, positions_1 = positions; _i < positions_1.length; _i++) {
            var pos = positions_1[_i];
            var cell = grid.getCellAtLogicalPos(pos);
            if (cell) {
              grid.dispatchCommand(pos, GridCommand_1.default.BombClean(this._origin, this.getEntityColor(), this._shouldLayoutGrass), 0);
              grid.highlightedCell(pos);
            }
          }
          this._lastBombRingIndex = currentRingIndex;
          this._lastBombRingIndex >= this._radius && grid.removeObstructs(this);
        }
      };
      FlyerNuclear.prototype.start = function() {};
      FlyerNuclear.prototype.onDestroy = function() {
        _super.prototype.onDestroy.call(this);
        this._origin = null;
      };
      FlyerNuclear = __decorate([ ccclass ], FlyerNuclear);
      return FlyerNuclear;
    }(FlyerBase_1.default);
    exports.default = FlyerNuclear;
    cc._RF.pop();
  }, {
    "../../../../base/IGame": "IGame",
    "../../../../extend/utils/GameMath": "GameMath",
    "../../commond/GridCommand": "GridCommand",
    "../../defines/EntityID": "EntityID",
    "../../defines/IdentifierManager": "IdentifierManager",
    "../../grid/GridBase": "GridBase",
    "../EntityPrefabNodePool": "EntityPrefabNodePool",
    "./FlyerBase": "FlyerBase"
  } ],
  FlyerPopsicleBomb: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "39bf3e83gZCn4yyxz6pnbcD", "FlyerPopsicleBomb");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var FlyerBase_1 = require("./FlyerBase");
    var GridCommand_1 = require("../../commond/GridCommand");
    var EntityID_1 = require("../../defines/EntityID");
    var EntityPrefabNodePool_1 = require("../EntityPrefabNodePool");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var FlyerPopsicleBomb = function(_super) {
      __extends(FlyerPopsicleBomb, _super);
      function FlyerPopsicleBomb() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.FLYER_BOMB_DURATION = .2;
        _this._launched = false;
        _this._bombDuration = 0;
        _this._lastBombRingIndex = 0;
        _this._canLayoutGrass = false;
        _this._origin = cc.Vec2.ZERO;
        _this._bombPositions = [];
        return _this;
      }
      FlyerPopsicleBomb.prototype.getCanLayoutGrass = function() {
        return this._canLayoutGrass;
      };
      FlyerPopsicleBomb.prototype.setCanLayoutGrass = function(canLayoutGrass) {
        this._canLayoutGrass = canLayoutGrass;
      };
      FlyerPopsicleBomb.prototype.getOrigin = function() {
        return this._origin;
      };
      FlyerPopsicleBomb.prototype.setOrigin = function(origin) {
        this._origin = origin;
      };
      FlyerPopsicleBomb.prototype.getEntityID = function() {
        return EntityID_1.EntityID.FlyerPopsicelBomb;
      };
      FlyerPopsicleBomb.prototype.launch = function() {
        var _this = this;
        if (this._launched) return;
        this._launched = true;
        this._bombDuration = 0;
        this._lastBombRingIndex = -1;
        this._launched = true;
        this.getGrid().addObstructs(this);
        var state = this.playAnimation("default");
        if (state) {
          var action = cc.sequence(cc.delayTime(state.duration), cc.callFunc(function() {
            _this.getGrid().removeObstructs(_this);
            _this.destoryWithRecycle(true);
          }));
          this.runAction(action);
        }
        var grid = this.getGrid();
        for (var _i = 0, _a = this._bombPositions; _i < _a.length; _i++) {
          var bombPos = _a[_i];
          var cleanPos = this._origin.add(bombPos);
          this.getGrid().recordAttackedPosition(cleanPos);
          grid.dispatchCommand(cleanPos, GridCommand_1.default.BombClean(this._origin, this.getEntityColor(), this._canLayoutGrass), 0);
          grid.highlightedCell(cleanPos);
        }
      };
      FlyerPopsicleBomb.create = function(grid, color, origin, layoutGrass, bombPostions) {
        var className = "FlyerPopsicleBomb";
        var prefabFileName = "match_scene/prefab/entity/flyer/FlyerPopsicleBomb";
        var pool = EntityPrefabNodePool_1.default.getInstance();
        var component = pool.getPrefabNodeWithFileNameAndClassName(prefabFileName, className);
        if (component) {
          component.init(grid, color, origin, layoutGrass, bombPostions);
          return component;
        }
        return null;
      };
      FlyerPopsicleBomb.prototype.init = function(grid, color, origin, layoutGrass, bombPostions) {
        _super.prototype.initFlyer.call(this, grid, FlyerBase_1.FlyerType.Bomb);
        this.setEntityColor(color);
        this.setCanLayoutGrass(layoutGrass);
        this.setOrigin(origin);
        this._bombPositions = bombPostions;
        this._launched = false;
        this._bombDuration = 0;
        this._lastBombRingIndex = 0;
      };
      FlyerPopsicleBomb.prototype.onDestroy = function() {
        _super.prototype.onDestroy.call(this);
        this._origin = null;
        this._bombPositions = null;
      };
      FlyerPopsicleBomb = __decorate([ ccclass ], FlyerPopsicleBomb);
      return FlyerPopsicleBomb;
    }(FlyerBase_1.default);
    exports.default = FlyerPopsicleBomb;
    cc._RF.pop();
  }, {
    "../../commond/GridCommand": "GridCommand",
    "../../defines/EntityID": "EntityID",
    "../EntityPrefabNodePool": "EntityPrefabNodePool",
    "./FlyerBase": "FlyerBase"
  } ],
  FlyerPopsicleLine: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "5cb6aCzFaNPTKjB4+vlsPl7", "FlyerPopsicleLine");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var FlyerCannon_1 = require("./FlyerCannon");
    var EntityID_1 = require("../../defines/EntityID");
    var FlyerBase_1 = require("./FlyerBase");
    var EntityPrefabNodePool_1 = require("../EntityPrefabNodePool");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var FlyerPopsicleLine = function(_super) {
      __extends(FlyerPopsicleLine, _super);
      function FlyerPopsicleLine() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      FlyerPopsicleLine.prototype.getEntityID = function() {
        return EntityID_1.EntityID.FlyerPopsicelLine;
      };
      FlyerPopsicleLine.prototype.updatePuppet = function() {};
      FlyerPopsicleLine.create = function(grid, color, layoutGrass, origin, direction, hitOrigin) {
        var className = "FlyerPopsicleLine";
        var prefabFileName = "match_scene/prefab/entity/flyer/FlyerPopsicleLine";
        var pool = EntityPrefabNodePool_1.default.getInstance();
        var component = pool.getPrefabNodeWithFileNameAndClassName(prefabFileName, className);
        if (component) {
          component.init(grid, color, layoutGrass, origin, direction, hitOrigin);
          return component;
        }
        return null;
      };
      FlyerPopsicleLine.prototype.init = function(grid, color, layoutGrass, origin, direction, hitOrigin) {
        _super.prototype.initFlyer.call(this, grid, FlyerBase_1.FlyerType.PopsicleLine);
        this.setEntityColor(EntityID_1.EntityColor.None);
        this.setLayourGrass(layoutGrass);
        this.setOrigin(origin);
        this.setDirection(direction);
        this._hitOrigin = hitOrigin;
        this._speed = 0;
        this._lastCellPostion = cc.v2(-1, -1);
        this._aliveArea = cc.rect(-2e3, -2e3, 4e3, 4e3);
        this._launched = false;
        this._startFly = false;
      };
      FlyerPopsicleLine = __decorate([ ccclass ], FlyerPopsicleLine);
      return FlyerPopsicleLine;
    }(FlyerCannon_1.default);
    exports.default = FlyerPopsicleLine;
    cc._RF.pop();
  }, {
    "../../defines/EntityID": "EntityID",
    "../EntityPrefabNodePool": "EntityPrefabNodePool",
    "./FlyerBase": "FlyerBase",
    "./FlyerCannon": "FlyerCannon"
  } ],
  FlyerScoreLabel: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "ccb9edCnmVAgbDZE56degHG", "FlyerScoreLabel");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var EntityPrefabNodePool_1 = require("../EntityPrefabNodePool");
    var FlyerBase_1 = require("./FlyerBase");
    var EntityID_1 = require("../../defines/EntityID");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var FlyerScoreLabel = function(_super) {
      __extends(FlyerScoreLabel, _super);
      function FlyerScoreLabel() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this._score = 0;
        _this._pixelPos = cc.v2(0, 0);
        _this._needObstruct = false;
        _this._autoRemoveOnFinish = false;
        return _this;
      }
      FlyerScoreLabel.create = function(grid, pixelPos, score, needObstruct, autoRemove) {
        void 0 === needObstruct && (needObstruct = false);
        void 0 === autoRemove && (autoRemove = true);
        var className = "FlyerScoreLabel";
        var prefabFileName = "match_scene/prefab/entity/flyer/FlyerScoreLabel";
        var pool = EntityPrefabNodePool_1.default.getInstance();
        var component = pool.getPrefabNodeWithFileNameAndClassName(prefabFileName, className);
        if (component) {
          component.init(grid, pixelPos, score, needObstruct, autoRemove);
          return component;
        }
        return null;
      };
      FlyerScoreLabel.prototype.init = function(grid, pixelPos, score, needObstruct, autoRemove) {
        void 0 === needObstruct && (needObstruct = false);
        _super.prototype.initFlyer.call(this, grid, FlyerBase_1.FlyerType.Score);
        this._score = score;
        var label = this._puppet.getComponent(cc.Label);
        label && (label.string = this._score.toString());
        this._pixelPos = pixelPos;
        this.setAutoRemoveOnFinish(autoRemove);
        this._needObstruct = needObstruct;
      };
      FlyerScoreLabel.prototype.getAutoRemoveOnFinish = function() {
        return this._autoRemoveOnFinish;
      };
      FlyerScoreLabel.prototype.setAutoRemoveOnFinish = function(auto) {
        this._autoRemoveOnFinish = auto;
      };
      FlyerScoreLabel.prototype.getEntityID = function() {
        return EntityID_1.EntityID.None;
      };
      FlyerScoreLabel.prototype.launch = function() {
        var _this = this;
        this.node.setPosition(this._pixelPos);
        this.getGrid().addFlyerObstructs(this);
        var duration = 1;
        var state = this.playAnimation("default");
        state && (duration = state.duration);
        var delay = cc.delayTime(duration);
        var action = cc.sequence(delay, cc.callFunc(function() {
          _this.getGrid().removeFlyerObstructs(_this);
          _this.destoryWithRecycle(true);
        }));
        this.runAction(action);
      };
      FlyerScoreLabel = __decorate([ ccclass ], FlyerScoreLabel);
      return FlyerScoreLabel;
    }(FlyerBase_1.default);
    exports.default = FlyerScoreLabel;
    cc._RF.pop();
  }, {
    "../../defines/EntityID": "EntityID",
    "../EntityPrefabNodePool": "EntityPrefabNodePool",
    "./FlyerBase": "FlyerBase"
  } ],
  FlyerScore: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "950b4EUbeZGdbtKppZaKeb5", "FlyerScore");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var EntityPrefabNodePool_1 = require("../EntityPrefabNodePool");
    var FlyerBase_1 = require("./FlyerBase");
    var EntityID_1 = require("../../defines/EntityID");
    var CurveToAction_1 = require("../../../../extend/action/CurveToAction");
    var GameMath_1 = require("../../../../extend/utils/GameMath");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var FlyerScore = function(_super) {
      __extends(FlyerScore, _super);
      function FlyerScore() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this._score = 0;
        _this._pixelPos = cc.v2(0, 0);
        _this._needObstruct = false;
        _this._autoRemoveOnFinish = false;
        return _this;
      }
      FlyerScore.create = function(grid, pixelPos, score, needObstruct, autoRemove) {
        void 0 === needObstruct && (needObstruct = false);
        void 0 === autoRemove && (autoRemove = true);
        var className = "FlyerScore";
        var prefabFileName = "match_scene/prefab/entity/flyer/FlyerScore";
        var pool = EntityPrefabNodePool_1.default.getInstance();
        var component = pool.getPrefabNodeWithFileNameAndClassName(prefabFileName, className);
        if (component) {
          component.init(grid, pixelPos, score, needObstruct, autoRemove);
          return component;
        }
        return null;
      };
      FlyerScore.prototype.init = function(grid, pixelPos, score, needObstruct, autoRemove) {
        void 0 === needObstruct && (needObstruct = false);
        _super.prototype.initFlyer.call(this, grid, FlyerBase_1.FlyerType.Score);
        this._score = score;
        this._pixelPos = pixelPos;
        this.setAutoRemoveOnFinish(autoRemove);
        this._needObstruct = needObstruct;
      };
      FlyerScore.prototype.getAutoRemoveOnFinish = function() {
        return this._autoRemoveOnFinish;
      };
      FlyerScore.prototype.setAutoRemoveOnFinish = function(auto) {
        this._autoRemoveOnFinish = auto;
      };
      FlyerScore.prototype.getEntityID = function() {
        return EntityID_1.EntityID.None;
      };
      FlyerScore.prototype.launch = function() {
        var _this = this;
        this.getGrid().addFlyerObstructs(this);
        this.node.setPosition(this._pixelPos);
        var speed = 800;
        var scoreWorldPos = this.getGrid().getWorldPosForScore();
        var targetPos = this.node.parent.convertToNodeSpaceAR(scoreWorldPos);
        var startPos = this.node.getPosition();
        var duration = GameMath_1.default.getDistance(startPos, targetPos) / speed;
        var move = cc.spawn(CurveToAction_1.default.create(duration, startPos, targetPos), cc.fadeTo(duration, 92));
        var action = cc.sequence(move, cc.callFunc(function() {
          _this.getGrid().updateScoreBarUIWithDelta(_this._score);
          _this.getGrid().removeFlyerObstructs(_this);
          _this.destoryWithRecycle(true);
        }));
        this.runAction(action);
      };
      FlyerScore = __decorate([ ccclass ], FlyerScore);
      return FlyerScore;
    }(FlyerBase_1.default);
    exports.default = FlyerScore;
    cc._RF.pop();
  }, {
    "../../../../extend/action/CurveToAction": "CurveToAction",
    "../../../../extend/utils/GameMath": "GameMath",
    "../../defines/EntityID": "EntityID",
    "../EntityPrefabNodePool": "EntityPrefabNodePool",
    "./FlyerBase": "FlyerBase"
  } ],
  FrameBase: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "cc995CYwINLRLzKqQ+127S7", "FrameBase");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var EntityID_1 = require("../../defines/EntityID");
    var CellBase_1 = require("../cell/CellBase");
    var EntityBase_1 = require("../EntityBase");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var FrameBase = function(_super) {
      __extends(FrameBase, _super);
      function FrameBase() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      FrameBase.prototype.getPositionCode = function(pos) {
        var bitOffsets = [ cc.v2(1, 0), cc.v2(1, 1), cc.v2(0, 1), cc.v2(-1, 1), cc.v2(-1, 0), cc.v2(-1, -1), cc.v2(0, -1), cc.v2(1, -1) ];
        var cell = this.getGrid().getCellAtLogicalPos(pos);
        if (cell && cell.getCellType() != CellBase_1.CellType.MovablePlate) return 0;
        var code = 0;
        var bitValue = 1;
        for (var _i = 0, bitOffsets_1 = bitOffsets; _i < bitOffsets_1.length; _i++) {
          var offset = bitOffsets_1[_i];
          var checkPos = pos.add(offset);
          var cell_1 = this.getGrid().getCellAtLogicalPos(checkPos);
          cell_1 && cell_1.getCellType() != CellBase_1.CellType.MovablePlate && (code += bitValue);
          bitValue *= 2;
        }
        return code;
      };
      FrameBase.prototype.initFrame = function(grid) {
        _super.prototype.initEntity.call(this, grid, EntityID_1.EntityType.Frame, 1, 1);
      };
      FrameBase = __decorate([ ccclass ], FrameBase);
      return FrameBase;
    }(EntityBase_1.default);
    exports.default = FrameBase;
    cc._RF.pop();
  }, {
    "../../defines/EntityID": "EntityID",
    "../EntityBase": "EntityBase",
    "../cell/CellBase": "CellBase"
  } ],
  FrameNormal: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "06a86PRHddCb73qvrO4P0O+", "FrameNormal");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var CollectionID_1 = require("../../defines/CollectionID");
    var EntityID_1 = require("../../defines/EntityID");
    var FrameBase_1 = require("./FrameBase");
    var EntityPrefabNodePool_1 = require("../EntityPrefabNodePool");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var FrameNormal = function(_super) {
      __extends(FrameNormal, _super);
      function FrameNormal() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      FrameNormal.prototype.getCollectionID = function() {
        return CollectionID_1.CollectionID.Frame;
      };
      FrameNormal.prototype.getEntityID = function() {
        return EntityID_1.EntityID.Frame;
      };
      FrameNormal.prototype.setLogicalPos = function(pos) {
        _super.prototype.setLogicalPos.call(this, pos);
        var code = this.getPositionCode(this.getLogicalPos());
        var frameName = "01101";
        switch (code) {
         case 128:
          frameName = "00101";
          break;

         case 2:
          frameName = "00102";
          break;

         case 8:
          frameName = "00103";
          break;

         case 32:
          frameName = "00104";
          break;

         case 160:
          frameName = "00201";
          break;

         case 130:
          frameName = "00202";
          break;

         case 10:
          frameName = "00203";
          break;

         case 40:
          frameName = "00204";
          break;

         case 136:
          frameName = "00205";
          break;

         case 34:
          frameName = "00206";
          break;

         case 162:
          frameName = "00301";
          break;

         case 138:
          frameName = "00302";
          break;

         case 42:
          frameName = "00303";
          break;

         case 168:
          frameName = "00304";
          break;

         case 170:
          frameName = "00401";
          break;

         case 64:
         case 96:
         case 192:
         case 224:
          frameName = "00501";
          break;

         case 1:
         case 3:
         case 129:
         case 131:
          frameName = "00502";
          break;

         case 4:
         case 6:
         case 12:
         case 14:
          frameName = "00503";
          break;

         case 16:
         case 24:
         case 56:
         case 48:
          frameName = "00504";
          break;

         case 66:
         case 98:
         case 194:
         case 226:
          frameName = "00601";
          break;

         case 72:
         case 104:
         case 200:
         case 232:
          frameName = "00602";
          break;

         case 9:
         case 11:
         case 137:
         case 139:
          frameName = "00603";
          break;

         case 33:
         case 35:
         case 161:
         case 163:
          frameName = "00604";
          break;

         case 36:
         case 38:
         case 44:
         case 46:
          frameName = "00605";
          break;

         case 132:
         case 134:
         case 140:
         case 142:
          frameName = "00606";
          break;

         case 144:
         case 152:
         case 176:
         case 184:
          frameName = "00607";
          break;

         case 18:
         case 26:
         case 50:
         case 58:
          frameName = "00608";
          break;

         case 74:
         case 106:
         case 202:
         case 234:
          frameName = "00701";
          break;

         case 41:
         case 43:
         case 169:
         case 171:
          frameName = "00702";
          break;

         case 164:
         case 166:
         case 172:
         case 174:
          frameName = "00703";
          break;

         case 146:
         case 154:
         case 178:
         case 186:
          frameName = "00704";
          break;

         case 65:
         case 67:
         case 97:
         case 99:
         case 193:
         case 195:
         case 225:
         case 227:
          frameName = "00801";
          break;

         case 5:
         case 7:
         case 13:
         case 15:
         case 133:
         case 135:
         case 141:
         case 143:
          frameName = "00802";
          break;

         case 20:
         case 22:
         case 28:
         case 30:
         case 52:
         case 54:
         case 60:
         case 62:
          frameName = "00803";
          break;

         case 80:
         case 88:
         case 112:
         case 120:
         case 208:
         case 216:
         case 240:
         case 248:
          frameName = "00804";
          break;

         case 68:
         case 70:
         case 76:
         case 78:
         case 100:
         case 102:
         case 108:
         case 110:
         case 196:
         case 198:
         case 204:
         case 206:
         case 228:
         case 230:
         case 236:
         case 238:
          frameName = "00805";
          break;

         case 17:
         case 19:
         case 25:
         case 27:
         case 49:
         case 51:
         case 57:
         case 59:
         case 145:
         case 147:
         case 153:
         case 155:
         case 177:
         case 179:
         case 185:
         case 187:
          frameName = "00806";
          break;

         case 73:
         case 75:
         case 105:
         case 107:
         case 201:
         case 203:
         case 233:
         case 235:
          frameName = "00901";
          break;

         case 37:
         case 39:
         case 45:
         case 47:
         case 165:
         case 167:
         case 173:
         case 175:
          frameName = "00902";
          break;

         case 148:
         case 150:
         case 156:
         case 158:
         case 180:
         case 182:
         case 188:
         case 190:
          frameName = "00903";
          break;

         case 82:
         case 90:
         case 114:
         case 122:
         case 210:
         case 218:
         case 242:
         case 250:
          frameName = "00904";
          break;

         case 69:
         case 71:
         case 77:
         case 79:
         case 101:
         case 103:
         case 109:
         case 111:
         case 197:
         case 199:
         case 205:
         case 207:
         case 229:
         case 231:
         case 237:
         case 239:
          frameName = "01001";
          break;

         case 21:
         case 23:
         case 29:
         case 31:
         case 53:
         case 55:
         case 61:
         case 63:
         case 149:
         case 151:
         case 157:
         case 159:
         case 181:
         case 183:
         case 189:
         case 191:
          frameName = "01002";
          break;

         case 84:
         case 86:
         case 92:
         case 94:
         case 116:
         case 118:
         case 124:
         case 126:
         case 212:
         case 214:
         case 220:
         case 222:
         case 244:
         case 246:
         case 252:
         case 254:
          frameName = "01003";
          break;

         case 81:
         case 83:
         case 89:
         case 91:
         case 113:
         case 115:
         case 121:
         case 123:
         case 209:
         case 211:
         case 217:
         case 219:
         case 241:
         case 243:
         case 249:
         case 251:
          frameName = "01004";
          break;

         case 85:
         case 87:
         case 93:
         case 95:
         case 117:
         case 119:
         case 125:
         case 127:
         case 213:
         case 215:
         case 221:
         case 223:
         case 245:
         case 247:
         case 253:
         case 255:
          frameName = "01101";
        }
        frameName = "match_scene/texture/entities/frames/" + frameName;
        this.setPuppetSpriteFrameName(frameName);
        this.setVisible(0 != code);
      };
      FrameNormal.create = function(grid) {
        var className = "FrameNormal";
        var prefabFileName = "match_scene/prefab/entity/frame/FrameNormal";
        var pool = EntityPrefabNodePool_1.default.getInstance();
        var component = pool.getPrefabNodeWithFileNameAndClassName(prefabFileName, className);
        if (component) {
          component.init(grid);
          return component;
        }
        return null;
      };
      FrameNormal.prototype.init = function(grid) {
        _super.prototype.initFrame.call(this, grid);
      };
      FrameNormal = __decorate([ ccclass ], FrameNormal);
      return FrameNormal;
    }(FrameBase_1.default);
    exports.default = FrameNormal;
    cc._RF.pop();
  }, {
    "../../defines/CollectionID": "CollectionID",
    "../../defines/EntityID": "EntityID",
    "../EntityPrefabNodePool": "EntityPrefabNodePool",
    "./FrameBase": "FrameBase"
  } ],
  GameConfig: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "67ba4c5uy9PiYGFYEH+KkdI", "GameConfig");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.DebugMatchType = void 0;
    var DebugMatchType;
    (function(DebugMatchType) {
      DebugMatchType[DebugMatchType["None"] = 0] = "None";
      DebugMatchType[DebugMatchType["Order"] = 1] = "Order";
      DebugMatchType[DebugMatchType["Grass"] = 2] = "Grass";
      DebugMatchType[DebugMatchType["Popsicle"] = 3] = "Popsicle";
      DebugMatchType[DebugMatchType["Path"] = 4] = "Path";
    })(DebugMatchType = exports.DebugMatchType || (exports.DebugMatchType = {}));
    var GameConfig = function() {
      function GameConfig() {}
      Object.defineProperty(GameConfig, "LoginSdk", {
        get: function() {
          return window.hasOwnProperty("wx") ? 2 : 1;
        },
        enumerable: false,
        configurable: true
      });
      GameConfig.IsDebug = false;
      GameConfig.IsPublishForPlanners = false;
      GameConfig.GameVer = 0xf29635eb68;
      GameConfig.IsVerify = false;
      GameConfig.EnableAutoPilot = false;
      GameConfig.DebugMatchType = DebugMatchType.None;
      GameConfig.LANGUAGE = "cn";
      GameConfig.LoginModel = 5;
      GameConfig.ConfigDir = "";
      GameConfig.OnStage = true;
      GameConfig.DigRedPacket = true;
      GameConfig.Platform = {
        1: {
          HttpSerever: "http://192.168.1.124:6001/Platform101/server/getserver.php",
          UserFrom: "99001",
          PlatformId: "99",
          Channel: "9901",
          ConfigUrl: "",
          LoginVersion: 5114
        },
        2: {
          HttpSerever: "https://lbvip1.bcpgame.com:3155/ttptp/server/getserver.php",
          UserFrom: "10191001",
          PlatformId: "10191",
          Channel: "1019101",
          ConfigUrl: "{s0}.zip",
          LoginVersion: 5114
        }
      };
      GameConfig.shareImgDomain = "https://respet.bcpgame.com/petgame/share";
      GameConfig.giftImgDomain = "https://respet.bcpgame.com/petgame/source/gift";
      GameConfig.PayEnv = 0;
      GameConfig.OfferId = "1450017098";
      GameConfig.ZoneId = 1;
      return GameConfig;
    }();
    exports.default = GameConfig;
    cc._RF.pop();
  }, {} ],
  GameCongratulationPanel: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "6cd46dy3vxPHo9chPdgluU9", "GameCongratulationPanel");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var IGame_1 = require("../../../../base/IGame");
    var IdentifierManager_1 = require("../../defines/IdentifierManager");
    var GameSceneBase_1 = require("../../GameSceneBase");
    var GameResultBasePanel_1 = require("./GameResultBasePanel");
    var GameConfig_1 = require("../../../../define/GameConfig");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var GameCongratulationPanel = function(_super) {
      __extends(GameCongratulationPanel, _super);
      function GameCongratulationPanel() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.rewardButtonLabel = null;
        _this.cancelButtonLable = null;
        _this.giveUpButton = null;
        _this.terminateButton = null;
        _this._rewardType = GameSceneBase_1.MatchGameEndRewardType.Normal;
        return _this;
      }
      GameCongratulationPanel.prototype.sendMarkID = function() {
        this._gameScene.reportStepCongratulation();
      };
      GameCongratulationPanel.prototype.playSoundEffect = function() {
        IGame_1.default.stopBGM();
        IGame_1.default.playAudio(IdentifierManager_1.default.getInstance().getMatchAudioFilePath("levelcomplete"));
        IGame_1.default.playAudio(IdentifierManager_1.default.getInstance().getMatchAudioFilePath("voice_level_complete2"));
      };
      GameCongratulationPanel.prototype.getExtraRewardType = function() {
        var extraRewardType = GameResultBasePanel_1.GameEndExtraRewardType.None;
        var uiData = this._gameScene.getEndUIData();
        uiData && (extraRewardType = uiData.succeedRewardType);
        GameConfig_1.default.IsVerify && (extraRewardType = GameResultBasePanel_1.GameEndExtraRewardType.None);
        return extraRewardType;
      };
      GameCongratulationPanel.prototype.initSupplyItem = function() {
        var extraRewardType = this.getExtraRewardType();
        this._rewardType = GameSceneBase_1.MatchGameEndRewardType.Normal;
        switch (extraRewardType) {
         case GameResultBasePanel_1.GameEndExtraRewardType.ShareForReward:
          this._rewardType = GameSceneBase_1.MatchGameEndRewardType.None;
        }
        _super.prototype.initSupplyItem.call(this);
      };
      GameCongratulationPanel.prototype.initButtons = function() {
        _super.prototype.initButtons.call(this);
        this.giveUpButton.on("touchend", this.onCancelButtonClicked, this);
        this.terminateButton.on("touchend", this.onTerminateButtonClicked, this);
        this.terminateButton.active = this._gameScene.getLevel() >= 5;
        this.rewardButton.active = false;
        this.giveUpButton.active = false;
      };
      GameCongratulationPanel.prototype.onConfirmButtonClicked = function(event) {
        this.reportResult(GameSceneBase_1.MatchGameEndType.Complete, this._rewardType, false);
      };
      GameCongratulationPanel.prototype.onCancelButtonClicked = function(event) {
        this.reportResult(GameSceneBase_1.MatchGameEndType.Complete, this._rewardType, false);
      };
      GameCongratulationPanel.prototype.onTerminateButtonClicked = function(event) {
        this.reportResult(GameSceneBase_1.MatchGameEndType.Complete, this._rewardType, false);
      };
      GameCongratulationPanel.prototype.onReportResultRespone = function(data) {
        console.log("GameCongratulationPanel.onReportResultRespone");
        _super.prototype.onReportResultRespone.call(this, data);
        this.terminateButton.active = false;
        switch (this._rewardType) {
         case GameSceneBase_1.MatchGameEndRewardType.None:
          this.onRewardFlyToBackpackComplete();
          break;

         case GameSceneBase_1.MatchGameEndRewardType.Normal:
         case GameSceneBase_1.MatchGameEndRewardType.Doubled:
          this.rewardFlyToBackpack();
        }
      };
      GameCongratulationPanel.prototype.rewardFlyToBackpack = function() {
        _super.prototype.rewardFlyToBackpack.call(this);
        this.giveUpButton.active = false;
      };
      GameCongratulationPanel.prototype.onRewardFlyToBackpackComplete = function() {};
      __decorate([ property(cc.Label) ], GameCongratulationPanel.prototype, "rewardButtonLabel", void 0);
      __decorate([ property(cc.Label) ], GameCongratulationPanel.prototype, "cancelButtonLable", void 0);
      __decorate([ property(cc.Node) ], GameCongratulationPanel.prototype, "giveUpButton", void 0);
      __decorate([ property(cc.Node) ], GameCongratulationPanel.prototype, "terminateButton", void 0);
      GameCongratulationPanel = __decorate([ ccclass ], GameCongratulationPanel);
      return GameCongratulationPanel;
    }(GameResultBasePanel_1.default);
    exports.default = GameCongratulationPanel;
    cc._RF.pop();
  }, {
    "../../../../base/IGame": "IGame",
    "../../../../define/GameConfig": "GameConfig",
    "../../GameSceneBase": "GameSceneBase",
    "../../defines/IdentifierManager": "IdentifierManager",
    "./GameResultBasePanel": "GameResultBasePanel"
  } ],
  GameCurrencyType: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "9af2dB9R/NEJYu79T1rK1XT", "GameCurrencyType");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.GameCurrencyType = void 0;
    var GameCurrencyType;
    (function(GameCurrencyType) {
      GameCurrencyType[GameCurrencyType["NoneType"] = -2] = "NoneType";
      GameCurrencyType[GameCurrencyType["NeedUseDiamond"] = -1] = "NeedUseDiamond";
      GameCurrencyType[GameCurrencyType["NeedBuyDiamond"] = 0] = "NeedBuyDiamond";
      GameCurrencyType[GameCurrencyType["CurrencyBegin"] = 1] = "CurrencyBegin";
      GameCurrencyType[GameCurrencyType["DiamondCoin"] = 1] = "DiamondCoin";
      GameCurrencyType[GameCurrencyType["StarCoin"] = 2] = "StarCoin";
      GameCurrencyType[GameCurrencyType["GoldCoin"] = 3] = "GoldCoin";
      GameCurrencyType[GameCurrencyType["LifeHeart"] = 4] = "LifeHeart";
      GameCurrencyType[GameCurrencyType["VirtualCoin"] = 5] = "VirtualCoin";
      GameCurrencyType[GameCurrencyType["RedPacket"] = 7] = "RedPacket";
      GameCurrencyType[GameCurrencyType["CurrencyEnd"] = 7] = "CurrencyEnd";
      GameCurrencyType[GameCurrencyType["ExtraStep5"] = 10010] = "ExtraStep5";
      GameCurrencyType[GameCurrencyType["ExtraStep1"] = 10011] = "ExtraStep1";
      GameCurrencyType[GameCurrencyType["ExtraStep3"] = 10012] = "ExtraStep3";
      GameCurrencyType[GameCurrencyType["ExtraStep2"] = 10013] = "ExtraStep2";
      GameCurrencyType[GameCurrencyType["BeginLine"] = 10020] = "BeginLine";
      GameCurrencyType[GameCurrencyType["BeginRange"] = 10030] = "BeginRange";
      GameCurrencyType[GameCurrencyType["BeginRainbow"] = 10040] = "BeginRainbow";
      GameCurrencyType[GameCurrencyType["TimeLimitedBeginLine"] = 10021] = "TimeLimitedBeginLine";
      GameCurrencyType[GameCurrencyType["TimeLimitedBeginRange"] = 10031] = "TimeLimitedBeginRange";
      GameCurrencyType[GameCurrencyType["TimeLimitedBeginRainbow"] = 10041] = "TimeLimitedBeginRainbow";
      GameCurrencyType[GameCurrencyType["InfiniteBeginLine"] = 10022] = "InfiniteBeginLine";
      GameCurrencyType[GameCurrencyType["InfiniteBeginRange"] = 10032] = "InfiniteBeginRange";
      GameCurrencyType[GameCurrencyType["InfiniteBeginRainbow"] = 10042] = "InfiniteBeginRainbow";
      GameCurrencyType[GameCurrencyType["OneRoundBeginLine"] = 10023] = "OneRoundBeginLine";
      GameCurrencyType[GameCurrencyType["OneRoundBeginRange"] = 10033] = "OneRoundBeginRange";
      GameCurrencyType[GameCurrencyType["OneRoundBeginRainbow"] = 10043] = "OneRoundBeginRainbow";
      GameCurrencyType[GameCurrencyType["LuckyWheelRow"] = 13020] = "LuckyWheelRow";
      GameCurrencyType[GameCurrencyType["LuckyWheelColumn"] = 13030] = "LuckyWheelColumn";
      GameCurrencyType[GameCurrencyType["LuckyWheelCross"] = 13040] = "LuckyWheelCross";
      GameCurrencyType[GameCurrencyType["LuckyWheelRange"] = 13050] = "LuckyWheelRange";
      GameCurrencyType[GameCurrencyType["LuckyWheelMissile_Row"] = 13060] = "LuckyWheelMissile_Row";
      GameCurrencyType[GameCurrencyType["LuckyWheelMissile_Column"] = 13070] = "LuckyWheelMissile_Column";
      GameCurrencyType[GameCurrencyType["LuckyWheelMissile_Cross"] = 13080] = "LuckyWheelMissile_Cross";
      GameCurrencyType[GameCurrencyType["LuckyWheelMissile_Range"] = 13090] = "LuckyWheelMissile_Range";
      GameCurrencyType[GameCurrencyType["LuckyWheelRow_Cross"] = 13100] = "LuckyWheelRow_Cross";
      GameCurrencyType[GameCurrencyType["LuckyWheelColumn_Cross"] = 13110] = "LuckyWheelColumn_Cross";
      GameCurrencyType[GameCurrencyType["LuckyWheelRow_Range"] = 13120] = "LuckyWheelRow_Range";
      GameCurrencyType[GameCurrencyType["LuckyWheelColumn_Range"] = 13130] = "LuckyWheelColumn_Range";
      GameCurrencyType[GameCurrencyType["LuckyWheelMissile_Row_Column"] = 13140] = "LuckyWheelMissile_Row_Column";
      GameCurrencyType[GameCurrencyType["LuckyWheelMissile_Rainbow"] = 13150] = "LuckyWheelMissile_Rainbow";
      GameCurrencyType[GameCurrencyType["LuckyWheelMissile_Row_Cross"] = 13160] = "LuckyWheelMissile_Row_Cross";
      GameCurrencyType[GameCurrencyType["LuckyWheelMissile_Column_Range"] = 13170] = "LuckyWheelMissile_Column_Range";
      GameCurrencyType[GameCurrencyType["AidHammer"] = 10050] = "AidHammer";
      GameCurrencyType[GameCurrencyType["AidBomb"] = 10060] = "AidBomb";
      GameCurrencyType[GameCurrencyType["AidSwap"] = 10070] = "AidSwap";
      GameCurrencyType[GameCurrencyType["TimeLimitedAidHammer"] = 10051] = "TimeLimitedAidHammer";
      GameCurrencyType[GameCurrencyType["TimeLimitedAidBomb"] = 10061] = "TimeLimitedAidBomb";
      GameCurrencyType[GameCurrencyType["TimeLimitedAidSwap"] = 10071] = "TimeLimitedAidSwap";
      GameCurrencyType[GameCurrencyType["LifeAddOnePoint"] = 10080] = "LifeAddOnePoint";
      GameCurrencyType[GameCurrencyType["LifeEverOneHour"] = 10090] = "LifeEverOneHour";
      GameCurrencyType[GameCurrencyType["LifeEverTwoHour"] = 10100] = "LifeEverTwoHour";
      GameCurrencyType[GameCurrencyType["TrainFood"] = 10110] = "TrainFood";
      GameCurrencyType[GameCurrencyType["TrainSoap"] = 10120] = "TrainSoap";
      GameCurrencyType[GameCurrencyType["TrainEyepatch"] = 10130] = "TrainEyepatch";
      GameCurrencyType[GameCurrencyType["TrainHoe"] = 10140] = "TrainHoe";
      GameCurrencyType[GameCurrencyType["AddSpeed"] = 10150] = "AddSpeed";
      GameCurrencyType[GameCurrencyType["PetKeJi"] = 20010] = "PetKeJi";
    })(GameCurrencyType = exports.GameCurrencyType || (exports.GameCurrencyType = {}));
    cc._RF.pop();
  }, {} ],
  GameEndItem: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "95fb2vG6YRJSLTjcxOHgRly", "GameEndItem");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var GameCurrencyType_1 = require("../../../../define/GameCurrencyType");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var GameEndItem = function(_super) {
      __extends(GameEndItem, _super);
      function GameEndItem() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.nameLabel = null;
        _this.numLabel = null;
        _this.ico = null;
        _this._itemID = GameCurrencyType_1.GameCurrencyType.NoneType;
        return _this;
      }
      GameEndItem.prototype.getItemID = function() {
        return this._itemID;
      };
      GameEndItem.prototype.setItemID = function(itemID) {
        this._itemID = itemID;
      };
      GameEndItem.prototype.start = function() {};
      GameEndItem.prototype.onDestroy = function() {};
      __decorate([ property(cc.Label) ], GameEndItem.prototype, "nameLabel", void 0);
      __decorate([ property(cc.Label) ], GameEndItem.prototype, "numLabel", void 0);
      __decorate([ property(cc.Sprite) ], GameEndItem.prototype, "ico", void 0);
      GameEndItem = __decorate([ ccclass ], GameEndItem);
      return GameEndItem;
    }(cc.Component);
    exports.default = GameEndItem;
    cc._RF.pop();
  }, {
    "../../../../define/GameCurrencyType": "GameCurrencyType"
  } ],
  GameMath: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "0577afOdYxEt4TsUAJscPYq", "GameMath");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Pair_1 = require("../../base/Pair");
    var FencePos_1 = require("../../scenes/match/entity/fence/FencePos");
    var ItemBombBase_1 = require("../../scenes/match/entity/item/color/bomb/ItemBombBase");
    var GameMath = function() {
      function GameMath() {}
      GameMath.getMergePos = function(positionList, baseStepList) {
        var positions = [];
        for (var i = 0; i < positionList.length; i++) {
          var tmpPos = new Pair_1.Pair(positionList[i], baseStepList[i]);
          positions.push(tmpPos);
        }
        positions.sort(function(infoA, infoB) {
          return infoA.first.y == infoB.first.y ? infoA.first.x < infoB.first.x ? -1 : 1 : infoA.first.y < infoB.first.y ? -1 : 1;
        });
        var minStepPosIndex = -1;
        var minStepCount = 0;
        var maxLinkedPosCount = 0;
        for (var i = 0; i < positions.length; i++) {
          var rootPos = positions[i].first;
          var stepCount = 0;
          for (var _i = 0, positions_1 = positions; _i < positions_1.length; _i++) {
            var info = positions_1[_i];
            stepCount += Math.abs(info.first.x - rootPos.x) + Math.abs(info.first.y - rootPos.y);
          }
          stepCount += positions[i].second;
          var linkedPosSet = [];
          var horizontalOffsets = [ cc.v2(1, 0), cc.v2(-1, 0) ];
          var horizontalLinkedPos = [ rootPos ];
          for (var j = 0; j < horizontalLinkedPos.length; j++) {
            var rootPos_1 = horizontalLinkedPos[j];
            for (var _a = 0, horizontalOffsets_1 = horizontalOffsets; _a < horizontalOffsets_1.length; _a++) {
              var offset = horizontalOffsets_1[_a];
              var checkPos = rootPos_1.add(offset);
              if (-1 != GameMath.indexOf(horizontalLinkedPos, checkPos)) continue;
              var hasCheckPos = false;
              for (var _b = 0, positions_2 = positions; _b < positions_2.length; _b++) {
                var pos = positions_2[_b];
                if (pos.first.equals(checkPos)) {
                  hasCheckPos = true;
                  break;
                }
              }
              hasCheckPos && horizontalLinkedPos.push(checkPos);
            }
          }
          for (var _c = 0, horizontalLinkedPos_1 = horizontalLinkedPos; _c < horizontalLinkedPos_1.length; _c++) {
            var hLinkPos = horizontalLinkedPos_1[_c];
            -1 != GameMath.indexOf(linkedPosSet, hLinkPos) && linkedPosSet.push(hLinkPos);
          }
          var verticalOffsets = [ cc.v2(0, -1), cc.v2(0, 1) ];
          var verticalLinkedPos = [ rootPos ];
          for (var j = 0; j < verticalLinkedPos.length; j++) {
            var rootPos_2 = verticalLinkedPos[j];
            for (var _d = 0, verticalOffsets_1 = verticalOffsets; _d < verticalOffsets_1.length; _d++) {
              var offset = verticalOffsets_1[_d];
              var checkPos = rootPos_2.add(offset);
              if (-1 != GameMath.indexOf(verticalLinkedPos, checkPos)) continue;
              var hasCheckPos = false;
              for (var _e = 0, positions_3 = positions; _e < positions_3.length; _e++) {
                var pos = positions_3[_e];
                if (pos.first.equals(checkPos)) {
                  hasCheckPos = true;
                  break;
                }
              }
              hasCheckPos && verticalLinkedPos.push(checkPos);
            }
          }
          for (var _f = 0, verticalLinkedPos_1 = verticalLinkedPos; _f < verticalLinkedPos_1.length; _f++) {
            var vLinkPos = verticalLinkedPos_1[_f];
            -1 != GameMath.indexOf(linkedPosSet, vLinkPos) && linkedPosSet.push(vLinkPos);
          }
          var linkedPosCount = linkedPosSet.length;
          var isMin = false;
          -1 == minStepPosIndex ? isMin = true : stepCount < minStepCount ? isMin = true : stepCount == minStepCount && linkedPosCount > maxLinkedPosCount && (isMin = true);
          if (isMin) {
            minStepPosIndex = i;
            minStepCount = stepCount;
            maxLinkedPosCount = linkedPosCount;
          }
        }
        return positions[minStepPosIndex].first;
      };
      GameMath.getCreateBombType = function(positions) {
        var bombType = ItemBombBase_1.ItemBombType.None;
        var left = -1;
        var right = -1;
        var bottom = -1;
        var top = -1;
        for (var _i = 0, positions_4 = positions; _i < positions_4.length; _i++) {
          var pos = positions_4[_i];
          (-1 == left || pos.x < left) && (left = pos.x);
          (-1 == right || pos.x > right) && (right = pos.x);
          (-1 == bottom || pos.y < bottom) && (bottom = pos.y);
          (-1 == top || pos.y > top) && (top = pos.y);
        }
        var width = right - left + 1;
        var height = top - bottom + 1;
        var solidWidth = 0;
        var solidHeight = 0;
        var origin = cc.v2(left, bottom);
        for (var column = 0; column < width; column++) {
          var solidCount = 0;
          for (var row = 0; row < height; row++) -1 != GameMath.indexOf(positions, origin.add(cc.v2(column, row))) && solidCount++;
          solidCount > solidHeight && (solidHeight = solidCount);
        }
        for (var row = 0; row < height; row++) {
          var solidCount = 0;
          for (var column = 0; column < width; column++) -1 != GameMath.indexOf(positions, origin.add(cc.v2(column, row))) && solidCount++;
          solidCount > solidWidth && (solidWidth = solidCount);
        }
        if (solidWidth >= 5 || solidHeight >= 5) bombType = ItemBombBase_1.ItemBombType.Rainbow; else if (solidWidth >= 3 && solidHeight >= 3) {
          var fullSideCount = 0;
          var bottomIsFull = true;
          for (var i = 0; i < solidWidth; i++) {
            var checkPos = cc.v2(left + i, bottom);
            if (-1 == GameMath.indexOf(positions, checkPos)) {
              bottomIsFull = false;
              break;
            }
          }
          bottomIsFull && (fullSideCount += 1);
          var topIsFull = true;
          for (var i = 0; i < solidWidth; i++) {
            var checkPos = cc.v2(left + i, top);
            if (-1 == GameMath.indexOf(positions, checkPos)) {
              topIsFull = false;
              break;
            }
          }
          topIsFull && (fullSideCount += 1);
          var leftIsFull = true;
          for (var i = 0; i < solidHeight; i++) {
            var checkPos = cc.v2(left, bottom + i);
            -1 == GameMath.indexOf(positions, checkPos) && (leftIsFull = false);
          }
          leftIsFull && (fullSideCount += 1);
          var rightIsFull = true;
          for (var i = 0; i < solidHeight; i++) {
            var checkPos = cc.v2(right, bottom + i);
            -1 == GameMath.indexOf(positions, checkPos) && (rightIsFull = false);
          }
          rightIsFull && (fullSideCount += 1);
          bombType = fullSideCount >= 2 ? ItemBombBase_1.ItemBombType.Range : ItemBombBase_1.ItemBombType.Cross;
        } else solidWidth >= 4 || solidHeight >= 4 ? solidHeight >= 4 ? bombType = ItemBombBase_1.ItemBombType.Row : solidWidth >= 4 && (bombType = ItemBombBase_1.ItemBombType.Column) : bombType = solidWidth >= 2 && solidHeight >= 2 ? ItemBombBase_1.ItemBombType.Butterfly : ItemBombBase_1.ItemBombType.None;
        return bombType;
      };
      GameMath.isValidMatchPos = function(checkPositions, pos) {
        var sameColorNeighbourCount = 0;
        var neighbourOffsets = [ cc.v2(1, 0), cc.v2(-1, 0), cc.v2(0, 1), cc.v2(0, -1) ];
        for (var _i = 0, neighbourOffsets_1 = neighbourOffsets; _i < neighbourOffsets_1.length; _i++) {
          var offset = neighbourOffsets_1[_i];
          var checkPos = pos.add(offset);
          -1 != GameMath.indexOf(checkPositions, checkPos) && sameColorNeighbourCount++;
        }
        if (sameColorNeighbourCount >= 2) return true;
        var horizontalOffsets = [ cc.v2(1, 0), cc.v2(-1, 0) ];
        var horizontalConnectCount = 1;
        for (var _a = 0, horizontalOffsets_2 = horizontalOffsets; _a < horizontalOffsets_2.length; _a++) {
          var offset = horizontalOffsets_2[_a];
          var checkPos = pos.clone();
          while (1) {
            checkPos.addSelf(offset);
            if (-1 == GameMath.indexOf(checkPositions, checkPos)) break;
            horizontalConnectCount += 1;
          }
        }
        if (horizontalConnectCount >= 3) return true;
        var verticalOffsets = [ cc.v2(0, 1), cc.v2(0, -1) ];
        var verticalConnectCount = 1;
        for (var _b = 0, verticalOffsets_2 = verticalOffsets; _b < verticalOffsets_2.length; _b++) {
          var offset = verticalOffsets_2[_b];
          var checkPos = pos.clone();
          while (1) {
            checkPos.addSelf(offset);
            if (-1 == GameMath.indexOf(checkPositions, checkPos)) break;
            verticalConnectCount += 1;
          }
        }
        if (verticalConnectCount >= 3) return true;
        return false;
      };
      GameMath.filterInvalidMathPositions = function(linkedPos) {
        linkedPos.length < 3 && GameMath.clearArray(linkedPos);
        while (1) {
          var invalidIndex = -1;
          for (var index = 0; index < linkedPos.length; index++) {
            var checkPos = linkedPos[index];
            if (!this.isValidMatchPos(linkedPos, checkPos)) {
              invalidIndex = index;
              break;
            }
          }
          if (-1 == invalidIndex) break;
          linkedPos.splice(invalidIndex, 1);
        }
        linkedPos.length < 3 && GameMath.clearArray(linkedPos);
      };
      GameMath.enumerateCirclePos = function(origin, radius) {
        return this.enumerateRingPos(origin, 0, radius);
      };
      GameMath.enumerateRingPos = function(origin, innerRadius, outerRadius) {
        var result = [];
        for (var rowDelta = -outerRadius; rowDelta <= outerRadius; rowDelta++) for (var columnDelta = -outerRadius; columnDelta <= outerRadius; columnDelta++) {
          var step = Math.abs(rowDelta) + Math.abs(columnDelta);
          step <= outerRadius && step >= innerRadius && result.push(origin.add(cc.v2(columnDelta, rowDelta)));
        }
        return result;
      };
      GameMath.enumerateCannonPos = function(origin, direction, len) {
        var result = [];
        for (var i = 0; i < len; i++) result.push(origin.add(direction));
        return result;
      };
      GameMath.getContactPoint = function(origin, radius, outPoint, isClockwise) {
        var offset = outPoint.sub(origin);
        var cosRadin = radius / offset.mag();
        var newOffset = offset.mul(cosRadin);
        var a = Math.acos(cosRadin);
        isClockwise || (a = -a);
        var originOffset = cc.v2(newOffset.x * Math.cos(a) - newOffset.y * Math.sin(a), newOffset.x * Math.sin(a) + newOffset.y * Math.cos(a));
        var result = origin.add(originOffset);
        return result;
      };
      GameMath.getAngle = function(beginPos, endPos, zeroAngleVector, isClockwise) {
        void 0 === zeroAngleVector && (zeroAngleVector = cc.v2(0, 1));
        void 0 === isClockwise && (isClockwise = true);
        if (beginPos.equals(endPos)) return 0;
        var offset = endPos.sub(beginPos);
        var lengthA = zeroAngleVector.mag();
        var lengthB = offset.mag();
        var cosValue = (zeroAngleVector.x * offset.x + zeroAngleVector.y * offset.y) / (lengthB * lengthA);
        var radian = Math.acos(cosValue);
        var angle = 180 / Math.PI * radian;
        var crossMulty = zeroAngleVector.x * offset.y - offset.x * zeroAngleVector.y;
        isClockwise ? crossMulty > 0 && (angle = 360 - angle) : crossMulty < 0 && (angle = 360 - angle);
        return angle;
      };
      GameMath.getDistance = function(beginPos, endPos) {
        return beginPos.sub(endPos).mag();
      };
      GameMath.getDistanceSQ = function(beginPos, endPos) {
        return beginPos.sub(endPos).magSqr();
      };
      GameMath.rectIntersectsRect = function(rect1, rect2) {
        return rect1.intersects(rect2);
      };
      GameMath.rectContainsPoint = function(rect, point) {
        return rect.contains(point);
      };
      GameMath.insertAsSet = function(array, val, compare) {
        void 0 === compare && (compare = null);
        -1 == GameMath.indexOf(array, val, 0, compare) && array.push(val);
      };
      GameMath.indexOf = function(valArr, val, startIndex, compare) {
        void 0 === startIndex && (startIndex = 0);
        void 0 === compare && (compare = null);
        var len = valArr.length;
        for (var i = startIndex; i < len; i++) {
          var tmpVal = valArr[i];
          if (null != compare) {
            if (compare(tmpVal, val)) return i;
          } else if (tmpVal.equals) {
            if (tmpVal.equals(val)) return i;
          } else if (tmpVal == val) return i;
        }
        return -1;
      };
      GameMath.clearArray = function(array) {
        array.length = 0;
      };
      GameMath.shuffleArray = function(array) {
        array.sort(function() {
          return .5 - Math.random();
        });
      };
      GameMath.isEmptyObject = function(obj) {
        if (obj) for (var key in obj) return false;
        return true;
      };
      GameMath.clearObject = function(obj) {
        for (var key in obj) delete obj[key];
      };
      GameMath.randomInt = function(min, max, differentWithLast, lastNumber) {
        void 0 === differentWithLast && (differentWithLast = false);
        void 0 === lastNumber && (lastNumber = 0);
        if (differentWithLast && min <= lastNumber && lastNumber <= max) {
          var minOffset = 1;
          var maxOffset = max - min - 1;
          var result = (Math.round(Math.random() * (maxOffset - minOffset) + minOffset) + lastNumber) % max + min;
          return result;
        }
        var offset = max - min;
        var result = Math.round(Math.random() * offset) + min;
        return result;
      };
      GameMath.random = function(min, max) {
        var offset = max - min;
        var result = Math.random() * offset + min;
        return result;
      };
      GameMath.clamp = function(value, min, max) {
        var minValue = Math.min(min, max);
        var maxValue = Math.max(min, max);
        return Math.max(Math.min(value, maxValue), minValue);
      };
      GameMath.getStringFromVec2 = function(logicalPos) {
        var hashValue = 1e3 * logicalPos.x + logicalPos.y + 1e4;
        var result = hashValue.toString();
        return result;
      };
      GameMath.getVec2FromString = function(stringValue) {
        var result = null;
        var hashValue = Number(stringValue);
        if (hashValue) {
          var x = Math.floor((hashValue - 1e4) / 1e3);
          var y = hashValue - 1e4 - 1e3 * x;
          result = cc.v2(x, y);
        }
        return result;
      };
      GameMath.getVec2FromConfigString = function(stringValue) {
        var result = null;
        var dataString = stringValue.replace("{", "").replace("}", "");
        var numbers = dataString.split(",");
        2 == numbers.length && (result = cc.v2(Number(numbers[0]), Number(numbers[1])));
        return result;
      };
      GameMath.getConfigStringFromVec2 = function(pos) {
        var result = "{" + pos.x + ", " + pos.y + "}";
        return result;
      };
      GameMath.vec2Less = function(posA, posB) {
        if (posA.x == posB.x) return posA.y < posB.y;
        return posA.x < posB.x;
      };
      GameMath.getStringFromFencePos = function(fencePos) {
        var stringA = this.getStringFromVec2(fencePos.posA);
        var stringB = this.getStringFromVec2(fencePos.posB);
        return stringA + "|" + stringB;
      };
      GameMath.getFencePosFromString = function(stringValue) {
        var postions = stringValue.split("|");
        if (2 == postions.length) {
          var posA = this.getVec2FromString(postions[0]);
          var posB = this.getVec2FromString(postions[1]);
          return FencePos_1.default.create(posA, posB);
        }
        return null;
      };
      GameMath.fencePosLess = function(fencePosA, fencePosB) {
        if (fencePosA.posA.equals(fencePosB.posA)) return this.vec2Less(fencePosA.posB, fencePosB.posB);
        return this.vec2Less(fencePosA.posA, fencePosB.posA);
      };
      GameMath.getScaleFromViewSize = function(viewSize, designSize, minSacle, maxScal) {
        void 0 === minSacle && (minSacle = 0);
        void 0 === maxScal && (maxScal = 1);
        var scale = Math.min(viewSize.width / designSize.width, viewSize.height / designSize.height);
        scale = GameMath.clamp(scale, minSacle, maxScal);
        return scale;
      };
      GameMath.getScaleViewSizeFromRealSize = function(realSize, deviceViewSize, minWidth) {
        var result = cc.size(0, 0);
        var ratio = this.getScaleFromViewSize(deviceViewSize, realSize, 0, 10);
        result = cc.size(realSize.width * ratio, realSize.height * ratio);
        if (result.width < minWidth) {
          var viewRatio = minWidth / result.width;
          result = cc.size(result.width * viewRatio, result.height * viewRatio);
        }
        return result;
      };
      GameMath.getDeviceViewSizeFromViewSize = function(viewSize, winSize, deviceSize) {
        var result = cc.size(0, 0);
        var ratioWidth = viewSize.width / winSize.width;
        var ratioHeight = viewSize.height / winSize.height;
        result = cc.size(deviceSize.width * ratioWidth, deviceSize.height * ratioHeight);
        return result;
      };
      GameMath.getAdBannerSize = function(viewSize, winSize, deviceSize, realSize, minWidth) {
        var deviceViewSize = GameMath.getDeviceViewSizeFromViewSize(viewSize, winSize, deviceSize);
        var result = GameMath.getScaleViewSizeFromRealSize(realSize, deviceViewSize, minWidth);
        return result;
      };
      GameMath.INVALID_LOGICAL_POSITION = cc.v2(-1, -1);
      return GameMath;
    }();
    exports.default = GameMath;
    cc._RF.pop();
  }, {
    "../../base/Pair": "Pair",
    "../../scenes/match/entity/fence/FencePos": "FencePos",
    "../../scenes/match/entity/item/color/bomb/ItemBombBase": "ItemBombBase"
  } ],
  GameNoMoreStepPanel: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "15831mb9n1Iy47kMad7jt9s", "GameNoMoreStepPanel");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var NoMoreStepBasePanel_1 = require("./NoMoreStepBasePanel/NoMoreStepBasePanel");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var GameNoMoreStepPanel = function(_super) {
      __extends(GameNoMoreStepPanel, _super);
      function GameNoMoreStepPanel() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      GameNoMoreStepPanel.prototype.giveUp = function() {
        this._gameScene.gameOver();
      };
      GameNoMoreStepPanel = __decorate([ ccclass ], GameNoMoreStepPanel);
      return GameNoMoreStepPanel;
    }(NoMoreStepBasePanel_1.default);
    exports.default = GameNoMoreStepPanel;
    cc._RF.pop();
  }, {
    "./NoMoreStepBasePanel/NoMoreStepBasePanel": "NoMoreStepBasePanel"
  } ],
  GameOverPanel: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "9526cBfgeZF1bQIseeNdd3T", "GameOverPanel");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var GameConfig_1 = require("../../../../define/GameConfig");
    var IGame_1 = require("../../../../base/IGame");
    var IdentifierManager_1 = require("../../defines/IdentifierManager");
    var GameResultBasePanel_1 = require("./GameResultBasePanel");
    var GameSceneBase_1 = require("../../GameSceneBase");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var GameOverPanel = function(_super) {
      __extends(GameOverPanel, _super);
      function GameOverPanel() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.rewardButtonLabel = null;
        _this.cancelButtonLable = null;
        _this._rewardType = GameSceneBase_1.MatchGameEndRewardType.None;
        return _this;
      }
      GameOverPanel.prototype.playSoundEffect = function() {
        IGame_1.default.stopBGM();
        IGame_1.default.playAudio(IdentifierManager_1.default.getInstance().getMatchAudioFilePath("levelfailed"));
      };
      GameOverPanel.prototype.getExtraRewardType = function() {
        var extraRewardType = GameResultBasePanel_1.GameEndExtraRewardType.None;
        var uiData = this._gameScene.getEndUIData();
        uiData && (extraRewardType = uiData.failedRewardType);
        GameConfig_1.default.IsVerify && (extraRewardType = GameResultBasePanel_1.GameEndExtraRewardType.None);
        return extraRewardType;
      };
      GameOverPanel.prototype.recordBestScore = function() {
        this.setFriendView();
      };
      GameOverPanel.prototype.initButtons = function() {
        _super.prototype.initButtons.call(this);
        this.rewardButton.active = false;
      };
      GameOverPanel.prototype.initSupplyItem = function() {
        this._rewardType = GameSceneBase_1.MatchGameEndRewardType.None;
        _super.prototype.initSupplyItem.call(this);
      };
      GameOverPanel.prototype.onConfirmButtonClicked = function(event) {};
      GameOverPanel.prototype.onCancelButtonClicked = function(event) {
        this.reportResult(GameSceneBase_1.MatchGameEndType.GameOver, this._rewardType, false);
      };
      GameOverPanel.prototype.onReportResultRespone = function(data) {
        _super.prototype.onReportResultRespone.call(this, data);
        switch (this._rewardType) {
         case GameSceneBase_1.MatchGameEndRewardType.None:
          this.onRewardFlyToBackpackComplete();
          break;

         case GameSceneBase_1.MatchGameEndRewardType.Normal:
         case GameSceneBase_1.MatchGameEndRewardType.Doubled:
          this.rewardFlyToBackpack();
        }
      };
      __decorate([ property(cc.Label) ], GameOverPanel.prototype, "rewardButtonLabel", void 0);
      __decorate([ property(cc.Label) ], GameOverPanel.prototype, "cancelButtonLable", void 0);
      GameOverPanel = __decorate([ ccclass ], GameOverPanel);
      return GameOverPanel;
    }(GameResultBasePanel_1.default);
    exports.default = GameOverPanel;
    cc._RF.pop();
  }, {
    "../../../../base/IGame": "IGame",
    "../../../../define/GameConfig": "GameConfig",
    "../../GameSceneBase": "GameSceneBase",
    "../../defines/IdentifierManager": "IdentifierManager",
    "./GameResultBasePanel": "GameResultBasePanel"
  } ],
  GameResultBasePanel: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "de9beFw+vJN4IuSq3QBuHKq", "GameResultBasePanel");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.GameEndPanelData = exports.GameEndExtraRewardType = void 0;
    var IGame_1 = require("../../../../base/IGame");
    var GameCurrencyType_1 = require("../../../../define/GameCurrencyType");
    var CurveToAction_1 = require("../../../../extend/action/CurveToAction");
    var GameMath_1 = require("../../../../extend/utils/GameMath");
    var IdentifierManager_1 = require("../../defines/IdentifierManager");
    var ItemInfoManager_1 = require("../../defines/ItemInfoManager");
    var GameSceneBase_1 = require("../../GameSceneBase");
    var GameEndItem_1 = require("./GameEndItem");
    var StarAndScoreFrame_1 = require("./StarAndScoreFrame");
    var GameEndExtraRewardType;
    (function(GameEndExtraRewardType) {
      GameEndExtraRewardType[GameEndExtraRewardType["None"] = 0] = "None";
      GameEndExtraRewardType[GameEndExtraRewardType["Share"] = 1] = "Share";
      GameEndExtraRewardType[GameEndExtraRewardType["WatchVideo"] = 2] = "WatchVideo";
      GameEndExtraRewardType[GameEndExtraRewardType["Request"] = 4] = "Request";
      GameEndExtraRewardType[GameEndExtraRewardType["ShareForReward"] = 7] = "ShareForReward";
    })(GameEndExtraRewardType = exports.GameEndExtraRewardType || (exports.GameEndExtraRewardType = {}));
    var GameEndPanelData = function() {
      function GameEndPanelData() {
        this.succeedRewardType = GameEndExtraRewardType.None;
        this.failedRewardType = GameEndExtraRewardType.None;
      }
      GameEndPanelData.createWithData = function(object) {
        var succeedRewardType = 0;
        object && object.hasOwnProperty("LD") && (succeedRewardType = object["LD"]);
        var failedRewardType = 0;
        object && object.hasOwnProperty("LT") && (failedRewardType = object["LT"]);
        return GameEndPanelData.create(succeedRewardType, failedRewardType);
      };
      GameEndPanelData.create = function(succeedRewardType, failedRewardType) {
        var result = new GameEndPanelData();
        result.succeedRewardType = succeedRewardType;
        result.failedRewardType = failedRewardType;
        return result;
      };
      return GameEndPanelData;
    }();
    exports.GameEndPanelData = GameEndPanelData;
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var GameResultBasePanel = function(_super) {
      __extends(GameResultBasePanel, _super);
      function GameResultBasePanel() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.starFrame = null;
        _this.rewardItemsFrame = null;
        _this.rewardItems = [];
        _this.goldSprite = null;
        _this.goldDoubleIco = null;
        _this.goldLabel = null;
        _this.lifeSprite = null;
        _this.lifeDoubleIco = null;
        _this.lifeLabel = null;
        _this.backpack = null;
        _this.rewardButton = null;
        _this.cancelButton = null;
        _this.rankNode = null;
        _this.friendSprite = null;
        _this._gameScene = null;
        _this._report = null;
        _this._achievementReward = null;
        _this._timeLimitAward = null;
        _this._activeNextResidentGearType = 0;
        _this._updateSubDomainFixFrameRate = 0;
        return _this;
      }
      GameResultBasePanel.prototype.getExtraRewardType = function() {
        return GameEndExtraRewardType.None;
      };
      GameResultBasePanel.prototype.showAdBanner = function() {};
      GameResultBasePanel.prototype.closeAdBanner = function() {};
      GameResultBasePanel.prototype.sendMarkID = function() {};
      GameResultBasePanel.prototype.recordBestScore = function() {};
      GameResultBasePanel.prototype.popUpRearAchievementPanel = function() {};
      GameResultBasePanel.prototype.playSoundEffect = function() {};
      GameResultBasePanel.prototype.initSupplyItem = function() {
        var supplyItemIDs = [ GameCurrencyType_1.GameCurrencyType.TrainFood, GameCurrencyType_1.GameCurrencyType.TrainSoap, GameCurrencyType_1.GameCurrencyType.TrainEyepatch, GameCurrencyType_1.GameCurrencyType.TrainHoe ];
        for (var index = 0; index < this.rewardItems.length; index++) {
          var item = this.rewardItems[index];
          item.setItemID(supplyItemIDs[index]);
        }
        var IT = this._report["IT"];
        for (var key in this.rewardItems) {
          var supplyItem = this.rewardItems[key];
          var itemInfo = ItemInfoManager_1.default.getInstance().getItemInfoFromItemID(supplyItem.getItemID());
          itemInfo && (supplyItem.nameLabel.string = itemInfo.localization);
          if (IT.hasOwnProperty(supplyItem.getItemID())) {
            var itemNum = IT[supplyItem.getItemID()];
            itemNum && (supplyItem.numLabel.string = itemNum.toString());
          }
        }
        if (IT[GameCurrencyType_1.GameCurrencyType.GoldCoin]) {
          var goldNum = IT[GameCurrencyType_1.GameCurrencyType.GoldCoin];
          this.goldLabel.string = goldNum.toString();
        }
        if (IT[GameCurrencyType_1.GameCurrencyType.LifeAddOnePoint]) {
          var lifeNum = IT[GameCurrencyType_1.GameCurrencyType.LifeAddOnePoint];
          this.lifeLabel.string = lifeNum.toString();
        }
      };
      GameResultBasePanel.prototype.initButtons = function() {
        this.rewardButton.on("touchend", this.onConfirmButtonClicked, this);
        this.cancelButton.on("touchend", this.onCancelButtonClicked, this);
      };
      GameResultBasePanel.prototype.popUpGiftBox = function() {};
      GameResultBasePanel.prototype.onConfirmButtonClicked = function(event) {};
      GameResultBasePanel.prototype.onCancelButtonClicked = function(event) {};
      GameResultBasePanel.prototype.onShareSuccess = function() {};
      GameResultBasePanel.prototype.onShareFail = function() {};
      GameResultBasePanel.prototype.onWatchVideoSuccess = function() {};
      GameResultBasePanel.prototype.onWatchVideoFail = function() {};
      GameResultBasePanel.prototype.reportResult = function(endType, rewardType, hasExtraReward) {
        this._gameScene.reportResult(endType, rewardType, hasExtraReward, this.onReportResultRespone, this);
      };
      GameResultBasePanel.prototype.onReportResultRespone = function(data) {};
      GameResultBasePanel.prototype.setRankView = function() {};
      GameResultBasePanel.prototype.setFriendView = function() {};
      GameResultBasePanel.prototype.updateSubDomainCanvas = function() {};
      GameResultBasePanel.prototype.onOpen = function(param) {
        var canvas = cc.find("Canvas");
        canvas && (this._gameScene = canvas.getComponent(GameSceneBase_1.default));
        var report = param["report"];
        this._report = report;
        this.playSoundEffect();
        this.initSupplyItem();
        this.recordBestScore();
        this.setRankView();
        this.initButtons();
        this.sendMarkID();
        this.popUpRearAchievementPanel();
        this.popUpGiftBox();
        this.showAdBanner();
      };
      GameResultBasePanel.prototype.onAnimationDone = function() {
        var starCount = 0;
        this._report.hasOwnProperty("starCount") && (starCount = this._report["starCount"]);
        var score = 0;
        this._report.hasOwnProperty("totalScore") && (score = this._report["totalScore"]);
        var highscore = 0;
        this._report.hasOwnProperty("historyHighscore") && (highscore = this._report["historyHighscore"]);
        highscore = Math.max(highscore, score);
        this.starFrame.setStarCount(starCount);
        this.starFrame.setScore(score);
        this.starFrame.setHighscore(highscore);
        this.starFrame.appear();
      };
      GameResultBasePanel.prototype.onClose = function() {};
      GameResultBasePanel.prototype.update = function() {
        this.updateSubDomainCanvas();
      };
      GameResultBasePanel.prototype.start = function() {};
      GameResultBasePanel.prototype.rewardFlyToBackpack = function() {
        var _this = this;
        this.rewardButton.active = false;
        this.cancelButton.active = false;
        var endPos = this.backpack.node.position;
        var defTime = 0;
        this.backpack.node.runAction(cc.fadeTo(.3, 255));
        var aniDisappearFun = function(node, dTime) {
          node.runAction(cc.sequence(cc.delayTime(dTime), cc.fadeTo(.2, 0)));
        };
        var aniBackpackFun = function(ico) {
          ico.runAction(cc.sequence(cc.delayTime(defTime), CurveToAction_1.default.create(.6, ico.position, endPos), cc.callFunc(function() {
            IGame_1.default.playAudio(IdentifierManager_1.default.getInstance().getMatchAudioFilePath("getitem"));
            _this.backpack.node.runAction(cc.sequence(cc.scaleTo(.1, 2.2), cc.scaleTo(.1, 2)));
          }), cc.removeSelf(true)));
        };
        for (var key in this.rewardItems) {
          var supplyItem = this.rewardItems[key];
          var ico = cc.instantiate(supplyItem.ico.node);
          this.node.addChild(ico);
          var startWorldPos = supplyItem.node.parent.convertToWorldSpaceAR(supplyItem.node.position);
          var startPos = this.node.convertToNodeSpaceAR(startWorldPos);
          ico.position = startPos;
          aniDisappearFun(supplyItem.node, defTime);
          aniBackpackFun(ico);
          defTime += .3;
        }
        aniDisappearFun(this.goldSprite.node, .5);
        var _loop_1 = function(i) {
          var ico = cc.instantiate(this_1.goldSprite.node);
          this_1.node.addChild(ico);
          var startWorldPos = this_1.goldSprite.node.parent.convertToWorldSpaceAR(this_1.goldSprite.node.position);
          var startPos = this_1.node.convertToNodeSpaceAR(startWorldPos);
          ico.position = startPos;
          ico.opacity = 0;
          for (var key in ico.children) {
            var child = ico.children[key];
            child.active = false;
          }
          var acitons = [];
          var minRadius = Math.round(37.5);
          var maxRadius = Math.round(75);
          var radius = GameMath_1.default.randomInt(minRadius, maxRadius);
          var angle = GameMath_1.default.randomInt(0, 360);
          var radian = angle / 180 * Math.PI;
          var jumpTargetPos = cc.v2(startPos.x + radius * Math.cos(radian), startPos.y + radius * Math.sin(radian));
          acitons.push(cc.delayTime(.1 * i));
          acitons.push(cc.fadeTo(0, 255));
          acitons.push(cc.spawn(cc.scaleTo(.3, 1).easing(cc.easeBackOut()), cc.moveTo(.3, jumpTargetPos).easing(cc.easeOut(2))));
          acitons.push(cc.delayTime(.1));
          acitons.push(cc.spawn(CurveToAction_1.default.create(.8, startPos, endPos), cc.scaleTo(.6, .5)));
          acitons.push(cc.callFunc(function() {
            IGame_1.default.playAudio(IdentifierManager_1.default.getInstance().getMatchAudioFilePath("coincollect"));
            ico.removeFromParent();
            ico.destroy();
          }));
          ico.runAction(cc.sequence(acitons));
        };
        var this_1 = this;
        for (var i = 0; i < 5; i++) _loop_1(i);
        var ico = cc.instantiate(this.lifeSprite.node);
        this.node.addChild(ico);
        var startWorldPos = this.lifeSprite.node.parent.convertToWorldSpaceAR(this.lifeSprite.node.position);
        var startPos = this.node.convertToNodeSpaceAR(startWorldPos);
        ico.position = startPos;
        ico.opacity = 0;
        for (var key in ico.children) {
          var child = ico.children[key];
          child.active = false;
        }
        aniDisappearFun(this.lifeSprite.node, .3);
        ico.runAction(cc.sequence(cc.fadeTo(0, 255), cc.spawn(CurveToAction_1.default.create(.8, ico.position, endPos), cc.scaleTo(.4, .5)), cc.removeSelf(true)));
        defTime += .3;
        defTime += .8;
        this.node.runAction(cc.sequence(cc.delayTime(defTime), cc.callFunc(function() {
          _this.onRewardFlyToBackpackComplete();
        })));
      };
      GameResultBasePanel.prototype.onRewardFlyToBackpackComplete = function() {};
      __decorate([ property(StarAndScoreFrame_1.default) ], GameResultBasePanel.prototype, "starFrame", void 0);
      __decorate([ property(cc.Node) ], GameResultBasePanel.prototype, "rewardItemsFrame", void 0);
      __decorate([ property([ GameEndItem_1.default ]) ], GameResultBasePanel.prototype, "rewardItems", void 0);
      __decorate([ property(cc.Sprite) ], GameResultBasePanel.prototype, "goldSprite", void 0);
      __decorate([ property(cc.Sprite) ], GameResultBasePanel.prototype, "goldDoubleIco", void 0);
      __decorate([ property(cc.Label) ], GameResultBasePanel.prototype, "goldLabel", void 0);
      __decorate([ property(cc.Sprite) ], GameResultBasePanel.prototype, "lifeSprite", void 0);
      __decorate([ property(cc.Sprite) ], GameResultBasePanel.prototype, "lifeDoubleIco", void 0);
      __decorate([ property(cc.Label) ], GameResultBasePanel.prototype, "lifeLabel", void 0);
      __decorate([ property(cc.Sprite) ], GameResultBasePanel.prototype, "backpack", void 0);
      __decorate([ property(cc.Node) ], GameResultBasePanel.prototype, "rewardButton", void 0);
      __decorate([ property(cc.Node) ], GameResultBasePanel.prototype, "cancelButton", void 0);
      __decorate([ property(cc.Node) ], GameResultBasePanel.prototype, "rankNode", void 0);
      __decorate([ property(cc.Sprite) ], GameResultBasePanel.prototype, "friendSprite", void 0);
      GameResultBasePanel = __decorate([ ccclass ], GameResultBasePanel);
      return GameResultBasePanel;
    }(cc.Component);
    exports.default = GameResultBasePanel;
    cc._RF.pop();
  }, {
    "../../../../base/IGame": "IGame",
    "../../../../define/GameCurrencyType": "GameCurrencyType",
    "../../../../extend/action/CurveToAction": "CurveToAction",
    "../../../../extend/utils/GameMath": "GameMath",
    "../../GameSceneBase": "GameSceneBase",
    "../../defines/IdentifierManager": "IdentifierManager",
    "../../defines/ItemInfoManager": "ItemInfoManager",
    "./GameEndItem": "GameEndItem",
    "./StarAndScoreFrame": "StarAndScoreFrame"
  } ],
  GameSceneBase: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "f5e316DP+NNYr+tdvyevPJr", "GameSceneBase");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.MatchGameEndRewardType = exports.MatchGameEndType = void 0;
    var IGame_1 = require("../../base/IGame");
    var UISceneBase_1 = require("../../component/UISceneBase");
    var GameCurrencyType_1 = require("../../define/GameCurrencyType");
    var GameMath_1 = require("../../extend/utils/GameMath");
    var CollectionID_1 = require("./defines/CollectionID");
    var EntityID_1 = require("./defines/EntityID");
    var PowerID_1 = require("./defines/PowerID");
    var EntityPrefabNodePool_1 = require("./entity/EntityPrefabNodePool");
    var FlyerAnimation_1 = require("./entity/flyer/FlyerAnimation");
    var FlyerBomb_1 = require("./entity/flyer/FlyerBomb");
    var FlyerBullet_1 = require("./entity/flyer/FlyerBullet");
    var FlyerCollectedEntity_1 = require("./entity/flyer/FlyerCollectedEntity");
    var ItemBombBase_1 = require("./entity/item/color/bomb/ItemBombBase");
    var ItemBombButterfly_1 = require("./entity/item/color/bomb/ItemBombButterfly");
    var ItemBombColumn_1 = require("./entity/item/color/bomb/ItemBombColumn");
    var ItemBombCross_1 = require("./entity/item/color/bomb/ItemBombCross");
    var ItemBombRainbow_1 = require("./entity/item/color/bomb/ItemBombRainbow");
    var ItemBombRange_1 = require("./entity/item/color/bomb/ItemBombRange");
    var ItemBombRow_1 = require("./entity/item/color/bomb/ItemBombRow");
    var ItemNormal_1 = require("./entity/item/color/ItemNormal");
    var GridBase_1 = require("./grid/GridBase");
    var GameStatistics_1 = require("./statistics/GameStatistics");
    var CollectedTrainSupplyBar_1 = require("./userinterface/CollectedTrainSupplyBar");
    var CompleteBanner_1 = require("./userinterface/CompleteBanner");
    var GearBar_1 = require("./userinterface/GearBar");
    var ScoreBar_1 = require("./userinterface/ScoreBar");
    var StepBar_1 = require("./userinterface/StepBar");
    var TargetBanner_1 = require("./userinterface/TargetBanner");
    var TargetBar_1 = require("./userinterface/TargetBar");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var MatchGameEndType;
    (function(MatchGameEndType) {
      MatchGameEndType[MatchGameEndType["Complete"] = 1] = "Complete";
      MatchGameEndType[MatchGameEndType["GiveUp"] = 2] = "GiveUp";
      MatchGameEndType[MatchGameEndType["GameOver"] = 3] = "GameOver";
      MatchGameEndType[MatchGameEndType["Terminate"] = 4] = "Terminate";
    })(MatchGameEndType = exports.MatchGameEndType || (exports.MatchGameEndType = {}));
    var MatchGameEndRewardType;
    (function(MatchGameEndRewardType) {
      MatchGameEndRewardType[MatchGameEndRewardType["None"] = 0] = "None";
      MatchGameEndRewardType[MatchGameEndRewardType["Normal"] = 1] = "Normal";
      MatchGameEndRewardType[MatchGameEndRewardType["Doubled"] = 2] = "Doubled";
    })(MatchGameEndRewardType = exports.MatchGameEndRewardType || (exports.MatchGameEndRewardType = {}));
    var GameSceneBase = function(_super) {
      __extends(GameSceneBase, _super);
      function GameSceneBase() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.bgTop = null;
        _this.cancelGearLayer = null;
        _this.backgroundMask = null;
        _this.swallowTouchLayer = null;
        _this.gridFrame = null;
        _this.levelLabel = null;
        _this.targetBar = null;
        _this.supplyBar = null;
        _this.stepBar = null;
        _this.scoreBar = null;
        _this.gearBar = null;
        _this.pauseButton = null;
        _this._grid = null;
        _this._mode = GridBase_1.GridMode.Normal;
        _this._hasShowCompleteBanner = false;
        _this._statistics = null;
        return _this;
      }
      GameSceneBase.prototype.canGenerateBomb = function() {
        return false;
      };
      GameSceneBase.prototype.canGenerateTrainSupply = function() {
        return false;
      };
      GameSceneBase.prototype.canPauseGame = function() {
        if (this._grid) return this._grid.canPauseGame();
        return false;
      };
      GameSceneBase.prototype.canGetBonusFromLeftStep = function() {
        return false;
      };
      GameSceneBase.prototype.canTriggerGuide = function() {
        return false;
      };
      GameSceneBase.prototype.canCountScore = function() {
        return false;
      };
      GameSceneBase.prototype.initGameScene = function(level) {
        IGame_1.default.playAudioBGM("audio/bgm/bgm_crush");
        this.pauseButton && this.pauseButton.on("touchend", this.onPauseTabbed, this);
        this.swallowTouchLayer && (this.swallowTouchLayer.active = false);
        this.clearGameScene();
        this._statistics = GameStatistics_1.default.create(level);
      };
      GameSceneBase.prototype.clearGameScene = function() {
        this.destroyGrid();
        this.destroyStatistics();
        this.targetBar && this.targetBar.clearTargets();
      };
      GameSceneBase.prototype.createStatistics = function(level) {
        this._statistics = GameStatistics_1.default.create(level);
      };
      GameSceneBase.prototype.destroyStatistics = function() {
        this._statistics && (this._statistics = null);
      };
      GameSceneBase.prototype.phrasePrewarData = function(data) {};
      GameSceneBase.prototype.preloadResources = function() {
        var entityPool = EntityPrefabNodePool_1.default.getInstance();
        var entities = [];
        for (var i = 0; i < 3; i++) {
          entities.push(FlyerBomb_1.default.create(this._grid, EntityID_1.EntityColor.Red, false, cc.Vec2.ZERO, 0));
          entities.push(FlyerBullet_1.default.create(this._grid, 0, cc.Vec2.ZERO, cc.Vec2.ZERO, EntityID_1.EntityColor.Red, ItemBombBase_1.ItemBombType.None, false));
          entities.push(FlyerCollectedEntity_1.default.create(this._grid, CollectionID_1.CollectionID.ItemNormalRed, 0, cc.Vec2.ZERO));
          entities.push(ItemBombButterfly_1.default.create(this._grid, EntityID_1.EntityColor.Red));
          entities.push(ItemBombColumn_1.default.create(this._grid, EntityID_1.EntityColor.Red));
          entities.push(ItemBombRow_1.default.create(this._grid, EntityID_1.EntityColor.Red));
          entities.push(ItemBombRange_1.default.create(this._grid, EntityID_1.EntityColor.Red));
          entities.push(ItemBombCross_1.default.create(this._grid, EntityID_1.EntityColor.Red));
          entities.push(ItemBombRainbow_1.default.create(this._grid));
        }
        var count = Math.floor(this._grid.getGridSize().width * this._grid.getGridSize().height / 3);
        for (var i = 0; i < count; i++) {
          entities.push(ItemNormal_1.default.create(this._grid, EntityID_1.EntityColor.Red));
          entities.push(FlyerAnimation_1.default.createAnimationWithType(this._grid, FlyerAnimation_1.FlyerAnimationType.HighlightedCell, true));
          entities.push(FlyerAnimation_1.default.createAnimationWithType(this._grid, FlyerAnimation_1.FlyerAnimationType.CommonHurt, true));
          entities.push(FlyerAnimation_1.default.createAnimationWithType(this._grid, FlyerAnimation_1.FlyerAnimationType.Bomb1x1, true));
        }
        for (var i = 0; i < 5; i++) {
          entities.push(FlyerAnimation_1.default.createDieAnimation(this._grid, EntityID_1.EntityID.ItemNormalRed));
          entities.push(FlyerAnimation_1.default.createDieAnimation(this._grid, EntityID_1.EntityID.ItemNormalGreen));
          entities.push(FlyerAnimation_1.default.createDieAnimation(this._grid, EntityID_1.EntityID.ItemNormalBlue));
          entities.push(FlyerAnimation_1.default.createDieAnimation(this._grid, EntityID_1.EntityID.ItemNormalYellow));
          entities.push(FlyerAnimation_1.default.createDieAnimation(this._grid, EntityID_1.EntityID.ItemNormalOrange));
          entities.push(FlyerAnimation_1.default.createDieAnimation(this._grid, EntityID_1.EntityID.ItemNormalPurple));
        }
        for (var _i = 0, entities_1 = entities; _i < entities_1.length; _i++) {
          var entity = entities_1[_i];
          entityPool.putPrefabNode(entity);
        }
      };
      GameSceneBase.prototype.getGrid = function() {
        return this._grid;
      };
      GameSceneBase.prototype.createGrid = function() {
        this.destroyGrid();
        var mapData = this._statistics.getCurrentMapJson();
        var viewSize = this.gridFrame.getContentSize();
        this._grid = GridBase_1.default.create(this, viewSize, mapData);
        this.gridFrame.addChild(this._grid.node);
        this.gridFrame.opacity = 0;
        this.setGridMode(GridBase_1.GridMode.Normal);
        this.preloadResources();
        this.reportStepCreateGrid();
      };
      GameSceneBase.prototype.destroyGrid = function() {
        if (this._grid) {
          this._grid.node.destroy();
          this._grid = null;
        }
      };
      GameSceneBase.prototype.runGame = function() {
        this._grid.runGame();
      };
      GameSceneBase.prototype.getWorldAreas = function(type, data) {
        return this._grid.getWorldAreas(type, data);
      };
      GameSceneBase.prototype.getWorldAreaWithLogicalPos = function(pos) {
        return this._grid.getWorldAreaWithLogicalPos(pos);
      };
      GameSceneBase.prototype.getGridMode = function() {
        return this._mode;
      };
      GameSceneBase.prototype.setGridMode = function(mode) {
        if (this._mode == mode) return;
        this._mode = mode;
        this._grid.tryEnableMode(mode);
        var itemID = GameCurrencyType_1.GameCurrencyType.NoneType;
        switch (this._mode) {
         case GridBase_1.GridMode.ForceClean:
          itemID = GameCurrencyType_1.GameCurrencyType.AidHammer;
          break;

         case GridBase_1.GridMode.CrossBomb:
          itemID = GameCurrencyType_1.GameCurrencyType.AidBomb;
          break;

         case GridBase_1.GridMode.ForceSwap:
          itemID = GameCurrencyType_1.GameCurrencyType.AidSwap;
        }
        this.gearBar && this.gearBar.focusItemWithGearID(itemID);
      };
      GameSceneBase.prototype.selectGear = function(itemID) {
        var mode = GridBase_1.GridMode.Normal;
        switch (itemID) {
         case GameCurrencyType_1.GameCurrencyType.AidHammer:
          mode = this.getGridMode() == GridBase_1.GridMode.ForceClean ? GridBase_1.GridMode.Normal : GridBase_1.GridMode.ForceClean;
          break;

         case GameCurrencyType_1.GameCurrencyType.AidBomb:
          mode = this.getGridMode() == GridBase_1.GridMode.CrossBomb ? GridBase_1.GridMode.Normal : GridBase_1.GridMode.CrossBomb;
          break;

         case GameCurrencyType_1.GameCurrencyType.AidSwap:
          mode = this.getGridMode() == GridBase_1.GridMode.ForceSwap ? GridBase_1.GridMode.Normal : GridBase_1.GridMode.ForceSwap;
        }
        this.setGridMode(mode);
      };
      GameSceneBase.prototype.updateGears = function(event) {
        var data = event.getUserData();
        var itemID = data["itemID"];
        if (itemID && itemID != GameCurrencyType_1.GameCurrencyType.NoneType) {
          this.updateUserInterface();
          this.selectGear(itemID);
        }
      };
      GameSceneBase.prototype.hasShowCompleteBanner = function() {
        return this._hasShowCompleteBanner;
      };
      GameSceneBase.prototype.hadOperated = function() {
        return this._statistics.hadOperated();
      };
      GameSceneBase.prototype.getTickTime = function() {
        return Math.round(this._statistics.getTick());
      };
      GameSceneBase.prototype.getPuppyLeftSteps = function() {
        return this._statistics.getPuppyLeftSteps();
      };
      GameSceneBase.prototype.getShareTimes = function() {
        return this._statistics.getShareForMoreStepTimes();
      };
      GameSceneBase.prototype.setShareTimes = function(times) {
        this._statistics.setShareForMoreStepTimes(times);
      };
      GameSceneBase.prototype.getStatisticsReport = function() {
        var report = {};
        report["hadOperated"] = this.hadOperated();
        report["usedStep_ST"] = this.getPowerAmount(PowerID_1.PowerID.UsedSwap);
        report["leftStep_SL"] = this.getPowerAmount(PowerID_1.PowerID.AvailableSwap);
        report["totalTime_T"] = this.getTickTime();
        report["shareTimes"] = this.getShareTimes();
        report["config"] = this.getMatchGameConfig();
        report["isCompleteWithLastStep"] = this.getCompleteWithLastStep();
        report["totalScore"] = this.getTotalScore();
        report["completeScore"] = this.getCompleteScore();
        report["historyHighscore"] = this.getHistoryHighscore();
        report["starCount"] = this.getStarsCount();
        this.hasShowCompleteBanner() ? report["isVeryFastComplete"] = this.getPowerAmount(PowerID_1.PowerID.UsedSwap) < 10 : report["isVeryFastComplete"] = false;
        var targetMap = this.getTargetMap();
        for (var key in targetMap) {
          var collectionId = Number(key);
          var value = 0;
          if (collectionId == CollectionID_1.CollectionID.ItemPuppy) value = this.getPuppyLeftSteps(); else {
            var left = Math.max(0, targetMap[key] - this.getCollectedEntityAmount(collectionId));
            value = left;
          }
          report["leftTarget_TN"] || (report["leftTarget_TN"] = {});
          report["leftTarget_TN"][collectionId] = value;
        }
        report["leftTarget_TN"] = this.getRemainingTargets();
        var gearMap = this.getUsedGearMap();
        for (var key in gearMap) {
          var gear = gearMap[key];
          if (gear > 0) {
            report["usedGear_GN"] || (report["usedGear_GN"] = {});
            report["usedGear_GN"][key] = gear;
          }
        }
        var collectedSupplyMap = this.getCollectedSupplyMap();
        var IT = {};
        for (var key in collectedSupplyMap) {
          var amount = collectedSupplyMap[key];
          var itemID = Number(key);
          IT[itemID] = amount;
        }
        report["IT"] = IT;
        return report;
      };
      GameSceneBase.prototype.disappearUI = function() {
        var anim = this.node.getComponent(cc.Animation);
        anim && anim.play("disappear");
      };
      GameSceneBase.prototype.appearUI = function() {
        var anim = this.node.getComponent(cc.Animation);
        anim && anim.play("appear");
        this.gridFrame.opacity = 255;
      };
      GameSceneBase.prototype.getLevel = function() {
        return this._statistics.getLevel();
      };
      GameSceneBase.prototype.getMatchGameConfig = function() {
        return this._statistics.getMatchGameConfig();
      };
      GameSceneBase.prototype.getDropEntityMap = function() {
        return this._statistics.getDropEntityMap();
      };
      GameSceneBase.prototype.resetDropConfig = function() {
        this._statistics.resetDropConfig();
      };
      GameSceneBase.prototype.getLimitedEntityMap = function() {
        return this._statistics.getLimitedEntityMap();
      };
      GameSceneBase.prototype.getLimitedGroupMap = function() {
        return this._statistics.getLimitedGroupMap();
      };
      GameSceneBase.prototype.getTargetMap = function() {
        return this._statistics.getTargetMap();
      };
      GameSceneBase.prototype.getRemainingTargets = function() {
        return this._statistics.getRemainingTargets();
      };
      GameSceneBase.prototype.getTargetAmount = function(collectionID) {
        return this._statistics.getTargetAmount(collectionID);
      };
      GameSceneBase.prototype.isTargetCollectionID = function(collectionID) {
        return this._statistics.isTargetCollectionID(collectionID);
      };
      GameSceneBase.prototype.getCollectedEntityAmount = function(collectionID) {
        return this._statistics.getCollectedEntityAmount(collectionID);
      };
      GameSceneBase.prototype.setCollectedEntityAmount = function(collectionID, amount) {
        this._statistics.setCollectedEntityAmount(collectionID, amount);
      };
      GameSceneBase.prototype.getCollectedSupplyMap = function() {
        return this._statistics.getCollectedSupplyMap();
      };
      GameSceneBase.prototype.getCollectedSupplyAmount = function(itemID) {
        return this._statistics.getCollectedSupplyAmount(itemID);
      };
      GameSceneBase.prototype.setCollectedSupplyAmount = function(itemID, amount) {
        this._statistics.setCollectedSupplyAmount(itemID, amount);
      };
      GameSceneBase.prototype.getPowerAmount = function(powerID) {
        return this._statistics.getPowerAmount(powerID);
      };
      GameSceneBase.prototype.setPowerAmount = function(powerID, amount) {
        this._statistics.setPowerAmount(powerID, amount);
      };
      GameSceneBase.prototype.gainPowerAmount = function(powerID, amount) {
        this.setPowerAmount(powerID, this.getPowerAmount(powerID) + amount);
      };
      GameSceneBase.prototype.lossPowerAmount = function(powerID, amount) {
        this.gainPowerAmount(powerID, -amount);
      };
      GameSceneBase.prototype.getLaunchGearMap = function() {
        return this._statistics.getLaunchGearMap();
      };
      GameSceneBase.prototype.clearLaunchGears = function() {
        this._statistics.clearLaunchGears();
      };
      GameSceneBase.prototype.getPrewarGearAmount = function(itemID) {
        return this._statistics.getPrewarGearAmount(itemID);
      };
      GameSceneBase.prototype.setPrewarGearAmount = function(itemID, amount) {
        this._statistics.setPrewarGearAmount(itemID, amount);
      };
      GameSceneBase.prototype.getAvailableGearItemAmount = function(itemID) {
        return this._statistics.getAvailableGearItemAmount(itemID);
      };
      GameSceneBase.prototype.getUsedGearMap = function() {
        return this._statistics.getUsedGearMap();
      };
      GameSceneBase.prototype.getUsedGearAmount = function(itemID) {
        return this._statistics.getUsedGearAmount(itemID);
      };
      GameSceneBase.prototype.setUsedGearAmount = function(itemID, amount) {
        this._statistics.setUsedGearAmount(itemID, amount);
        this.updateUserInterface();
      };
      GameSceneBase.prototype.getLimitedGearMap = function() {
        return this._statistics.getLimitedGearMap();
      };
      GameSceneBase.prototype.setLimitedGearAmount = function(id, amount) {
        this._statistics.setLimitedGearAmount(id, amount);
      };
      GameSceneBase.prototype.getLimitedGearAmount = function(id) {
        return this._statistics.getLimitedGearAmount(id);
      };
      GameSceneBase.prototype.getCompleteWithLastStep = function() {
        return this._statistics.getCompleteWithLastStep();
      };
      GameSceneBase.prototype.setCompleteWithLastStep = function(value) {
        this._statistics.setCompleteWithLastStep(value);
      };
      GameSceneBase.prototype.getTotalScore = function() {
        return this._statistics.getTotalScore();
      };
      GameSceneBase.prototype.setTotalScore = function(score) {
        this._statistics.setTotalScore(score);
      };
      GameSceneBase.prototype.gainTotalScore = function(delta) {
        this.setTotalScore(this.getTotalScore() + delta);
      };
      GameSceneBase.prototype.lossTotalScore = function(delta) {
        this.gainTotalScore(-delta);
      };
      GameSceneBase.prototype.getHistoryHighscore = function() {
        return this._statistics.getHistoryHighScore();
      };
      GameSceneBase.prototype.setHistoryHighscore = function(score) {
        this._statistics.setHistoryHighScore(score);
      };
      GameSceneBase.prototype.getStarScores = function() {
        return this._statistics.getStarScores();
      };
      GameSceneBase.prototype.getStarsCount = function() {
        return this._statistics.getStarsCount();
      };
      GameSceneBase.prototype.getCompleteScore = function() {
        return this._statistics.getCompleteScore();
      };
      GameSceneBase.prototype.setCompleteScore = function(score) {
        this._statistics.setCompleteScore(score);
        this.scoreBar && this.scoreBar.updateScore();
      };
      GameSceneBase.prototype.getCompleteReward = function() {
        return this._statistics.getCompleteReward();
      };
      GameSceneBase.prototype.getBonusStepCount = function() {
        return this._statistics.getBonusStepCount();
      };
      GameSceneBase.prototype.setBonusStepCount = function(count) {
        this._statistics.setBonusStepCount(count);
      };
      GameSceneBase.prototype.getEndUIData = function() {
        return this._statistics.getEndUIData();
      };
      GameSceneBase.prototype.setEndUIData = function(data) {
        this._statistics.setEndUIData(data);
      };
      GameSceneBase.prototype.getEventTargets = function() {
        return this._statistics.getEventTargets();
      };
      GameSceneBase.prototype.setEventTargets = function(targets) {
        this._statistics.setEventTargets(targets);
      };
      GameSceneBase.prototype.getShouldShowAdBanner = function() {
        if (this.gearBar) return this.gearBar.getType() == GearBar_1.GearBarType.Drawer;
        return false;
      };
      GameSceneBase.prototype.isCompleted = function() {
        return this._statistics.finishAllTarget();
      };
      GameSceneBase.prototype.isFailed = function() {
        var available = this.getPowerAmount(PowerID_1.PowerID.AvailableSwap);
        if (available <= 0) return true;
        return false;
      };
      GameSceneBase.prototype.updateUserInterface = function() {};
      GameSceneBase.prototype.updateLevelBar = function() {
        if (this.levelLabel) {
          var levle = this.getLevel();
          this.levelLabel.string = levle.toString();
        }
      };
      GameSceneBase.prototype.getWorldPosForTarget = function(collectionID) {
        if (this.targetBar) return this.targetBar.getWorldPosWithCollectionID(collectionID);
        return cc.v2(0, 0);
      };
      GameSceneBase.prototype.updateTargetBarUIWithDelta = function(collectionID, delta) {
        if (this.targetBar) {
          var item = this.targetBar.getItemWithCollectionID(collectionID);
          if (item) {
            var oldAmount = item.getAmount();
            item.setAmount(oldAmount + delta);
          }
        }
      };
      GameSceneBase.prototype.updateTargetBar = function() {
        if (this.targetBar) {
          this.targetBar.setTargetData(this.getRemainingTargets());
          this.targetBar.hideAll();
        }
      };
      GameSceneBase.prototype.getWorldPosForSupply = function(itemID) {
        if (this.supplyBar) return this.supplyBar.getWorldPosWithSupplyItemID(itemID);
        return cc.v2(0, 0);
      };
      GameSceneBase.prototype.updateSupplyBarUIWithDelta = function(itemID, delta) {
        if (this.supplyBar) {
          var item = this.supplyBar.getItemWithSupplyItemID(itemID);
          item && item.setAmount(item.getAmount() + delta);
        }
      };
      GameSceneBase.prototype.updateSupplyBar = function() {
        if (this.supplyBar) {
          this.supplyBar.setSupplyData(this.getCollectedSupplyMap());
          this.supplyBar.node.active = !this.isPlayingHistoryLevel();
        }
      };
      GameSceneBase.prototype.getWorldPosForStep = function() {
        if (this.stepBar) return cc.v2(this.stepBar.getWorldPos());
        return cc.v2(0, 0);
      };
      GameSceneBase.prototype.updateStepBar = function() {
        this.stepBar && this.stepBar.setAmount(this.getPowerAmount(PowerID_1.PowerID.AvailableSwap));
      };
      GameSceneBase.prototype.updateStepBarUIWithDelta = function(delta) {
        this.stepBar && this.stepBar.setAmount(this.stepBar.getAmount() + delta);
      };
      GameSceneBase.prototype.getWorldPosForScore = function() {
        if (this.scoreBar) return cc.v2(this.scoreBar.getWorldPos());
        return cc.v2(0, 0);
      };
      GameSceneBase.prototype.getWorldPosForStar = function(index) {
        if (this.scoreBar) return cc.v2(this.scoreBar.getWorldPosForStar(index));
        return cc.v2(0, 0);
      };
      GameSceneBase.prototype.updateScoreBarUIWithDelta = function(delta) {
        this.scoreBar && this.scoreBar.setScore(this.scoreBar.getScore() + delta);
      };
      GameSceneBase.prototype.getWorldPosForGear = function(itemID) {
        if (this.gearBar) return this.gearBar.getGearIconWorldPos(itemID);
        return cc.v2(0, 0);
      };
      GameSceneBase.prototype.updateGearBar = function() {
        this.gearBar && this.gearBar.updateGears();
      };
      GameSceneBase.prototype.updateScore = function() {
        this.scoreBar.updateScore();
      };
      GameSceneBase.prototype.showTargetBanner = function() {
        var targetBanner = TargetBanner_1.default.create(this.getLevel(), this.getRemainingTargets());
        targetBanner && this.node.addChild(targetBanner.node, 1e3);
      };
      GameSceneBase.prototype.showCompleteBanner = function() {
        var completeBanner = CompleteBanner_1.default.create(this.getLevel(), this.onCompleteBannerDisappear.bind(this), false);
        completeBanner && this.node.addChild(completeBanner.node, 1e3);
        this.swallowTouchLayer.active = true;
        this.setGridMode(GridBase_1.GridMode.Normal);
        this.setCompleteScore(this.getTotalScore());
      };
      GameSceneBase.prototype.onCompleteBannerDisappear = function(object) {
        this._hasShowCompleteBanner = true;
      };
      GameSceneBase.prototype.congratulation = function() {};
      GameSceneBase.prototype.noMoreStep = function() {};
      GameSceneBase.prototype.stalemate = function() {};
      GameSceneBase.prototype.showReplayPrepareUI = function() {};
      GameSceneBase.prototype.cheatGameWithLevel = function(level) {};
      GameSceneBase.prototype.endGameWithReplay = function(replay) {
        replay ? this.clearForReplay() : this.backToMainScene(false);
      };
      GameSceneBase.prototype.clearForReplay = function() {
        this._grid.clearGameForReplay();
      };
      GameSceneBase.prototype.isPlayingHistoryLevel = function() {
        return false;
      };
      GameSceneBase.prototype.getStepMark = function(key) {
        return 0;
      };
      GameSceneBase.prototype.reportStepMark = function(key) {};
      GameSceneBase.prototype.reportStepInit = function() {
        this.reportStepMark("onInit");
      };
      GameSceneBase.prototype.reportStepCreateGrid = function() {
        this.reportStepMark("onCreateGrid");
      };
      GameSceneBase.prototype.reportStepSwap = function(steps) {
        var key = "onStep" + steps.toString();
        this.reportStepMark(key);
      };
      GameSceneBase.prototype.reportStepComplete = function() {
        this.reportStepMark("onComplete");
      };
      GameSceneBase.prototype.reportStepCongratulation = function() {
        this.reportStepMark("onCongratulation");
      };
      GameSceneBase.prototype.reportStepNextGame = function() {
        this.reportStepMark("onNextGame");
      };
      GameSceneBase.prototype.onPauseTabbed = function(evt) {};
      GameSceneBase.prototype.nextGame = function() {};
      GameSceneBase.prototype.quitGame = function() {};
      GameSceneBase.prototype.replayGame = function() {};
      GameSceneBase.prototype.gameOver = function() {};
      GameSceneBase.prototype.showGameFail = function() {};
      GameSceneBase.prototype.onNoMoreStep = function(object) {};
      GameSceneBase.prototype.stalemateGame = function() {};
      GameSceneBase.prototype.backToMainScene = function(prepareNext) {};
      GameSceneBase.prototype.beforePlayerOperated = function() {};
      GameSceneBase.prototype.onPlayerOperated = function() {};
      GameSceneBase.prototype.onRecevieGiftBox = function(data) {};
      GameSceneBase.prototype.onCancleGiftBox = function(data) {};
      GameSceneBase.prototype.hideAdBanner = function() {
        this.gearBar && this.gearBar.setType(GearBar_1.GearBarType.Normal);
      };
      GameSceneBase.prototype.getRequestUseGearParam = function(itemID, amount) {
        var parram = {};
        return parram;
      };
      GameSceneBase.prototype.requestUseGear = function(itemID, amount, allbackFunc, callbackObj) {
        void 0 === allbackFunc && (allbackFunc = null);
        void 0 === callbackObj && (callbackObj = null);
      };
      GameSceneBase.prototype.requestBuyMoreStep = function(currencyID, price, itemID, allbackFunc, callbackObj) {
        void 0 === allbackFunc && (allbackFunc = null);
        void 0 === callbackObj && (callbackObj = null);
      };
      GameSceneBase.prototype.getReportResultParam = function(endType, rewardType, hasExtraReward) {
        var parram = {};
        return parram;
      };
      GameSceneBase.prototype.reportResult = function(endType, rewardType, hasExtraReward, callbackFunc, callbackObj) {
        void 0 === callbackFunc && (callbackFunc = null);
        void 0 === callbackObj && (callbackObj = null);
      };
      GameSceneBase.prototype.cancelGear = function(event) {
        this.selectGear(GameCurrencyType_1.GameCurrencyType.NoneType);
      };
      GameSceneBase.prototype.onLoad = function() {
        var winSize = cc.view.getVisibleSize();
        var canvas = this.getComponent(cc.Canvas);
        if (winSize.height / winSize.width >= 1.7) {
          canvas.fitHeight = false;
          canvas.fitWidth = true;
          var height = canvas.designResolution.width / winSize.width * winSize.height;
          canvas.designResolution = cc.size(canvas.designResolution.width, height);
        } else {
          canvas.fitHeight = true;
          canvas.fitWidth = false;
          var width = canvas.designResolution.height / winSize.height * winSize.width;
          canvas.designResolution = cc.size(width, canvas.designResolution.height);
        }
        if (this.bgTop) {
          this.bgTop.scale = GameMath_1.default.getScaleFromViewSize(canvas.designResolution, this.bgTop.getContentSize(), 1, 2);
          var boundBox = this.bgTop.getBoundingBox();
          var x = 0;
          var y = Math.max(.5 * canvas.designResolution.height - boundBox.height, 0);
          y += boundBox.height * this.bgTop.anchorY;
          this.bgTop.setPosition(cc.v2(x, y));
        }
        if (this.cancelGearLayer) {
          this.cancelGearLayer.on("touchend", this.cancelGear, this);
          this.cancelGearLayer.active = false;
        }
      };
      GameSceneBase.prototype.getCurrentPetAnimationName = function() {
        var result = "";
        return result;
      };
      GameSceneBase.prototype.update = function(dt) {
        dt *= cc.director.getScheduler().getTimeScale();
        this._statistics && this._statistics.tick(dt);
      };
      GameSceneBase.prototype.onDestroy = function() {
        this.stepBar = null;
        this.levelLabel = null;
        this.gridFrame = null;
        this.gearBar = null;
        this.targetBar = null;
        this.supplyBar = null;
        this.pauseButton = null;
        this.swallowTouchLayer = null;
        this._grid = null;
        this._statistics = null;
        EntityPrefabNodePool_1.default.getInstance().clear();
      };
      __decorate([ property(cc.Node) ], GameSceneBase.prototype, "bgTop", void 0);
      __decorate([ property(cc.Node) ], GameSceneBase.prototype, "cancelGearLayer", void 0);
      __decorate([ property(cc.Node) ], GameSceneBase.prototype, "backgroundMask", void 0);
      __decorate([ property(cc.Node) ], GameSceneBase.prototype, "swallowTouchLayer", void 0);
      __decorate([ property(cc.Node) ], GameSceneBase.prototype, "gridFrame", void 0);
      __decorate([ property(cc.Label) ], GameSceneBase.prototype, "levelLabel", void 0);
      __decorate([ property(TargetBar_1.default) ], GameSceneBase.prototype, "targetBar", void 0);
      __decorate([ property(CollectedTrainSupplyBar_1.default) ], GameSceneBase.prototype, "supplyBar", void 0);
      __decorate([ property(StepBar_1.default) ], GameSceneBase.prototype, "stepBar", void 0);
      __decorate([ property(ScoreBar_1.default) ], GameSceneBase.prototype, "scoreBar", void 0);
      __decorate([ property(GearBar_1.default) ], GameSceneBase.prototype, "gearBar", void 0);
      __decorate([ property(cc.Node) ], GameSceneBase.prototype, "pauseButton", void 0);
      GameSceneBase = __decorate([ ccclass ], GameSceneBase);
      return GameSceneBase;
    }(UISceneBase_1.default);
    exports.default = GameSceneBase;
    cc._RF.pop();
  }, {
    "../../base/IGame": "IGame",
    "../../component/UISceneBase": "UISceneBase",
    "../../define/GameCurrencyType": "GameCurrencyType",
    "../../extend/utils/GameMath": "GameMath",
    "./defines/CollectionID": "CollectionID",
    "./defines/EntityID": "EntityID",
    "./defines/PowerID": "PowerID",
    "./entity/EntityPrefabNodePool": "EntityPrefabNodePool",
    "./entity/flyer/FlyerAnimation": "FlyerAnimation",
    "./entity/flyer/FlyerBomb": "FlyerBomb",
    "./entity/flyer/FlyerBullet": "FlyerBullet",
    "./entity/flyer/FlyerCollectedEntity": "FlyerCollectedEntity",
    "./entity/item/color/ItemNormal": "ItemNormal",
    "./entity/item/color/bomb/ItemBombBase": "ItemBombBase",
    "./entity/item/color/bomb/ItemBombButterfly": "ItemBombButterfly",
    "./entity/item/color/bomb/ItemBombColumn": "ItemBombColumn",
    "./entity/item/color/bomb/ItemBombCross": "ItemBombCross",
    "./entity/item/color/bomb/ItemBombRainbow": "ItemBombRainbow",
    "./entity/item/color/bomb/ItemBombRange": "ItemBombRange",
    "./entity/item/color/bomb/ItemBombRow": "ItemBombRow",
    "./grid/GridBase": "GridBase",
    "./statistics/GameStatistics": "GameStatistics",
    "./userinterface/CollectedTrainSupplyBar": "CollectedTrainSupplyBar",
    "./userinterface/CompleteBanner": "CompleteBanner",
    "./userinterface/GearBar": "GearBar",
    "./userinterface/ScoreBar": "ScoreBar",
    "./userinterface/StepBar": "StepBar",
    "./userinterface/TargetBanner": "TargetBanner",
    "./userinterface/TargetBar": "TargetBar"
  } ],
  GameStalematePanel: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "d34f0DjnOhO/ar/1ejZZy39", "GameStalematePanel");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var GameSceneBase_1 = require("../GameSceneBase");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var GameStalematePanel = function(_super) {
      __extends(GameStalematePanel, _super);
      function GameStalematePanel() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this._report = null;
        _this._gameScene = null;
        return _this;
      }
      GameStalematePanel.prototype.onOpen = function(param) {
        this._report = param;
        var canvas = cc.find("Canvas");
        canvas && (this._gameScene = canvas.getComponent(GameSceneBase_1.default));
      };
      GameStalematePanel.prototype.onClose = function() {
        this._report = null;
        this._gameScene = null;
      };
      GameStalematePanel.prototype.onCloseBtnClick = function() {
        this._gameScene.stalemateGame();
      };
      GameStalematePanel = __decorate([ ccclass ], GameStalematePanel);
      return GameStalematePanel;
    }(cc.Component);
    exports.default = GameStalematePanel;
    cc._RF.pop();
  }, {
    "../GameSceneBase": "GameSceneBase"
  } ],
  GameStatistics: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "23a3f7XvsxOQ5LQnNe1SG7y", "GameStatistics");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.EventCollectTargets = exports.GameMode = exports.GameType = void 0;
    var CFGTripleLevel_1 = require("../../../config/CFGTripleLevel");
    var CFGTripleLevelGrass_1 = require("../../../config/CFGTripleLevelGrass");
    var CFGTripleLevelOrder_1 = require("../../../config/CFGTripleLevelOrder");
    var CFGTripleLevelPath_1 = require("../../../config/CFGTripleLevelPath");
    var CFGTripleLevelPopsicles_1 = require("../../../config/CFGTripleLevelPopsicles");
    var CFGTripleMap_1 = require("../../../config/CFGTripleMap");
    var GameConfig_1 = require("../../../define/GameConfig");
    var GameCurrencyType_1 = require("../../../define/GameCurrencyType");
    var GameMath_1 = require("../../../extend/utils/GameMath");
    var TMXJsonPhraser_1 = require("../../../extend/utils/TMXJsonPhraser");
    var CollectionID_1 = require("../defines/CollectionID");
    var EntityGroupID_1 = require("../defines/EntityGroupID");
    var EntityID_1 = require("../defines/EntityID");
    var IdentifierManager_1 = require("../defines/IdentifierManager");
    var KindID_1 = require("../defines/KindID");
    var PowerID_1 = require("../defines/PowerID");
    var TMXConfigInfoKeys_1 = require("../defines/TMXConfigInfoKeys");
    var GameResultBasePanel_1 = require("../userinterface/GameResultPanel/GameResultBasePanel");
    var GameType;
    (function(GameType) {
      GameType[GameType["None"] = 0] = "None";
      GameType[GameType["Order"] = 1] = "Order";
      GameType[GameType["Grass"] = 2] = "Grass";
      GameType[GameType["Popsicle"] = 3] = "Popsicle";
      GameType[GameType["Path"] = 4] = "Path";
    })(GameType = exports.GameType || (exports.GameType = {}));
    var GameMode;
    (function(GameMode) {
      GameMode[GameMode["None"] = 0] = "None";
      GameMode[GameMode["Normal"] = 1] = "Normal";
      GameMode[GameMode["ClimbingTower"] = 2] = "ClimbingTower";
    })(GameMode = exports.GameMode || (exports.GameMode = {}));
    var EventCollectTargets = function() {
      function EventCollectTargets() {
        this._collections = [];
      }
      EventCollectTargets.createWithData = function(data) {
        var targets = [];
        data && data.hasOwnProperty("TTID") && (targets = data["TTID"]);
        return EventCollectTargets.create(targets);
      };
      EventCollectTargets.create = function(targets) {
        var result = new EventCollectTargets();
        result.setTargets(targets);
        return result;
      };
      EventCollectTargets.prototype.setTargets = function(targets) {
        this._collections.length = 0;
        for (var _i = 0, targets_1 = targets; _i < targets_1.length; _i++) {
          var target = targets_1[_i];
          this._collections.push(target);
        }
      };
      EventCollectTargets.prototype.getTargets = function() {
        return this._collections;
      };
      return EventCollectTargets;
    }();
    exports.EventCollectTargets = EventCollectTargets;
    var GameStatistics = function() {
      function GameStatistics() {
        this._cfgObj = {};
        this._mapDatas = [];
        this._mapIndex = 0;
        this._targetMap = {};
        this._collectedEntityMap = {};
        this._collectedSupplyMap = {};
        this._recordedSupplyMap = {};
        this._collectedEnergyMap = {};
        this._dropEntityMap = {};
        this._limitEntityMap = {};
        this._limitGroupMap = {};
        this._prewarGear = {};
        this._usedGear = {};
        this._limitedGear = {};
        this._totalTime = 0;
        this._shareForMoreStepTimes = 0;
        this._endUIData = new GameResultBasePanel_1.GameEndPanelData();
        this._level = 0;
        this._completeWithLastStep = false;
        this._totalScore = 0;
        this._historyHighscore = 0;
        this._completeScore = 0;
        this._bonusStepCount = 0;
        this._eventTargets = new EventCollectTargets();
        this._startScores = [];
        this._completeReward = {};
        this._availableGear = {};
        this._puppyStepCount = 0;
      }
      GameStatistics.create = function(level) {
        var result = new GameStatistics();
        result.init(level);
        return result;
      };
      GameStatistics.prototype.init = function(level) {
        this._level = level;
        this.clear();
        var tmpCfg = GameStatistics.getMatchCfgByLevel(level);
        if (GameConfig_1.default.IsDebug) switch (GameConfig_1.default.DebugMatchType) {
         case GameConfig_1.DebugMatchType.Order:
          this.initOrderTestConfig(tmpCfg);
          break;

         case GameConfig_1.DebugMatchType.Grass:
          this.initGrassTestConfig(tmpCfg);
          break;

         case GameConfig_1.DebugMatchType.Popsicle:
          this.initPopsicleTestConfig(tmpCfg);
          break;

         case GameConfig_1.DebugMatchType.Path:
          this.initPathTestConfig(tmpCfg);
        }
        var levelType = tmpCfg["LevelType"];
        switch (levelType) {
         case GameType.Order:
          this.setPowerAmount(PowerID_1.PowerID.AvailableSwap, tmpCfg["Step"]);
          this.initMapJsonsWithMapNames(tmpCfg["MapID"]);
          this.initCompleteReward(tmpCfg["LevelReward"], tmpCfg["RewardNum"]);
          this.initDropEntities(tmpCfg["DropBox"], tmpCfg["DropProb"]);
          this.initTargetEntities(tmpCfg["Target"], tmpCfg["TargetNum"]);
          this.initLimitEntities(tmpCfg["DropLimit"], tmpCfg["DropLimitNum"]);
          this.initStarScores(tmpCfg["StarScore"]);
          break;

         case GameType.Grass:
          this.setPowerAmount(PowerID_1.PowerID.AvailableSwap, tmpCfg["Step"]);
          this.initMapJsonsWithMapNames(tmpCfg["MapID"]);
          this.initCompleteReward(tmpCfg["LevelReward"], tmpCfg["RewardNum"]);
          this.initDropEntities(tmpCfg["DropBox"], tmpCfg["DropProb"]);
          this.initTargetGrass(this._mapDatas);
          this.initStarScores(tmpCfg["StarScore"]);
          break;

         case GameType.Popsicle:
          this.setPowerAmount(PowerID_1.PowerID.AvailableSwap, tmpCfg["Step"]);
          this.initMapJsonsWithMapNames(tmpCfg["MapID"]);
          this.initCompleteReward(tmpCfg["LevelReward"], tmpCfg["RewardNum"]);
          this.initDropEntities(tmpCfg["DropBox"], tmpCfg["DropProb"]);
          this.initTargetPopsicle(this._mapDatas);
          this.initStarScores(tmpCfg["StarScore"]);
          break;

         case GameType.Path:
          this.setPowerAmount(PowerID_1.PowerID.AvailableSwap, tmpCfg["Step"]);
          this.initMapJsonsWithMapNames(tmpCfg["MapID"]);
          this.initCompleteReward(tmpCfg["LevelReward"], tmpCfg["RewardNum"]);
          this.initDropEntities(tmpCfg["DropBox"], tmpCfg["DropProb"]);
          this.initTargetEntities("puppy", "1");
          this.initLimitEntities(tmpCfg["DropLimit"], tmpCfg["DropLimitNum"]);
          this.initTargetPath(this._mapDatas);
          this.initStarScores(tmpCfg["StarScore"]);
        }
        this._cfgObj = tmpCfg;
      };
      GameStatistics.prototype.initOrderTestConfig = function(config) {
        config["LevelType"] = 1;
        config["Step"] = 1;
        config["MapID"] = "test_maps/TestOrder";
        config["DropBox"] = "red|green|blue|yellow|orange";
        config["DropProb"] = "100|100|100|100|100";
        config["Target"] = "purple";
        config["TargetNum"] = "3";
      };
      GameStatistics.prototype.initGrassTestConfig = function(config) {
        config["LevelType"] = 2;
        config["Step"] = 1;
        config["MapID"] = "test_maps/TestGrass";
        config["DropBox"] = "red|blue|orange|yellow|green";
        config["DropProb"] = "100|100|100|100|100";
        config["DropLimit"] = "red|blue";
        config["DropLimitNum"] = "3|3";
      };
      GameStatistics.prototype.initPopsicleTestConfig = function(config) {
        config["LevelType"] = 3;
        config["Step"] = 99;
        config["MapID"] = "test_maps/TestPopsicle";
        config["DropBox"] = "red|blue|orange|yellow|green";
        config["DropProb"] = "100|100|100|100|100";
        config["DropLimit"] = "red|blue";
        config["DropLimitNum"] = "3|3";
      };
      GameStatistics.prototype.initPathTestConfig = function(config) {
        config["LevelType"] = 4;
        config["Step"] = 99;
        config["MapID"] = "test_maps/TestPath";
        config["DropBox"] = "red|blue|orange|yellow|green|purple";
        config["DropProb"] = "100|100|100|100|100|100";
        config["DropLimit"] = "";
        config["DropLimitNum"] = "";
      };
      GameStatistics.getLevelTypeByLevel = function(levelNum) {
        var type = GameType.None;
        var cfgTripleLevelObj = CFGTripleLevel_1.CFGTripleLevel.getInstance().getCongfigByLevelNum(levelNum);
        cfgTripleLevelObj && (type = cfgTripleLevelObj.LevelType);
        return type;
      };
      GameStatistics.getMatchCfgByLevel = function(levelNum) {
        var retObj = {};
        var cfgTripleLevelObj = CFGTripleLevel_1.CFGTripleLevel.getInstance().getCongfigByLevelNum(levelNum);
        if (!cfgTripleLevelObj) return retObj;
        for (var key in cfgTripleLevelObj) retObj[key] = cfgTripleLevelObj[key];
        var config = null;
        cfgTripleLevelObj.LevelType == GameType.Order ? config = new CFGTripleLevelOrder_1.CFGTripleLevelOrder() : cfgTripleLevelObj.LevelType == GameType.Grass ? config = new CFGTripleLevelGrass_1.CFGTripleLevelGrass() : cfgTripleLevelObj.LevelType == GameType.Popsicle ? config = new CFGTripleLevelPopsicles_1.CFGTripleLevelPopsicles() : cfgTripleLevelObj.LevelType == GameType.Path && (config = new CFGTripleLevelPath_1.CFGTripleLevelPath());
        if (config) {
          var configObj = config.getCongfigByLevelID(cfgTripleLevelObj.LevelID);
          for (var key in configObj) retObj[key] = configObj[key];
        }
        return retObj;
      };
      GameStatistics.prototype.getMatchGameConfig = function() {
        return this._cfgObj;
      };
      GameStatistics.prototype.getCurrentMapJson = function() {
        if (this._mapDatas.length > 0) return this._mapDatas[this._mapIndex];
        return {};
      };
      GameStatistics.prototype.nextMapJson = function() {
        if (this._mapIndex + 1 < this._mapDatas.length) {
          this._mapIndex += 1;
          return true;
        }
        return false;
      };
      GameStatistics.prototype.getTotalScore = function() {
        return this._totalScore;
      };
      GameStatistics.prototype.setTotalScore = function(score) {
        this._totalScore = Math.max(0, score);
      };
      GameStatistics.prototype.getHistoryHighScore = function() {
        return this._historyHighscore;
      };
      GameStatistics.prototype.setHistoryHighScore = function(score) {
        score && (this._historyHighscore = Math.max(0, score));
      };
      GameStatistics.prototype.getStarScores = function() {
        return this._startScores;
      };
      GameStatistics.prototype.getStarsCount = function() {
        var index = 0;
        for (;index < this._startScores.length; index++) {
          var score = this._startScores[index];
          if (score > this._totalScore) break;
        }
        return index;
      };
      GameStatistics.prototype.getCompleteScore = function() {
        return this._completeScore;
      };
      GameStatistics.prototype.setCompleteScore = function(score) {
        this._completeScore = score;
      };
      GameStatistics.prototype.getCompleteReward = function() {
        return this._completeReward;
      };
      GameStatistics.prototype.getBonusStepCount = function() {
        return this._bonusStepCount;
      };
      GameStatistics.prototype.setBonusStepCount = function(count) {
        this._bonusStepCount = count;
      };
      GameStatistics.prototype.getCompleteWithLastStep = function() {
        return this._completeWithLastStep;
      };
      GameStatistics.prototype.setCompleteWithLastStep = function(value) {
        this._completeWithLastStep = value;
      };
      GameStatistics.prototype.getTargetMap = function() {
        return this._targetMap;
      };
      GameStatistics.prototype.getRemainingTargets = function() {
        var result = {};
        for (var key in this._targetMap) {
          var targetAmount = this._targetMap[key];
          var collectionID = Number(key);
          var collectedAmount = this.getCollectedEntityAmount(collectionID);
          var leftAmount = targetAmount - collectedAmount;
          result[collectionID] = Math.max(leftAmount, 0);
        }
        return result;
      };
      GameStatistics.prototype.getTargetAmount = function(collectionID) {
        if (this._targetMap.hasOwnProperty(collectionID)) return this._targetMap[collectionID];
        return 0;
      };
      GameStatistics.prototype.finishAllTarget = function() {
        var finish = true;
        for (var key in this._targetMap) {
          var targetAmount = this._targetMap[key];
          var collectionID = Number(key);
          var collectedAmount = this.getCollectedEntityAmount(collectionID);
          if (collectedAmount < targetAmount) {
            finish = false;
            break;
          }
        }
        return finish;
      };
      GameStatistics.prototype.isTargetCollectionID = function(collectionID) {
        var targetAmount = this.getTargetAmount(collectionID);
        var currentAmount = this.getCollectedEntityAmount(collectionID);
        if (currentAmount < targetAmount) return true;
        return false;
      };
      GameStatistics.prototype.setTargetAmount = function(collectionID, amount) {
        if (collectionID == CollectionID_1.CollectionID.None) return;
        amount = Math.max(amount, 0);
        this._targetMap[collectionID] = amount;
      };
      GameStatistics.prototype.getCollectedEntityMap = function() {
        return this._collectedEntityMap;
      };
      GameStatistics.prototype.getCollectedEntityAmount = function(collectionID) {
        if (this._collectedEntityMap.hasOwnProperty(collectionID)) return this._collectedEntityMap[collectionID];
        return 0;
      };
      GameStatistics.prototype.setCollectedEntityAmount = function(collectionID, amount) {
        if (collectionID == CollectionID_1.CollectionID.None) return;
        amount = Math.max(amount, 0);
        this._collectedEntityMap[collectionID] = amount;
      };
      GameStatistics.prototype.getCollectedSupplyMap = function() {
        return this._collectedSupplyMap;
      };
      GameStatistics.prototype.getCollectedSupplyAmount = function(itemID) {
        if (this._collectedSupplyMap.hasOwnProperty(itemID)) return this._collectedSupplyMap[itemID];
        return 0;
      };
      GameStatistics.prototype.setCollectedSupplyAmount = function(itemID, amount) {
        if (itemID == GameCurrencyType_1.GameCurrencyType.NoneType) return;
        amount = Math.max(amount, 0);
        this._collectedSupplyMap[itemID] = amount;
      };
      GameStatistics.prototype.getRecordedSupplyInfo = function(itemID) {
        return this._recordedSupplyMap[itemID];
      };
      GameStatistics.prototype.getPowerAmount = function(energyID) {
        if (this._collectedEnergyMap.hasOwnProperty(energyID)) return this._collectedEnergyMap[energyID];
        return 0;
      };
      GameStatistics.prototype.setPowerAmount = function(energyID, amount) {
        if (energyID == PowerID_1.PowerID.None) return;
        amount = Math.max(amount, 0);
        this._collectedEnergyMap[energyID] = amount;
      };
      GameStatistics.prototype.getPuppyTotalStepCount = function() {
        return this._puppyStepCount;
      };
      GameStatistics.prototype.getPuppyLeftSteps = function() {
        return this._puppyStepCount - this.getPowerAmount(PowerID_1.PowerID.PuppyMovedStep);
      };
      GameStatistics.prototype.getDropEntityMap = function() {
        return this._dropEntityMap;
      };
      GameStatistics.prototype.getLimitedEntityMap = function() {
        return this._limitEntityMap;
      };
      GameStatistics.prototype.getLimitedGroupMap = function() {
        return this._limitGroupMap;
      };
      GameStatistics.prototype.resetDropConfig = function() {
        this.initDropEntities("red|green|blue|yellow|orange|purple", "100|100|100|100|100|100");
        GameMath_1.default.clearObject(this._limitEntityMap);
        GameMath_1.default.clearObject(this._limitGroupMap);
      };
      GameStatistics.prototype.getLaunchGearMap = function() {
        return this._prewarGear;
      };
      GameStatistics.prototype.clearLaunchGears = function() {
        GameMath_1.default.clearObject(this._prewarGear);
      };
      GameStatistics.prototype.setPrewarGearAmount = function(id, amount) {
        if (id == GameCurrencyType_1.GameCurrencyType.NoneType) return;
        this._prewarGear[id] = Math.max(0, amount);
      };
      GameStatistics.prototype.getPrewarGearAmount = function(id) {
        var result = 0;
        this._prewarGear.hasOwnProperty(id) && (result = this._prewarGear[id]);
        return result;
      };
      GameStatistics.prototype.getAvailableGearItemAmount = function(itemID) {
        var reslut = 0;
        this._availableGear.hasOwnProperty(reslut) && (reslut = this._availableGear[itemID]);
        return reslut;
      };
      GameStatistics.prototype.setAvailableGearItemAmount = function(itemID, amount) {
        this._availableGear[itemID] = amount;
      };
      GameStatistics.prototype.getUsedGearMap = function() {
        return this._usedGear;
      };
      GameStatistics.prototype.setUsedGearAmount = function(id, amount) {
        if (id == GameCurrencyType_1.GameCurrencyType.NoneType) return;
        this._usedGear[id] = Math.max(0, amount);
      };
      GameStatistics.prototype.getUsedGearAmount = function(id) {
        var result = 0;
        this._usedGear.hasOwnProperty(id) && (result = this._usedGear[id]);
        return result;
      };
      GameStatistics.prototype.getLimitedGearMap = function() {
        return this._limitedGear;
      };
      GameStatistics.prototype.setLimitedGearAmount = function(id, amount) {
        if (id == GameCurrencyType_1.GameCurrencyType.NoneType) return;
        this._limitedGear[id] = amount;
      };
      GameStatistics.prototype.getLimitedGearAmount = function(id) {
        var result = -1;
        this._limitedGear.hasOwnProperty(id) && (result = this._limitedGear[id]);
        return result;
      };
      GameStatistics.prototype.getEventTargets = function() {
        return this._eventTargets;
      };
      GameStatistics.prototype.setEventTargets = function(targets) {
        this._eventTargets = targets;
      };
      GameStatistics.prototype.getLevel = function() {
        return this._level;
      };
      GameStatistics.prototype.resetTick = function() {
        this._totalTime = 0;
      };
      GameStatistics.prototype.tick = function(delta) {
        this._totalTime += delta;
      };
      GameStatistics.prototype.getTick = function() {
        return this._totalTime;
      };
      GameStatistics.prototype.hadOperated = function() {
        var isEmpty = true;
        if (!GameMath_1.default.isEmptyObject(this._usedGear)) return true;
        if (this.getPowerAmount(PowerID_1.PowerID.UsedSwap) > 0) return true;
        return false;
      };
      GameStatistics.prototype.getShareForMoreStepTimes = function() {
        return this._shareForMoreStepTimes;
      };
      GameStatistics.prototype.setShareForMoreStepTimes = function(times) {
        this._shareForMoreStepTimes = times;
      };
      GameStatistics.prototype.getEndUIData = function() {
        return this._endUIData;
      };
      GameStatistics.prototype.setEndUIData = function(data) {
        this._endUIData = data;
      };
      GameStatistics.prototype.clear = function() {
        this._mapIndex = 0;
        GameMath_1.default.clearArray(this._mapDatas);
        this._dropEntityMap = {};
        this._targetMap = {};
        this._limitEntityMap = {};
        this._collectedEntityMap = {};
        this._collectedEnergyMap = {};
      };
      GameStatistics.prototype.initMapJsonsWithMapNames = function(nameString) {
        var mapIds = nameString.split("|");
        for (var _i = 0, mapIds_1 = mapIds; _i < mapIds_1.length; _i++) {
          var mapId = mapIds_1[_i];
          var data = {};
          if (GameConfig_1.default.IsDebug && GameConfig_1.default.DebugMatchType != GameConfig_1.DebugMatchType.None) data = cc.loader.getRes("maps/" + mapId).json; else {
            var tripleMap = new CFGTripleMap_1.CFGTripleMap();
            var mapStr = tripleMap.getMapDataByMapId(mapId);
            data = JSON.parse(mapStr);
          }
          this._mapDatas.push(data);
        }
      };
      GameStatistics.prototype.initTargetEntities = function(keys, values) {
        this._targetMap = GameStatistics.phraseTargetEntities(keys, values);
      };
      GameStatistics.prototype.initDropEntities = function(keys, values) {
        this._dropEntityMap = GameStatistics.phraseDropEntities(keys, values);
      };
      GameStatistics.prototype.initLimitEntities = function(keys, values) {
        this._limitEntityMap = GameStatistics.phraseLimitEntities(keys, values);
        this._limitGroupMap = GameStatistics.phraseLimitGroup(keys, values);
      };
      GameStatistics.prototype.initStarScores = function(values) {
        if (values) {
          this._startScores.length = 0;
          var scores = values.split("|");
          for (var _i = 0, scores_1 = scores; _i < scores_1.length; _i++) {
            var score = scores_1[_i];
            this._startScores.push(Number(score));
          }
        }
      };
      GameStatistics.prototype.initCompleteReward = function(keys, values) {
        this._completeReward = GameStatistics.phraseCompleteReward(keys, values);
      };
      GameStatistics.prototype.initTargetGrass = function(mapDatas) {
        var totalGrassCount = 0;
        for (var _i = 0, mapDatas_1 = mapDatas; _i < mapDatas_1.length; _i++) {
          var data = mapDatas_1[_i];
          var tmxPhraser = new TMXJsonPhraser_1.default(data);
          var tiles = tmxPhraser.getTileLayerWithName(TMXConfigInfoKeys_1.default.CELLS_LAYER_KEY);
          var mapSize = tmxPhraser.getMapSize();
          for (var column = 0; column < mapSize.width; column++) for (var row = 0; row < mapSize.height; row++) {
            var gid = tiles[row * mapSize.width + column];
            var valueMap = tmxPhraser.getPropertieFromGID(gid);
            var isEmpty = true;
            for (var key in valueMap) {
              isEmpty = false;
              break;
            }
            if (!isEmpty) {
              var kindID = Number(valueMap["Kind"]);
              IdentifierManager_1.default.getInstance().needLayoutGrassFromKindID(kindID) && totalGrassCount++;
            }
          }
          tiles = tmxPhraser.getTileLayerWithName(TMXConfigInfoKeys_1.default.CONVEYERS_LAYER_KEY);
          mapSize = tmxPhraser.getMapSize();
          for (var column = 0; column < mapSize.width; column++) for (var row = 0; row < mapSize.height; row++) {
            var gid = tiles[row * mapSize.width + column];
            var valueMap = tmxPhraser.getPropertieFromGID(gid);
            var isEmpty = true;
            for (var key in valueMap) {
              isEmpty = false;
              break;
            }
            if (!isEmpty) {
              var kindID = Number(valueMap["Kind"]);
              IdentifierManager_1.default.getInstance().needLayoutGrassFromKindID(kindID) && totalGrassCount++;
            }
          }
          tiles = tmxPhraser.getTileLayerWithName(TMXConfigInfoKeys_1.default.FLOORS_LAYER_KEY);
          mapSize = tmxPhraser.getMapSize();
          for (var column = 0; column < mapSize.width; column++) for (var row = 0; row < mapSize.height; row++) {
            var gid = tiles[row * mapSize.width + column];
            var valueMap = tmxPhraser.getPropertieFromGID(gid);
            var isEmpty = true;
            for (var key in valueMap) {
              isEmpty = false;
              break;
            }
            if (!isEmpty) {
              var kindID = Number(valueMap["Kind"]);
              kindID == Number(KindID_1.KindID.FloorGrass) && totalGrassCount--;
            }
          }
        }
        this.setTargetAmount(CollectionID_1.CollectionID.FloorGrass, totalGrassCount);
      };
      GameStatistics.prototype.initTargetPopsicle = function(mapDatas) {
        for (var _i = 0, mapDatas_2 = mapDatas; _i < mapDatas_2.length; _i++) {
          var data = mapDatas_2[_i];
          var tmxPhraser = new TMXJsonPhraser_1.default(data);
          var layerKey = TMXConfigInfoKeys_1.default.POPSICLES_LAYER_KEY;
          var objects = tmxPhraser.getObjectLayerWithName(layerKey);
          for (var _a = 0, objects_1 = objects; _a < objects_1.length; _a++) {
            var info = objects_1[_a];
            var typeString = TMXConfigInfoKeys_1.default.CFG_POPSICLE_VALUE_NORMAL;
            info.properties.hasOwnProperty(TMXConfigInfoKeys_1.default.CFG_POPSICLE_KEY_TYPE) && (typeString = info.properties[TMXConfigInfoKeys_1.default.CFG_POPSICLE_KEY_TYPE]);
            var collectionID = CollectionID_1.CollectionID.PopsicleNormal;
            typeString == TMXConfigInfoKeys_1.default.CFG_POPSICLE_VALUE_LINE ? collectionID = CollectionID_1.CollectionID.PopsicleLine : typeString == TMXConfigInfoKeys_1.default.CFG_POPSICLE_VALUE_BOOM && (collectionID = CollectionID_1.CollectionID.PopsicleBoom);
            this.setTargetAmount(collectionID, this.getTargetAmount(collectionID) + 1);
          }
        }
      };
      GameStatistics.prototype.initTargetPath = function(mapDatas) {
        this._puppyStepCount = 0;
        var totalRoadCount = 0;
        for (var _i = 0, mapDatas_3 = mapDatas; _i < mapDatas_3.length; _i++) {
          var json = mapDatas_3[_i];
          var tmxPhraser = TMXJsonPhraser_1.default.create(json);
          var mapSize = tmxPhraser.getMapSize();
          var floorTiles = tmxPhraser.getTileLayerWithName(TMXConfigInfoKeys_1.default.FLOORS_LAYER_KEY);
          for (var column = 0; column < mapSize.width; column++) for (var row = 0; row < mapSize.height; row++) {
            var gid = floorTiles[row * mapSize.width + column];
            var valueMap = tmxPhraser.getPropertieFromGID(gid);
            if (!GameMath_1.default.isEmptyObject(valueMap)) {
              var kindID = valueMap["Kind"];
              kindID != KindID_1.KindID.FloorRoadLineVU && kindID != KindID_1.KindID.FloorRoadLineHR && kindID != KindID_1.KindID.FloorRoadLineVD && kindID != KindID_1.KindID.FloorRoadLineHL && kindID != KindID_1.KindID.FloorRoadTurnLdD && kindID != KindID_1.KindID.FloorRoadTurnLuL && kindID != KindID_1.KindID.FloorRoadTurnRuU && kindID != KindID_1.KindID.FloorRoadTurnRdR && kindID != KindID_1.KindID.FloorRoadTurnRdD && kindID != KindID_1.KindID.FloorRoadTurnRuR && kindID != KindID_1.KindID.FloorRoadTurnLuU && kindID != KindID_1.KindID.FloorRoadTurnLdL || totalRoadCount++;
            }
          }
          var itemTiles = tmxPhraser.getTileLayerWithName(TMXConfigInfoKeys_1.default.ITEMS_LAYER_KEY);
          for (var column = 0; column < mapSize.width; column++) for (var row = 0; row < mapSize.height; row++) {
            var gid = itemTiles[row * mapSize.width + column];
            var valueMap = tmxPhraser.getPropertieFromGID(gid);
            if (!GameMath_1.default.isEmptyObject(valueMap)) {
              var kindID = valueMap["Kind"];
              kindID != KindID_1.KindID.ItemDogHouse && kindID != KindID_1.KindID.ItemBalloon || totalRoadCount--;
            }
          }
        }
        this._puppyStepCount = totalRoadCount;
      };
      GameStatistics.phraseTargetEntities = function(keys, values) {
        var targetEntityMap = {};
        if (keys && values) {
          var keysArr = keys.split("|");
          var valuesArr = values.split("|");
          var keyLen = keysArr.length;
          var valLen = valuesArr.length;
          for (var i = 0; i < keyLen; i++) {
            if (valLen <= i) break;
            var type = keysArr[i];
            var collectionID = IdentifierManager_1.default.getInstance().getCollectionIDFromString(type);
            collectionID != CollectionID_1.CollectionID.None && (targetEntityMap[collectionID] = Number(valuesArr[i]));
          }
        }
        return targetEntityMap;
      };
      GameStatistics.phraseDropEntities = function(keys, values) {
        var dropEntityMap = {};
        if (keys && values) {
          var keysArr = keys.split("|");
          var valuesArr = values.split("|");
          var keyLen = keysArr.length;
          var valLen = valuesArr.length;
          for (var i = 0; i < keyLen; i++) {
            if (valLen <= i) break;
            var type = keysArr[i];
            var entityID = IdentifierManager_1.default.getInstance().getEntityIDFromString(type);
            entityID != EntityID_1.EntityID.None && (dropEntityMap[entityID] = 100 * Number(valuesArr[i]));
          }
          var basicColors = [ EntityID_1.EntityID.ItemNormalRed, EntityID_1.EntityID.ItemNormalGreen, EntityID_1.EntityID.ItemNormalBlue, EntityID_1.EntityID.ItemNormalYellow, EntityID_1.EntityID.ItemNormalOrange, EntityID_1.EntityID.ItemNormalPurple ];
          var totalProbability = 0;
          for (var _i = 0, basicColors_1 = basicColors; _i < basicColors_1.length; _i++) {
            var entityID = basicColors_1[_i];
            dropEntityMap.hasOwnProperty(entityID) && (totalProbability += dropEntityMap[entityID]);
            var entity = dropEntityMap[entityID];
          }
          for (var i = 0; i < keyLen; i++) {
            if (valLen <= i) break;
            var type = keysArr[i];
            var groupID = IdentifierManager_1.default.getInstance().getEntityGroupIDFromString(type);
            if (groupID != EntityGroupID_1.EntityGroupID.None) {
              var entityIDs = IdentifierManager_1.default.getInstance().getEntityIDsFromEntityGroupID(groupID);
              for (var _a = 0, entityIDs_1 = entityIDs; _a < entityIDs_1.length; _a++) {
                var entityID = entityIDs_1[_a];
                var basicEntityID = IdentifierManager_1.default.getInstance().getCorrespondingNormlaEntityID(entityID);
                dropEntityMap.hasOwnProperty(basicEntityID) && (dropEntityMap[entityID] = 100 * Number(valuesArr[i]) * (1 * dropEntityMap[basicEntityID] / totalProbability));
              }
            }
          }
        }
        return dropEntityMap;
      };
      GameStatistics.phraseLimitEntities = function(keys, values) {
        var limitEntityMap = {};
        if (keys && values) {
          var keysArr = keys.split("|");
          var valuesArr = values.split("|");
          var keyLen = keysArr.length;
          var valLen = valuesArr.length;
          for (var i = 0; i < keyLen; i++) {
            if (valLen <= i) break;
            var type = keysArr[i];
            var entityID = IdentifierManager_1.default.getInstance().getEntityIDFromString(type);
            entityID != EntityID_1.EntityID.None && (limitEntityMap[entityID] = Number(valuesArr[i]));
          }
        }
        return limitEntityMap;
      };
      GameStatistics.phraseLimitGroup = function(keys, values) {
        var limitGroupMap = {};
        if (keys && values) {
          var keysArr = keys.split("|");
          var valuesArr = values.split("|");
          var keyLen = keysArr.length;
          var valLen = valuesArr.length;
          for (var i = 0; i < keyLen; i++) {
            if (valLen <= i) break;
            var type = keysArr[i];
            var groupID = IdentifierManager_1.default.getInstance().getEntityGroupIDFromString(type);
            groupID != EntityGroupID_1.EntityGroupID.None && (limitGroupMap[groupID] = Number(valuesArr[i]));
          }
        }
        return limitGroupMap;
      };
      GameStatistics.phraseCompleteReward = function(keys, values) {
        var completeRewardMap = {};
        if (keys && values) {
          var keysArr = keys.split("|");
          var valuesArr = values.split("|");
          var keyLen = keysArr.length;
          var valLen = valuesArr.length;
          for (var i = 0; i < keyLen; i++) {
            if (valLen <= i) break;
            var type = keysArr[i];
            var itemID = IdentifierManager_1.default.getInstance().getItemIDFromName(type);
            itemID != GameCurrencyType_1.GameCurrencyType.NoneType && (completeRewardMap[itemID] = Number(valuesArr[i]));
          }
        }
        return completeRewardMap;
      };
      return GameStatistics;
    }();
    exports.default = GameStatistics;
    cc._RF.pop();
  }, {
    "../../../config/CFGTripleLevel": "CFGTripleLevel",
    "../../../config/CFGTripleLevelGrass": "CFGTripleLevelGrass",
    "../../../config/CFGTripleLevelOrder": "CFGTripleLevelOrder",
    "../../../config/CFGTripleLevelPath": "CFGTripleLevelPath",
    "../../../config/CFGTripleLevelPopsicles": "CFGTripleLevelPopsicles",
    "../../../config/CFGTripleMap": "CFGTripleMap",
    "../../../define/GameConfig": "GameConfig",
    "../../../define/GameCurrencyType": "GameCurrencyType",
    "../../../extend/utils/GameMath": "GameMath",
    "../../../extend/utils/TMXJsonPhraser": "TMXJsonPhraser",
    "../defines/CollectionID": "CollectionID",
    "../defines/EntityGroupID": "EntityGroupID",
    "../defines/EntityID": "EntityID",
    "../defines/IdentifierManager": "IdentifierManager",
    "../defines/KindID": "KindID",
    "../defines/PowerID": "PowerID",
    "../defines/TMXConfigInfoKeys": "TMXConfigInfoKeys",
    "../userinterface/GameResultPanel/GameResultBasePanel": "GameResultBasePanel"
  } ],
  GameTargetBase: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "cd002y/f9NNApIDqX1Q+sQC", "GameTargetBase");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.GameTargetBase = exports.GameTargetType = void 0;
    var GameTargetType;
    (function(GameTargetType) {
      GameTargetType[GameTargetType["None"] = 0] = "None";
      GameTargetType[GameTargetType["Single"] = 1] = "Single";
      GameTargetType[GameTargetType["Group"] = 2] = "Group";
    })(GameTargetType = exports.GameTargetType || (exports.GameTargetType = {}));
    var GameTargetBase = function() {
      function GameTargetBase() {
        this.type = GameTargetType.None;
        this.targetAmount = 0;
      }
      GameTargetBase.prototype.getType = function() {
        return this.type;
      };
      GameTargetBase.prototype.getTargetAmount = function() {
        return this.targetAmount;
      };
      GameTargetBase.prototype.setTargetAmount = function(targetAmount) {
        return this.targetAmount = targetAmount;
      };
      GameTargetBase.prototype.initWithType = function(type) {
        this.type = type;
      };
      GameTargetBase.prototype.getCollectionIDs = function() {
        return [];
      };
      GameTargetBase.prototype.getIconFrameName = function() {
        return "";
      };
      return GameTargetBase;
    }();
    exports.GameTargetBase = GameTargetBase;
    cc._RF.pop();
  }, {} ],
  GameTargetSingle: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "6de9bAkjqZIVoWJtjibWUQc", "GameTargetSingle");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var GameTargetBase_1 = require("./GameTargetBase");
    var CollectionID_1 = require("../../defines/CollectionID");
    var IdentifierManager_1 = require("../../defines/IdentifierManager");
    var GameTargetSingle = function(_super) {
      __extends(GameTargetSingle, _super);
      function GameTargetSingle() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.collectionID = CollectionID_1.CollectionID.None;
        return _this;
      }
      GameTargetSingle.create = function(collectionID, amount) {
        var result = new GameTargetSingle();
        result.init(collectionID, amount);
        return result;
      };
      GameTargetSingle.prototype.init = function(collectionID, amount) {
        _super.prototype.initWithType.call(this, GameTargetBase_1.GameTargetType.Single);
        this.collectionID = collectionID;
        this.setTargetAmount(amount);
      };
      GameTargetSingle.prototype.getCollectionIDs = function() {
        return [ this.collectionID ];
      };
      GameTargetSingle.prototype.getIconFrameName = function() {
        return IdentifierManager_1.default.getInstance().getFrameNameFromCollectionID(this.collectionID);
      };
      return GameTargetSingle;
    }(GameTargetBase_1.GameTargetBase);
    exports.default = GameTargetSingle;
    cc._RF.pop();
  }, {
    "../../defines/CollectionID": "CollectionID",
    "../../defines/IdentifierManager": "IdentifierManager",
    "./GameTargetBase": "GameTargetBase"
  } ],
  GearBar: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "8ebb9IAwohLDYC/Q3f+EDKs", "GearBar");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.GearBarData = exports.GearBarType = exports.GearBarState = void 0;
    var GameCurrencyType_1 = require("../../../define/GameCurrencyType");
    var PowerID_1 = require("../defines/PowerID");
    var GameSceneBase_1 = require("../GameSceneBase");
    var GearItem_1 = require("./GearItem");
    var GearBarState;
    (function(GearBarState) {
      GearBarState[GearBarState["None"] = 0] = "None";
      GearBarState[GearBarState["Down"] = 1] = "Down";
      GearBarState[GearBarState["Up"] = 2] = "Up";
    })(GearBarState = exports.GearBarState || (exports.GearBarState = {}));
    var GearBarType;
    (function(GearBarType) {
      GearBarType[GearBarType["Normal"] = 0] = "Normal";
      GearBarType[GearBarType["Drawer"] = 1] = "Drawer";
    })(GearBarType = exports.GearBarType || (exports.GearBarType = {}));
    var GearBarData = function() {
      function GearBarData() {
        this.type = GearBarType.Normal;
      }
      GearBarData.createWithData = function(data) {
        var type = GearBarType.Normal;
        if (data && data.hasOwnProperty("BT")) {
          var value = data["BT"];
          switch (value) {
           case 0:
            type = GearBarType.Normal;
            break;

           case 3:
            type = GearBarType.Drawer;
          }
        }
        return GearBarData.create(type);
      };
      GearBarData.create = function(type) {
        var result = new GearBarData();
        result.type = type;
        return result;
      };
      return GearBarData;
    }();
    exports.GearBarData = GearBarData;
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var GearBar = function(_super) {
      __extends(GearBar, _super);
      function GearBar() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.itemsNode = [];
        _this.instroductionLabelDown = null;
        _this.drawUpButton = null;
        _this.drawUpButtonFrame = null;
        _this.instroductionLabelUp = null;
        _this.fallDownButton = null;
        _this.fallDownLayer = null;
        _this.GearBarRoot = null;
        _this.pullUpCover = null;
        _this._gameScene = null;
        _this._gearItems = [];
        _this._lastFocusID = GameCurrencyType_1.GameCurrencyType.NoneType;
        _this._state = GearBarState.Down;
        _this._type = GearBarType.Normal;
        _this._pullUpHeight = GearBar_1.AdBannerDefaultHeight;
        _this._fallDownHeight = 0;
        _this._lastLeftStepCount = 0;
        _this._hasShownAdBanner = false;
        return _this;
      }
      GearBar_1 = GearBar;
      GearBar.prototype.getAvailableAmount = function(itemID) {
        return this._gameScene.getAvailableGearItemAmount(itemID);
      };
      GearBar.prototype.drawUp = function(animated) {
        void 0 === animated && (animated = false);
        if (animated) {
          var action = cc.moveTo(.15, cc.v2(0, this._pullUpHeight));
          action.setTag(1001);
          this.GearBarRoot.stopActionByTag(1001);
          this.GearBarRoot.runAction(action);
          this._gameScene.getPowerAmount(PowerID_1.PowerID.AvailableSwap) <= 5 && this.playAlertGeatItemsAnimation(.15);
        } else this.GearBarRoot.setPosition(cc.v2(0, this._pullUpHeight));
      };
      GearBar.prototype.fallDown = function(animated) {
        void 0 === animated && (animated = false);
        if (animated) {
          var action = cc.moveTo(.15, cc.v2(0, this._fallDownHeight));
          action.setTag(1001);
          this.GearBarRoot.stopActionByTag(1001);
          this.GearBarRoot.runAction(action);
        } else this.GearBarRoot.setPosition(cc.v2(0, this._fallDownHeight));
      };
      GearBar.prototype.playAlertGeatItemsAnimation = function(delay) {
        if (!this._gameScene.hasShowCompleteBanner()) for (var index = 0; index < this._gearItems.length; index++) {
          var gearItem = this._gearItems[index];
          gearItem.playAlertAnimation(.4 * index + delay);
        }
      };
      GearBar.prototype.getState = function() {
        return this._state;
      };
      GearBar.prototype.setState = function(state, animated) {
        void 0 === animated && (animated = false);
        var oldState = this._state;
        this._state = state;
        switch (this._state) {
         case GearBarState.Down:
          this._type == GearBarType.Drawer ? this.drawUpButtonFrame.active = this._hasShownAdBanner : this.drawUpButtonFrame.active = false;
          this.fallDownButton.active = false;
          this.fallDownLayer.active = false;
          this.instroductionLabelUp.node.active = true;
          this.instroductionLabelDown.node.active = false;
          animated && oldState != this._state, this.fallDown(animated);
          break;

         case GearBarState.Up:
          this.drawUpButtonFrame.active = false;
          this.fallDownButton.active = true;
          this.fallDownLayer.active = true;
          this.instroductionLabelUp.node.active = false;
          this.instroductionLabelDown.node.active = true;
          animated && oldState != this._state, this.drawUp(animated);
        }
      };
      GearBar.prototype.getType = function() {
        return this._type;
      };
      GearBar.prototype.setType = function(type) {
        this._type = type;
        switch (this._type) {
         case GearBarType.Normal:
          this.setState(GearBarState.Down);
          this.drawUpButtonFrame.active = false;
          this.instroductionLabelDown.node.active = true;
          this.instroductionLabelUp.node.active = false;
          var widget = this._gameScene.gridFrame.getComponent(cc.Widget);
          widget && (widget.bottom = GearBar_1.GearBarDefaultHeight);
          this.pullUpCover.active = false;
        }
      };
      GearBar.prototype.setData = function(data) {
        this.setType(data.type);
      };
      GearBar.prototype.focusItemWithGearID = function(itemID) {
        var gearName = "";
        var instrodution = "";
        switch (itemID) {
         case GameCurrencyType_1.GameCurrencyType.AidHammer:
         case GameCurrencyType_1.GameCurrencyType.AidBomb:
         case GameCurrencyType_1.GameCurrencyType.AidSwap:
        }
        this.instroductionLabelUp && "" != gearName && "" != instrodution && (this.instroductionLabelUp.string = gearName + ":" + instrodution);
        this.instroductionLabelDown && "" != gearName && "" != instrodution && (this.instroductionLabelDown.string = gearName + ":" + instrodution);
        if (itemID == GameCurrencyType_1.GameCurrencyType.NoneType) {
          if (this._lastFocusID != GameCurrencyType_1.GameCurrencyType.NoneType) {
            this._gameScene.backgroundMask && this._gameScene.backgroundMask.runAction(cc.fadeTo(.25, 0).easing(cc.easeIn(2)));
            this._gameScene.cancelGearLayer && (this._gameScene.cancelGearLayer.active = false);
            this.instroductionLabelUp && (this.instroductionLabelUp.node.opacity = 0);
            this.instroductionLabelDown && (this.instroductionLabelDown.node.opacity = 0);
          }
        } else if (this._lastFocusID == GameCurrencyType_1.GameCurrencyType.NoneType) {
          this._gameScene.backgroundMask && this._gameScene.backgroundMask.runAction(cc.fadeTo(.25, 150).easing(cc.easeIn(2)));
          this._gameScene.cancelGearLayer && (this._gameScene.cancelGearLayer.active = true);
          this.instroductionLabelUp && (this.instroductionLabelUp.node.opacity = 255);
          this.instroductionLabelDown && (this.instroductionLabelDown.node.opacity = 255);
        }
        for (var _i = 0, _a = this._gearItems; _i < _a.length; _i++) {
          var gearItem = _a[_i];
          gearItem.getItemID() == itemID ? gearItem.node.zIndex = 2 : gearItem.node.zIndex = 0;
        }
        this._lastFocusID = itemID;
        switch (this._type) {
         case GearBarType.Drawer:
          this.setState(GearBarState.Down, true);
        }
      };
      GearBar.prototype.onItemTabbed = function(item) {
        this._gameScene.selectGear(item.getItemID());
      };
      GearBar.prototype.updateGears = function() {
        for (var _i = 0, _a = this._gearItems; _i < _a.length; _i++) {
          var item = _a[_i];
          item.updataAmount();
          item.setLimitedAmount(this._gameScene.getLimitedGearAmount(item.getItemID()));
          item.setUsedAmount(this._gameScene.getUsedGearAmount(item.getItemID()));
        }
        var currentLeftStepCount = this._gameScene.getPowerAmount(PowerID_1.PowerID.AvailableSwap);
        if (currentLeftStepCount <= 5 && this._lastLeftStepCount != currentLeftStepCount) {
          this.playAlertAnimation();
          this.playAlertGeatItemsAnimation(0);
        }
        this._lastLeftStepCount = currentLeftStepCount;
      };
      GearBar.prototype.getItemWithGearID = function(itemID) {
        var result = null;
        for (var _i = 0, _a = this._gearItems; _i < _a.length; _i++) {
          var item = _a[_i];
          if (item.getItemID() == itemID) {
            result = item;
            break;
          }
        }
        return result;
      };
      GearBar.prototype.getGearIconWorldPos = function(itemID) {
        var item = this.getItemWithGearID(itemID);
        if (item) return item.node.parent.convertToWorldSpaceAR(item.node.position);
        return cc.Vec2.ZERO;
      };
      GearBar.prototype.playAlertAnimation = function() {
        if (!this._gameScene.hasShowCompleteBanner()) {
          var hasAvailableItem = false;
          for (var _i = 0, _a = this._gearItems; _i < _a.length; _i++) {
            var gearItem = _a[_i];
            if (gearItem.getIsAvailable()) {
              hasAvailableItem = true;
              break;
            }
          }
          if (hasAvailableItem) {
            var anim = this.getComponent(cc.Animation);
            if (anim) {
              var currentClip = anim.currentClip;
              if (currentClip && "alert1" == currentClip.name) return;
              anim.play("alert1");
            }
          }
        }
      };
      GearBar.prototype.onDrawUpButtonTabbed = function(event) {
        this.setState(GearBarState.Up, true);
      };
      GearBar.prototype.onFallDownButtonTabbed = function(event) {
        this.setState(GearBarState.Down, true);
      };
      GearBar.prototype.onLoad = function() {
        var canvas = cc.find("Canvas");
        canvas && (this._gameScene = canvas.getComponent(GameSceneBase_1.default));
        var itemIds = [ GameCurrencyType_1.GameCurrencyType.AidHammer, GameCurrencyType_1.GameCurrencyType.AidBomb, GameCurrencyType_1.GameCurrencyType.AidSwap ];
        for (var index = 0; index < this.itemsNode.length; index++) {
          var gearItem = this.itemsNode[index].getComponent(GearItem_1.default);
          gearItem.setItemID(itemIds[index]);
          gearItem.setGearBar(this);
          this._gearItems[index] = gearItem;
        }
        this.instroductionLabelUp.node.opacity = 0;
        this.instroductionLabelDown.node.opacity = 0;
        this.drawUpButton.on("touchend", this.onDrawUpButtonTabbed, this);
        this.fallDownButton.on("touchend", this.onFallDownButtonTabbed, this);
        this.fallDownLayer.on("touchend", this.onFallDownButtonTabbed, this);
        this.setType(GearBarType.Normal);
        this.setState(GearBarState.Down);
        this.pullUpCover.active = false;
        this.schedule(this.updateGears, 1);
      };
      GearBar.prototype.start = function() {};
      GearBar.prototype.onDestroy = function() {
        this.itemsNode = null;
        this._gameScene = null;
        this._gearItems = null;
      };
      var GearBar_1;
      GearBar.AdBannerDefaultHeight = 250;
      GearBar.GearBarDefaultHeight = 170;
      __decorate([ property([ cc.Node ]) ], GearBar.prototype, "itemsNode", void 0);
      __decorate([ property(cc.Label) ], GearBar.prototype, "instroductionLabelDown", void 0);
      __decorate([ property(cc.Node) ], GearBar.prototype, "drawUpButton", void 0);
      __decorate([ property(cc.Node) ], GearBar.prototype, "drawUpButtonFrame", void 0);
      __decorate([ property(cc.Label) ], GearBar.prototype, "instroductionLabelUp", void 0);
      __decorate([ property(cc.Node) ], GearBar.prototype, "fallDownButton", void 0);
      __decorate([ property(cc.Node) ], GearBar.prototype, "fallDownLayer", void 0);
      __decorate([ property(cc.Node) ], GearBar.prototype, "GearBarRoot", void 0);
      __decorate([ property(cc.Node) ], GearBar.prototype, "pullUpCover", void 0);
      GearBar = GearBar_1 = __decorate([ ccclass ], GearBar);
      return GearBar;
    }(cc.Component);
    exports.default = GearBar;
    cc._RF.pop();
  }, {
    "../../../define/GameCurrencyType": "GameCurrencyType",
    "../GameSceneBase": "GameSceneBase",
    "../defines/PowerID": "PowerID",
    "./GearItem": "GearItem"
  } ],
  GearID: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "58064kO/epD5YK5C6tHYh7i", "GearID");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.GearID = void 0;
    var GearID;
    (function(GearID) {
      GearID[GearID["None"] = 0] = "None";
    })(GearID = exports.GearID || (exports.GearID = {}));
    cc._RF.pop();
  }, {} ],
  GearItem: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "c986awDkvdKZ4Y5F0cTOUwH", "GearItem");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.GearItemState = void 0;
    var GameCurrencyType_1 = require("../../../define/GameCurrencyType");
    var UISpriteExt_1 = require("../../../component/UISpriteExt");
    var UINodeIdentifier_1 = require("../../../component/UINodeIdentifier");
    var IdentifyNodeManager_1 = require("../../../extend/identify/nodeIdentify/IdentifyNodeManager");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var GearItemState;
    (function(GearItemState) {
      GearItemState[GearItemState["None"] = 0] = "None";
      GearItemState[GearItemState["Normal"] = 1] = "Normal";
      GearItemState[GearItemState["Disable"] = 2] = "Disable";
    })(GearItemState = exports.GearItemState || (exports.GearItemState = {}));
    var GearItem = function(_super) {
      __extends(GearItem, _super);
      function GearItem() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.amountFramePos1 = null;
        _this.amountFramePos2 = null;
        _this.itemRoot = null;
        _this.icon = null;
        _this.normalAmountRoot = null;
        _this.normalAmountFrame = null;
        _this.normalAmountLabel = null;
        _this.buyButton = null;
        _this.timeLimitedAmountRoot = null;
        _this.timeLimitedAmountFrame = null;
        _this.timeLimitedAmountLabel = null;
        _this.timeLimitedCountDownLabel = null;
        _this.lockButton = null;
        _this.lockIcon = null;
        _this.identifyComponent = null;
        _this._isLocked = false;
        _this._normalItemID = GameCurrencyType_1.GameCurrencyType.NoneType;
        _this._usedAmount = 0;
        _this._limitedAmount = 0;
        _this._state = GearItemState.Normal;
        _this._gearBar = null;
        return _this;
      }
      GearItem.prototype.getIsLocked = function() {
        return this._isLocked;
      };
      GearItem.prototype.setIsLocked = function(isLocked) {
        this._isLocked = isLocked;
        this.lockIcon.active = this._isLocked;
        this.itemRoot.active = !this._isLocked;
      };
      GearItem.prototype.getItemID = function() {
        return this._normalItemID;
      };
      GearItem.prototype.setItemID = function(itemID) {
        this._normalItemID = itemID;
        var frameName = "";
        switch (this._normalItemID) {
         case GameCurrencyType_1.GameCurrencyType.AidHammer:
          this.identifyComponent && this.identifyComponent.setIdentifier(IdentifyNodeManager_1.NodeID.MatchScene_HammerButton);
          frameName = "match_scene/texture/userInterface/match_hammer";
          break;

         case GameCurrencyType_1.GameCurrencyType.AidBomb:
          this.identifyComponent && this.identifyComponent.setIdentifier(IdentifyNodeManager_1.NodeID.MatchScene_BombButton);
          frameName = "match_scene/texture/userInterface/match_bomb";
          break;

         case GameCurrencyType_1.GameCurrencyType.AidSwap:
          this.identifyComponent && this.identifyComponent.setIdentifier(IdentifyNodeManager_1.NodeID.MatchScene_SwapButton);
          frameName = "match_scene/texture/userInterface/match_swap";
        }
        var component = this.icon.getComponent(UISpriteExt_1.default);
        component && (component.src = frameName);
        this.updataAmount();
        this.setIsLocked(false);
      };
      GearItem.prototype.updataAmount = function() {
        if (this._gearBar) {
          this.timeLimitedAmountRoot.active = false;
          this.normalAmountRoot.active = false;
        }
      };
      GearItem.prototype.getUsedAmount = function() {
        return this._usedAmount;
      };
      GearItem.prototype.setUsedAmount = function(amount) {
        this._usedAmount = amount;
        this.updateGearState();
      };
      GearItem.prototype.getLimitedAmount = function() {
        return this._limitedAmount;
      };
      GearItem.prototype.setLimitedAmount = function(amount) {
        this._limitedAmount = amount;
        this.updateGearState();
      };
      GearItem.prototype.getState = function() {
        return this._state;
      };
      GearItem.prototype.setState = function(state) {
        this._state = state;
        switch (this._state) {
         case GearItemState.Normal:
          this.icon.node.opacity = 255;
          break;

         case GearItemState.Disable:
          this.icon.node.opacity = 128;
        }
      };
      GearItem.prototype.getIsAvailable = function() {
        return !this._isLocked && this._state == GearItemState.Normal;
      };
      GearItem.prototype.updateGearState = function() {
        var state = GearItemState.Normal;
        this._limitedAmount >= 0 && this._usedAmount >= this._limitedAmount && (state = GearItemState.Disable);
        this.setState(state);
      };
      GearItem.prototype.onIconTabbed = function(event) {
        this._gearBar.onItemTabbed(this);
      };
      GearItem.prototype.onBuyTabbed = function(event) {
        this._gearBar.onItemTabbed(this);
      };
      GearItem.prototype.setGearBar = function(gearBar) {
        this._gearBar = gearBar;
      };
      GearItem.prototype.getGearBar = function() {
        return this._gearBar;
      };
      GearItem.prototype.playAlertAnimation = function(delay) {
        switch (this._state) {
         case GearItemState.Normal:
          var anim = this.getComponent(cc.Animation);
          anim && anim.play("alert");
        }
      };
      GearItem.prototype.onLoad = function() {
        this.icon.node.on("touchend", this.onIconTabbed, this);
        this.buyButton.on("touchend", this.onBuyTabbed, this);
      };
      GearItem.prototype.start = function() {};
      GearItem.prototype.onDestroy = function() {
        this.icon = null;
        this.normalAmountLabel = null;
        this.itemRoot = null;
        this.buyButton = null;
        this.lockButton = null;
        this.identifyComponent = null;
        this.lockIcon = null;
        this._gearBar = null;
      };
      __decorate([ property(cc.Node) ], GearItem.prototype, "amountFramePos1", void 0);
      __decorate([ property(cc.Node) ], GearItem.prototype, "amountFramePos2", void 0);
      __decorate([ property(cc.Node) ], GearItem.prototype, "itemRoot", void 0);
      __decorate([ property(cc.Sprite) ], GearItem.prototype, "icon", void 0);
      __decorate([ property(cc.Node) ], GearItem.prototype, "normalAmountRoot", void 0);
      __decorate([ property(cc.Node) ], GearItem.prototype, "normalAmountFrame", void 0);
      __decorate([ property(cc.Label) ], GearItem.prototype, "normalAmountLabel", void 0);
      __decorate([ property(cc.Node) ], GearItem.prototype, "buyButton", void 0);
      __decorate([ property(cc.Node) ], GearItem.prototype, "timeLimitedAmountRoot", void 0);
      __decorate([ property(cc.Node) ], GearItem.prototype, "timeLimitedAmountFrame", void 0);
      __decorate([ property(cc.Label) ], GearItem.prototype, "timeLimitedAmountLabel", void 0);
      __decorate([ property(cc.Label) ], GearItem.prototype, "timeLimitedCountDownLabel", void 0);
      __decorate([ property(cc.Node) ], GearItem.prototype, "lockButton", void 0);
      __decorate([ property(cc.Node) ], GearItem.prototype, "lockIcon", void 0);
      __decorate([ property(UINodeIdentifier_1.default) ], GearItem.prototype, "identifyComponent", void 0);
      GearItem = __decorate([ ccclass ], GearItem);
      return GearItem;
    }(cc.Component);
    exports.default = GearItem;
    cc._RF.pop();
  }, {
    "../../../component/UINodeIdentifier": "UINodeIdentifier",
    "../../../component/UISpriteExt": "UISpriteExt",
    "../../../define/GameCurrencyType": "GameCurrencyType",
    "../../../extend/identify/nodeIdentify/IdentifyNodeManager": "IdentifyNodeManager"
  } ],
  GridBase: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "3186ePNME5EJoOkg/UI5Hmr", "GridBase");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.GridMode = void 0;
    var RectangleClipper_1 = require("../../../component/RectangleClipper");
    var GameCurrencyType_1 = require("../../../define/GameCurrencyType");
    var GameMath_1 = require("../../../extend/utils/GameMath");
    var GridCommand_1 = require("../commond/GridCommand");
    var GridCommandPair_1 = require("../commond/GridCommandPair");
    var Heap_1 = require("../commond/Heap");
    var CollectionID_1 = require("../defines/CollectionID");
    var EntityGroupID_1 = require("../defines/EntityGroupID");
    var EntityID_1 = require("../defines/EntityID");
    var IdentifierManager_1 = require("../defines/IdentifierManager");
    var PowerID_1 = require("../defines/PowerID");
    var CellBase_1 = require("../entity/cell/CellBase");
    var FloorBase_1 = require("../entity/floor/FloorBase");
    var FlyerAnimation_1 = require("../entity/flyer/FlyerAnimation");
    var FlyerChargeEntity_1 = require("../entity/flyer/FlyerChargeEntity");
    var FlyerCollectedEntity_1 = require("../entity/flyer/FlyerCollectedEntity");
    var FlyerCollectedSupply_1 = require("../entity/flyer/FlyerCollectedSupply");
    var FlyerMoreStep_1 = require("../entity/flyer/FlyerMoreStep");
    var FlyerScore_1 = require("../entity/flyer/FlyerScore");
    var FlyerScoreLabel_1 = require("../entity/flyer/FlyerScoreLabel");
    var ItemBombBase_1 = require("../entity/item/color/bomb/ItemBombBase");
    var ItemBase_1 = require("../entity/item/ItemBase");
    var ItemFactory_1 = require("../entity/item/ItemFactory");
    var ItemStateGenerate_1 = require("../entity/item/state/ItemStateGenerate");
    var ItemStateReplace_1 = require("../entity/item/state/ItemStateReplace");
    var ParasiteBase_1 = require("../entity/parasite/ParasiteBase");
    var EntityEventBase_1 = require("../event/EntityEventBase");
    var GridStateAppear_1 = require("./state/concreteState/GridStateAppear");
    var GridStateCreate_1 = require("./state/concreteState/GridStateCreate");
    var GridStateCrossBomb_1 = require("./state/concreteState/GridStateCrossBomb");
    var GridStateDisappear_1 = require("./state/concreteState/GridStateDisappear");
    var GridStateForceClean_1 = require("./state/concreteState/GridStateForceClean");
    var GridStateForceSwap_1 = require("./state/concreteState/GridStateForceSwap");
    var GridStateLaunchGears_1 = require("./state/concreteState/GridStateLaunchGears");
    var GridStateNull_1 = require("./state/concreteState/GridStateNull");
    var GridStateSwapNeighbour_1 = require("./state/concreteState/GridStateSwapNeighbour");
    var GridStateMachine_1 = require("./state/GridStateMachine");
    var GridMode;
    (function(GridMode) {
      GridMode[GridMode["Normal"] = 0] = "Normal";
      GridMode[GridMode["ForceClean"] = 1] = "ForceClean";
      GridMode[GridMode["ForceSwap"] = 2] = "ForceSwap";
      GridMode[GridMode["CrossBomb"] = 3] = "CrossBomb";
    })(GridMode = exports.GridMode || (exports.GridMode = {}));
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var GridBase = function(_super) {
      __extends(GridBase, _super);
      function GridBase() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this._frameLayer = null;
        _this._cellLayer = null;
        _this._popsicleLayer = null;
        _this._floorLayer = null;
        _this._rugLayer = null;
        _this._itemLayer = null;
        _this._parasiteLayer = null;
        _this._fenceLayer = null;
        _this._markerLayer = null;
        _this._puppyLayer = null;
        _this._flyerLayer = null;
        _this._effectLayer = null;
        _this._usePriorityCommandQueue = true;
        _this._priorityCommandQueue = null;
        _this.conveyerLayer = null;
        _this._stateMachine = null;
        _this._gridSize = cc.Size.ZERO;
        _this._cellSize = cc.Size.ZERO;
        _this._mode = GridMode.Normal;
        _this._framesMap = {};
        _this._cellsMap = {};
        _this._popsiclesMap = {};
        _this._floorsMap = {};
        _this._rugsMap = {};
        _this._itemsMap = {};
        _this._parasitesMap = {};
        _this._fencesMap = {};
        _this._markersMap = {};
        _this._obstructs = [];
        _this._flyerObstructs = [];
        _this._attackePositions = [];
        _this._commandPairs = [];
        _this._nextCommandIndex = 0;
        _this._insertNewCommand = false;
        _this._gameScene = null;
        _this._lastTouchLogicalPos = cc.Vec2.ZERO;
        return _this;
      }
      GridBase_1 = GridBase;
      GridBase.create = function(matchScene, viewSize, mapData) {
        var res = cc.loader.getRes("match_scene/prefab/grid/GridBase", cc.Prefab);
        if (res) {
          var node = cc.instantiate(res);
          if (node) {
            var component = node.getComponent(GridBase_1);
            if (component) {
              component.init(matchScene, viewSize, mapData);
              return component;
            }
          }
        }
        return null;
      };
      GridBase.prototype.init = function(gameScene, viewSize, mapData) {
        this._gameScene = gameScene;
        this._frameLayer = new cc.Node();
        this.node.addChild(this._frameLayer, GridBase_1.ZORDER_FRAME_BOTTOM);
        this._cellLayer = new cc.Node();
        this.node.addChild(this._cellLayer, GridBase_1.ZORDER_CELL_BOTTOM);
        this._popsicleLayer = new cc.Node();
        this.node.addChild(this._popsicleLayer, GridBase_1.ZORDER_POPSICLES_BOTTOM);
        this._floorLayer = new cc.Node();
        this.node.addChild(this._floorLayer, GridBase_1.ZORDER_FLOOR_BOTTOM);
        this._rugLayer = new cc.Node();
        this.node.addChild(this._rugLayer, GridBase_1.ZORDER_RUG_BOTTOM);
        this._itemLayer = new cc.Node();
        this.node.addChild(this._itemLayer, GridBase_1.ZORDER_ITEM_BOTTOM);
        this._parasiteLayer = new cc.Node();
        this.node.addChild(this._parasiteLayer, GridBase_1.ZORDER_PARASITE_BOTTOM);
        this._fenceLayer = new cc.Node();
        this.node.addChild(this._fenceLayer, GridBase_1.ZORDER_FENCE_BOTTOM);
        this._markerLayer = new cc.Node();
        this.node.addChild(this._markerLayer, GridBase_1.ZORDER_MARKER_BOTTOM);
        this._puppyLayer = new cc.Node();
        this.node.addChild(this._puppyLayer, GridBase_1.ZORDER_PUPPY_BOTTOM);
        this._flyerLayer = new cc.Node();
        this.node.addChild(this._flyerLayer, GridBase_1.ZORDER_FLYER_BOTTOM);
        this._effectLayer = new cc.Node();
        this.node.addChild(this._effectLayer, GridBase_1.ZORDER_EFFECT);
        this.conveyerLayer.zIndex = GridBase_1.ZORDER_CONVEYERS_BOTTOM;
        var compareFunc = function(lhs, rhs) {
          return lhs.delayTime == rhs.delayTime ? lhs.command.getPriority() == rhs.command.getPriority() ? lhs.index < rhs.index : lhs.command.getPriority() < rhs.command.getPriority() : lhs.delayTime < rhs.delayTime;
        };
        var equalsFunc = function(lhs, rhs) {
          if (lhs.command.type == GridCommand_1.GridCommandType.MatchClean && lhs.command.type == rhs.command.type && rhs.targetPos.equals(lhs.targetPos)) return true;
          return false;
        };
        this._priorityCommandQueue = new Heap_1.default(compareFunc, equalsFunc);
        this._stateMachine = GridStateMachine_1.default.create(this);
        this.setCurrentState(GridStateCreate_1.default.createState(viewSize, mapData));
        this.node.on("touchstart", this.onTouchStart, this);
        this.node.on("touchmove", this.onTouchMove, this);
        this.node.on("touchend", this.onTouchEnd, this);
        this.node.on("touchcancel", this.onTouchEnd, this);
        this.node.on(EntityEventBase_1.default.ENTITY_EVENT_KEY, this.onEvent, this);
      };
      GridBase.prototype.getConveyerLayer = function() {
        return this.conveyerLayer;
      };
      GridBase.prototype.setConveyerLayerVisiblePos = function(positions) {
        var cropper = this.conveyerLayer.getComponent(RectangleClipper_1.default);
        if (cropper) {
          var areas = [];
          for (var _i = 0, positions_1 = positions; _i < positions_1.length; _i++) {
            var pos = positions_1[_i];
            var centerPixelPos = this.getPixelPosFromLogicalPos(pos);
            var cellSize = this.getCellSize();
            var rect = cc.rect(centerPixelPos.x - .5 * cellSize.width, centerPixelPos.y - .5 * cellSize.height, cellSize.width, cellSize.height);
            areas.push(rect);
          }
          cropper.setCropRectangles(areas);
        }
      };
      GridBase.prototype.getRandomEntityID = function(dropProbabilities, limitEntities, limitGroup, fitMinimum) {
        void 0 === fitMinimum && (fitMinimum = false);
        var result = EntityID_1.EntityID.None;
        var entityAmounts = {};
        var entityGroupAmounts = {};
        var itemsMap = this.getItemsMap();
        for (var key in itemsMap) {
          var item = itemsMap[key];
          var entityID = item.getEntityID();
          var newAmount = 1;
          var oldAmount = entityAmounts[entityID];
          oldAmount && (newAmount = oldAmount + 1);
          entityAmounts[entityID] = newAmount;
          var groupID = IdentifierManager_1.default.getInstance().getEntityGroupIDFromEntityID(entityID);
          newAmount = 1;
          oldAmount = entityGroupAmounts[groupID];
          oldAmount && (newAmount = oldAmount + 1);
          entityGroupAmounts[groupID] = newAmount;
        }
        var dropItemValues = {};
        for (var key in dropProbabilities) dropItemValues[key] = dropProbabilities[key];
        for (var key in limitEntities) {
          var limitAmount = limitEntities[key];
          var currentAmount = entityAmounts[key];
          currentAmount && currentAmount >= limitAmount && delete dropItemValues[key];
        }
        for (var key in limitGroup) {
          var limitGroupAmount = limitGroup[key];
          var currentAmount = entityGroupAmounts[key];
          if (currentAmount && currentAmount >= limitGroupAmount) {
            var groupID = Number(key);
            var entityIDs = IdentifierManager_1.default.getInstance().getEntityIDsFromEntityGroupID(groupID);
            for (var _i = 0, entityIDs_1 = entityIDs; _i < entityIDs_1.length; _i++) {
              var entityID = entityIDs_1[_i];
              delete dropItemValues[entityID];
            }
          }
        }
        if (this.getTargetAmount(CollectionID_1.CollectionID.ItemBone) > 0) {
          var hadCollectedBoneAmount = this.getCollectedEntityAmount(CollectionID_1.CollectionID.ItemBone);
          entityAmounts.hasOwnProperty(EntityID_1.EntityID.ItemBone) && (hadCollectedBoneAmount += entityAmounts[EntityID_1.EntityID.ItemBone]);
          if (hadCollectedBoneAmount >= this.getTargetAmount(CollectionID_1.CollectionID.ItemBone)) delete dropItemValues[EntityID_1.EntityID.ItemBone]; else {
            var existentBoneAmount = 0;
            entityAmounts.hasOwnProperty(EntityID_1.EntityID.ItemBone) && (existentBoneAmount = entityAmounts[EntityID_1.EntityID.ItemBone]);
            if (existentBoneAmount <= 0 && dropItemValues.hasOwnProperty(EntityID_1.EntityID.ItemBone)) {
              dropItemValues = {};
              dropItemValues[EntityID_1.EntityID.ItemBone] = 100;
            }
          }
        }
        if (this.getTargetAmount(CollectionID_1.CollectionID.ItemPuppy) > 0) {
          var hadCollectedPuppyAmount = this.getCollectedEntityAmount(CollectionID_1.CollectionID.ItemPuppy);
          if (hadCollectedPuppyAmount < this.getTargetAmount(CollectionID_1.CollectionID.ItemPuppy)) {
            var existentPawAmount = 0;
            var entityIDs = IdentifierManager_1.default.getInstance().getEntityIDsFromEntityGroupID(EntityGroupID_1.EntityGroupID.ItemPaw);
            for (var _a = 0, entityIDs_2 = entityIDs; _a < entityIDs_2.length; _a++) {
              var entityID = entityIDs_2[_a];
              entityAmounts.hasOwnProperty(entityID) && (existentPawAmount += entityAmounts[entityID]);
            }
            if (existentPawAmount <= 0) {
              var availablePawIDs = [];
              for (var _b = 0, entityIDs_3 = entityIDs; _b < entityIDs_3.length; _b++) {
                var entityID = entityIDs_3[_b];
                dropItemValues.hasOwnProperty(entityID) && availablePawIDs.push(entityID);
              }
              if (availablePawIDs.length > 0) {
                dropItemValues = {};
                for (var _c = 0, availablePawIDs_1 = availablePawIDs; _c < availablePawIDs_1.length; _c++) {
                  var pawID = availablePawIDs_1[_c];
                  dropItemValues[pawID] = 100;
                }
              }
            }
          }
        }
        if (this.getTargetAmount(CollectionID_1.CollectionID.RugJam) > 0) {
          var existentJamAmount = 0;
          for (var key in this._rugsMap) {
            var rug = this._rugsMap[key];
            rug.getEntityID() == EntityID_1.EntityID.RugJam && (existentJamAmount += 1);
          }
          entityAmounts.hasOwnProperty(EntityID_1.EntityID.ItemJamBottle) && (existentJamAmount += 9 * entityAmounts[EntityID_1.EntityID.ItemJamBottle]);
          var hadCollectedJamAmount = this.getCollectedEntityAmount(CollectionID_1.CollectionID.RugJam) + existentJamAmount;
          if (hadCollectedJamAmount >= this.getTargetAmount(CollectionID_1.CollectionID.RugJam)) delete dropItemValues[EntityID_1.EntityID.ItemJamBottle]; else if (existentJamAmount <= 0 && dropItemValues.hasOwnProperty(EntityID_1.EntityID.ItemJamBottle)) {
            dropItemValues = {};
            dropItemValues[EntityID_1.EntityID.ItemJamBottle] = 100;
          }
        }
        var totalValue = 0;
        for (var key in dropItemValues) {
          var value = dropItemValues[key];
          value && (totalValue += value);
        }
        var randomValue = GameMath_1.default.randomInt(0, totalValue);
        if (fitMinimum) {
          var totalExsitAmout = 0;
          var totalRateAmount = 0;
          for (var key in dropItemValues) {
            var amount = dropItemValues[key];
            var entityID = Number(key);
            var existAmount = entityAmounts[entityID];
            existAmount && (totalExsitAmout += existAmount);
            totalRateAmount += amount;
          }
          var currentRatio = {};
          var targetRatio = {};
          for (var key in dropItemValues) {
            var amount = dropItemValues[key];
            var entityID = Number(key);
            var existAmount = entityAmounts[entityID];
            currentRatio[entityID] = existAmount && totalExsitAmout > 0 ? existAmount / totalExsitAmout : 0;
            targetRatio[entityID] = amount / totalRateAmount;
          }
          var maxGapEntityID = 0;
          for (var key in dropItemValues) {
            maxGapEntityID = Number(key);
            break;
          }
          var maxGap = 0;
          for (var key in dropItemValues) {
            var gap = targetRatio[key] - currentRatio[key];
            if (gap > maxGap) {
              maxGap = gap;
              maxGapEntityID = Number(key);
            }
          }
          result = maxGapEntityID;
        } else {
          var currentValue = 0;
          for (var key in dropItemValues) {
            var value = dropItemValues[key];
            if (value) {
              currentValue += value;
              if (currentValue >= randomValue) {
                result = Number(key);
                break;
              }
            }
          }
        }
        return result;
      };
      GridBase.prototype.getGlobalRandomEntityID = function() {
        var entityID = this.getRandomEntityID(this.getDropEntityMap(), this.getLimitedEntityMap(), this.getLimitedGroupMap());
        return entityID;
      };
      GridBase.prototype.getCurrentState = function() {
        var state = this._stateMachine.getCurrentState();
        return state;
      };
      GridBase.prototype.setCurrentState = function(state) {
        this._stateMachine.setCurrentState(state);
      };
      GridBase.prototype.getGridSize = function() {
        return this._gridSize;
      };
      GridBase.prototype.setGridSize = function(size) {
        this._gridSize = size;
      };
      GridBase.prototype.getCellSize = function() {
        return this._cellSize;
      };
      GridBase.prototype.setCellSize = function(size) {
        this._cellSize = size;
      };
      GridBase.prototype.getMode = function() {
        return this._mode;
      };
      GridBase.prototype.setMode = function(mode) {
        this._mode = mode;
        this._gameScene.setGridMode(mode);
      };
      GridBase.prototype.tryEnableMode = function(mode) {
        this._mode = mode;
        if (this.getCurrentState().canChangeState()) switch (mode) {
         case GridMode.Normal:
          this.setCurrentState(GridStateSwapNeighbour_1.default.create());
          return true;

         case GridMode.ForceClean:
          this.setCurrentState(GridStateForceClean_1.default.create());
          return true;

         case GridMode.ForceSwap:
          this.setCurrentState(GridStateForceSwap_1.default.create());
          return true;

         case GridMode.CrossBomb:
          this.setCurrentState(GridStateCrossBomb_1.default.create());
          return true;
        }
        return false;
      };
      GridBase.prototype.getLogicalPosFromPixelPos = function(pixelPos) {
        var contentSize = this.node.getContentSize();
        var origin = cc.Vec2.ZERO;
        var column = Math.floor((pixelPos.x - origin.x) / this._cellSize.width);
        var row = Math.floor((pixelPos.y - origin.y) / this._cellSize.height);
        return cc.v2(column, row);
      };
      GridBase.prototype.getPixelPosFromLogicalPos = function(logicalPos) {
        var origin = cc.v2(.5 * this._cellSize.width, .5 * this._cellSize.height);
        return cc.v2(origin.x + logicalPos.x * this._cellSize.width, origin.y + logicalPos.y * this._cellSize.height);
      };
      GridBase.prototype.getBottomZOrder = function(entityType, logicalPos) {
        var baseZorder = 0;
        switch (entityType) {
         case EntityID_1.EntityType.Frame:
          baseZorder = GridBase_1.ZORDER_FRAME_BOTTOM;
          break;

         case EntityID_1.EntityType.Cell:
          baseZorder = GridBase_1.ZORDER_CELL_BOTTOM;
          break;

         case EntityID_1.EntityType.Popsicle:
          baseZorder = GridBase_1.ZORDER_POPSICLES_BOTTOM;
          break;

         case EntityID_1.EntityType.Floor:
          baseZorder = GridBase_1.ZORDER_FLOOR_BOTTOM;
          break;

         case EntityID_1.EntityType.Rug:
          baseZorder = GridBase_1.ZORDER_RUG_BOTTOM;
          break;

         case EntityID_1.EntityType.Item:
          baseZorder = GridBase_1.ZORDER_ITEM_BOTTOM;
          break;

         case EntityID_1.EntityType.Parasite:
          baseZorder = GridBase_1.ZORDER_PARASITE_BOTTOM;
          break;

         case EntityID_1.EntityType.Fences:
          baseZorder = GridBase_1.ZORDER_FENCE_BOTTOM;
          break;

         case EntityID_1.EntityType.Flyer:
          baseZorder = GridBase_1.ZORDER_FLYER_BOTTOM;
          break;

         case EntityID_1.EntityType.Marker:
          baseZorder = GridBase_1.ZORDER_MARKER_BOTTOM;
        }
        return baseZorder + (this._gridSize.height - logicalPos.y) * this._gridSize.width + (this._gridSize.width - logicalPos.x);
      };
      GridBase.prototype.getBottomZOrderForEnity = function(entity) {
        return this.getBottomZOrder(entity.getEntityType(), entity.getLogicalPos());
      };
      GridBase.prototype.getTopZOrder = function(entityType, logicalPos) {
        var baseZorder = 0;
        switch (entityType) {
         case EntityID_1.EntityType.Frame:
          baseZorder = GridBase_1.ZORDER_FRAME_TOP;
          break;

         case EntityID_1.EntityType.Cell:
          baseZorder = GridBase_1.ZORDER_CELL_TOP;
          break;

         case EntityID_1.EntityType.Popsicle:
          baseZorder = GridBase_1.ZORDER_POPSICLES_TOP;
          break;

         case EntityID_1.EntityType.Floor:
          baseZorder = GridBase_1.ZORDER_FLOOR_TOP;
          break;

         case EntityID_1.EntityType.Rug:
          baseZorder = GridBase_1.ZORDER_RUG_TOP;
          break;

         case EntityID_1.EntityType.Item:
          baseZorder = GridBase_1.ZORDER_ITEM_TOP;
          break;

         case EntityID_1.EntityType.Parasite:
          baseZorder = GridBase_1.ZORDER_PARASITE_TOP;
          break;

         case EntityID_1.EntityType.Fences:
          baseZorder = GridBase_1.ZORDER_FENCE_TOP;
          break;

         case EntityID_1.EntityType.Flyer:
          baseZorder = GridBase_1.ZORDER_FLYER_TOP;
          break;

         case EntityID_1.EntityType.Marker:
          baseZorder = GridBase_1.ZORDER_MARKER_TOP;
        }
        return baseZorder + (this._gridSize.height - logicalPos.y) * this._gridSize.width + (this._gridSize.width - logicalPos.x);
      };
      GridBase.prototype.getTopZOrderForEnity = function(entity) {
        return this.getTopZOrder(entity.getEntityType(), entity.getLogicalPos());
      };
      GridBase.prototype.getAvailableColors = function() {
        var result = [];
        var globalDropEntityMap = this.getDropEntityMap();
        for (var key in globalDropEntityMap) {
          var entityID = Number(key);
          if (entityID) {
            var color = IdentifierManager_1.default.getInstance().getEntityColorWithEntityID(entityID);
            color != EntityID_1.EntityColor.None && GameMath_1.default.insertAsSet(result, color);
          }
        }
        return result;
      };
      GridBase.prototype.getEntityFromMapAtLogicalPos = function(map, logicalPos) {
        var key = GameMath_1.default.getStringFromVec2(logicalPos);
        var entity = map[key];
        return entity;
      };
      GridBase.prototype.removeEntityFromMapAtLogicalPos = function(map, logicalPos) {
        var entity = this.getEntityFromMapAtLogicalPos(map, logicalPos);
        if (entity) {
          var occupyArea = entity.getOccupyArea();
          for (var row = 0; row < occupyArea.size.height; row++) for (var column = 0; column < occupyArea.size.width; column++) {
            var occupyPos = cc.v2(column, row).add(occupyArea.origin);
            var occupyKey = GameMath_1.default.getStringFromVec2(occupyPos);
            delete map[occupyKey];
          }
          entity.node.removeFromParent();
        }
      };
      GridBase.prototype.setEntityToMapAtLogicalPos = function(entity, rootNode, map, logicalPos) {
        if (!entity) return;
        this.removeEntityFromMapAtLogicalPos(map, logicalPos);
        var occupyArea = entity.getOccupyArea();
        for (var row = 0; row < occupyArea.size.height; row++) for (var column = 0; column < occupyArea.size.width; column++) {
          var occupyPos = cc.v2(column, row).add(logicalPos);
          var occupyKey = GameMath_1.default.getStringFromVec2(occupyPos);
          map[occupyKey] = entity;
        }
        entity.node.removeFromParent(false);
        rootNode.addChild(entity.node);
        entity.setLogicalPos(logicalPos);
      };
      GridBase.prototype.shiftEntityToEffectLayer = function(entity) {
        if (!entity) return;
        entity.node.parent = this._effectLayer;
      };
      GridBase.prototype.getFrameAtLogicalPos = function(logicalPos) {
        var result = null;
        var entity = this.getEntityFromMapAtLogicalPos(this._framesMap, logicalPos);
        entity && (result = entity);
        return result;
      };
      GridBase.prototype.setFrameAtLogicalPos = function(frame, logicalPos) {
        this.setEntityToMapAtLogicalPos(frame, this._frameLayer, this._framesMap, logicalPos);
      };
      GridBase.prototype.removeFrameAtLogicalPos = function(logicalPos) {
        this.removeEntityFromMapAtLogicalPos(this._framesMap, logicalPos);
      };
      GridBase.prototype.getFramesMap = function() {
        return this._framesMap;
      };
      GridBase.prototype.getCellAtLogicalPos = function(logicalPos) {
        var result = null;
        var entity = this.getEntityFromMapAtLogicalPos(this._cellsMap, logicalPos);
        entity && (result = entity);
        return result;
      };
      GridBase.prototype.setCellAtLogicalPos = function(cell, logicalPos) {
        this.setEntityToMapAtLogicalPos(cell, this._cellLayer, this._cellsMap, logicalPos);
      };
      GridBase.prototype.removeCellAtLogicalPos = function(logicalPos) {
        this.removeEntityFromMapAtLogicalPos(this._cellsMap, logicalPos);
      };
      GridBase.prototype.getCellsMap = function() {
        return this._cellsMap;
      };
      GridBase.prototype.getPopsicleAtLogicalPos = function(logicalPos) {
        var result = null;
        var entity = this.getEntityFromMapAtLogicalPos(this._popsiclesMap, logicalPos);
        entity && (result = entity);
        return result;
      };
      GridBase.prototype.setPopsicleAtLogicalPos = function(popsicle, logicalPos) {
        this.setEntityToMapAtLogicalPos(popsicle, this._popsicleLayer, this._popsiclesMap, logicalPos);
      };
      GridBase.prototype.removePopsicleAtLogicalPos = function(logicalPos) {
        this.removeEntityFromMapAtLogicalPos(this._popsiclesMap, logicalPos);
      };
      GridBase.prototype.getPopsiclesMap = function() {
        return this._popsiclesMap;
      };
      GridBase.prototype.getFloorAtLogicalPos = function(logicalPos) {
        var result = null;
        var entity = this.getEntityFromMapAtLogicalPos(this._floorsMap, logicalPos);
        entity && (result = entity);
        return result;
      };
      GridBase.prototype.setFloorAtLogicalPos = function(floor, logicalPos) {
        this.setEntityToMapAtLogicalPos(floor, this._floorLayer, this._floorsMap, logicalPos);
      };
      GridBase.prototype.removeFloorAtLogicalPos = function(logicalPos) {
        this.removeEntityFromMapAtLogicalPos(this._floorsMap, logicalPos);
      };
      GridBase.prototype.getFloorsMap = function() {
        return this._floorsMap;
      };
      GridBase.prototype.isGrassFloorAtLogicalPos = function(logicalPos) {
        var result = false;
        var floor = this.getFloorAtLogicalPos(logicalPos);
        floor && floor.getEntityID() == EntityID_1.EntityID.FloorGrass && (result = true);
        return result;
      };
      GridBase.prototype.getRugAtLogicalPos = function(logicalPos) {
        var result = null;
        var entity = this.getEntityFromMapAtLogicalPos(this._rugsMap, logicalPos);
        entity && (result = entity);
        return result;
      };
      GridBase.prototype.setRugAtLogicalPos = function(rug, logicalPos) {
        this.setEntityToMapAtLogicalPos(rug, this._rugLayer, this._rugsMap, logicalPos);
      };
      GridBase.prototype.removeRugAtLogicalPos = function(logicalPos) {
        this.removeEntityFromMapAtLogicalPos(this._rugsMap, logicalPos);
      };
      GridBase.prototype.getRugsMap = function() {
        return this._rugsMap;
      };
      GridBase.prototype.getItemAtLogicalPos = function(logicalPos) {
        var result = null;
        var entity = this.getEntityFromMapAtLogicalPos(this._itemsMap, logicalPos);
        entity && (result = entity);
        return result;
      };
      GridBase.prototype.setItemAtLogicalPos = function(item, logicalPos) {
        var rootLayer = this._itemLayer;
        item.getItemType() == ItemBase_1.ItemType.Puppy && (rootLayer = this._puppyLayer);
        this.setEntityToMapAtLogicalPos(item, rootLayer, this._itemsMap, logicalPos);
      };
      GridBase.prototype.removeItemAtLogicalPos = function(logicalPos) {
        this.removeEntityFromMapAtLogicalPos(this._itemsMap, logicalPos);
      };
      GridBase.prototype.swapItem = function(logicalPosA, logicalPosB) {
        if (logicalPosA.equals(logicalPosB)) return;
        var itemA = this.getItemAtLogicalPos(logicalPosA);
        var itemB = this.getItemAtLogicalPos(logicalPosB);
        if (null == itemA && null == itemB) return;
        this.removeItemAtLogicalPos(logicalPosA);
        this.removeItemAtLogicalPos(logicalPosB);
        itemA && this.setItemAtLogicalPos(itemA, logicalPosB);
        itemB && this.setItemAtLogicalPos(itemB, logicalPosA);
      };
      GridBase.prototype.generateBomb = function(targetPos, bombType, color, changeOld) {
        void 0 === changeOld && (changeOld = false);
        var bomb = ItemFactory_1.default.generateEffectBombItem(this, bombType, color);
        if (bomb) {
          bomb.setPixelPos(targetPos);
          bomb.setImmuneDamage(true);
          this._itemLayer.addChild(bomb.node, this.getTopZOrder(bomb.getEntityType(), targetPos));
          changeOld ? bomb.setCurrentState(ItemStateReplace_1.default.create(targetPos)) : bomb.setCurrentState(ItemStateGenerate_1.default.create(targetPos));
        }
      };
      GridBase.prototype.getItemsMap = function() {
        return this._itemsMap;
      };
      GridBase.prototype.getParasiteAtLogicalPos = function(logicalPos) {
        var result = null;
        var entity = this.getEntityFromMapAtLogicalPos(this._parasitesMap, logicalPos);
        entity && (result = entity);
        return result;
      };
      GridBase.prototype.setParasiteAtLogicalPos = function(parasite, logicalPos) {
        this.setEntityToMapAtLogicalPos(parasite, this._parasiteLayer, this._parasitesMap, logicalPos);
      };
      GridBase.prototype.removeParasiteAtLogicalPos = function(logicalPos) {
        this.removeEntityFromMapAtLogicalPos(this._parasitesMap, logicalPos);
      };
      GridBase.prototype.getParasitesMap = function() {
        return this._parasitesMap;
      };
      GridBase.prototype.getFenceAtFencePos = function(fencePos) {
        var result = null;
        var key = GameMath_1.default.getStringFromFencePos(fencePos);
        result = this._fencesMap[key];
        return result;
      };
      GridBase.prototype.setFenceAtFencePos = function(fence, fencePos) {
        if (!fence) return;
        this.removeFenceAtFencePos(fencePos);
        var key = GameMath_1.default.getStringFromFencePos(fencePos);
        this._fencesMap[key] = fence;
        fence.node.removeFromParent(false);
        this._fenceLayer.addChild(fence.node);
        fence.setFencePos(fencePos);
      };
      GridBase.prototype.removeFenceAtFencePos = function(fencePos) {
        var fence = this.getFenceAtFencePos(fencePos);
        if (fence) {
          var key = GameMath_1.default.getStringFromFencePos(fencePos);
          delete this._fencesMap[key];
          fence.node.removeFromParent();
        }
      };
      GridBase.prototype.getFencesMap = function() {
        return this._fencesMap;
      };
      GridBase.prototype.getMarkerAtLogicalPos = function(logicalPos) {
        var result = null;
        var entity = this.getEntityFromMapAtLogicalPos(this._markersMap, logicalPos);
        entity && (result = entity);
        return result;
      };
      GridBase.prototype.setMarkerAtLogicalPos = function(marker, logicalPos) {
        this.setEntityToMapAtLogicalPos(marker, this._markerLayer, this._markersMap, logicalPos);
      };
      GridBase.prototype.removeMarkerAtLogicalPos = function(logicalPos) {
        this.removeEntityFromMapAtLogicalPos(this._markersMap, logicalPos);
      };
      GridBase.prototype.getMarkersMap = function() {
        return this._markersMap;
      };
      GridBase.prototype.setFlyerAtLogicalPos = function(flyer, logicalPos) {
        if (flyer) {
          flyer.setPixelPos(logicalPos);
          this._flyerLayer.addChild(flyer.node, this.getTopZOrder(flyer.getEntityType(), logicalPos));
          flyer.launch();
        }
      };
      GridBase.prototype.highlightedCell = function(logicalPos) {
        var cell = this.getCellAtLogicalPos(logicalPos);
        if (cell) {
          var flyer = FlyerAnimation_1.default.createAnimationWithType(this, FlyerAnimation_1.FlyerAnimationType.HighlightedCell);
          this.setFlyerAtLogicalPos(flyer, logicalPos);
          flyer.node.zIndex = GridBase_1.ZORDER_ITEM_BOTTOM;
        }
      };
      GridBase.prototype.bombCell = function(logicalPos) {
        var flyer = FlyerAnimation_1.default.createAnimationWithType(this, FlyerAnimation_1.FlyerAnimationType.Bomb1x1);
        this.setFlyerAtLogicalPos(flyer, logicalPos);
      };
      GridBase.prototype.getEntity = function(entityType, logicalPos) {
        var result = null;
        switch (entityType) {
         case EntityID_1.EntityType.Frame:
          result = this.getFrameAtLogicalPos(logicalPos);
          break;

         case EntityID_1.EntityType.Cell:
          result = this.getCellAtLogicalPos(logicalPos);
          break;

         case EntityID_1.EntityType.Popsicle:
          result = this.getPopsicleAtLogicalPos(logicalPos);
          break;

         case EntityID_1.EntityType.Floor:
          result = this.getFloorAtLogicalPos(logicalPos);
          break;

         case EntityID_1.EntityType.Rug:
          result = this.getRugAtLogicalPos(logicalPos);
          break;

         case EntityID_1.EntityType.Item:
          result = this.getItemAtLogicalPos(logicalPos);
          break;

         case EntityID_1.EntityType.Parasite:
          result = this.getParasiteAtLogicalPos(logicalPos);
          break;

         case EntityID_1.EntityType.Marker:
          result = this.getMarkerAtLogicalPos(logicalPos);
        }
        return result;
      };
      GridBase.prototype.setEntity = function(entity, logicalPos) {
        if (!entity) return;
        var entityType = entity.getEntityType();
        switch (entityType) {
         case EntityID_1.EntityType.Frame:
          this.setFrameAtLogicalPos(entity, logicalPos);
          break;

         case EntityID_1.EntityType.Cell:
          this.setCellAtLogicalPos(entity, logicalPos);
          break;

         case EntityID_1.EntityType.Popsicle:
          this.setPopsicleAtLogicalPos(entity, logicalPos);
          break;

         case EntityID_1.EntityType.Floor:
          this.setFloorAtLogicalPos(entity, logicalPos);
          break;

         case EntityID_1.EntityType.Rug:
          this.setRugAtLogicalPos(entity, logicalPos);
          break;

         case EntityID_1.EntityType.Item:
          this.setItemAtLogicalPos(entity, logicalPos);
          break;

         case EntityID_1.EntityType.Parasite:
          this.setParasiteAtLogicalPos(entity, logicalPos);
          break;

         case EntityID_1.EntityType.Marker:
          this.setMarkerAtLogicalPos(entity, logicalPos);
        }
      };
      GridBase.prototype.removeEntity = function(entityType, logicalPos) {
        switch (entityType) {
         case EntityID_1.EntityType.Frame:
          this.removeFrameAtLogicalPos(logicalPos);
          break;

         case EntityID_1.EntityType.Cell:
          this.removeCellAtLogicalPos(logicalPos);
          break;

         case EntityID_1.EntityType.Popsicle:
          this.removePopsicleAtLogicalPos(logicalPos);
          break;

         case EntityID_1.EntityType.Floor:
          this.removeFloorAtLogicalPos(logicalPos);
          break;

         case EntityID_1.EntityType.Rug:
          this.removeRugAtLogicalPos(logicalPos);
          break;

         case EntityID_1.EntityType.Item:
          this.removeItemAtLogicalPos(logicalPos);
          break;

         case EntityID_1.EntityType.Parasite:
          this.removeParasiteAtLogicalPos(logicalPos);
          break;

         case EntityID_1.EntityType.Marker:
          this.removeMarkerAtLogicalPos(logicalPos);
        }
      };
      GridBase.prototype.isObstructsEmpty = function() {
        return this._obstructs.length <= 0;
      };
      GridBase.prototype.addObstructs = function(entity) {
        entity && GameMath_1.default.insertAsSet(this._obstructs, entity);
      };
      GridBase.prototype.removeObstructs = function(entity) {
        if (entity) {
          var index = GameMath_1.default.indexOf(this._obstructs, entity);
          -1 != index && this._obstructs.splice(index, 1);
        }
      };
      GridBase.prototype.isFlyerObstructsEmpty = function() {
        return this._flyerObstructs.length <= 0;
      };
      GridBase.prototype.addFlyerObstructs = function(entity) {
        entity && GameMath_1.default.insertAsSet(this._flyerObstructs, entity);
      };
      GridBase.prototype.removeFlyerObstructs = function(entity) {
        if (entity) {
          var index = GameMath_1.default.indexOf(this._flyerObstructs, entity);
          -1 != index && this._flyerObstructs.splice(index, 1);
        }
      };
      GridBase.prototype.getAttackedPosition = function() {
        return this._attackePositions;
      };
      GridBase.prototype.recordAttackedPosition = function(pos) {
        GameMath_1.default.insertAsSet(this._attackePositions, pos);
      };
      GridBase.prototype.clearAttackedPostionRecord = function() {
        GameMath_1.default.clearArray(this._attackePositions);
      };
      GridBase.prototype.unimmuneAllEntities = function() {
        for (var key in this._framesMap) {
          var entity = this._framesMap[key];
          entity.setImmuneDamage(false);
        }
        for (var key in this._cellsMap) {
          var entity = this._cellsMap[key];
          entity.setImmuneDamage(false);
        }
        for (var key in this._popsiclesMap) {
          var entity = this._popsiclesMap[key];
          entity.setImmuneDamage(false);
        }
        for (var key in this._floorsMap) {
          var entity = this._floorsMap[key];
          entity.setImmuneDamage(false);
        }
        for (var key in this._rugsMap) {
          var entity = this._rugsMap[key];
          entity.setImmuneDamage(false);
        }
        for (var key in this._itemsMap) {
          var entity = this._itemsMap[key];
          entity.setImmuneDamage(false);
        }
        for (var key in this._parasitesMap) {
          var entity = this._parasitesMap[key];
          entity.setImmuneDamage(false);
        }
        for (var key in this._fencesMap) {
          var entity = this._fencesMap[key];
          entity.setImmuneDamage(false);
        }
      };
      GridBase.prototype.dispatchCommand = function(pos, command, delayTime) {
        if (pos.x < 0 || pos.x >= this._gridSize.width || pos.y < 0 || pos.y >= this._gridSize.height) return;
        if (this._usePriorityCommandQueue) {
          var insertCommand = GridCommandPair_1.default.create(pos, command, delayTime, this._nextCommandIndex);
          var index = this._priorityCommandQueue.indexOf(insertCommand);
          if (-1 == index) {
            this._priorityCommandQueue.push(insertCommand);
            this._nextCommandIndex++;
          }
        } else {
          if (command.type == GridCommand_1.GridCommandType.MatchClean) {
            var index = GameMath_1.default.indexOf(this._commandPairs, command, 0, function(lhs, rhs) {
              if (lhs.command.type == rhs.type && pos.equals(lhs.targetPos)) return true;
              return false;
            });
            if (-1 != index) return;
          }
          var insertCommand = GridCommandPair_1.default.create(pos, command, delayTime, this._nextCommandIndex);
          this._commandPairs.push(insertCommand);
          this._nextCommandIndex++;
          this._insertNewCommand = true;
        }
      };
      GridBase.prototype.isCommandListEmpty = function() {
        return this._usePriorityCommandQueue ? this._priorityCommandQueue.isEmpty() : this._commandPairs.length <= 0;
      };
      GridBase.prototype.sortCommandList = function() {
        if (this._insertNewCommand) {
          this._insertNewCommand = false;
          this._commandPairs.sort(function(lhs, rhs) {
            return lhs.delayTime == rhs.delayTime ? lhs.command.getPriority() == rhs.command.getPriority() ? lhs.index == rhs.index ? 0 : lhs.index < rhs.index ? -1 : 1 : lhs.command.getPriority() > rhs.command.getPriority() ? -1 : 1 : lhs.delayTime < rhs.delayTime ? -1 : 1;
          });
        }
      };
      GridBase.prototype.progressCommand = function(delta) {
        if (this._usePriorityCommandQueue) {
          var commandPairs = this._priorityCommandQueue.getElements();
          for (var _i = 0, commandPairs_1 = commandPairs; _i < commandPairs_1.length; _i++) {
            var commandPair = commandPairs_1[_i];
            commandPair.delayTime -= delta;
          }
          while (!this._priorityCommandQueue.isEmpty()) {
            var commandPair = this._priorityCommandQueue.peek();
            if (!(commandPair.delayTime < 0)) break;
            commandPair = this._priorityCommandQueue.pop();
            this.excuteCommandPair(commandPair);
          }
        } else {
          this.sortCommandList();
          for (var _a = 0, _b = this._commandPairs; _a < _b.length; _a++) {
            var commandPair = _b[_a];
            commandPair.delayTime -= delta;
          }
          var index = 0;
          while (index < this._commandPairs.length) {
            var commandPair = this._commandPairs[index];
            if (commandPair.delayTime > 0) {
              this._commandPairs.splice(0, index);
              break;
            }
            this.excuteCommandPair(commandPair);
            index += 1;
            index >= this._commandPairs.length && (this._commandPairs.length = 0);
          }
        }
      };
      GridBase.prototype.excuteCommandPair = function(commandPair) {
        var entityTypes = [ EntityID_1.EntityType.Parasite, EntityID_1.EntityType.Item, EntityID_1.EntityType.Rug, EntityID_1.EntityType.Floor, EntityID_1.EntityType.Popsicle, EntityID_1.EntityType.Cell ];
        commandPair.command.type == GridCommand_1.GridCommandType.CheckMatch && (entityTypes = [ EntityID_1.EntityType.Item ]);
        for (var _i = 0, entityTypes_1 = entityTypes; _i < entityTypes_1.length; _i++) {
          var entityType = entityTypes_1[_i];
          var entity = this.getEntity(entityType, commandPair.targetPos);
          if (entity) {
            entity.excuteCommand(commandPair.command);
            if (commandPair.command.type != GridCommand_1.GridCommandType.TerminateClean) break;
          }
        }
      };
      GridBase.prototype.runGame = function() {
        this.setPowerAmount(PowerID_1.PowerID.LaunchResidentGears, 1);
        this.setPowerAmount(PowerID_1.PowerID.LaunchGears, 1);
        this.setCurrentState(GridStateAppear_1.default.create());
      };
      GridBase.prototype.pauseGame = function() {
        this.setCurrentState(GridStateNull_1.default.create());
      };
      GridBase.prototype.resumeGame = function() {
        this.setCurrentState(GridStateLaunchGears_1.default.create());
      };
      GridBase.prototype.clearGameForReplay = function() {
        this.setCurrentState(GridStateDisappear_1.default.create());
      };
      GridBase.prototype.appearUI = function() {
        this._gameScene.appearUI();
      };
      GridBase.prototype.disappearUI = function() {
        this._gameScene.disappearUI();
      };
      GridBase.prototype.showReplayPrepareUI = function() {
        this._gameScene.showReplayPrepareUI();
      };
      GridBase.prototype.isComplete = function() {
        return this._gameScene.isCompleted();
      };
      GridBase.prototype.isFailed = function() {
        return this._gameScene.isFailed();
      };
      GridBase.prototype.hasShowCompleteBanner = function() {
        return this._gameScene.hasShowCompleteBanner();
      };
      GridBase.prototype.showCompleteBanner = function() {
        this._gameScene.showCompleteBanner();
      };
      GridBase.prototype.congratulation = function() {
        this._gameScene.congratulation();
      };
      GridBase.prototype.showGameFail = function() {
        this._gameScene.showGameFail();
      };
      GridBase.prototype.noMoreStep = function() {
        this._gameScene.noMoreStep();
      };
      GridBase.prototype.stalemate = function() {
        this._gameScene.stalemate();
      };
      GridBase.prototype.chargeFlyer = function(entity) {
        var chargeItems = [];
        for (var key in this._itemsMap) {
          var item = this._itemsMap[key];
          item.canWillCharge(entity.getCollectionID()) && chargeItems.push(item);
        }
        if (chargeItems.length > 0) {
          chargeItems.sort(function(itemA, itemB) {
            if (itemA.getChargePriority() == itemB.getChargePriority()) {
              var posA = itemA.getLogicalPos();
              var posB = itemB.getLogicalPos();
              if (!posA.equals(posB)) return GameMath_1.default.vec2Less(itemA.getLogicalPos(), itemB.getLogicalPos()) ? -1 : 1;
              return 0;
            }
            return itemA.getChargePriority() - itemB.getChargePriority();
          });
          var targetItem = chargeItems[0];
          if (targetItem) {
            targetItem.setWillChargeAmount(targetItem.getWillChargeAmount() + 1);
            var flyer = FlyerChargeEntity_1.default.create(this, entity.getCollectionID(), entity.getLogicalPos(), targetItem.getLogicalPos());
            this.setFlyerAtLogicalPos(flyer, entity.getLogicalPos());
          }
        }
      };
      GridBase.prototype.updateStepBarUIWithDelta = function(delta) {
        this._gameScene.updateStepBarUIWithDelta(delta);
      };
      GridBase.prototype.updateTargetBarUIWithDelta = function(collectionID, delta) {
        this._gameScene.updateTargetBarUIWithDelta(collectionID, delta);
      };
      GridBase.prototype.updateSupplyBarUIWithDelta = function(itemID, delta) {
        this._gameScene.updateSupplyBarUIWithDelta(itemID, delta);
      };
      GridBase.prototype.updateScoreBarUIWithDelta = function(delta) {
        this._gameScene.updateScoreBarUIWithDelta(delta);
      };
      GridBase.prototype.collectEntity = function(entity) {
        this.gainCollectedEntity(entity.getCollectionID(), 1);
        this.gainPower(entity.getPowerID(), 1);
        this.gainCollectedSupplyWithEntity(entity);
      };
      GridBase.prototype.createCollectedEntityFlyer = function(entity) {
        var collectionID = entity.getCollectionID();
        if (this.isTargetCollectionID(collectionID)) {
          var flyer = FlyerCollectedEntity_1.default.create(this, collectionID, -1, entity.getLogicalPos());
          this.setFlyerAtLogicalPos(flyer, entity.getLogicalPos());
        }
      };
      GridBase.prototype.isTargetCollectionID = function(collectionID) {
        return this._gameScene.isTargetCollectionID(collectionID);
      };
      GridBase.prototype.gainStepWithItemID = function(itemID, withFlyer, fromPos) {
        void 0 === withFlyer && (withFlyer = false);
        void 0 === fromPos && (fromPos = cc.Vec2.ZERO);
        var stepNum = 5;
        this.gainPower(PowerID_1.PowerID.AvailableSwap, stepNum);
        if (withFlyer) {
          var flyer = FlyerMoreStep_1.default.create(this, stepNum, fromPos);
          this.setFlyerAtLogicalPos(flyer, fromPos);
        } else this.updateStepBarUIWithDelta(stepNum);
      };
      GridBase.prototype.getTargetMap = function() {
        return this._gameScene.getTargetMap();
      };
      GridBase.prototype.getTargetAmount = function(collectionID) {
        return this._gameScene.getTargetAmount(collectionID);
      };
      GridBase.prototype.getCollectedEntityAmount = function(collectionID) {
        return this._gameScene.getCollectedEntityAmount(collectionID);
      };
      GridBase.prototype.setCollectedEntityAmount = function(collectionID, amount) {
        this._gameScene.setCollectedEntityAmount(collectionID, amount);
      };
      GridBase.prototype.gainCollectedEntity = function(collectionID, amount) {
        this.setCollectedEntityAmount(collectionID, this.getCollectedEntityAmount(collectionID) + amount);
      };
      GridBase.prototype.lossCollectedEntity = function(collectionID, amount) {
        this.gainCollectedEntity(collectionID, -amount);
      };
      GridBase.prototype.getCollectedSupplyAmount = function(itemID) {
        return this._gameScene.getCollectedSupplyAmount(itemID);
      };
      GridBase.prototype.setCollectedSupplyAmount = function(itemID, amount) {
        this._gameScene.setCollectedSupplyAmount(itemID, amount);
      };
      GridBase.prototype.gainCollectedSupply = function(itemID, amount) {
        this.setCollectedSupplyAmount(itemID, this.getCollectedSupplyAmount(itemID) + amount);
      };
      GridBase.prototype.lossCollectedSupply = function(itemID, amount) {
        this.gainCollectedSupply(itemID, -amount);
      };
      GridBase.prototype.gainCollectedSupplyWithLogicalPos = function(itemID, amount, logicalPos) {
        if (this.canGenerateTrainSupply() && itemID != GameCurrencyType_1.GameCurrencyType.NoneType && amount > 0) {
          this.gainCollectedSupply(itemID, amount);
          var flyer = FlyerCollectedSupply_1.default.create(this, itemID, amount, logicalPos, 0);
          this.setFlyerAtLogicalPos(flyer, logicalPos);
        }
      };
      GridBase.prototype.gainCollectedSupplyWithEntity = function(entity) {
        if (this.canGenerateTrainSupply()) {
          var supplyMaps = entity.getProducedTrainSupplyMaps();
          for (var supplyID in supplyMaps) {
            var itemID = Number(supplyID);
            var amount = supplyMaps[supplyID];
            this.gainCollectedSupplyWithLogicalPos(itemID, amount, entity.getLogicalPos());
          }
        }
      };
      GridBase.prototype.getWorldPosForTarget = function(collectionID) {
        return this._gameScene.getWorldPosForTarget(collectionID);
      };
      GridBase.prototype.getWorldPosForSupply = function(itemID) {
        return this._gameScene.getWorldPosForSupply(itemID);
      };
      GridBase.prototype.getWorldPosForStep = function() {
        return this._gameScene.getWorldPosForStep();
      };
      GridBase.prototype.getWorldPosForScore = function() {
        return this._gameScene.getWorldPosForScore();
      };
      GridBase.prototype.getWorldPosForGear = function(itemID) {
        return this._gameScene.getWorldPosForGear(itemID);
      };
      GridBase.prototype.getWorldAreas = function(type, data) {
        var result = [];
        switch (type) {
         case 1:
          var posStrings = data.split("|");
          var positions = [];
          for (var _i = 0, posStrings_1 = posStrings; _i < posStrings_1.length; _i++) {
            var posString = posStrings_1[_i];
            var pos = GameMath_1.default.getVec2FromConfigString(posString);
            pos && positions.push(pos);
          }
          result = this.getWorldAreasWithPositions(positions);
          break;

         case 2:
          var names = data.split("|");
          for (var _a = 0, names_1 = names; _a < names_1.length; _a++) {
            var name = names_1[_a];
            var areas = this.getWorldAreasWithName(name);
            for (var _b = 0, areas_1 = areas; _b < areas_1.length; _b++) {
              var area = areas_1[_b];
              result.push(area);
            }
          }
        }
        return result;
      };
      GridBase.prototype.getWorldAreasWithPositions = function(positions) {
        var result = [];
        for (var _i = 0, positions_2 = positions; _i < positions_2.length; _i++) {
          var pos = positions_2[_i];
          var area = this.getWorldAreaWithLogicalPos(pos);
          area && result.push(area);
        }
        return result;
      };
      GridBase.prototype.getWorldAreaWithLogicalPos = function(logicalPos) {
        var result = null;
        var originOffset = cc.v2(.5 * -this._cellSize.width, .5 * -this._cellSize.height);
        var origin = this.getPixelPosFromLogicalPos(logicalPos).add(originOffset);
        var conner = this.getPixelPosFromLogicalPos(logicalPos.add(cc.v2(1, 1))).add(originOffset);
        var originWorld = this.node.convertToWorldSpaceAR(origin);
        var connerWorld = this.node.convertToWorldSpaceAR(conner);
        result = cc.rect(originWorld.x, originWorld.y, connerWorld.x - originWorld.x, connerWorld.y - originWorld.y);
        return result;
      };
      GridBase.prototype.getWorldAreasWithName = function(name) {
        var result = [];
        if ("popsicles" == name) for (var key in this._popsiclesMap) {
          var popsicle = this._popsiclesMap[key];
          var occupyArea = popsicle.getOccupyArea();
          for (var row = 0; row < occupyArea.height; row++) for (var column = 0; column < occupyArea.width; column++) {
            var checkPos = cc.v2(occupyArea.x + column, occupyArea.y + row);
            var area = this.getWorldAreaWithLogicalPos(checkPos);
            area && result.push(area);
          }
        } else if ("unfilled_grass" == name) for (var key in this._cellsMap) {
          var cell = this._cellsMap[key];
          var pos = cell.getLogicalPos();
          if (!this.isGrassFloorAtLogicalPos(pos)) {
            var area = this.getWorldAreaWithLogicalPos(pos);
            area && result.push(area);
          }
        } else if ("doughnut" == name) for (var key in this._itemsMap) {
          var item = this._itemsMap[key];
          if (item.getItemType() == ItemBase_1.ItemType.Doughnut) {
            var pos = item.getLogicalPos();
            var area = this.getWorldAreaWithLogicalPos(pos);
            area && result.push(area);
          }
        } else if ("block" == name) for (var key in this._itemsMap) {
          var item = this._itemsMap[key];
          if (item.getItemType() == ItemBase_1.ItemType.Block) {
            var pos = item.getLogicalPos();
            var area = this.getWorldAreaWithLogicalPos(pos);
            area && result.push(area);
          }
        } else if ("iceCube" == name) for (var key in this._itemsMap) {
          var item = this._itemsMap[key];
          var parasite = item.getTopParasite();
          if (parasite && parasite.getParasiteType() == ParasiteBase_1.ParasiteType.IceCube) {
            var pos = item.getLogicalPos();
            var area = this.getWorldAreaWithLogicalPos(pos);
            area && result.push(area);
          }
        } else if ("nut" == name) for (var key in this._itemsMap) {
          var item = this._itemsMap[key];
          if (item.getItemType() == ItemBase_1.ItemType.Chestnut) {
            var pos = item.getLogicalPos();
            var area = this.getWorldAreaWithLogicalPos(pos);
            area && result.push(area);
          }
        } else if ("paw" == name) for (var key in this._itemsMap) {
          var item = this._itemsMap[key];
          if (item.getItemType() == ItemBase_1.ItemType.DogPaw) {
            var pos = item.getLogicalPos();
            var area = this.getWorldAreaWithLogicalPos(pos);
            area && result.push(area);
          }
        } else if ("red" == name) for (var key in this._itemsMap) {
          var item = this._itemsMap[key];
          if (item.getItemType() == ItemBase_1.ItemType.Normal && item.getEntityColor() == EntityID_1.EntityColor.Red) {
            var pos = item.getLogicalPos();
            var area = this.getWorldAreaWithLogicalPos(pos);
            area && result.push(area);
          }
        } else if ("green" == name) for (var key in this._itemsMap) {
          var item = this._itemsMap[key];
          if (item.getItemType() == ItemBase_1.ItemType.Normal && item.getEntityColor() == EntityID_1.EntityColor.Green) {
            var pos = item.getLogicalPos();
            var area = this.getWorldAreaWithLogicalPos(pos);
            area && result.push(area);
          }
        } else if ("butterfly" == name) for (var key in this._itemsMap) {
          var item = this._itemsMap[key];
          if (item.getItemType() == ItemBase_1.ItemType.EffectBomb) {
            var bombItem = item;
            if (bombItem.getBombType() == ItemBombBase_1.ItemBombType.Butterfly) {
              var pos = item.getLogicalPos();
              var area = this.getWorldAreaWithLogicalPos(pos);
              area && result.push(area);
            }
          }
        } else if ("giftbox" == name) for (var key in this._parasitesMap) {
          var parasite = this._parasitesMap[key];
          if (parasite.getParasiteType() == ParasiteBase_1.ParasiteType.GiftBox) {
            var pos = parasite.getLogicalPos();
            var size = parasite.getLogicalSize();
            for (var row = 0; row < size.height; row++) for (var column = 0; column < size.width; column++) {
              var checkPos = pos.add(cc.v2(column, row));
              var area = this.getWorldAreaWithLogicalPos(checkPos);
              area && result.push(area);
            }
          }
        }
        return result;
      };
      GridBase.prototype.getPowerAmount = function(powerID) {
        return this._gameScene.getPowerAmount(powerID);
      };
      GridBase.prototype.setPowerAmount = function(powerID, amount) {
        this._gameScene.setPowerAmount(powerID, amount);
      };
      GridBase.prototype.gainPower = function(powerID, amount) {
        this._gameScene.gainPowerAmount(powerID, amount);
      };
      GridBase.prototype.lossPower = function(powerID, amount) {
        this._gameScene.lossPowerAmount(powerID, amount);
      };
      GridBase.prototype.getTotalScore = function() {
        return this._gameScene.getTotalScore();
      };
      GridBase.prototype.setTotalScore = function(score) {
        this._gameScene.setTotalScore(score);
      };
      GridBase.prototype.gainScore = function(score) {
        this._gameScene.gainTotalScore(score);
      };
      GridBase.prototype.lossScore = function(score) {
        this._gameScene.lossTotalScore(score);
      };
      GridBase.prototype.gainScoreWithPixelPos = function(score, pos, floatScore) {
        void 0 === floatScore && (floatScore = false);
        if (this._gameScene.canCountScore()) {
          this.gainScore(score);
          var flyer = FlyerScore_1.default.create(this, pos, score);
          this.setFlyerAtLogicalPos(flyer, cc.v2(0, 0));
          if (floatScore) {
            var floatScore_1 = FlyerScoreLabel_1.default.create(this, pos, score);
            this.setFlyerAtLogicalPos(floatScore_1, cc.v2(0, 0));
          }
        }
      };
      GridBase.prototype.gainScoreWithEntity = function(entity, rate) {
        void 0 === rate && (rate = 1);
        var score = entity.getScore() * rate;
        var pixelPos = this.getPixelPosFromLogicalPos(entity.getLogicalPos());
        this.gainScoreWithPixelPos(score, pixelPos);
      };
      GridBase.prototype.getBonusStepCount = function() {
        return this._gameScene.getBonusStepCount();
      };
      GridBase.prototype.setBonusStepCount = function(count) {
        this._gameScene.setBonusStepCount(count);
      };
      GridBase.prototype.gainBonusStepCount = function(delta) {
        this.setBonusStepCount(this.getBonusStepCount() + delta);
      };
      GridBase.prototype.lossBonusStepCount = function(delta) {
        this.setBonusStepCount(this.getBonusStepCount() - delta);
      };
      GridBase.prototype.requestUseGear = function(itemID, amount) {
        this._gameScene.requestUseGear(itemID, amount, this.onUseGearRespone, this);
      };
      GridBase.prototype.onUseGearRespone = function(object) {
        this._stateMachine.onRespone(object);
      };
      GridBase.prototype.getUsedGearAmount = function(itemID) {
        return this._gameScene.getUsedGearAmount(itemID);
      };
      GridBase.prototype.setUsedGearAmount = function(itemID, amount) {
        return this._gameScene.setUsedGearAmount(itemID, amount);
      };
      GridBase.prototype.getLaunchGearMap = function() {
        return this._gameScene.getLaunchGearMap();
      };
      GridBase.prototype.clearLaunchGears = function() {
        this._gameScene.clearLaunchGears();
      };
      GridBase.prototype.getDropEntityMap = function() {
        return this._gameScene.getDropEntityMap();
      };
      GridBase.prototype.resetDropConfig = function() {
        this._gameScene.resetDropConfig();
        for (var key in this._cellsMap) {
          var cell = this._cellsMap[key];
          cell.getGenerateType() != CellBase_1.GenerateType.None && cell.setGenerateType(CellBase_1.GenerateType.Default);
        }
      };
      GridBase.prototype.getLimitedEntityMap = function() {
        return this._gameScene.getLimitedEntityMap();
      };
      GridBase.prototype.getLimitedGroupMap = function() {
        return this._gameScene.getLimitedGroupMap();
      };
      GridBase.prototype.getPuppyLeftSteps = function() {
        var pathCount = 0;
        for (var key in this._floorsMap) {
          var floor = this._floorsMap[key];
          floor.getFloorType() == FloorBase_1.FloorType.Road && (pathCount += 1);
        }
        var movedSteps = this.getPowerAmount(PowerID_1.PowerID.PuppyMovedStep);
        return pathCount - movedSteps - 1;
      };
      GridBase.prototype.canGenerateBomb = function() {
        return this._gameScene.canGenerateBomb();
      };
      GridBase.prototype.canGenerateTrainSupply = function() {
        return this._gameScene.canGenerateTrainSupply();
      };
      GridBase.prototype.canGetBonusFromLeftStep = function() {
        return this._gameScene.canGetBonusFromLeftStep();
      };
      GridBase.prototype.beforePlayerOperated = function() {
        this._gameScene.beforePlayerOperated();
      };
      GridBase.prototype.onPlayerOperated = function() {
        this._gameScene.onPlayerOperated();
      };
      GridBase.prototype.canPauseGame = function() {
        var currentState = this.getCurrentState();
        return currentState.canPause();
      };
      GridBase.prototype.start = function() {};
      GridBase.prototype.update = function(dt) {
        dt *= cc.director.getScheduler().getTimeScale();
        this.progressCommand(dt);
        this._stateMachine.update(dt);
      };
      GridBase.prototype.onDestroy = function() {
        this.conveyerLayer = null;
        this._stateMachine = null;
        this._gridSize = null;
        this._cellSize = null;
        this._framesMap = null;
        this._cellsMap = null;
        this._popsiclesMap = null;
        this._floorsMap = null;
        this._rugsMap = null;
        this._itemsMap = null;
        this._fencesMap = null;
        this._markersMap = null;
        this._obstructs = null;
        this._flyerObstructs = null;
        this._attackePositions = null;
        this._commandPairs = null;
        this._gameScene = null;
      };
      GridBase.prototype.onTouchStart = function(evt) {
        var pixelPos = this.node.convertToNodeSpaceAR(evt.getLocation());
        var logicalPos = this.getLogicalPosFromPixelPos(cc.v2(pixelPos.x, pixelPos.y));
        this._stateMachine.onTapBegan(logicalPos);
      };
      GridBase.prototype.onTouchMove = function(evt) {
        var pixelPos = this.node.convertToNodeSpaceAR(evt.getLocation());
        var logicalPos = this.getLogicalPosFromPixelPos(cc.v2(pixelPos.x, pixelPos.y));
        if (logicalPos.equals(this._lastTouchLogicalPos)) return;
        this._lastTouchLogicalPos = logicalPos;
        this._stateMachine.onTapMoved(logicalPos);
      };
      GridBase.prototype.onTouchEnd = function(evt) {
        var pixelPos = this.node.convertToNodeSpaceAR(evt.getLocation());
        var logicalPos = this.getLogicalPosFromPixelPos(cc.v2(pixelPos.x, pixelPos.y));
        this._stateMachine.onTapEnded(logicalPos);
      };
      GridBase.prototype.onEvent = function(event) {
        this._stateMachine.onEvent(event);
      };
      var GridBase_1;
      GridBase.ZORDER_FRAME_BOTTOM = 1e3;
      GridBase.ZORDER_FRAME_TOP = 1500;
      GridBase.ZORDER_CELL_BOTTOM = 2e3;
      GridBase.ZORDER_CELL_TOP = 2500;
      GridBase.ZORDER_POPSICLES_BOTTOM = 4e3;
      GridBase.ZORDER_POPSICLES_TOP = 4500;
      GridBase.ZORDER_FLOOR_BOTTOM = 5e3;
      GridBase.ZORDER_FLOOR_TOP = 5500;
      GridBase.ZORDER_RUG_BOTTOM = 6e3;
      GridBase.ZORDER_RUG_TOP = 6500;
      GridBase.ZORDER_ITEM_BOTTOM = 7e3;
      GridBase.ZORDER_ITEM_TOP = 7500;
      GridBase.ZORDER_PARASITE_BOTTOM = 8e3;
      GridBase.ZORDER_PARASITE_TOP = 8500;
      GridBase.ZORDER_FENCE_BOTTOM = 9e3;
      GridBase.ZORDER_FENCE_TOP = 9500;
      GridBase.ZORDER_MARKER_BOTTOM = 1e4;
      GridBase.ZORDER_MARKER_TOP = 10500;
      GridBase.ZORDER_PUPPY_BOTTOM = 11e3;
      GridBase.ZORDER_PUPPY_TOP = 11500;
      GridBase.ZORDER_CONVEYERS_BOTTOM = 12e3;
      GridBase.ZORDER_CONVEYERS_TOP = 12500;
      GridBase.ZORDER_FLYER_BOTTOM = 13e3;
      GridBase.ZORDER_FLYER_TOP = 13500;
      GridBase.ZORDER_EFFECT = 2e4;
      GridBase.MAX_GRID_WIDTH = 9;
      GridBase.MAX_GRID_HEIGHT = 12;
      __decorate([ property(cc.Node) ], GridBase.prototype, "conveyerLayer", void 0);
      GridBase = GridBase_1 = __decorate([ ccclass ], GridBase);
      return GridBase;
    }(cc.Component);
    exports.default = GridBase;
    cc._RF.pop();
  }, {
    "../../../component/RectangleClipper": "RectangleClipper",
    "../../../define/GameCurrencyType": "GameCurrencyType",
    "../../../extend/utils/GameMath": "GameMath",
    "../commond/GridCommand": "GridCommand",
    "../commond/GridCommandPair": "GridCommandPair",
    "../commond/Heap": "Heap",
    "../defines/CollectionID": "CollectionID",
    "../defines/EntityGroupID": "EntityGroupID",
    "../defines/EntityID": "EntityID",
    "../defines/IdentifierManager": "IdentifierManager",
    "../defines/PowerID": "PowerID",
    "../entity/cell/CellBase": "CellBase",
    "../entity/floor/FloorBase": "FloorBase",
    "../entity/flyer/FlyerAnimation": "FlyerAnimation",
    "../entity/flyer/FlyerChargeEntity": "FlyerChargeEntity",
    "../entity/flyer/FlyerCollectedEntity": "FlyerCollectedEntity",
    "../entity/flyer/FlyerCollectedSupply": "FlyerCollectedSupply",
    "../entity/flyer/FlyerMoreStep": "FlyerMoreStep",
    "../entity/flyer/FlyerScore": "FlyerScore",
    "../entity/flyer/FlyerScoreLabel": "FlyerScoreLabel",
    "../entity/item/ItemBase": "ItemBase",
    "../entity/item/ItemFactory": "ItemFactory",
    "../entity/item/color/bomb/ItemBombBase": "ItemBombBase",
    "../entity/item/state/ItemStateGenerate": "ItemStateGenerate",
    "../entity/item/state/ItemStateReplace": "ItemStateReplace",
    "../entity/parasite/ParasiteBase": "ParasiteBase",
    "../event/EntityEventBase": "EntityEventBase",
    "./state/GridStateMachine": "GridStateMachine",
    "./state/concreteState/GridStateAppear": "GridStateAppear",
    "./state/concreteState/GridStateCreate": "GridStateCreate",
    "./state/concreteState/GridStateCrossBomb": "GridStateCrossBomb",
    "./state/concreteState/GridStateDisappear": "GridStateDisappear",
    "./state/concreteState/GridStateForceClean": "GridStateForceClean",
    "./state/concreteState/GridStateForceSwap": "GridStateForceSwap",
    "./state/concreteState/GridStateLaunchGears": "GridStateLaunchGears",
    "./state/concreteState/GridStateNull": "GridStateNull",
    "./state/concreteState/GridStateSwapNeighbour": "GridStateSwapNeighbour"
  } ],
  GridCommandPair: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "c1893kWHI9KhrvOxry/Pjxh", "GridCommandPair");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var GridCommandPair = function() {
      function GridCommandPair(TargetPos, Command, DelayTime, Index) {
        this.targetPos = cc.Vec2.ZERO;
        this.delayTime = 0;
        this.command = null;
        this.index = 0;
        this.targetPos = TargetPos;
        this.command = Command;
        this.delayTime = DelayTime;
        this.index = Index;
      }
      GridCommandPair.create = function(TargetPos, Command, DelayTime, Index) {
        return new GridCommandPair(TargetPos, Command, DelayTime, Index);
      };
      return GridCommandPair;
    }();
    exports.default = GridCommandPair;
    cc._RF.pop();
  }, {} ],
  GridCommand: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "18b91epMD5MjY4qCCjvnsXt", "GridCommand");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.GridCommandType = void 0;
    var EntityID_1 = require("../defines/EntityID");
    var ItemBombBase_1 = require("../entity/item/color/bomb/ItemBombBase");
    var CollectionID_1 = require("../defines/CollectionID");
    var GridCommandType;
    (function(GridCommandType) {
      GridCommandType[GridCommandType["None"] = -1] = "None";
      GridCommandType[GridCommandType["DoubleTabbed"] = 0] = "DoubleTabbed";
      GridCommandType[GridCommandType["NeighbourSwap"] = 1] = "NeighbourSwap";
      GridCommandType[GridCommandType["ForceSwap"] = 2] = "ForceSwap";
      GridCommandType[GridCommandType["CheckMatch"] = 3] = "CheckMatch";
      GridCommandType[GridCommandType["Change"] = 4] = "Change";
      GridCommandType[GridCommandType["Charge"] = 5] = "Charge";
      GridCommandType[GridCommandType["BombClean"] = 6] = "BombClean";
      GridCommandType[GridCommandType["MatchClean"] = 7] = "MatchClean";
      GridCommandType[GridCommandType["NeighborClean"] = 8] = "NeighborClean";
      GridCommandType[GridCommandType["FloorClean"] = 9] = "FloorClean";
      GridCommandType[GridCommandType["PopsicleClean"] = 10] = "PopsicleClean";
      GridCommandType[GridCommandType["SuicideClean"] = 11] = "SuicideClean";
      GridCommandType[GridCommandType["ActivateClean"] = 12] = "ActivateClean";
      GridCommandType[GridCommandType["LayoutGrass"] = 13] = "LayoutGrass";
      GridCommandType[GridCommandType["TerminateClean"] = 14] = "TerminateClean";
    })(GridCommandType = exports.GridCommandType || (exports.GridCommandType = {}));
    var GridCommand = function() {
      function GridCommand(priority) {
        this.type = GridCommandType.None;
        this.swapPos = cc.Vec2.ZERO;
        this.cleanRoot = cc.Vec2.ZERO;
        this.cleanColor = EntityID_1.EntityColor.None;
        this.ignoreImmunity = false;
        this.createBombType = ItemBombBase_1.ItemBombType.None;
        this.hitNeighbour = false;
        this.hitFloor = false;
        this.layoutGrass = false;
        this.targetID = EntityID_1.EntityID.None;
        this.collectOld = false;
        this.chargeID = CollectionID_1.CollectionID.None;
        this.chargeAmount = 0;
        this._priority = 0;
        this._priority = priority;
      }
      GridCommand.DoubleTabbed = function() {
        var command = new GridCommand(2004);
        command.type = GridCommandType.DoubleTabbed;
        return command;
      };
      GridCommand.NeighbourSwap = function(swapPos) {
        var command = new GridCommand(2003);
        command.type = GridCommandType.NeighbourSwap;
        command.swapPos = swapPos;
        return command;
      };
      GridCommand.ForceSwap = function(swapPos) {
        var command = new GridCommand(2002);
        command.type = GridCommandType.ForceSwap;
        command.swapPos = swapPos;
        return command;
      };
      GridCommand.CheckMatch = function() {
        var command = new GridCommand(2001);
        command.type = GridCommandType.CheckMatch;
        return command;
      };
      GridCommand.Change = function(targetID, collectOld) {
        var command = new GridCommand(2001);
        command.type = GridCommandType.Change;
        command.targetID = targetID;
        command.collectOld = collectOld;
        return command;
      };
      GridCommand.Charge = function(collectionID, amount) {
        var command = new GridCommand(2001);
        command.type = GridCommandType.Charge;
        command.chargeID = collectionID;
        command.chargeAmount = amount;
        return command;
      };
      GridCommand.MatchClean = function(celanRoot, createBombType, layoutGrass) {
        var command = new GridCommand(1101);
        command.type = GridCommandType.MatchClean;
        command.cleanRoot = celanRoot;
        command.createBombType = createBombType;
        command.hitNeighbour = true;
        command.hitFloor = true;
        command.layoutGrass = layoutGrass;
        return command;
      };
      GridCommand.LayoutGrass = function() {
        var command = new GridCommand(1004);
        command.type = GridCommandType.LayoutGrass;
        command.layoutGrass = true;
        return command;
      };
      GridCommand.BombClean = function(cleanRoot, cleanColor, layoutGrass, ignoreImmunity) {
        void 0 === ignoreImmunity && (ignoreImmunity = false);
        var command = new GridCommand(1003);
        command.type = GridCommandType.BombClean;
        command.cleanRoot = cleanRoot;
        command.cleanColor = cleanColor;
        command.ignoreImmunity = ignoreImmunity;
        command.layoutGrass = layoutGrass;
        command.hitNeighbour = false;
        command.hitFloor = true;
        return command;
      };
      GridCommand.ActivateClean = function(cleanRoot) {
        var command = new GridCommand(1003);
        command.type = GridCommandType.ActivateClean;
        command.cleanRoot = cleanRoot;
        command.cleanColor = EntityID_1.EntityColor.None;
        command.hitNeighbour = false;
        command.hitFloor = false;
        command.layoutGrass = false;
        return command;
      };
      GridCommand.SuicideClean = function(cleanRoot, cleanColor, layoutGrass) {
        var command = new GridCommand(1003);
        command.type = GridCommandType.SuicideClean;
        command.cleanRoot = cleanRoot;
        command.cleanColor = cleanColor;
        command.hitNeighbour = true;
        command.hitFloor = true;
        command.layoutGrass = layoutGrass;
        return command;
      };
      GridCommand.NeighborClean = function(cleanRoot, cleanColor) {
        var command = new GridCommand(1001);
        command.type = GridCommandType.NeighborClean;
        command.cleanRoot = cleanRoot;
        command.cleanColor = cleanColor;
        return command;
      };
      GridCommand.FloorClean = function() {
        var command = new GridCommand(1003);
        command.type = GridCommandType.FloorClean;
        return command;
      };
      GridCommand.PopsicleClean = function() {
        var command = new GridCommand(1002);
        command.type = GridCommandType.PopsicleClean;
        return command;
      };
      GridCommand.TerminateClean = function(cleanRoot, cleanColor, layoutGrass) {
        var command = new GridCommand(1003);
        command.type = GridCommandType.TerminateClean;
        command.cleanRoot = cleanRoot;
        command.cleanColor = cleanColor;
        command.layoutGrass = layoutGrass;
        return command;
      };
      GridCommand.prototype.getPriority = function() {
        return this._priority;
      };
      return GridCommand;
    }();
    exports.default = GridCommand;
    cc._RF.pop();
  }, {
    "../defines/CollectionID": "CollectionID",
    "../defines/EntityID": "EntityID",
    "../entity/item/color/bomb/ItemBombBase": "ItemBombBase"
  } ],
  GridStateAppear: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "5c808Y/gQZIm4ZX34/6PeFd", "GridStateAppear");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var GridStateBase_1 = require("../GridStateBase");
    var GridStateDrop_1 = require("./GridStateDrop");
    var GridStateAppear = function(_super) {
      __extends(GridStateAppear, _super);
      function GridStateAppear() {
        return _super.call(this, GridStateBase_1.GridState.Appear) || this;
      }
      GridStateAppear.create = function() {
        return new GridStateAppear();
      };
      GridStateAppear.prototype.enter = function(grid) {
        this.appear(grid);
      };
      GridStateAppear.prototype.update = function(grid, delta) {
        if (grid.isObstructsEmpty() && grid.isCommandListEmpty()) {
          var gridSize = grid.getGridSize();
          var checkMatchPos = [];
          for (var row = 0; row < gridSize.height; row++) for (var column = 0; column < gridSize.width; column++) checkMatchPos.push(cc.v2(column, row));
          grid.setCurrentState(GridStateDrop_1.default.create(checkMatchPos));
        }
      };
      return GridStateAppear;
    }(GridStateBase_1.default);
    exports.default = GridStateAppear;
    cc._RF.pop();
  }, {
    "../GridStateBase": "GridStateBase",
    "./GridStateDrop": "GridStateDrop"
  } ],
  GridStateAutoActivateBomb: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "07a25W59x5HO7Z1h7K43j2S", "GridStateAutoActivateBomb");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var PowerID_1 = require("../../../defines/PowerID");
    var GridStateBase_1 = require("../GridStateBase");
    var GridStateCollection_1 = require("./GridStateCollection");
    var GridStateMatch_1 = require("./GridStateMatch");
    var GridStateAutoActivateBomb = function(_super) {
      __extends(GridStateAutoActivateBomb, _super);
      function GridStateAutoActivateBomb() {
        return _super.call(this, GridStateBase_1.GridState.AutoActivatedBomb) || this;
      }
      GridStateAutoActivateBomb.create = function() {
        return new GridStateAutoActivateBomb();
      };
      GridStateAutoActivateBomb.prototype.enter = function(grid) {
        var activeIndex = grid.getPowerAmount(PowerID_1.PowerID.ActivateBomb);
        activeIndex > 0 ? grid.setCurrentState(GridStateMatch_1.default.create()) : grid.setCurrentState(GridStateCollection_1.default.create());
      };
      return GridStateAutoActivateBomb;
    }(GridStateBase_1.default);
    exports.default = GridStateAutoActivateBomb;
    cc._RF.pop();
  }, {
    "../../../defines/PowerID": "PowerID",
    "../GridStateBase": "GridStateBase",
    "./GridStateCollection": "GridStateCollection",
    "./GridStateMatch": "GridStateMatch"
  } ],
  GridStateBase: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "aabd2wUqalH8JFkBE2ZCFVX", "GridStateBase");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.GridState = void 0;
    var Pair_1 = require("../../../../base/Pair");
    var GameMath_1 = require("../../../../extend/utils/GameMath");
    var GridCommand_1 = require("../../commond/GridCommand");
    var EntityID_1 = require("../../defines/EntityID");
    var FencePos_1 = require("../../entity/fence/FencePos");
    var ItemBombBase_1 = require("../../entity/item/color/bomb/ItemBombBase");
    var ItemBase_1 = require("../../entity/item/ItemBase");
    var AvailableSwapInfo_1 = require("../availableSwapInfo/AvailableSwapInfo");
    var GridState;
    (function(GridState) {
      GridState[GridState["None"] = -1] = "None";
      GridState[GridState["Null"] = 0] = "Null";
      GridState[GridState["Global"] = 1] = "Global";
      GridState[GridState["Stalemate"] = 2] = "Stalemate";
      GridState[GridState["NoMoreStep"] = 3] = "NoMoreStep";
      GridState[GridState["Congratulation"] = 4] = "Congratulation";
      GridState[GridState["Create"] = 5] = "Create";
      GridState[GridState["Appear"] = 6] = "Appear";
      GridState[GridState["Disappear"] = 7] = "Disappear";
      GridState[GridState["DropItem"] = 8] = "DropItem";
      GridState[GridState["DropItemTest"] = 9] = "DropItemTest";
      GridState[GridState["SwapNeighbour"] = 10] = "SwapNeighbour";
      GridState[GridState["ForceClean"] = 11] = "ForceClean";
      GridState[GridState["ForceSwap"] = 12] = "ForceSwap";
      GridState[GridState["CrossBomb"] = 13] = "CrossBomb";
      GridState[GridState["MatchItem"] = 14] = "MatchItem";
      GridState[GridState["Shuffle"] = 15] = "Shuffle";
      GridState[GridState["AutoActivatedBomb"] = 16] = "AutoActivatedBomb";
      GridState[GridState["LaunchGears"] = 17] = "LaunchGears";
      GridState[GridState["LaunchResidentGear"] = 18] = "LaunchResidentGear";
      GridState[GridState["GenerateRecordSupply"] = 19] = "GenerateRecordSupply";
      GridState[GridState["ChangeColor"] = 20] = "ChangeColor";
      GridState[GridState["Collection"] = 21] = "Collection";
      GridState[GridState["Conveyer"] = 22] = "Conveyer";
      GridState[GridState["MagicCrystal"] = 23] = "MagicCrystal";
      GridState[GridState["Complete"] = 24] = "Complete";
      GridState[GridState["CleanGridForReplay"] = 25] = "CleanGridForReplay";
      GridState[GridState["Prepare"] = 26] = "Prepare";
      GridState[GridState["CompleteBanner"] = 27] = "CompleteBanner";
      GridState[GridState["Honey"] = 28] = "Honey";
      GridState[GridState["BousTime"] = 29] = "BousTime";
      GridState[GridState["ComobWord"] = 30] = "ComobWord";
      GridState[GridState["Fail"] = 31] = "Fail";
      GridState[GridState["FailSummary"] = 32] = "FailSummary";
    })(GridState = exports.GridState || (exports.GridState = {}));
    var GridStateBase = function() {
      function GridStateBase(state) {
        this._state = GridState.None;
        this._state = state;
      }
      GridStateBase.prototype.enter = function(entity) {};
      GridStateBase.prototype.update = function(entity, delta) {};
      GridStateBase.prototype.exit = function(entity) {};
      GridStateBase.prototype.onTapBegan = function(grid, logicalPos) {};
      GridStateBase.prototype.onTapMoved = function(grid, logicalPos) {};
      GridStateBase.prototype.onTapEnded = function(grid, logicalPos) {};
      GridStateBase.prototype.onEvent = function(grid, event) {};
      GridStateBase.prototype.onRespone = function(grid, event) {};
      GridStateBase.prototype.canChangeState = function() {
        return false;
      };
      GridStateBase.prototype.canPause = function() {
        return false;
      };
      GridStateBase.prototype.canSwapItem = function(grid, logicalPosA, logicalPosB) {
        var offset = logicalPosB.sub(logicalPosA);
        if (1 != offset.magSqr()) return false;
        var fencePos = FencePos_1.default.create(logicalPosA, logicalPosB);
        var fence = grid.getFenceAtFencePos(fencePos);
        if (fence) return false;
        var itemA = grid.getItemAtLogicalPos(logicalPosA);
        var itemB = grid.getItemAtLogicalPos(logicalPosB);
        if (itemA && itemB && itemA.canSwap() && itemB.canSwap()) return true;
        return false;
      };
      GridStateBase.prototype.getAvailableSwapInfo = function(grid, logicalPosA, logicalPosB) {
        var result = AvailableSwapInfo_1.default.create();
        if (this.canSwapItem(grid, logicalPosA, logicalPosB)) {
          var itemA = grid.getItemAtLogicalPos(logicalPosA);
          var itemB = grid.getItemAtLogicalPos(logicalPosB);
          grid.swapItem(logicalPosA, logicalPosB);
          if (itemA.getItemType() == ItemBase_1.ItemType.EffectBomb && itemB.getItemType() == ItemBase_1.ItemType.EffectBomb) {
            if (itemA.canExcuteCommand(GridCommand_1.default.NeighbourSwap(logicalPosA)) || itemB.canExcuteCommand(GridCommand_1.default.NeighbourSwap(logicalPosB))) {
              result.swapPair = new Pair_1.Pair(logicalPosA, logicalPosB);
              var value = AvailableSwapInfo_1.AvailableSwapBaseValue.MatchBomb;
              var bombA = itemA;
              var bombB = itemB;
              value += 1e5 * (bombA.getBombType() + bombB.getBombType());
              result.value = value;
            }
          } else {
            result.linkedPositions = itemA.getLinkedPositions();
            if (result.linkedPositions.length > 0) {
              result.swapPair = new Pair_1.Pair(logicalPosA, logicalPosB);
              var createBombType = GameMath_1.default.getCreateBombType(result.linkedPositions);
              if (createBombType != ItemBombBase_1.ItemBombType.None) {
                var value = AvailableSwapInfo_1.AvailableSwapBaseValue.MergerBomb;
                value += 1e5 * createBombType;
                value += 1e3 * result.linkedPositions.length;
                value += (grid.getGridSize().width - logicalPosA.x) * (grid.getGridSize().height - logicalPosA.y);
                result.value = value;
              } else {
                var value = AvailableSwapInfo_1.AvailableSwapBaseValue.MatchColor;
                value += 1e3 * result.linkedPositions.length;
                value += (grid.getGridSize().width - logicalPosA.x) * (grid.getGridSize().height - logicalPosA.y);
                result.value = value;
              }
              for (var _i = 0, _a = result.linkedPositions; _i < _a.length; _i++) {
                var pos = _a[_i];
                var item = grid.getItemAtLogicalPos(pos);
                item.getItemType() == ItemBase_1.ItemType.EffectBomb && (result.value += 1e4);
              }
            } else if (itemA.getEntityID() == EntityID_1.EntityID.ItemBombRainbow && itemB.getEntityColor() != EntityID_1.EntityColor.None || itemB.getEntityID() == EntityID_1.EntityID.ItemBombRainbow && itemA.getEntityColor() != EntityID_1.EntityColor.None) {
              result.swapPair = new Pair_1.Pair(logicalPosA, logicalPosB);
              result.value = Math.max(result.value - 1e5, 1);
            } else result.value = 0;
          }
          grid.swapItem(logicalPosA, logicalPosB);
          if (result.value > 0) return result;
        }
        return null;
      };
      GridStateBase.prototype.hasAvailableSwap = function(grid) {
        var itemMap = grid.getItemsMap();
        var offsets = [ cc.v2(1, 0), cc.v2(-1, 0), cc.v2(0, 1), cc.v2(0, -1) ];
        var positions = [];
        for (var key in itemMap) {
          var item = itemMap[key];
          positions.push(item.getLogicalPos());
        }
        for (var _i = 0, positions_1 = positions; _i < positions_1.length; _i++) {
          var pos = positions_1[_i];
          for (var _a = 0, offsets_1 = offsets; _a < offsets_1.length; _a++) {
            var offset = offsets_1[_a];
            var checkPos = pos.add(offset);
            var result = this.getAvailableSwapInfo(grid, pos, checkPos);
            if (result) return true;
          }
        }
        return false;
      };
      GridStateBase.prototype.shuffleGrid = function(grid, shufflePositions, noMatch, hasSwap, isCreate) {
        void 0 === noMatch && (noMatch = true);
        void 0 === hasSwap && (hasSwap = true);
        void 0 === isCreate && (isCreate = false);
        var result = [];
        var itemsMap = grid.getItemsMap();
        var sources = [];
        var sourceKeys = [];
        var targetKeys = [];
        for (var key in itemsMap) {
          var item = itemsMap[key];
          var pos = item.getLogicalPos();
          var canShuffle = false;
          -1 != GameMath_1.default.indexOf(shufflePositions, pos) && (isCreate ? item.canShuffleWhenCreate() && (canShuffle = true) : item.canShuffle() && (canShuffle = true));
          if (canShuffle) {
            sources.push({
              item: item,
              pos: pos
            });
            sourceKeys.push(pos);
            targetKeys.push(pos);
          }
        }
        var loopCount = 0;
        do {
          var noSolution = false;
          GameMath_1.default.shuffleArray(targetKeys);
          var count = sourceKeys.length;
          for (var i = 0; i < count; i++) {
            var posA = sourceKeys[i];
            var j = i;
            for (;j < count; j++) {
              var posB = targetKeys[j];
              if (!posB.equals(posA)) {
                grid.swapItem(posA, posB);
                var itemA = grid.getItemAtLogicalPos(posA);
                var itemB = grid.getItemAtLogicalPos(posB);
                if (0 == itemA.getLinkedPositions().length && 0 == itemB.getLinkedPositions().length) {
                  var temp = targetKeys[i];
                  targetKeys[i] = targetKeys[j];
                  targetKeys[j] = temp;
                  break;
                }
                grid.swapItem(posA, posB);
              }
            }
            if (j >= count) {
              noSolution = true;
              break;
            }
          }
          if (false == noSolution) {
            if (!hasSwap) break;
            if (this.hasAvailableSwap(grid)) break;
          }
          loopCount++;
          if (loopCount >= 50) break;
        } while (1);
        if (loopCount < 50) {
          var itemsMap_1 = grid.getItemsMap();
          for (var key in itemsMap_1) {
            var item = itemsMap_1[key];
            var pos = item.getLogicalPos();
            if (-1 != GameMath_1.default.indexOf(shufflePositions, pos)) for (var _i = 0, sources_1 = sources; _i < sources_1.length; _i++) {
              var object = sources_1[_i];
              if (object["item"] === item) {
                var swapPos = new Pair_1.Pair(object["pos"], item.getLogicalPos());
                var pair = new Pair_1.Pair(item, swapPos);
                result.push(pair);
              }
            }
          }
        }
        return result;
      };
      GridStateBase.prototype.disappear = function(grid) {
        grid.disappearUI();
        var duration = 1;
        var types = [ EntityID_1.EntityType.Frame, EntityID_1.EntityType.Cell, EntityID_1.EntityType.Floor, EntityID_1.EntityType.Rug, EntityID_1.EntityType.Popsicle, EntityID_1.EntityType.Item, EntityID_1.EntityType.Parasite, EntityID_1.EntityType.Marker ];
        var biggerThan1X1Entities = [];
        var gridSize = grid.getGridSize();
        var cellSize = grid.getCellSize();
        var origin = cc.v2(.5 * grid.node.getContentSize().width, .5 * grid.node.getContentSize().height);
        var interval = duration / (.5 * gridSize.width + .5 * gridSize.height + 5);
        for (var row = -1; row < gridSize.height + 1; row++) for (var column = -1; column < gridSize.width + 1; column++) {
          var checkPos = cc.v2(column, row);
          var _loop_1 = function(type) {
            var entity = grid.getEntity(type, checkPos);
            if (entity && -1 == GameMath_1.default.indexOf(biggerThan1X1Entities, entity)) {
              var offset = entity.node.getPosition().sub(origin);
              entity.removeFromGridAndAddToEffect();
              var actions = [];
              var delayDuration = offset.mag() / cellSize.width * interval;
              delayDuration > 0 && actions.push(cc.delayTime(delayDuration));
              actions.push(cc.fadeOut(3 * interval).easing(cc.easeIn(2)));
              actions.push(cc.callFunc(function() {
                grid.removeObstructs(entity);
                entity.node.destroy();
              }));
              grid.addObstructs(entity);
              entity.runAction(cc.sequence(actions));
              entity.getLogicalSize().width * entity.getLogicalSize().height > 1 && GameMath_1.default.insertAsSet(biggerThan1X1Entities, entity);
            }
          };
          for (var _i = 0, types_1 = types; _i < types_1.length; _i++) {
            var type = types_1[_i];
            _loop_1(type);
          }
        }
        var fences = [];
        var fencesMap = grid.getFencesMap();
        for (var key in fencesMap) {
          var fence = fencesMap[key];
          fences.push(fence);
        }
        var _loop_2 = function(fence) {
          var offset = fence.node.getPosition().sub(origin);
          fence.removeFromGridAndAddToEffect();
          var actions = [];
          var delayDuration = offset.mag() / cellSize.width * interval;
          delayDuration > 0 && actions.push(cc.delayTime(delayDuration));
          actions.push(cc.fadeOut(3 * interval).easing(cc.easeIn(2)));
          actions.push(cc.callFunc(function() {
            grid.removeObstructs(fence);
            fence.node.destroy();
          }));
          grid.addObstructs(fence);
          fence.runAction(cc.sequence(actions));
        };
        for (var _a = 0, fences_1 = fences; _a < fences_1.length; _a++) {
          var fence = fences_1[_a];
          _loop_2(fence);
        }
      };
      GridStateBase.prototype.appear = function(grid) {
        grid.appearUI();
        var duration = 1;
        var types = [ EntityID_1.EntityType.Frame, EntityID_1.EntityType.Cell, EntityID_1.EntityType.Floor, EntityID_1.EntityType.Rug, EntityID_1.EntityType.Popsicle, EntityID_1.EntityType.Item, EntityID_1.EntityType.Parasite, EntityID_1.EntityType.Marker ];
        var gridSize = grid.getGridSize();
        var cellSize = grid.getCellSize();
        var conners = [ cc.v2(-1, -1), cc.v2(-1, gridSize.height + 1), cc.v2(gridSize.width + 1, -1), cc.v2(gridSize.width + 1, gridSize.height + 1) ];
        var biggerThan1X1Entities = [];
        var interval = duration / (.5 * gridSize.width + .5 * gridSize.height + 5);
        for (var row = -1; row < gridSize.height + 1; row++) for (var column = -1; column < gridSize.width + 1; column++) {
          var checkPos = cc.v2(column, row);
          var minDistanceConner = conners[0];
          for (var _i = 0, conners_1 = conners; _i < conners_1.length; _i++) {
            var conner = conners_1[_i];
            GameMath_1.default.getDistanceSQ(checkPos, conner) < GameMath_1.default.getDistanceSQ(checkPos, minDistanceConner) && (minDistanceConner = conner);
          }
          var _loop_3 = function(type) {
            var entity = grid.getEntity(type, checkPos);
            if (entity && -1 == GameMath_1.default.indexOf(biggerThan1X1Entities, entity) && entity.getVisible()) {
              var offset = entity.node.getPosition().sub(grid.getPixelPosFromLogicalPos(minDistanceConner));
              grid.addObstructs(entity);
              var actions = [];
              var delayDuration = offset.mag() / cellSize.width * interval;
              delayDuration > 0 && actions.push(cc.delayTime(delayDuration));
              entity.node.opacity = 0;
              actions.push(cc.fadeIn(3 * interval).easing(cc.easeIn(2)));
              actions.push(cc.callFunc(function() {
                grid.removeObstructs(entity);
                entity.node.opacity = 255;
              }));
              entity.runAction(cc.sequence(actions));
              entity.getLogicalSize().width * entity.getLogicalSize().height > 1 && GameMath_1.default.insertAsSet(biggerThan1X1Entities, entity);
            }
          };
          for (var _a = 0, types_2 = types; _a < types_2.length; _a++) {
            var type = types_2[_a];
            _loop_3(type);
          }
        }
        var fencesMap = grid.getFencesMap();
        var _loop_4 = function(key) {
          var fence = fencesMap[key];
          if (fence.getVisible()) {
            var minDistanceConner = conners[0];
            var fenceRoot = fence.getFencePos().posA;
            for (var _i = 0, conners_2 = conners; _i < conners_2.length; _i++) {
              var conner = conners_2[_i];
              GameMath_1.default.getDistanceSQ(fenceRoot, conner) < GameMath_1.default.getDistanceSQ(fenceRoot, minDistanceConner) && (minDistanceConner = conner);
            }
            var offset = fence.node.getPosition().sub(grid.getPixelPosFromLogicalPos(minDistanceConner));
            grid.addObstructs(fence);
            var actions = [];
            var delayDuration = offset.mag() / cellSize.width * interval;
            delayDuration > 0 && actions.push(cc.delayTime(delayDuration));
            fence.node.opacity = 0;
            actions.push(cc.fadeIn(3 * interval).easing(cc.easeIn(2)));
            actions.push(cc.callFunc(function() {
              grid.removeObstructs(fence);
              fence.node.opacity = 255;
            }));
            fence.runAction(cc.sequence(actions));
          }
        };
        for (var key in fencesMap) _loop_4(key);
      };
      GridStateBase.checkArrangeInfo = {
        "{1, 0}": [ [ cc.v2(2, 0), cc.v2(3, 0) ], [ cc.v2(1, 1), cc.v2(1, 2) ], [ cc.v2(1, -1), cc.v2(1, -2) ], [ cc.v2(1, 1), cc.v2(2, 1), cc.v2(2, 0) ], [ cc.v2(1, -1), cc.v2(2, -1), cc.v2(2, 0) ] ],
        "{-1, 0}": [ [ cc.v2(-2, 0), cc.v2(-3, 0) ], [ cc.v2(-1, 1), cc.v2(-1, 2) ], [ cc.v2(-1, -1), cc.v2(-1, -2) ], [ cc.v2(-1, 1), cc.v2(-2, 1), cc.v2(-2, 0) ], [ cc.v2(-1, -1), cc.v2(-2, -1), cc.v2(-2, 0) ] ],
        "{0, 1}": [ [ cc.v2(0, 2), cc.v2(0, 3) ], [ cc.v2(-1, 1), cc.v2(-2, 1) ], [ cc.v2(1, 1), cc.v2(2, 1) ], [ cc.v2(-1, 1), cc.v2(-1, 2), cc.v2(0, 2) ], [ cc.v2(1, 1), cc.v2(1, 2), cc.v2(0, 2) ] ],
        "{0, -1}": [ [ cc.v2(0, -2), cc.v2(0, -3) ], [ cc.v2(-1, -1), cc.v2(-2, -1) ], [ cc.v2(1, -1), cc.v2(2, -1) ], [ cc.v2(-1, -1), cc.v2(-1, -2), cc.v2(0, -2) ], [ cc.v2(1, -1), cc.v2(1, -2), cc.v2(0, -2) ] ]
      };
      return GridStateBase;
    }();
    exports.default = GridStateBase;
    cc._RF.pop();
  }, {
    "../../../../base/Pair": "Pair",
    "../../../../extend/utils/GameMath": "GameMath",
    "../../commond/GridCommand": "GridCommand",
    "../../defines/EntityID": "EntityID",
    "../../entity/fence/FencePos": "FencePos",
    "../../entity/item/ItemBase": "ItemBase",
    "../../entity/item/color/bomb/ItemBombBase": "ItemBombBase",
    "../availableSwapInfo/AvailableSwapInfo": "AvailableSwapInfo"
  } ],
  GridStateBousTime: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "ccae8HUVQ9Dfqqb7dm1vA5F", "GridStateBousTime");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var GridStateBase_1 = require("../GridStateBase");
    var PowerID_1 = require("../../../defines/PowerID");
    var GridCommand_1 = require("../../../commond/GridCommand");
    var GridStateDrop_1 = require("./GridStateDrop");
    var ItemStateReplace_1 = require("../../../entity/item/state/ItemStateReplace");
    var ItemBombBase_1 = require("../../../entity/item/color/bomb/ItemBombBase");
    var EntityID_1 = require("../../../defines/EntityID");
    var ItemFactory_1 = require("../../../entity/item/ItemFactory");
    var GridStateComplete_1 = require("./GridStateComplete");
    var GameMath_1 = require("../../../../../extend/utils/GameMath");
    var IGame_1 = require("../../../../../base/IGame");
    var IdentifierManager_1 = require("../../../defines/IdentifierManager");
    var GridStateBousTime = function(_super) {
      __extends(GridStateBousTime, _super);
      function GridStateBousTime() {
        var _this = _super.call(this, GridStateBase_1.GridState.BousTime) || this;
        _this._curGrid = null;
        _this._boomItems = [];
        _this._isSendBoomMsg = false;
        _this._delayTime = 0;
        return _this;
      }
      GridStateBousTime.create = function() {
        return new GridStateBousTime();
      };
      GridStateBousTime.prototype.enter = function(grid) {
        this._curGrid = grid;
        if (grid.canGetBonusFromLeftStep()) {
          this.initAllBoomItem();
          this._boomItems.length > 0 ? this.sendBoomMsg() : grid.getPowerAmount(PowerID_1.PowerID.AvailableSwap) > 0 ? this.stepNumberToBoom() : this.onBousTimeDone();
        } else this.onBousTimeDone();
      };
      GridStateBousTime.prototype.update = function(grid, delta) {
        if (this._isSendBoomMsg) {
          this._delayTime += delta;
          if (this._delayTime >= .2) {
            this.initAllBoomItem();
            if (this._boomItems.length > 0) {
              var items = this._boomItems[0];
              var position = items.getLogicalPos();
              this._curGrid.dispatchCommand(position, GridCommand_1.default.ActivateClean(position), 0);
              this._delayTime = 0;
            } else if (grid.isObstructsEmpty() && grid.isCommandListEmpty() && this._isSendBoomMsg && this._boomItems.length <= 0) {
              this._isSendBoomMsg = false;
              this._curGrid.setCurrentState(GridStateDrop_1.default.create());
            }
          }
        }
      };
      GridStateBousTime.prototype.exit = function(grid) {
        this._curGrid = null;
        this._boomItems = null;
      };
      GridStateBousTime.prototype.initAllBoomItem = function() {
        this._boomItems = [];
        var itemMap = this._curGrid.getItemsMap();
        for (var key in itemMap) {
          var tmpItem = itemMap[key];
          if (tmpItem.canCleanByActivate()) {
            this._boomItems.push(tmpItem);
            break;
          }
        }
      };
      GridStateBousTime.prototype.sendBoomMsg = function() {
        this._isSendBoomMsg = true;
      };
      GridStateBousTime.prototype.stepNumberToBoom = function() {
        var _this = this;
        var grid = this._curGrid;
        var hasStep = grid.getPowerAmount(PowerID_1.PowerID.AvailableSwap);
        var setpItems = [];
        var itemMap = grid.getItemsMap();
        for (var key in itemMap) {
          var tmpItem = itemMap[key];
          tmpItem && tmpItem.canUpgradeByRainbow() && setpItems.push(tmpItem);
        }
        GameMath_1.default.shuffleArray(setpItems);
        var stepLen = setpItems.length;
        var _loop_1 = function(i) {
          if (!(i < stepLen)) return "break";
          var newItem_1 = this_1.getOneRandBoom();
          if (newItem_1) {
            grid.gainBonusStepCount(1);
            newItem_1.node.setPosition(grid.node.convertToNodeSpace(grid.getWorldPosForStep()));
            grid.node.addChild(newItem_1.node, grid.getTopZOrder(newItem_1.getEntityType(), setpItems[i].getLogicalPos()));
            var gainScore = Math.min(1e3 * grid.getBonusStepCount() + 1e3, 5e3);
            var rewardSupply = {};
            newItem_1.setCurrentState(ItemStateReplace_1.default.create(setpItems[i].getLogicalPos(), .2 * i, gainScore, rewardSupply));
            newItem_1.setVisible(false);
            newItem_1.runAction(cc.sequence(cc.delayTime(.2 * i), cc.callFunc(function() {
              IGame_1.default.playAudio(IdentifierManager_1.default.getInstance().getMatchAudioFilePath("bonus"));
              newItem_1.setVisible(true);
              grid.updateStepBarUIWithDelta(-1);
              grid.lossPower(PowerID_1.PowerID.AvailableSwap, 1);
              if (i == Math.min(hasStep, stepLen) - 1) {
                _this.initAllBoomItem();
                _this.sendBoomMsg();
              }
            })));
          }
        };
        var this_1 = this;
        for (var i = 0; i < hasStep; i++) {
          var state_1 = _loop_1(i);
          if ("break" === state_1) break;
        }
      };
      GridStateBousTime.prototype.getOneRandBoom = function() {
        var m_bombType = [];
        m_bombType.push(ItemBombBase_1.ItemBombType.Row);
        m_bombType.push(ItemBombBase_1.ItemBombType.Column);
        GameMath_1.default.shuffleArray(m_bombType);
        var m_color = [];
        m_color.push(EntityID_1.EntityColor.Red);
        m_color.push(EntityID_1.EntityColor.Green);
        m_color.push(EntityID_1.EntityColor.Blue);
        m_color.push(EntityID_1.EntityColor.Yellow);
        m_color.push(EntityID_1.EntityColor.Orange);
        m_color.push(EntityID_1.EntityColor.Purple);
        GameMath_1.default.shuffleArray(m_color);
        var newItem = ItemFactory_1.default.generateEffectBombItem(this._curGrid, m_bombType[0], m_color[0]);
        if (newItem) return newItem;
        return null;
      };
      GridStateBousTime.prototype.onBousTimeDone = function() {
        this._curGrid.setCurrentState(GridStateComplete_1.default.create());
      };
      return GridStateBousTime;
    }(GridStateBase_1.default);
    exports.default = GridStateBousTime;
    cc._RF.pop();
  }, {
    "../../../../../base/IGame": "IGame",
    "../../../../../extend/utils/GameMath": "GameMath",
    "../../../commond/GridCommand": "GridCommand",
    "../../../defines/EntityID": "EntityID",
    "../../../defines/IdentifierManager": "IdentifierManager",
    "../../../defines/PowerID": "PowerID",
    "../../../entity/item/ItemFactory": "ItemFactory",
    "../../../entity/item/color/bomb/ItemBombBase": "ItemBombBase",
    "../../../entity/item/state/ItemStateReplace": "ItemStateReplace",
    "../GridStateBase": "GridStateBase",
    "./GridStateComplete": "GridStateComplete",
    "./GridStateDrop": "GridStateDrop"
  } ],
  GridStateChanger: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "6227cz7DV5Px7SLpnBRDN4A", "GridStateChanger");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var GridStateBase_1 = require("../GridStateBase");
    var GridStateHoney_1 = require("./GridStateHoney");
    var GridStateMatch_1 = require("./GridStateMatch");
    var PowerID_1 = require("../../../defines/PowerID");
    var FloorBase_1 = require("../../../entity/floor/FloorBase");
    var ItemStateChangeColor_1 = require("../../../entity/item/state/ItemStateChangeColor");
    var GridStateChanger = function(_super) {
      __extends(GridStateChanger, _super);
      function GridStateChanger() {
        var _this = _super.call(this, GridStateBase_1.GridState.ChangeColor) || this;
        _this._changeItems = [];
        return _this;
      }
      GridStateChanger.create = function() {
        return new GridStateChanger();
      };
      GridStateChanger.prototype.setChangerPowerPoints = function(grid, count) {
        grid.setPowerAmount(PowerID_1.PowerID.DyeingItem, count);
      };
      GridStateChanger.prototype.getChangerPowerPoints = function(grid) {
        return grid.getPowerAmount(PowerID_1.PowerID.DyeingItem);
      };
      GridStateChanger.prototype.checkGoToNextState = function(grid) {
        this.getChangerPowerPoints(grid) > 0 ? this.changeCurrentItemColor(grid) : grid.setCurrentState(GridStateMatch_1.default.create(this._changeItems));
      };
      GridStateChanger.prototype.changeCurrentItemColor = function(grid) {
        var floorMap = grid.getFloorsMap();
        for (var key in floorMap) {
          var floorTemp = floorMap[key];
          if (floorTemp.getFloorType() == FloorBase_1.FloorType.Changer) {
            var targetPos = floorTemp.getLogicalPos();
            var itemTemp = grid.getItemAtLogicalPos(targetPos);
            if (itemTemp && itemTemp.canChangeColor() && itemTemp.getEntityColor() != floorTemp.getEntityColor()) {
              itemTemp.setCurrentState(ItemStateChangeColor_1.default.create(floorTemp.getEntityColor()));
              this._changeItems.push(itemTemp.getLogicalPos());
            }
          }
        }
        this.setChangerPowerPoints(grid, 0);
      };
      GridStateChanger.prototype.enter = function(grid) {
        if (this.getChangerPowerPoints(grid) > 0) this.changeCurrentItemColor(grid); else {
          this.setChangerPowerPoints(grid, 0);
          grid.setCurrentState(GridStateHoney_1.default.create());
        }
      };
      GridStateChanger.prototype.update = function(grid, delta) {
        grid.isObstructsEmpty() && grid.isCommandListEmpty() && this.checkGoToNextState(grid);
      };
      GridStateChanger.prototype.exit = function(grid) {
        this._changeItems = null;
      };
      return GridStateChanger;
    }(GridStateBase_1.default);
    exports.default = GridStateChanger;
    cc._RF.pop();
  }, {
    "../../../defines/PowerID": "PowerID",
    "../../../entity/floor/FloorBase": "FloorBase",
    "../../../entity/item/state/ItemStateChangeColor": "ItemStateChangeColor",
    "../GridStateBase": "GridStateBase",
    "./GridStateHoney": "GridStateHoney",
    "./GridStateMatch": "GridStateMatch"
  } ],
  GridStateCollection: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "697e7BF/tZFKYPobitcjvqr", "GridStateCollection");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var GridCommand_1 = require("../../../commond/GridCommand");
    var EntityID_1 = require("../../../defines/EntityID");
    var PowerID_1 = require("../../../defines/PowerID");
    var FloorBase_1 = require("../../../entity/floor/FloorBase");
    var FloorRoad_1 = require("../../../entity/floor/FloorRoad");
    var ItemBase_1 = require("../../../entity/item/ItemBase");
    var ItemPuppy_1 = require("../../../entity/item/special/ItemPuppy");
    var ItemStateSwap_1 = require("../../../entity/item/state/ItemStateSwap");
    var GridBase_1 = require("../../GridBase");
    var GridStateBase_1 = require("../GridStateBase");
    var GridStateDrop_1 = require("./GridStateDrop");
    var GridStateMagicCrystal_1 = require("./GridStateMagicCrystal");
    var IGame_1 = require("../../../../../base/IGame");
    var IdentifierManager_1 = require("../../../defines/IdentifierManager");
    var GridCommandPair_1 = require("../../../commond/GridCommandPair");
    var GridStateCollection = function(_super) {
      __extends(GridStateCollection, _super);
      function GridStateCollection() {
        var _this = _super.call(this, GridStateBase_1.GridState.Collection) || this;
        _this._walkedItemPos = [];
        return _this;
      }
      GridStateCollection.create = function() {
        return new GridStateCollection();
      };
      GridStateCollection.setCurDogPawCount = function(grid, count) {
        grid.setPowerAmount(PowerID_1.PowerID.PuppyVitality, count);
      };
      GridStateCollection.getCurDogPawCount = function(grid) {
        return grid.getPowerAmount(PowerID_1.PowerID.PuppyVitality);
      };
      GridStateCollection.prototype.enter = function(grid) {
        if (GridStateCollection.getCurDogPawCount(grid) > 0) this.moveToNextItem(grid); else {
          GridStateCollection.setCurDogPawCount(grid, 0);
          grid.setCurrentState(GridStateMagicCrystal_1.GridStateMagicCrystal.create());
        }
      };
      GridStateCollection.prototype.update = function(grid, delta) {
        grid.isObstructsEmpty() && grid.isCommandListEmpty() && (GridStateCollection.getCurDogPawCount(grid) > 0 ? this.moveToNextItem(grid) : this.CollectionDone(grid));
      };
      GridStateCollection.prototype.exit = function(grid) {
        this._walkedItemPos = null;
      };
      GridStateCollection.prototype.moveToItem = function(grid, logicalPosA, logicalPosB) {
        GridStateCollection.setCurDogPawCount(grid, Math.max(GridStateCollection.getCurDogPawCount(grid) - 1, 0));
        var itemA = grid.getItemAtLogicalPos(logicalPosA);
        var itemB = grid.getItemAtLogicalPos(logicalPosB);
        grid.swapItem(logicalPosA, logicalPosB);
        itemA.setCurrentState(ItemStateSwap_1.default.create(logicalPosA, logicalPosB, .5));
        itemB && itemB.setCurrentState(ItemStateSwap_1.default.create(logicalPosB, logicalPosA));
        this._walkedItemPos.push(logicalPosA);
        this._walkedItemPos.push(logicalPosB);
        grid.gainPower(PowerID_1.PowerID.PuppyMovedStep, 1);
      };
      GridStateCollection.prototype.attackPosition = function(grid, pos) {
        GridStateCollection.setCurDogPawCount(grid, Math.max(GridStateCollection.getCurDogPawCount(grid) - 1, 0));
        this._walkedItemPos.push(pos);
        grid.dispatchCommand(pos, GridCommand_1.default.BombClean(pos, EntityID_1.EntityColor.None, false), .3);
        var dogItem = this.getCurDogItem(grid);
        if (dogItem) {
          grid.addObstructs(dogItem);
          var func = cc.callFunc(function() {
            var curRoad = grid.getFloorAtLogicalPos(dogItem.getLogicalPos());
            if (curRoad || curRoad.getType() == FloorBase_1.FloorType.Road) {
              var temRoad = curRoad;
              var direction = ItemPuppy_1.PuppyDirection.None;
              switch (temRoad.getOutDirection()) {
               case FloorRoad_1.FloorRoadDirection.Up:
                direction = ItemPuppy_1.PuppyDirection.Back;
                break;

               case FloorRoad_1.FloorRoadDirection.Right:
                direction = ItemPuppy_1.PuppyDirection.Right;
                break;

               case FloorRoad_1.FloorRoadDirection.Down:
                direction = ItemPuppy_1.PuppyDirection.Front;
                break;

               case FloorRoad_1.FloorRoadDirection.Left:
                direction = ItemPuppy_1.PuppyDirection.Left;
              }
              var puppy = dogItem;
              puppy.attack(direction);
            }
          });
          var sequence = cc.sequence(func, cc.delayTime(.5), cc.callFunc(function() {
            grid.removeObstructs(dogItem);
          }));
          dogItem.runAction(sequence);
        }
      };
      GridStateCollection.prototype.getCurDogItem = function(grid) {
        var itemMap = grid.getItemsMap();
        for (var key in itemMap) {
          var tmpItem = itemMap[key];
          if (tmpItem.getItemType() == ItemBase_1.ItemType.Puppy) return tmpItem;
        }
        return null;
      };
      GridStateCollection.prototype.moveToNextItem = function(grid) {
        var _this = this;
        var dogItem = this.getCurDogItem(grid);
        if (!dogItem) {
          this.CollectionDone(grid);
          return;
        }
        var nextRoad = this.findNextRoadFloorItem(grid);
        if (nextRoad) {
          var nextItem_1 = grid.getItemAtLogicalPos(nextRoad.getLogicalPos());
          var nextParasite = grid.getParasiteAtLogicalPos(nextRoad.getLogicalPos());
          if (nextParasite && nextItem_1) if (nextParasite.hostCanSwap() && nextItem_1.canSwap()) this.moveToItem(grid, dogItem.getLogicalPos(), nextRoad.getLogicalPos()); else {
            nextParasite.setImmuneDamage(false);
            nextParasite.canCleanByBomb(EntityID_1.EntityColor.None) ? this.attackPosition(grid, nextRoad.getLogicalPos()) : this.CollectionDone(grid);
          } else if (nextParasite && !nextItem_1) if (nextParasite.hostCanSwap()) this.moveToItem(grid, dogItem.getLogicalPos(), nextRoad.getLogicalPos()); else {
            nextParasite.setImmuneDamage(false);
            nextParasite.canCleanByBomb(EntityID_1.EntityColor.None) ? this.attackPosition(grid, nextRoad.getLogicalPos()) : this.CollectionDone(grid);
          } else if (!nextParasite && nextItem_1) if (nextItem_1.getItemType() == ItemBase_1.ItemType.DogHouse) {
            grid.addObstructs(dogItem);
            var sequence = cc.sequence(cc.moveTo(1, nextRoad.node.getPosition()), cc.callFunc(function() {
              GridStateCollection.setCurDogPawCount(grid, 0);
              dogItem.node.setPosition(0, 0);
              dogItem.removeFromGrid();
              var size = nextItem_1.node.getContentSize();
              dogItem.node.parent = nextItem_1.node;
              var puppy = dogItem;
              puppy.win();
              grid.removeObstructs(dogItem);
              grid.setCurrentState(GridStateDrop_1.default.create(_this._walkedItemPos));
              grid.gainPower(PowerID_1.PowerID.PuppyMovedStep, 1);
            }));
            dogItem.node.zIndex = GridBase_1.default.ZORDER_EFFECT;
            dogItem.runAction(sequence);
            dogItem.onCollected();
          } else if (nextItem_1.getItemType() == ItemBase_1.ItemType.Balloon) {
            var flyFloor_1 = grid.getFloorAtLogicalPos(nextItem_1.getCurPostal());
            flyFloor_1 && flyFloor_1.getType() == FloorBase_1.FloorType.Road || this.CollectionDone(grid);
            grid.addObstructs(dogItem);
            dogItem.node.zIndex = GridBase_1.default.ZORDER_EFFECT;
            var sequence = cc.sequence(cc.moveTo(1, nextItem_1.node.getPosition()), cc.callFunc(function() {
              var puppy = dogItem;
              puppy.fly();
              IGame_1.default.playAudio(IdentifierManager_1.default.getInstance().getMatchAudioFilePath("balloon"));
              _this.clearOneItem(grid, nextItem_1.getLogicalPos(), 1);
            }), cc.moveTo(1.6, flyFloor_1.node.getPosition()), cc.delayTime(.2), cc.callFunc(function() {
              _this.clearOneItem(grid, flyFloor_1.getLogicalPos(), 0);
              GridStateCollection.setCurDogPawCount(grid, GridStateCollection.getCurDogPawCount(grid) - 1);
              grid.swapItem(dogItem.getLogicalPos(), flyFloor_1.getLogicalPos());
              grid.removeObstructs(dogItem);
              var puppy = dogItem;
              puppy.stay();
              grid.gainPower(PowerID_1.PowerID.PuppyMovedStep, 1);
            }));
            dogItem.runAction(sequence);
          } else if (nextItem_1.canSwap()) this.moveToItem(grid, dogItem.getLogicalPos(), nextRoad.getLogicalPos()); else {
            nextItem_1.setImmuneDamage(false);
            nextItem_1.canCleanByBomb(EntityID_1.EntityColor.None) ? this.attackPosition(grid, nextRoad.getLogicalPos()) : this.CollectionDone(grid);
          } else this.moveToItem(grid, dogItem.getLogicalPos(), nextRoad.getLogicalPos());
        }
      };
      GridStateCollection.prototype.findNextRoadFloorItem = function(grid) {
        var dogItem = this.getCurDogItem(grid);
        if (!dogItem) return null;
        var curRoad = grid.getFloorAtLogicalPos(dogItem.getLogicalPos());
        if (!curRoad || curRoad.getType() != FloorBase_1.FloorType.Road) return null;
        var nextRoadPos = curRoad.getLogicalPos();
        var temRoad = curRoad;
        var dogAction = "";
        var direction = ItemPuppy_1.PuppyDirection.None;
        switch (temRoad.getOutDirection()) {
         case FloorRoad_1.FloorRoadDirection.Up:
          nextRoadPos = nextRoadPos.add(cc.v2(0, 1));
          direction = ItemPuppy_1.PuppyDirection.Back;
          break;

         case FloorRoad_1.FloorRoadDirection.Right:
          nextRoadPos = nextRoadPos.add(cc.v2(1, 0));
          direction = ItemPuppy_1.PuppyDirection.Right;
          break;

         case FloorRoad_1.FloorRoadDirection.Down:
          nextRoadPos = nextRoadPos.add(cc.v2(0, -1));
          direction = ItemPuppy_1.PuppyDirection.Front;
          break;

         case FloorRoad_1.FloorRoadDirection.Left:
          nextRoadPos = nextRoadPos.add(cc.v2(-1, 0));
          direction = ItemPuppy_1.PuppyDirection.Left;
          break;

         default:
          nextRoadPos = nextRoadPos.add(cc.v2(-1, 0));
        }
        var nextRoad = grid.getFloorAtLogicalPos(nextRoadPos);
        if (nextRoad && nextRoad.getType() == FloorBase_1.FloorType.Road) {
          var puppy = dogItem;
          puppy.move(direction);
          return nextRoad;
        }
        return null;
      };
      GridStateCollection.prototype.CollectionDone = function(grid) {
        GridStateCollection.setCurDogPawCount(grid, 0);
        var puppy = this.getCurDogItem(grid);
        puppy && puppy.stay();
        grid.setCurrentState(GridStateDrop_1.default.create(this._walkedItemPos));
      };
      GridStateCollection.prototype.clearOneItem = function(grid, pos, delayTime) {
        this._walkedItemPos.push(pos);
        var commandPair = GridCommandPair_1.default.create(pos, GridCommand_1.default.TerminateClean(pos, EntityID_1.EntityColor.None, false), 0, 0);
        grid.excuteCommandPair(commandPair);
        return true;
      };
      return GridStateCollection;
    }(GridStateBase_1.default);
    exports.default = GridStateCollection;
    cc._RF.pop();
  }, {
    "../../../../../base/IGame": "IGame",
    "../../../commond/GridCommand": "GridCommand",
    "../../../commond/GridCommandPair": "GridCommandPair",
    "../../../defines/EntityID": "EntityID",
    "../../../defines/IdentifierManager": "IdentifierManager",
    "../../../defines/PowerID": "PowerID",
    "../../../entity/floor/FloorBase": "FloorBase",
    "../../../entity/floor/FloorRoad": "FloorRoad",
    "../../../entity/item/ItemBase": "ItemBase",
    "../../../entity/item/special/ItemPuppy": "ItemPuppy",
    "../../../entity/item/state/ItemStateSwap": "ItemStateSwap",
    "../../GridBase": "GridBase",
    "../GridStateBase": "GridStateBase",
    "./GridStateDrop": "GridStateDrop",
    "./GridStateMagicCrystal": "GridStateMagicCrystal"
  } ],
  GridStateComboWord: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "37934eo+atGNZKpX9CxWuBn", "GridStateComboWord");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var GridStateBase_1 = require("../GridStateBase");
    var GridStateSwapNeighbour_1 = require("./GridStateSwapNeighbour");
    var PowerID_1 = require("../../../defines/PowerID");
    var FlyerComboWord_1 = require("../../../entity/flyer/FlyerComboWord");
    var GridStateComboWord = function(_super) {
      __extends(GridStateComboWord, _super);
      function GridStateComboWord() {
        return _super.call(this, GridStateBase_1.GridState.ComobWord) || this;
      }
      GridStateComboWord.create = function() {
        return new GridStateComboWord();
      };
      GridStateComboWord.prototype.enter = function(grid) {
        if (!grid.hasShowCompleteBanner()) {
          var comboCount = grid.getPowerAmount(PowerID_1.PowerID.MatchCombo);
          if (comboCount >= 3) {
            var needObstruct = false;
            grid.isComplete() ? needObstruct = true : grid.isFailed() && (needObstruct = true);
            var flyer = FlyerComboWord_1.default.create(grid, comboCount, needObstruct);
            grid.setFlyerAtLogicalPos(flyer, cc.Vec2.ZERO);
          }
        }
        this.gainComboScore(grid);
        grid.isObstructsEmpty() && grid.isCommandListEmpty() && grid.setCurrentState(GridStateSwapNeighbour_1.default.create());
      };
      GridStateComboWord.prototype.gainComboScore = function(grid) {
        var comboCount = grid.getPowerAmount(PowerID_1.PowerID.MatchCombo);
        var scoreMap = {
          1: 500,
          2: 500,
          3: 500,
          4: 750,
          5: 750,
          6: 750,
          7: 1e3,
          8: 1e3,
          9: 1e3,
          10: 1500
        };
        var score = 0;
        for (var i = 0; i < comboCount - 1; i++) {
          var delta = 0;
          delta = i < 10 ? scoreMap[i + 1] : 1500;
          score += delta;
        }
        if (score > 0) {
          var size = grid.node.getContentSize();
          var pixelPos = cc.v2(.5 * size.width, .5 * size.height + 60);
          grid.gainScoreWithPixelPos(score, pixelPos);
        }
      };
      GridStateComboWord.prototype.update = function(grid, delta) {
        grid.isObstructsEmpty() && grid.isCommandListEmpty() && grid.setCurrentState(GridStateSwapNeighbour_1.default.create());
      };
      return GridStateComboWord;
    }(GridStateBase_1.default);
    exports.default = GridStateComboWord;
    cc._RF.pop();
  }, {
    "../../../defines/PowerID": "PowerID",
    "../../../entity/flyer/FlyerComboWord": "FlyerComboWord",
    "../GridStateBase": "GridStateBase",
    "./GridStateSwapNeighbour": "GridStateSwapNeighbour"
  } ],
  GridStateCompleteBanner: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "17638M7gtVAS7vHMFo5PsOQ", "GridStateCompleteBanner");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var GridStateBase_1 = require("../GridStateBase");
    var GridStateBousTime_1 = require("./GridStateBousTime");
    var GridStateCompleteBanner = function(_super) {
      __extends(GridStateCompleteBanner, _super);
      function GridStateCompleteBanner() {
        return _super.call(this, GridStateBase_1.GridState.CompleteBanner) || this;
      }
      GridStateCompleteBanner.create = function() {
        return new GridStateCompleteBanner();
      };
      GridStateCompleteBanner.prototype.enter = function(grid) {
        if (grid.hasShowCompleteBanner()) grid.setCurrentState(GridStateBousTime_1.default.create()); else {
          grid.resetDropConfig();
          grid.showCompleteBanner();
        }
      };
      GridStateCompleteBanner.prototype.update = function(grid, delta) {
        grid.isObstructsEmpty() && grid.isCommandListEmpty() && grid.hasShowCompleteBanner() && grid.setCurrentState(GridStateBousTime_1.default.create());
      };
      return GridStateCompleteBanner;
    }(GridStateBase_1.default);
    exports.default = GridStateCompleteBanner;
    cc._RF.pop();
  }, {
    "../GridStateBase": "GridStateBase",
    "./GridStateBousTime": "GridStateBousTime"
  } ],
  GridStateComplete: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "dbc3eTJT45DIJnya3waCa3z", "GridStateComplete");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var GridStateBase_1 = require("../GridStateBase");
    var GridStateCongratulation_1 = require("./GridStateCongratulation");
    var GridStateComplete = function(_super) {
      __extends(GridStateComplete, _super);
      function GridStateComplete() {
        var _this = _super.call(this, GridStateBase_1.GridState.Complete) || this;
        _this._hadDisappearUI = false;
        return _this;
      }
      GridStateComplete.create = function() {
        return new GridStateComplete();
      };
      GridStateComplete.prototype.enter = function(grid) {};
      GridStateComplete.prototype.update = function(grid, delta) {
        if (grid.isObstructsEmpty() && grid.isCommandListEmpty() && grid.isFlyerObstructsEmpty()) if (this._hadDisappearUI) grid.setCurrentState(GridStateCongratulation_1.default.create()); else {
          this.disappear(grid);
          this._hadDisappearUI = true;
        }
      };
      return GridStateComplete;
    }(GridStateBase_1.default);
    exports.default = GridStateComplete;
    cc._RF.pop();
  }, {
    "../GridStateBase": "GridStateBase",
    "./GridStateCongratulation": "GridStateCongratulation"
  } ],
  GridStateCongratulation: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "48cdeELgLFMGqcG/544n7z9", "GridStateCongratulation");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var GridStateBase_1 = require("../GridStateBase");
    var GridStateCongratulation = function(_super) {
      __extends(GridStateCongratulation, _super);
      function GridStateCongratulation() {
        return _super.call(this, GridStateBase_1.GridState.Congratulation) || this;
      }
      GridStateCongratulation.create = function() {
        return new GridStateCongratulation();
      };
      GridStateCongratulation.prototype.enter = function(grid) {
        grid.congratulation();
      };
      return GridStateCongratulation;
    }(GridStateBase_1.default);
    exports.default = GridStateCongratulation;
    cc._RF.pop();
  }, {
    "../GridStateBase": "GridStateBase"
  } ],
  GridStateConveyer: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "5e9f5IMhj5MloRZyMMnzKwj", "GridStateConveyer");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var GridStateBase_1 = require("../GridStateBase");
    var GridStateChanger_1 = require("./GridStateChanger");
    var GridStateDrop_1 = require("./GridStateDrop");
    var PowerID_1 = require("../../../defines/PowerID");
    var GameMath_1 = require("../../../../../extend/utils/GameMath");
    var GridStateConveyer = function(_super) {
      __extends(GridStateConveyer, _super);
      function GridStateConveyer() {
        var _this = _super.call(this, GridStateBase_1.GridState.Conveyer) || this;
        _this._conveyerPosions = [];
        return _this;
      }
      GridStateConveyer.create = function() {
        return new GridStateConveyer();
      };
      GridStateConveyer.prototype.enter = function(grid) {
        if (grid.getPowerAmount(PowerID_1.PowerID.ConveyerMove)) {
          var cells = [];
          var cellsMap = grid.getCellsMap();
          for (var key in cellsMap) {
            var cell = cellsMap[key];
            cells.push(cell);
          }
          for (var _i = 0, cells_1 = cells; _i < cells_1.length; _i++) {
            var cell = cells_1[_i];
            var conveyPos = cell.onConvey();
            conveyPos.equals(GameMath_1.default.INVALID_LOGICAL_POSITION) || GameMath_1.default.insertAsSet(this._conveyerPosions, conveyPos);
          }
          grid.lossPower(PowerID_1.PowerID.ConveyerMove, 1);
          this._conveyerPosions.length <= 0 && grid.setCurrentState(GridStateChanger_1.default.create());
        } else grid.setCurrentState(GridStateChanger_1.default.create());
      };
      GridStateConveyer.prototype.update = function(grid, delta) {
        grid.isObstructsEmpty() && grid.isCommandListEmpty() && grid.setCurrentState(GridStateDrop_1.default.create(this._conveyerPosions));
      };
      GridStateConveyer.prototype.exit = function(grid) {
        this._conveyerPosions = null;
      };
      return GridStateConveyer;
    }(GridStateBase_1.default);
    exports.default = GridStateConveyer;
    cc._RF.pop();
  }, {
    "../../../../../extend/utils/GameMath": "GameMath",
    "../../../defines/PowerID": "PowerID",
    "../GridStateBase": "GridStateBase",
    "./GridStateChanger": "GridStateChanger",
    "./GridStateDrop": "GridStateDrop"
  } ],
  GridStateCreate: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "ea3bb4csv5Eaoj43FRrJpaQ", "GridStateCreate");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var GameMath_1 = require("../../../../../extend/utils/GameMath");
    var TMXJsonPhraser_1 = require("../../../../../extend/utils/TMXJsonPhraser");
    var EntityID_1 = require("../../../defines/EntityID");
    var KindID_1 = require("../../../defines/KindID");
    var TMXConfigInfoKeys_1 = require("../../../defines/TMXConfigInfoKeys");
    var CellBase_1 = require("../../../entity/cell/CellBase");
    var CellFactory_1 = require("../../../entity/cell/CellFactory");
    var FenceFactory_1 = require("../../../entity/fence/FenceFactory");
    var FloorBase_1 = require("../../../entity/floor/FloorBase");
    var FloorFactory_1 = require("../../../entity/floor/FloorFactory");
    var FrameNormal_1 = require("../../../entity/frame/FrameNormal");
    var ItemBase_1 = require("../../../entity/item/ItemBase");
    var ItemFactory_1 = require("../../../entity/item/ItemFactory");
    var MarkerNormal_1 = require("../../../entity/marker/MarkerNormal");
    var ParasiteFactory_1 = require("../../../entity/parasite/ParasiteFactory");
    var PopsicleFactory_1 = require("../../../entity/popsicle/PopsicleFactory");
    var RugFactory_1 = require("../../../entity/rug/RugFactory");
    var GridStateBase_1 = require("../GridStateBase");
    var GridStateDrop_1 = require("./GridStateDrop");
    var GridStateCreate = function(_super) {
      __extends(GridStateCreate, _super);
      function GridStateCreate(viewSize, mapData) {
        var _this = _super.call(this, [], GridStateBase_1.GridState.Create) || this;
        _this._viewSize = cc.Size.ZERO;
        _this._tmxPhraser = null;
        _this._gridSize = cc.size(9, 10);
        _this._cellSize = cc.size(75, 75);
        _this._viewSize = viewSize;
        _this._tmxPhraser = TMXJsonPhraser_1.default.create(mapData);
        _this._gridSize = _this._tmxPhraser.getMapSize();
        _this._cellSize = cc.size(75, 75);
        return _this;
      }
      GridStateCreate.createState = function(viewSize, mapData) {
        return new GridStateCreate(viewSize, mapData);
      };
      GridStateCreate.prototype.enter = function(grid) {
        grid.setGridSize(this._gridSize);
        grid.setCellSize(this._cellSize);
        var viewFixSize = cc.size(grid.getGridSize().width * grid.getCellSize().width, grid.getGridSize().height * grid.getCellSize().height);
        grid.node.setContentSize(viewFixSize);
        var scale = GameMath_1.default.getScaleFromViewSize(this._viewSize, cc.size(viewFixSize.width + .5 * grid.getCellSize().width, viewFixSize.height + .5 * grid.getCellSize().height), .5, 1);
        grid.node.setScale(scale);
        this.initCells(grid);
        this.initPopsicle(grid);
        this.initFloors(grid);
        this.initRugs(grid);
        this.initItems(grid);
        this.initFences(grid);
        this.initFrames(grid);
        this.markFences(grid);
        var shufflePositions = this.getShufflePositions();
        this.someItemCanDrop(grid) ? this.shuffleGrid(grid, shufflePositions, true, false, true) : this.shuffleGrid(grid, shufflePositions, true, true, true);
        this.initParasites(grid);
        this.initConveyer(grid);
        this.initMarker(grid);
        this.initPath(grid);
      };
      GridStateCreate.prototype.update = function(grid, delta) {};
      GridStateCreate.prototype.exit = function(grid) {
        this._viewSize = null;
        this._tmxPhraser = null;
        this._gridSize = null;
        this._cellSize = null;
      };
      GridStateCreate.prototype.initCells = function(grid) {
        var cellTiles = this._tmxPhraser.getTileLayerWithName(TMXConfigInfoKeys_1.default.CELLS_LAYER_KEY);
        if (!cellTiles || cellTiles.length <= 0) return;
        var conveyersTiles = this._tmxPhraser.getTileLayerWithName(TMXConfigInfoKeys_1.default.CONVEYERS_LAYER_KEY);
        var mapSize = this._tmxPhraser.getMapSize();
        var tileSize = this._tmxPhraser.getTileSize();
        for (var column = 0; column < mapSize.width; column++) {
          var foundTopCell = false;
          for (var row = 0; row < mapSize.height; row++) {
            var cellGid = cellTiles[row * mapSize.width + column];
            var conveyerGid = conveyersTiles[row * mapSize.width + column];
            0 != conveyerGid && (cellGid = conveyerGid);
            var propertie = this._tmxPhraser.getPropertieFromGID(cellGid);
            if (propertie) {
              var kindID = propertie["Kind"];
              var cell = CellFactory_1.default.generateCellWithKindID(grid, kindID);
              if (cell) {
                var cellConfigMap = this.getConfigMap(TMXConfigInfoKeys_1.default.CELLS_LAYER_KEY, cc.v2(column, row));
                var conveyerConfigMap = this.getConfigMap(TMXConfigInfoKeys_1.default.CONVEYERS_LAYER_KEY, cc.v2(column, row));
                if (!GameMath_1.default.isEmptyObject(conveyerConfigMap)) {
                  for (var key in conveyerConfigMap) cellConfigMap[key] = conveyerConfigMap[key];
                  cellConfigMap[TMXConfigInfoKeys_1.default.CFG_CONVEYER_POSTAL_KEY_TYPE] = true;
                }
                if (false == foundTopCell) {
                  cellConfigMap[TMXConfigInfoKeys_1.default.CFG_DROP_KEY_IS_TOP] = true;
                  foundTopCell = true;
                }
                grid.setCellAtLogicalPos(cell, cc.v2(column, mapSize.height - 1 - row));
                cell.dealWithConfigMap(cellConfigMap);
              }
            }
          }
        }
        var markerInfos = this._tmxPhraser.getObjectLayerWithName(TMXConfigInfoKeys_1.default.MARKS_LAYER_KEY);
        for (var _i = 0, markerInfos_1 = markerInfos; _i < markerInfos_1.length; _i++) {
          var info = markerInfos_1[_i];
          var valueMap = this._tmxPhraser.getPropertieFromGID(info.gid);
          if (!GameMath_1.default.isEmptyObject(valueMap)) {
            var centerPixelPos = cc.v2(info.rect.center.x, mapSize.height * tileSize.height - info.rect.center.y);
            var centerLogicalPos = cc.v2(Math.floor(centerPixelPos.x / tileSize.width), Math.floor(centerPixelPos.y / tileSize.height));
            var kindID = valueMap["Kind"];
            if (kindID) switch (kindID) {
             case KindID_1.KindID.MarkWormholeEntrance:
              var entranceConfigMap = this.getConfigMap(TMXConfigInfoKeys_1.default.MARKS_LAYER_KEY, cc.v2(centerLogicalPos.x, mapSize.height - 1 - centerLogicalPos.y));
              entranceConfigMap[TMXConfigInfoKeys_1.default.CFG_WORMHOLE_KEY_TYPE] = TMXConfigInfoKeys_1.default.CFG_WORMHOLE_VALUE_ENTRANCE;
              var entrance = grid.getCellAtLogicalPos(centerLogicalPos);
              entrance && entrance.dealWithConfigMap(entranceConfigMap);
              var exitConfigMap = {};
              exitConfigMap[TMXConfigInfoKeys_1.default.CFG_WORMHOLE_KEY_TYPE] = TMXConfigInfoKeys_1.default.CFG_WORMHOLE_VALUE_EXIT;
              exitConfigMap[TMXConfigInfoKeys_1.default.CFG_WORMHOLE_POSTAL_KEY_TYPE] = GameMath_1.default.getConfigStringFromVec2(centerLogicalPos);
              var postalPos = entranceConfigMap[TMXConfigInfoKeys_1.default.CFG_WORMHOLE_POSTAL_KEY_TYPE];
              var pos = GameMath_1.default.getVec2FromConfigString(postalPos);
              var exit = grid.getCellAtLogicalPos(pos);
              exit && exit.dealWithConfigMap(exitConfigMap);
            }
          }
        }
      };
      GridStateCreate.prototype.initPopsicle = function(grid) {
        var layerKey = TMXConfigInfoKeys_1.default.POPSICLES_LAYER_KEY;
        var objectInfos = this._tmxPhraser.getObjectLayerWithName(layerKey);
        if (!objectInfos || objectInfos.length <= 0) return;
        var mapSize = this._tmxPhraser.getMapSize();
        var tileSize = this._tmxPhraser.getTileSize();
        for (var _i = 0, objectInfos_1 = objectInfos; _i < objectInfos_1.length; _i++) {
          var info = objectInfos_1[_i];
          var width = Math.ceil(info.rect.size.width / tileSize.width);
          var height = Math.ceil(info.rect.size.height / tileSize.height);
          var x = Math.floor(info.rect.origin.x / tileSize.width);
          var y = Math.floor(mapSize.height - 1 - info.rect.origin.y / tileSize.height - height + 1);
          var typeString = info.properties[TMXConfigInfoKeys_1.default.CFG_POPSICLE_KEY_TYPE];
          var kindID = KindID_1.KindID.PopsicleNormal;
          typeString && (typeString == TMXConfigInfoKeys_1.default.CFG_POPSICLE_VALUE_LINE ? kindID = KindID_1.KindID.PopsicleLine : typeString == TMXConfigInfoKeys_1.default.CFG_POPSICLE_VALUE_BOOM && (kindID = KindID_1.KindID.PopsicleBoom));
          var popsicle = PopsicleFactory_1.default.generatePopsicleWithKindID(grid, width, height, kindID);
          popsicle && grid.setPopsicleAtLogicalPos(popsicle, cc.v2(x, y));
        }
      };
      GridStateCreate.prototype.initFloors = function(grid) {
        var layerKey = TMXConfigInfoKeys_1.default.FLOORS_LAYER_KEY;
        var tiles = this._tmxPhraser.getTileLayerWithName(layerKey);
        if (!tiles || tiles.length <= 0) return;
        var mapSize = this._tmxPhraser.getMapSize();
        var needGrass = false;
        for (var row = 0; row < mapSize.height; row++) for (var column = 0; column < mapSize.width; column++) {
          var gid = tiles[row * mapSize.width + column];
          var valueMap = this._tmxPhraser.getPropertieFromGID(gid);
          if (!GameMath_1.default.isEmptyObject(valueMap)) {
            var kindID = valueMap["Kind"];
            if (kindID) {
              var floor = FloorFactory_1.default.generateFloorWithKindID(grid, kindID);
              if (floor) {
                var configMap = this.getConfigMap(layerKey, cc.v2(column, row));
                grid.setFloorAtLogicalPos(floor, cc.v2(column, mapSize.height - 1 - row));
                floor.dealWithConfigMap(configMap);
                floor.getEntityID() == EntityID_1.EntityID.FloorGrass && (needGrass = true);
              }
            }
          }
        }
        if (needGrass) {
          var cellsMap = grid.getCellsMap();
          for (var key in cellsMap) {
            var cell = cellsMap[key];
            cell.setNeedGrass(true);
          }
        }
      };
      GridStateCreate.prototype.initRugs = function(grid) {
        var layerKey = TMXConfigInfoKeys_1.default.JAM_LAYER_KEY;
        var tiles = this._tmxPhraser.getTileLayerWithName(layerKey);
        if (!tiles || tiles.length <= 0) return;
        var mapSize = this._tmxPhraser.getMapSize();
        for (var row = 0; row < mapSize.height; row++) for (var column = 0; column < mapSize.width; column++) {
          var gid = tiles[row * mapSize.width + column];
          var valueMap = this._tmxPhraser.getPropertieFromGID(gid);
          if (!GameMath_1.default.isEmptyObject(valueMap)) {
            var kindID = valueMap["Kind"];
            if (kindID) {
              var rug = RugFactory_1.default.generatePolishWithKindID(grid, kindID);
              if (rug) {
                grid.setRugAtLogicalPos(rug, cc.v2(column, mapSize.height - 1 - row));
                var configMap = this.getConfigMap(layerKey, cc.v2(column, row));
                rug.dealWithConfigMap(configMap);
              }
            }
          }
        }
      };
      GridStateCreate.prototype.initItems = function(grid) {
        var layerKey = TMXConfigInfoKeys_1.default.ITEMS_LAYER_KEY;
        var tiles = this._tmxPhraser.getTileLayerWithName(layerKey);
        if (!tiles || tiles.length <= 0) return;
        var mapSize = this._tmxPhraser.getMapSize();
        var totalRandomCount = 0;
        for (var row = 0; row < mapSize.height; row++) for (var column = 0; column < mapSize.width; column++) {
          var gid = tiles[row * mapSize.width + column];
          var valueMap = this._tmxPhraser.getPropertieFromGID(gid);
          if (!GameMath_1.default.isEmptyObject(valueMap)) {
            var cell = grid.getCellAtLogicalPos(cc.v2(column, mapSize.height - 1 - row));
            if (cell && cell.canHoldItem()) {
              var kindID = valueMap["Kind"];
              if (kindID && kindID != KindID_1.KindID.ItemNormalRandom) {
                var item = ItemFactory_1.default.generateItemWithKindID(grid, kindID);
                if (item) {
                  grid.setItemAtLogicalPos(item, cc.v2(column, mapSize.height - 1 - row));
                  var configMap = this.getConfigMap(layerKey, cc.v2(column, row));
                  item.dealWithConfigMap(configMap);
                }
              } else totalRandomCount += 1;
            }
          }
        }
        for (var row = 0; row < mapSize.height; row++) for (var column = 0; column < mapSize.width; column++) {
          var gid = tiles[row * mapSize.width + column];
          var valueMap = this._tmxPhraser.getPropertieFromGID(gid);
          if (!GameMath_1.default.isEmptyObject(valueMap)) {
            var cell = grid.getCellAtLogicalPos(cc.v2(column, mapSize.height - 1 - row));
            if (cell && cell.canHoldItem()) {
              var kindID = valueMap["Kind"];
              if (kindID && kindID == KindID_1.KindID.ItemNormalRandom) {
                var item = ItemFactory_1.default.generateItemWithKindID(grid, kindID);
                if (item) {
                  grid.setItemAtLogicalPos(item, cc.v2(column, mapSize.height - 1 - row));
                  var configMap = this.getConfigMap(layerKey, cc.v2(column, row));
                  item.dealWithConfigMap(configMap);
                }
              }
            }
          }
        }
      };
      GridStateCreate.prototype.initFences = function(grid) {
        var fenceInfos = this._tmxPhraser.getObjectLayerWithName(TMXConfigInfoKeys_1.default.MARKS_LAYER_KEY);
        if (!fenceInfos || fenceInfos.length <= 0) return;
        var mapSize = this._tmxPhraser.getMapSize();
        var tileSize = this._tmxPhraser.getTileSize();
        for (var _i = 0, fenceInfos_1 = fenceInfos; _i < fenceInfos_1.length; _i++) {
          var info = fenceInfos_1[_i];
          var valueMap = this._tmxPhraser.getPropertieFromGID(info.gid);
          if (!GameMath_1.default.isEmptyObject(valueMap)) {
            var centerPixelPos = cc.v2(info.rect.center.x, mapSize.height * tileSize.height - info.rect.center.y);
            var centerLogicalPos = cc.v2(Math.floor(centerPixelPos.x / tileSize.width), Math.floor(centerPixelPos.y / tileSize.height));
            var kindID = valueMap["Kind"];
            var fence = FenceFactory_1.default.generateItemWithKindID(grid, centerLogicalPos, kindID);
            fence && grid.setFenceAtFencePos(fence, fence.getFencePos());
          }
        }
      };
      GridStateCreate.prototype.initParasites = function(grid) {
        var layerKey = TMXConfigInfoKeys_1.default.PARASITES_LAYER_KEY;
        var tiles = this._tmxPhraser.getTileLayerWithName(layerKey);
        if (!tiles || tiles.length <= 0) return;
        var mapSize = this._tmxPhraser.getMapSize();
        for (var row = 0; row < mapSize.height; row++) for (var column = 0; column < mapSize.width; column++) {
          var gid = tiles[row * mapSize.width + column];
          var valueMap = this._tmxPhraser.getPropertieFromGID(gid);
          if (!GameMath_1.default.isEmptyObject(valueMap)) {
            var kindID = valueMap["Kind"];
            var parasite = ParasiteFactory_1.default.generateParasiteWithKindID(grid, kindID);
            if (parasite) {
              var configMap = this.getConfigMap(layerKey, cc.v2(column, row));
              parasite.dealWithConfigMap(configMap);
              grid.setParasiteAtLogicalPos(parasite, cc.v2(column, mapSize.height - 1 - row));
            }
          }
        }
      };
      GridStateCreate.prototype.initFrames = function(grid) {
        for (var row = -1; row < this._gridSize.height + 1; row++) for (var column = -1; column < this._gridSize.width + 1; column++) {
          var checkPos = cc.v2(column, row);
          var needFrame = false;
          var cell = grid.getCellAtLogicalPos(checkPos);
          cell ? cell.getCellType() == CellBase_1.CellType.MovablePlate && (needFrame = true) : needFrame = true;
          if (needFrame) {
            var frame = FrameNormal_1.default.create(grid);
            frame && grid.setFrameAtLogicalPos(frame, checkPos);
          }
        }
      };
      GridStateCreate.prototype.initConveyer = function(grid) {
        var cellsMap = grid.getCellsMap();
        var cropPositions = [];
        for (var key in cellsMap) {
          var cell = cellsMap[key];
          cell.getCellType() == CellBase_1.CellType.Conveyer && cropPositions.push(cell.getLogicalPos());
        }
        grid.setConveyerLayerVisiblePos(cropPositions);
      };
      GridStateCreate.prototype.initMarker = function(grid) {
        var fenceInfos = this._tmxPhraser.getObjectLayerWithName(TMXConfigInfoKeys_1.default.MARKS_LAYER_KEY);
        if (!fenceInfos) return;
        var mapSize = this._tmxPhraser.getMapSize();
        var tileSize = this._tmxPhraser.getTileSize();
        for (var _i = 0, fenceInfos_2 = fenceInfos; _i < fenceInfos_2.length; _i++) {
          var info = fenceInfos_2[_i];
          var valueMap = this._tmxPhraser.getPropertieFromGID(info.gid);
          if (!GameMath_1.default.isEmptyObject(valueMap)) {
            var centerPixelPos = cc.v2(info.rect.center.x, mapSize.height * tileSize.height - info.rect.center.y);
            var centerLogicalPos = cc.v2(Math.floor(centerPixelPos.x / tileSize.width), Math.floor(centerPixelPos.y / tileSize.height));
            var marker = grid.getMarkerAtLogicalPos(centerLogicalPos);
            if (!marker) {
              marker = MarkerNormal_1.default.create(grid);
              grid.setMarkerAtLogicalPos(marker, centerLogicalPos);
            }
            var configMap = this.getConfigMap(TMXConfigInfoKeys_1.default.MARKS_LAYER_KEY, cc.v2(centerLogicalPos.x, mapSize.height - 1 - centerLogicalPos.y));
            var kindID = valueMap["Kind"];
            if (kindID) switch (kindID) {
             case KindID_1.KindID.MarkBoneCollector:
              configMap[TMXConfigInfoKeys_1.default.CFG_MARK_BONE_COLLECTOR_KEY_TYPE] = TMXConfigInfoKeys_1.default.CFG_MARK_BONE_COLLECTOR_VALUE_DEFAULT;
              break;

             case KindID_1.KindID.MarkWormholeEntrance:
              configMap[TMXConfigInfoKeys_1.default.CFG_WORM_HOLE_ENTRANCE_KEY_TYPE] = TMXConfigInfoKeys_1.default.CFG_WORM_HOLE_ENTRANCE_VALUE_DEFAULT;
              break;

             case KindID_1.KindID.MarkWormholeExit:
              configMap[TMXConfigInfoKeys_1.default.CFG_WORM_HOLE_EXIT_KEY_TYPE] = TMXConfigInfoKeys_1.default.CFG_WORM_HOLE_EXIT_VALUE_DEFAULT;
            }
            marker.dealWithConfigMap(configMap);
          }
        }
      };
      GridStateCreate.prototype.initPath = function(grid) {
        var startPositions = [];
        var itemsMap = grid.getItemsMap();
        for (var key in itemsMap) {
          var item = itemsMap[key];
          if (item.getItemType() == ItemBase_1.ItemType.Puppy) startPositions.push(item.getLogicalPos()); else if (item.getItemType() == ItemBase_1.ItemType.DogHouse) startPositions.push(item.getLogicalPos()); else if (item.getItemType() == ItemBase_1.ItemType.Balloon) {
            startPositions.push(item.getLogicalPos());
            var ballon = item;
            if (ballon) {
              var flyPos = ballon.getCurPostal();
              startPositions.push(flyPos);
            }
          }
        }
        for (var _i = 0, startPositions_1 = startPositions; _i < startPositions_1.length; _i++) {
          var pos = startPositions_1[_i];
          var floor = grid.getFloorAtLogicalPos(pos);
          if (floor && floor.getFloorType() == FloorBase_1.FloorType.Road) {
            var road = floor;
            road && road.setIsStartPoint(true);
          }
        }
      };
      GridStateCreate.prototype.getShufflePositions = function() {
        var result = [];
        var items = this._tmxPhraser.getTileLayerWithName(TMXConfigInfoKeys_1.default.ITEMS_LAYER_KEY);
        for (var row = 0; row < this._gridSize.height; row++) for (var column = 0; column < this._gridSize.width; column++) {
          var gid = items[row * this._gridSize.width + column];
          var valueMap = this._tmxPhraser.getPropertieFromGID(gid);
          if (!GameMath_1.default.isEmptyObject(valueMap)) {
            var kindID = valueMap["Kind"];
            kindID && ItemFactory_1.default.isShuffleKindID(kindID) && result.push(cc.v2(column, this._gridSize.height - 1 - row));
          }
        }
        return result;
      };
      GridStateCreate.prototype.someItemCanDrop = function(grid) {
        var itemsMap = grid.getItemsMap();
        for (var key in itemsMap) {
          var item = itemsMap[key];
          var result = this.tryDropItem(grid, item);
          if (result.type != EntityID_1.EntityDropStepType.Stay) return true;
          result = this.tryDiagonalItem(grid, item);
          if (result.type != EntityID_1.EntityDropStepType.Stay) return true;
        }
        var cellsMap = grid.getCellsMap();
        for (var key in cellsMap) {
          var cell = cellsMap[key];
          var bornPos = cell.getLogicalPos();
          if (null == grid.getItemAtLogicalPos(bornPos)) return true;
        }
        return false;
      };
      GridStateCreate.prototype.getConfigMap = function(layerName, pos) {
        var objectInfos = this._tmxPhraser.getObjectInfos(layerName, pos);
        var tileSize = this._tmxPhraser.getTileSize();
        var mapSize = this._tmxPhraser.getMapSize();
        var configMap = {};
        for (var _i = 0, objectInfos_2 = objectInfos; _i < objectInfos_2.length; _i++) {
          var info = objectInfos_2[_i];
          for (var key in info.properties) configMap[key] = info.properties[key];
          if (info.path.length > 0) {
            var path = [];
            var count = info.path.length;
            for (var i = 0; i < count; i++) {
              var pos_1 = info.path[i];
              pos_1.x = Math.floor(pos_1.x / tileSize.width);
              pos_1.y = mapSize.height - 1 - Math.floor(pos_1.y / tileSize.height);
              path.push(pos_1);
            }
            configMap[TMXConfigInfoKeys_1.default.CFG_MOVABLE_PLATE_PATH_KEY_TYPE] = path;
          }
        }
        if (layerName == TMXConfigInfoKeys_1.default.CELLS_LAYER_KEY) {
          var objectInfos_4 = this._tmxPhraser.getObjectInfos(TMXConfigInfoKeys_1.default.MARKS_LAYER_KEY, pos);
          for (var _a = 0, objectInfos_3 = objectInfos_4; _a < objectInfos_3.length; _a++) {
            var info = objectInfos_3[_a];
            var valueMap = this._tmxPhraser.getPropertieFromGID(info.gid);
            var kindID = valueMap["Kind"];
            kindID && kindID == KindID_1.KindID.MarkBoneCollector && (configMap[TMXConfigInfoKeys_1.default.CFG_MARK_BONE_COLLECTOR_KEY_TYPE] = TMXConfigInfoKeys_1.default.CFG_MARK_BONE_COLLECTOR_VALUE_DEFAULT);
          }
        }
        return configMap;
      };
      return GridStateCreate;
    }(GridStateDrop_1.default);
    exports.default = GridStateCreate;
    cc._RF.pop();
  }, {
    "../../../../../extend/utils/GameMath": "GameMath",
    "../../../../../extend/utils/TMXJsonPhraser": "TMXJsonPhraser",
    "../../../defines/EntityID": "EntityID",
    "../../../defines/KindID": "KindID",
    "../../../defines/TMXConfigInfoKeys": "TMXConfigInfoKeys",
    "../../../entity/cell/CellBase": "CellBase",
    "../../../entity/cell/CellFactory": "CellFactory",
    "../../../entity/fence/FenceFactory": "FenceFactory",
    "../../../entity/floor/FloorBase": "FloorBase",
    "../../../entity/floor/FloorFactory": "FloorFactory",
    "../../../entity/frame/FrameNormal": "FrameNormal",
    "../../../entity/item/ItemBase": "ItemBase",
    "../../../entity/item/ItemFactory": "ItemFactory",
    "../../../entity/marker/MarkerNormal": "MarkerNormal",
    "../../../entity/parasite/ParasiteFactory": "ParasiteFactory",
    "../../../entity/popsicle/PopsicleFactory": "PopsicleFactory",
    "../../../entity/rug/RugFactory": "RugFactory",
    "../GridStateBase": "GridStateBase",
    "./GridStateDrop": "GridStateDrop"
  } ],
  GridStateCrossBomb: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "e7ea3QjdrJEV6BnfWyNv0CW", "GridStateCrossBomb");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var GridStateBase_1 = require("../GridStateBase");
    var GridBase_1 = require("../../GridBase");
    var GameCurrencyType_1 = require("../../../../../define/GameCurrencyType");
    var GridStateMatch_1 = require("./GridStateMatch");
    var EntityID_1 = require("../../../defines/EntityID");
    var Pair_1 = require("../../../../../base/Pair");
    var FlyerCannon_1 = require("../../../entity/flyer/FlyerCannon");
    var IGame_1 = require("../../../../../base/IGame");
    var IdentifierManager_1 = require("../../../defines/IdentifierManager");
    var GridStateCrossBomb = function(_super) {
      __extends(GridStateCrossBomb, _super);
      function GridStateCrossBomb() {
        var _this = _super.call(this, GridStateBase_1.GridState.CrossBomb) || this;
        _this._targetPos = cc.Vec2.ZERO;
        return _this;
      }
      GridStateCrossBomb.create = function() {
        return new GridStateCrossBomb();
      };
      GridStateCrossBomb.prototype.enter = function(grid) {};
      GridStateCrossBomb.prototype.exit = function(grid) {
        this._targetPos = null;
      };
      GridStateCrossBomb.prototype.canChangeState = function() {
        return true;
      };
      GridStateCrossBomb.prototype.canPause = function() {
        return true;
      };
      GridStateCrossBomb.prototype.onTapBegan = function(grid, logicalPos) {
        var cell = grid.getCellAtLogicalPos(logicalPos);
        if (cell) {
          this._targetPos = logicalPos;
          grid.requestUseGear(GameCurrencyType_1.GameCurrencyType.AidBomb, 1);
        } else grid.setMode(GridBase_1.GridMode.Normal);
      };
      GridStateCrossBomb.prototype.onRespone = function(grid, event) {
        IGame_1.default.playAudio(IdentifierManager_1.default.getInstance().getMatchAudioFilePath("prop_crossbomb"));
        var rayDirections = [ new Pair_1.Pair(cc.v2(1, 0), true), new Pair_1.Pair(cc.v2(-1, 0), false), new Pair_1.Pair(cc.v2(0, 1), false), new Pair_1.Pair(cc.v2(0, -1), false) ];
        var layoutGrass = grid.isGrassFloorAtLogicalPos(this._targetPos);
        for (var _i = 0, rayDirections_1 = rayDirections; _i < rayDirections_1.length; _i++) {
          var ray = rayDirections_1[_i];
          var cannon = FlyerCannon_1.default.create(grid, EntityID_1.EntityColor.None, layoutGrass, this._targetPos, ray.first, ray.second);
          grid.setFlyerAtLogicalPos(cannon, this._targetPos);
        }
        grid.setCurrentState(GridStateMatch_1.default.create());
        grid.setMode(GridBase_1.GridMode.Normal);
      };
      return GridStateCrossBomb;
    }(GridStateBase_1.default);
    exports.default = GridStateCrossBomb;
    cc._RF.pop();
  }, {
    "../../../../../base/IGame": "IGame",
    "../../../../../base/Pair": "Pair",
    "../../../../../define/GameCurrencyType": "GameCurrencyType",
    "../../../defines/EntityID": "EntityID",
    "../../../defines/IdentifierManager": "IdentifierManager",
    "../../../entity/flyer/FlyerCannon": "FlyerCannon",
    "../../GridBase": "GridBase",
    "../GridStateBase": "GridStateBase",
    "./GridStateMatch": "GridStateMatch"
  } ],
  GridStateDisappear: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "3ae37rTm8lI8IkDAx1xlkcM", "GridStateDisappear");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var GridStateBase_1 = require("../GridStateBase");
    var GridStatePrepare_1 = require("./GridStatePrepare");
    var GridStateDisappear = function(_super) {
      __extends(GridStateDisappear, _super);
      function GridStateDisappear() {
        return _super.call(this, GridStateBase_1.GridState.Disappear) || this;
      }
      GridStateDisappear.create = function() {
        return new GridStateDisappear();
      };
      GridStateDisappear.prototype.enter = function(grid) {
        this.disappear(grid);
      };
      GridStateDisappear.prototype.update = function(grid, delta) {
        grid.isObstructsEmpty() && grid.isCommandListEmpty() && grid.setCurrentState(GridStatePrepare_1.default.create());
      };
      return GridStateDisappear;
    }(GridStateBase_1.default);
    exports.default = GridStateDisappear;
    cc._RF.pop();
  }, {
    "../GridStateBase": "GridStateBase",
    "./GridStatePrepare": "GridStatePrepare"
  } ],
  GridStateDrop: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "35aeaAeihNM77iAXM+leLf1", "GridStateDrop");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var GameMath_1 = require("../../../../../extend/utils/GameMath");
    var EntityID_1 = require("../../../defines/EntityID");
    var FencePos_1 = require("../../../entity/fence/FencePos");
    var ItemFactory_1 = require("../../../entity/item/ItemFactory");
    var ItemStateDrop_1 = require("../../../entity/item/state/ItemStateDrop");
    var EntityStateBase_1 = require("../../../entity/state/EntityStateBase");
    var GridStateBase_1 = require("../GridStateBase");
    var GridStateMatch_1 = require("./GridStateMatch");
    var GridStateDrop = function(_super) {
      __extends(GridStateDrop, _super);
      function GridStateDrop(checkMatchPositions, gridState) {
        void 0 === gridState && (gridState = GridStateBase_1.GridState.DropItem);
        var _this = _super.call(this, gridState) || this;
        _this._checkMatchPositions = [];
        _this._deadCellsPositions = [];
        _this._livingCellsPositions = [];
        _this._fencesPositions = [];
        _this._fencesMap = {};
        _this._dropedItems = [];
        _this._stepCount = 0;
        _this._finishDrop = false;
        _this._checkMatchPositions = checkMatchPositions;
        return _this;
      }
      GridStateDrop.create = function(checkMatchPositions) {
        void 0 === checkMatchPositions && (checkMatchPositions = []);
        return new GridStateDrop(checkMatchPositions);
      };
      GridStateDrop.prototype.clearDeadAndLivingCellRecord = function(grid) {
        GameMath_1.default.clearArray(this._deadCellsPositions);
        GameMath_1.default.clearArray(this._livingCellsPositions);
      };
      GridStateDrop.prototype.isDeadCell = function(grid, pos) {
        if (-1 != GameMath_1.default.indexOf(this._livingCellsPositions, pos)) return false;
        if (-1 != GameMath_1.default.indexOf(this._deadCellsPositions, pos)) return true;
        var cell = grid.getCellAtLogicalPos(pos);
        if (!cell) {
          GameMath_1.default.insertAsSet(this._deadCellsPositions, pos);
          return true;
        }
        if (this.canGenerateItemAtPos(grid, pos)) {
          GameMath_1.default.insertAsSet(this._livingCellsPositions, pos);
          return false;
        }
        if (cell.getIsWormholeExit() && !this.isDeadCell(grid, cell.getWormholeSource())) {
          GameMath_1.default.insertAsSet(this._livingCellsPositions, pos);
          return false;
        }
        var availableMoveOffsets = [ cc.v2(0, 1), cc.v2(-1, 1), cc.v2(1, 1) ];
        for (var _i = 0, availableMoveOffsets_1 = availableMoveOffsets; _i < availableMoveOffsets_1.length; _i++) {
          var offset = availableMoveOffsets_1[_i];
          var fromPos = pos.add(offset);
          if (this.canPassThrough(grid, fromPos, pos) && !this.isDeadCell(grid, fromPos)) {
            GameMath_1.default.insertAsSet(this._livingCellsPositions, pos);
            return false;
          }
        }
        GameMath_1.default.insertAsSet(this._deadCellsPositions, pos);
        return true;
      };
      GridStateDrop.prototype.markFences = function(grid) {
        GameMath_1.default.clearArray(this._fencesPositions);
        GameMath_1.default.clearObject(this._fencesMap);
        var horizontalOffsets = [ cc.v2(-1, 0), cc.v2(0, 0), cc.v2(1, 0) ];
        var verticalOffsets = [ cc.v2(0, 1), cc.v2(0, 0), cc.v2(0, -1) ];
        var wallOffsets = [ cc.v2(0, 1), cc.v2(0, -1), cc.v2(1, 0), cc.v2(-1, 0) ];
        var fencesMap = grid.getFencesMap();
        for (var key in fencesMap) {
          var fence = fencesMap[key];
          var fencePos = fence.getFencePos();
          var fencePosType = fencePos.getFencePosType();
          GameMath_1.default.insertAsSet(this._fencesPositions, fencePos);
          switch (fencePosType) {
           case FencePos_1.FencePosType.Horizontal:
            for (var _i = 0, horizontalOffsets_1 = horizontalOffsets; _i < horizontalOffsets_1.length; _i++) {
              var offset = horizontalOffsets_1[_i];
              var checkPos = fencePos.posA.add(offset);
              var cell = grid.getCellAtLogicalPos(checkPos);
              if (!cell) for (var _a = 0, wallOffsets_1 = wallOffsets; _a < wallOffsets_1.length; _a++) {
                var wallOffset = wallOffsets_1[_a];
                var wallPos = FencePos_1.default.create(checkPos, checkPos.add(wallOffset));
                GameMath_1.default.insertAsSet(this._fencesPositions, wallPos);
              }
              checkPos = fencePos.posB.add(offset);
              cell = grid.getCellAtLogicalPos(checkPos);
              if (!cell) for (var _b = 0, wallOffsets_2 = wallOffsets; _b < wallOffsets_2.length; _b++) {
                var wallOffset = wallOffsets_2[_b];
                var wallPos = FencePos_1.default.create(checkPos, checkPos.add(wallOffset));
                GameMath_1.default.insertAsSet(this._fencesPositions, wallPos);
              }
            }
            break;

           case FencePos_1.FencePosType.Vertical:
            for (var _c = 0, verticalOffsets_1 = verticalOffsets; _c < verticalOffsets_1.length; _c++) {
              var offset = verticalOffsets_1[_c];
              var checkPos = fencePos.posA.add(offset);
              var cell = grid.getCellAtLogicalPos(checkPos);
              if (!cell) for (var _d = 0, wallOffsets_3 = wallOffsets; _d < wallOffsets_3.length; _d++) {
                var wallOffset = wallOffsets_3[_d];
                var wallPos = FencePos_1.default.create(checkPos, checkPos.add(wallOffset));
                GameMath_1.default.insertAsSet(this._fencesPositions, wallPos);
              }
              checkPos = fencePos.posB.add(offset);
              cell = grid.getCellAtLogicalPos(checkPos);
              if (!cell) for (var _e = 0, wallOffsets_4 = wallOffsets; _e < wallOffsets_4.length; _e++) {
                var wallOffset = wallOffsets_4[_e];
                var wallPos = FencePos_1.default.create(checkPos, checkPos.add(wallOffset));
                GameMath_1.default.insertAsSet(this._fencesPositions, wallPos);
              }
            }
          }
        }
      };
      GridStateDrop.prototype.hasFence = function(grid, fromPos, toPos) {
        var fencePos = FencePos_1.default.create(fromPos, toPos);
        if (-1 == GameMath_1.default.indexOf(this._fencesPositions, fencePos)) return false;
        return true;
      };
      GridStateDrop.prototype.blockByFence = function(grid, fromPos, toPos) {
        var offset = toPos.sub(fromPos);
        if (offset.equals(cc.v2(0, 1)) || offset.equals(cc.v2(0, -1))) {
          if (this.hasFence(grid, fromPos, toPos)) return true;
        } else if (offset.equals(cc.v2(1, -1)) || offset.equals(cc.v2(-1, 1))) {
          var fenceA = this.hasFence(grid, fromPos, fromPos.add(cc.v2(0, -1)));
          var fenceB = this.hasFence(grid, toPos, toPos.add(cc.v2(0, 1)));
          if (fenceA && fenceB) return true;
          var fenceA = this.hasFence(grid, fromPos, fromPos.add(cc.v2(1, 0)));
          var fenceB = this.hasFence(grid, toPos, toPos.add(cc.v2(-1, 0)));
          if (fenceA && fenceB) return true;
          var fenceA = this.hasFence(grid, fromPos, fromPos.add(cc.v2(1, 0)));
          var fenceB = this.hasFence(grid, fromPos, fromPos.add(cc.v2(0, -1)));
          if (fenceA && fenceB) return true;
          var fenceA = this.hasFence(grid, toPos, toPos.add(cc.v2(0, 1)));
          var fenceB = this.hasFence(grid, toPos, toPos.add(cc.v2(-1, 0)));
          if (fenceA && fenceB) return true;
        } else if (offset.equals(cc.v2(-1, -1)) || offset.equals(cc.v2(1, 1))) {
          var fenceA = this.hasFence(grid, fromPos, fromPos.add(cc.v2(0, -1)));
          var fenceB = this.hasFence(grid, toPos, toPos.add(cc.v2(0, 1)));
          if (fenceA && fenceB) return true;
          var fenceA = this.hasFence(grid, fromPos, fromPos.add(cc.v2(-1, 0)));
          var fenceB = this.hasFence(grid, toPos, toPos.add(cc.v2(1, 0)));
          if (fenceA && fenceB) return true;
          var fenceA = this.hasFence(grid, fromPos, fromPos.add(cc.v2(-1, 0)));
          var fenceB = this.hasFence(grid, fromPos, fromPos.add(cc.v2(0, -1)));
          if (fenceA && fenceB) return true;
          var fenceA = this.hasFence(grid, toPos, toPos.add(cc.v2(0, 1)));
          var fenceB = this.hasFence(grid, toPos, toPos.add(cc.v2(1, 0)));
          if (fenceA && fenceB) return true;
        }
        return false;
      };
      GridStateDrop.prototype.canGenerateItemAtPos = function(grid, pos) {
        var cell = grid.getCellAtLogicalPos(pos);
        if (cell && cell.canGenerateItem() && !this.canPassThrough(grid, pos.add(cc.v2(0, 1)), pos)) return true;
        return false;
      };
      GridStateDrop.prototype.isCellAvailableForDrop = function(grid, pos) {
        var cell = grid.getCellAtLogicalPos(pos);
        if (cell) {
          var parasite = grid.getParasiteAtLogicalPos(pos);
          var item = grid.getItemAtLogicalPos(pos);
          return !(item && !item.canDrop() || parasite && !parasite.hostCanDrop());
        }
        return false;
      };
      GridStateDrop.prototype.canPassThrough = function(grid, fromPos, toPos) {
        if (Math.abs(fromPos.x - toPos.x) > 1) return false;
        if (Math.abs(fromPos.y - toPos.y) > 1) return false;
        if (this.blockByFence(grid, fromPos, toPos)) return false;
        return !!this.isCellAvailableForDrop(grid, fromPos) && this.isCellAvailableForDrop(grid, toPos);
      };
      GridStateDrop.prototype.canArrive = function(grid, fromPos, toPos) {
        if (Math.abs(fromPos.x - toPos.x) > 1) return false;
        if (Math.abs(fromPos.y - toPos.y) > 1) return false;
        if (this.blockByFence(grid, fromPos, toPos)) return false;
        if (this.canGenerateItemAtPos(grid, toPos)) return false;
        if (this.isCellAvailableForDrop(grid, fromPos)) {
          var cell = grid.getCellAtLogicalPos(toPos);
          return !!cell && cell.canPassThrough();
        }
        return false;
      };
      GridStateDrop.prototype.tryDropItem = function(grid, item) {
        var result = EntityID_1.EntityDropStep.create(EntityID_1.EntityDropStepType.Stay, item.getLogicalPos());
        if (item.canDrop()) {
          var cell = grid.getCellAtLogicalPos(item.getLogicalPos());
          if (cell.getIsWormholeEntrance()) {
            var targetItem = grid.getItemAtLogicalPos(cell.getWormholeDestination());
            var targetParasite = grid.getParasiteAtLogicalPos(cell.getWormholeDestination());
            if (!targetItem && !targetParasite) {
              result.type = EntityID_1.EntityDropStepType.Wormhole;
              result.logicalPos = cell.getWormholeDestination();
            }
          } else {
            var currentPos = item.getLogicalPos();
            var checkPos = currentPos.add(cc.v2(0, -1));
            if (this.canArrive(grid, currentPos, checkPos)) {
              result.type = EntityID_1.EntityDropStepType.Drop;
              result.logicalPos = checkPos;
            }
          }
        }
        return result;
      };
      GridStateDrop.prototype.tryDiagonalItem = function(grid, item) {
        var result = EntityID_1.EntityDropStep.create(EntityID_1.EntityDropStepType.Stay, item.getLogicalPos());
        var dropResult = this.tryDropItem(grid, item);
        switch (dropResult.type) {
         case EntityID_1.EntityDropStepType.Stay:
          var currentPos = item.getLogicalPos();
          var moveOffsets = [ cc.v2(-1, -1), cc.v2(1, -1) ];
          for (var _i = 0, moveOffsets_1 = moveOffsets; _i < moveOffsets_1.length; _i++) {
            var offset = moveOffsets_1[_i];
            var checkPos = currentPos.add(offset);
            var checkBlockPos = checkPos.add(cc.v2(0, 1));
            var isBlockPosDead = this.isDeadCell(grid, checkBlockPos);
            var canNotPassThrough = !this.canPassThrough(grid, checkBlockPos, checkPos);
            if ((isBlockPosDead || canNotPassThrough) && this.canArrive(grid, currentPos, checkPos)) {
              result.type = EntityID_1.EntityDropStepType.Drop;
              result.logicalPos = checkPos;
            }
          }
          return result;

         case EntityID_1.EntityDropStepType.Drop:
         case EntityID_1.EntityDropStepType.Wormhole:
          result.type = dropResult.type;
          result.logicalPos = dropResult.logicalPos;
          return result;
        }
        return result;
      };
      GridStateDrop.prototype.tryDropPos = function(grid, pos, canSlide) {
        var droped = false;
        var item = grid.getItemAtLogicalPos(pos);
        if (!item) return droped;
        if (!item.canDrop()) return droped;
        if (-1 != GameMath_1.default.indexOf(this._dropedItems, item)) {
          droped = true;
          return droped;
        }
        var result = EntityID_1.EntityDropStep.create(EntityID_1.EntityDropStepType.Stay, item.getLogicalPos());
        if (false == droped) {
          var cell = grid.getCellAtLogicalPos(item.getLogicalPos());
          if (cell.getIsWormholeEntrance()) {
            var destinationCell = grid.getCellAtLogicalPos(cell.getWormholeDestination());
            if (destinationCell && destinationCell.canPassThrough()) {
              result.type = EntityID_1.EntityDropStepType.Wormhole;
              result.logicalPos = cell.getWormholeDestination();
              droped = true;
            }
          }
        }
        if (false == droped) {
          var checkPos = pos.add(cc.v2(0, -1));
          if (this.canArrive(grid, pos, checkPos)) {
            result.type = EntityID_1.EntityDropStepType.Drop;
            result.logicalPos = checkPos;
          } else if (canSlide) {
            var moveOffsets = [ cc.v2(-1, -1), cc.v2(1, -1) ];
            for (var _i = 0, moveOffsets_2 = moveOffsets; _i < moveOffsets_2.length; _i++) {
              var offset = moveOffsets_2[_i];
              var checkPos_1 = pos.add(offset);
              var checkBlockPos = checkPos_1.add(cc.v2(0, 1));
              var isBlockPosDead = this.isDeadCell(grid, checkBlockPos);
              var canNotPassThrough = !this.canPassThrough(grid, checkBlockPos, checkPos_1);
              if ((isBlockPosDead || canNotPassThrough) && this.canArrive(grid, pos, checkPos_1)) {
                result.type = EntityID_1.EntityDropStepType.Drop;
                result.logicalPos = checkPos_1;
              }
            }
          }
        }
        switch (result.type) {
         case EntityID_1.EntityDropStepType.Wormhole:
         case EntityID_1.EntityDropStepType.Drop:
          grid.swapItem(pos, result.logicalPos);
          item.getPath().length <= 0 && item.addStepToPath(EntityID_1.EntityDropStep.create(EntityID_1.EntityDropStepType.Stay, pos));
          item.addStepToPath(result);
          var path = item.getPath();
          item.setPixelPos(path[0].logicalPos);
          GameMath_1.default.insertAsSet(this._dropedItems, item);
          var cell = grid.getCellAtLogicalPos(pos);
          cell.getIsWormholeExit() && this.tryDropPos(grid, cell.getWormholeSource(), canSlide);
          var affectOffsets = [ cc.v2(0, 1), cc.v2(-1, 1), cc.v2(1, 1) ];
          for (var _a = 0, affectOffsets_1 = affectOffsets; _a < affectOffsets_1.length; _a++) {
            var offset = affectOffsets_1[_a];
            this.tryDropPos(grid, pos.add(offset), canSlide);
          }
        }
        return droped;
      };
      GridStateDrop.prototype.dropAllItemsByStep = function(grid, step) {
        this._dropedItems.length = 0;
        var someItemMoved = false;
        var gridSize = grid.getGridSize();
        for (var row = 0; row < gridSize.height; row++) for (var column = 0; column < gridSize.width; column++) this.tryDropPos(grid, cc.v2(column, row), false) && (someItemMoved = true);
        for (var row = 0; row < gridSize.height; row++) for (var column = 0; column < gridSize.width; column++) this.tryDropPos(grid, cc.v2(column, row), true) && (someItemMoved = true);
        var itemsMap = grid.getItemsMap();
        for (var key in itemsMap) {
          var item = itemsMap[key];
          var pos = item.getLogicalPos();
          if (-1 == GameMath_1.default.indexOf(this._dropedItems, item)) {
            item.getPath().length <= 0 && item.addStepToPath(EntityID_1.EntityDropStep.create(EntityID_1.EntityDropStepType.Stay, pos));
            item.addStepToPath(EntityID_1.EntityDropStep.create(EntityID_1.EntityDropStepType.Stay, pos));
          }
        }
        var someItemBorned = false;
        var cellsMap = grid.getCellsMap();
        for (var key in cellsMap) {
          var cell = cellsMap[key];
          var pos = cell.getLogicalPos();
          if (this.canGenerateItemAtPos(grid, pos)) {
            var item = grid.getItemAtLogicalPos(pos);
            if (item) continue;
            var entityID = cell.nextItemID();
            var bornPos = pos;
            var newItem = ItemFactory_1.default.generateItemWithEntityID(grid, entityID);
            if (newItem) {
              newItem.setVisible(false);
              someItemBorned = true;
              grid.setItemAtLogicalPos(newItem, bornPos);
              for (var i = 0; i <= step; i++) newItem.addStepToPath(EntityID_1.EntityDropStep.create(EntityID_1.EntityDropStepType.Hide, bornPos));
              newItem.addStepToPath(EntityID_1.EntityDropStep.create(EntityID_1.EntityDropStepType.Born, bornPos));
            }
          }
        }
        return someItemMoved || someItemBorned;
      };
      GridStateDrop.prototype.runNextStep = function(grid) {
        this.dropAllItemsByStep(grid, this._stepCount) ? this._stepCount++ : cc.log("Finish Drop");
      };
      GridStateDrop.prototype.caculatePathForItems = function(grid) {
        var itemsMap = grid.getItemsMap();
        for (var key in itemsMap) {
          var item = itemsMap[key];
          item.clearPath();
        }
        this.markFences(grid);
        this.clearDeadAndLivingCellRecord(grid);
        var stepCount = 0;
        while (1) {
          if (!this.dropAllItemsByStep(grid, stepCount)) break;
          stepCount++;
        }
      };
      GridStateDrop.prototype.runPathForAllItems = function(grid) {
        var itemsMap = grid.getItemsMap();
        for (var key in itemsMap) {
          var item = itemsMap[key];
          var pos = item.getLogicalPos();
          item.setCurrentState(ItemStateDrop_1.default.create());
          item.getCurrentStateType() != EntityStateBase_1.EntityStateType.Wait && GameMath_1.default.insertAsSet(this._checkMatchPositions, pos);
        }
      };
      GridStateDrop.prototype.tryDropItemsForStep = function(grid, step) {
        return this.dropAllItemsByStep(grid, step);
      };
      GridStateDrop.prototype.enter = function(grid) {
        grid.unimmuneAllEntities();
        this.markFences(grid);
        this.clearDeadAndLivingCellRecord(grid);
        this._stepCount = 0;
        this._finishDrop = false;
        this.update(grid, 0);
      };
      GridStateDrop.prototype.update = function(grid, delta) {
        if (false == this._finishDrop) {
          var stateDate = new Date();
          var startTime = stateDate.getTime();
          var caculateCount = 0;
          while (1) {
            var currentDate = new Date();
            var timeDelta = currentDate.getTime() - startTime;
            if (timeDelta > 20 && caculateCount > 0) break;
            caculateCount += 1;
            this._finishDrop = !this.tryDropItemsForStep(grid, this._stepCount);
            if (this._finishDrop) {
              this.runPathForAllItems(grid);
              break;
            }
            this._stepCount++;
          }
        } else grid.isObstructsEmpty() && grid.isCommandListEmpty() && grid.setCurrentState(GridStateMatch_1.default.create(this._checkMatchPositions));
      };
      GridStateDrop.prototype.exit = function(grid) {
        this._checkMatchPositions = null;
        this._deadCellsPositions = null;
        this._livingCellsPositions = null;
        this._fencesPositions = null;
        this._fencesMap = null;
        this._dropedItems = null;
      };
      return GridStateDrop;
    }(GridStateBase_1.default);
    exports.default = GridStateDrop;
    cc._RF.pop();
  }, {
    "../../../../../extend/utils/GameMath": "GameMath",
    "../../../defines/EntityID": "EntityID",
    "../../../entity/fence/FencePos": "FencePos",
    "../../../entity/item/ItemFactory": "ItemFactory",
    "../../../entity/item/state/ItemStateDrop": "ItemStateDrop",
    "../../../entity/state/EntityStateBase": "EntityStateBase",
    "../GridStateBase": "GridStateBase",
    "./GridStateMatch": "GridStateMatch"
  } ],
  GridStateFailSummary: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "95236eCrJ1DvrhD761kmY9C", "GridStateFailSummary");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var GridStateBase_1 = require("../GridStateBase");
    var GridStateFailSummary = function(_super) {
      __extends(GridStateFailSummary, _super);
      function GridStateFailSummary() {
        return _super.call(this, GridStateBase_1.GridState.FailSummary) || this;
      }
      GridStateFailSummary.create = function() {
        return new GridStateFailSummary();
      };
      GridStateFailSummary.prototype.enter = function(grid) {
        grid.showGameFail();
      };
      return GridStateFailSummary;
    }(GridStateBase_1.default);
    exports.default = GridStateFailSummary;
    cc._RF.pop();
  }, {
    "../GridStateBase": "GridStateBase"
  } ],
  GridStateFail: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "46976S3H51AT6MOZ94OhOjI", "GridStateFail");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var GridStateBase_1 = require("../GridStateBase");
    var GridStateFailSummary_1 = require("./GridStateFailSummary");
    var GridStateFail = function(_super) {
      __extends(GridStateFail, _super);
      function GridStateFail() {
        return _super.call(this, GridStateBase_1.GridState.Fail) || this;
      }
      GridStateFail.create = function() {
        return new GridStateFail();
      };
      GridStateFail.prototype.enter = function(grid) {
        this.disappear(grid);
      };
      GridStateFail.prototype.update = function(grid, delta) {
        grid.isObstructsEmpty() && grid.isCommandListEmpty() && grid.setCurrentState(GridStateFailSummary_1.default.create());
      };
      return GridStateFail;
    }(GridStateBase_1.default);
    exports.default = GridStateFail;
    cc._RF.pop();
  }, {
    "../GridStateBase": "GridStateBase",
    "./GridStateFailSummary": "GridStateFailSummary"
  } ],
  GridStateForceClean: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "82a20dRr7FDXqEznEEah0dc", "GridStateForceClean");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var GameCurrencyType_1 = require("../../../../../define/GameCurrencyType");
    var GridCommand_1 = require("../../../commond/GridCommand");
    var EntityID_1 = require("../../../defines/EntityID");
    var GridBase_1 = require("../../GridBase");
    var GridStateBase_1 = require("../GridStateBase");
    var GridStateMatch_1 = require("./GridStateMatch");
    var FlyerHammer_1 = require("../../../entity/flyer/FlyerHammer");
    var GridStateForceClean = function(_super) {
      __extends(GridStateForceClean, _super);
      function GridStateForceClean() {
        var _this = _super.call(this, GridStateBase_1.GridState.ForceClean) || this;
        _this._targetPos = cc.Vec2.ZERO;
        return _this;
      }
      GridStateForceClean.create = function() {
        return new GridStateForceClean();
      };
      GridStateForceClean.prototype.enter = function(grid) {};
      GridStateForceClean.prototype.exit = function(grid) {
        this._targetPos = null;
      };
      GridStateForceClean.prototype.canChangeState = function() {
        return true;
      };
      GridStateForceClean.prototype.canPause = function() {
        return true;
      };
      GridStateForceClean.prototype.onTapBegan = function(grid, logicalPos) {
        var cell = grid.getCellAtLogicalPos(logicalPos);
        if (!cell) {
          grid.setMode(GridBase_1.GridMode.Normal);
          return;
        }
        var entityTypes = [ EntityID_1.EntityType.Parasite, EntityID_1.EntityType.Item, EntityID_1.EntityType.Rug, EntityID_1.EntityType.Floor, EntityID_1.EntityType.Popsicle, EntityID_1.EntityType.Cell ];
        var canUseHammer = false;
        for (var _i = 0, entityTypes_1 = entityTypes; _i < entityTypes_1.length; _i++) {
          var entityType = entityTypes_1[_i];
          var entity = grid.getEntity(entityType, logicalPos);
          if (entity) {
            canUseHammer = entity.canExcuteCommand(GridCommand_1.default.BombClean(logicalPos, EntityID_1.EntityColor.None, false));
            break;
          }
        }
        if (!canUseHammer) return;
        this._targetPos = logicalPos;
        grid.requestUseGear(GameCurrencyType_1.GameCurrencyType.AidHammer, 1);
      };
      GridStateForceClean.prototype.onRespone = function(grid, event) {
        var hammer = FlyerHammer_1.default.create(grid, this._targetPos);
        grid.setFlyerAtLogicalPos(hammer, cc.Vec2.ZERO);
        grid.setCurrentState(GridStateMatch_1.default.create());
        grid.setMode(GridBase_1.GridMode.Normal);
      };
      return GridStateForceClean;
    }(GridStateBase_1.default);
    exports.default = GridStateForceClean;
    cc._RF.pop();
  }, {
    "../../../../../define/GameCurrencyType": "GameCurrencyType",
    "../../../commond/GridCommand": "GridCommand",
    "../../../defines/EntityID": "EntityID",
    "../../../entity/flyer/FlyerHammer": "FlyerHammer",
    "../../GridBase": "GridBase",
    "../GridStateBase": "GridStateBase",
    "./GridStateMatch": "GridStateMatch"
  } ],
  GridStateForceSwap: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "50769t0jGFL2ajqXCpuzmhL", "GridStateForceSwap");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var GameCurrencyType_1 = require("../../../../../define/GameCurrencyType");
    var GridCommand_1 = require("../../../commond/GridCommand");
    var ItemStateSwap_1 = require("../../../entity/item/state/ItemStateSwap");
    var GridBase_1 = require("../../GridBase");
    var GridStateBase_1 = require("../GridStateBase");
    var GridStateMatch_1 = require("./GridStateMatch");
    var IGame_1 = require("../../../../../base/IGame");
    var IdentifierManager_1 = require("../../../defines/IdentifierManager");
    var FlyerAnimation_1 = require("../../../entity/flyer/FlyerAnimation");
    var GridStateForceSwap = function(_super) {
      __extends(GridStateForceSwap, _super);
      function GridStateForceSwap() {
        var _this = _super.call(this, GridStateBase_1.GridState.ForceSwap) || this;
        _this._itemSwaped = false;
        _this._swapPosA = cc.Vec2.ZERO;
        _this._swapPosB = cc.Vec2.ZERO;
        _this._focusFrame = null;
        _this._selectedItem = null;
        _this._targetPos = cc.Vec2.ZERO;
        return _this;
      }
      GridStateForceSwap.create = function() {
        return new GridStateForceSwap();
      };
      GridStateForceSwap.prototype.enter = function(grid) {};
      GridStateForceSwap.prototype.canChangeState = function() {
        if (this._itemSwaped) return false;
        return true;
      };
      GridStateForceSwap.prototype.canPause = function() {
        return true;
      };
      GridStateForceSwap.prototype.update = function(grid, delta) {
        if (false == this._itemSwaped) return;
        if (grid.isObstructsEmpty() && grid.isCommandListEmpty()) {
          var commandA = GridCommand_1.default.ForceSwap(this._swapPosB);
          var commandB = GridCommand_1.default.ForceSwap(this._swapPosA);
          grid.dispatchCommand(this._swapPosA, commandA, 0);
          grid.dispatchCommand(this._swapPosB, commandB, 0);
          grid.setCurrentState(GridStateMatch_1.default.create());
        }
      };
      GridStateForceSwap.prototype.exit = function(grid) {
        this._selectedItem && this._selectedItem.unselected();
        this._focusFrame && this._focusFrame.destoryWithRecycle();
        this._swapPosA = null;
        this._swapPosB = null;
        this._focusFrame = null;
        this._targetPos = null;
      };
      GridStateForceSwap.prototype.trySwapItem = function(grid, logicalPosA, logicalPosB) {
        var itemA = grid.getItemAtLogicalPos(logicalPosA);
        var itemB = grid.getItemAtLogicalPos(logicalPosB);
        if (itemA && itemB && itemA.canSwap() && itemB.canSwap()) {
          this._swapPosA = logicalPosA;
          this._swapPosB = logicalPosB;
          grid.requestUseGear(GameCurrencyType_1.GameCurrencyType.AidSwap, 1);
          return true;
        }
        return false;
      };
      GridStateForceSwap.prototype.onTapBegan = function(grid, logicalPos) {
        if (this._itemSwaped) return;
        var item = grid.getItemAtLogicalPos(logicalPos);
        if (!item) {
          grid.setMode(GridBase_1.GridMode.Normal);
          return;
        }
        if (item == this._selectedItem) return;
        if (this._selectedItem) this.trySwapItem(grid, this._selectedItem.getLogicalPos(), logicalPos); else if (item.canForceSwap()) {
          item.selected();
          this._selectedItem = item;
          if (!this._focusFrame) {
            this._focusFrame = FlyerAnimation_1.default.createAnimationWithType(grid, FlyerAnimation_1.FlyerAnimationType.FocusFrame, false);
            grid.setFlyerAtLogicalPos(this._focusFrame, logicalPos);
          }
          IGame_1.default.playAudio(IdentifierManager_1.default.getInstance().getMatchAudioFilePath("prop_switch1"));
        }
      };
      GridStateForceSwap.prototype.onRespone = function(grid, event) {
        grid.swapItem(this._swapPosA, this._swapPosB);
        var itemA = grid.getItemAtLogicalPos(this._swapPosB);
        var itemB = grid.getItemAtLogicalPos(this._swapPosA);
        itemA.setCurrentState(ItemStateSwap_1.default.create(this._swapPosA, this._swapPosB));
        itemB.setCurrentState(ItemStateSwap_1.default.create(this._swapPosB, this._swapPosA));
        this._selectedItem.unselected();
        this._selectedItem = null;
        this._itemSwaped = true;
        grid.setMode(GridBase_1.GridMode.Normal);
        IGame_1.default.playAudio(IdentifierManager_1.default.getInstance().getMatchAudioFilePath("prop_switch2"));
      };
      return GridStateForceSwap;
    }(GridStateBase_1.default);
    exports.default = GridStateForceSwap;
    cc._RF.pop();
  }, {
    "../../../../../base/IGame": "IGame",
    "../../../../../define/GameCurrencyType": "GameCurrencyType",
    "../../../commond/GridCommand": "GridCommand",
    "../../../defines/IdentifierManager": "IdentifierManager",
    "../../../entity/flyer/FlyerAnimation": "FlyerAnimation",
    "../../../entity/item/state/ItemStateSwap": "ItemStateSwap",
    "../../GridBase": "GridBase",
    "../GridStateBase": "GridStateBase",
    "./GridStateMatch": "GridStateMatch"
  } ],
  GridStateHoney: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "ccf03Mprg5BqaLMSPUaFKzT", "GridStateHoney");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var GridStateBase_1 = require("../GridStateBase");
    var PowerID_1 = require("../../../defines/PowerID");
    var ItemBase_1 = require("../../../entity/item/ItemBase");
    var ParasiteBase_1 = require("../../../entity/parasite/ParasiteBase");
    var GameMath_1 = require("../../../../../extend/utils/GameMath");
    var ParasiteHoney_1 = require("../../../entity/parasite/ParasiteHoney");
    var GridStateComboWord_1 = require("./GridStateComboWord");
    var FencePos_1 = require("../../../entity/fence/FencePos");
    var GridStateHoney = function(_super) {
      __extends(GridStateHoney, _super);
      function GridStateHoney() {
        return _super.call(this, GridStateBase_1.GridState.Honey) || this;
      }
      GridStateHoney.create = function() {
        return new GridStateHoney();
      };
      GridStateHoney.prototype.spreadHoney = function(grid) {
        grid.lossPower(PowerID_1.PowerID.SpreadHoney, 1);
        var itemsMap = grid.getItemsMap();
        var honeyPositions = [];
        var offsets = [ cc.v2(1, 0), cc.v2(-1, 0), cc.v2(0, 1), cc.v2(0, -1) ];
        for (var key in itemsMap) {
          var item = itemsMap[key];
          var canSpreadHoney = false;
          item.getItemType() == ItemBase_1.ItemType.HoneyComb && (canSpreadHoney = true);
          var parasite = item.getTopParasite();
          parasite && parasite.getParasiteType() == ParasiteBase_1.ParasiteType.Honey && (canSpreadHoney = true);
          if (canSpreadHoney) {
            var origin = item.getLogicalPos();
            for (var _i = 0, offsets_1 = offsets; _i < offsets_1.length; _i++) {
              var offset = offsets_1[_i];
              var checkPos = origin.add(offset);
              var item_1 = grid.getItemAtLogicalPos(checkPos);
              var fence = grid.getFenceAtFencePos(FencePos_1.default.create(origin, checkPos));
              fence || item_1 && item_1.canCoveredByHoney() && honeyPositions.push({
                Source: origin,
                Target: checkPos
              });
            }
          }
        }
        if (honeyPositions.length > 0) {
          var randomIndex = GameMath_1.default.randomInt(0, honeyPositions.length - 1);
          var spreadInfo = honeyPositions[randomIndex];
          var spreadSource = spreadInfo["Source"];
          var spreadTarget = spreadInfo["Target"];
          var spreadHp = GameMath_1.default.randomInt(1, 2);
          var sourceItem = grid.getItemAtLogicalPos(spreadSource);
          var sourceHoney = sourceItem.getTopParasite();
          if (sourceHoney) spreadHp = sourceHoney.getHealthPoint(); else {
            var honeyComb = sourceItem;
            spreadHp = honeyComb.getSpreadHoneyHp();
          }
          var targetItem = grid.getItemAtLogicalPos(spreadTarget);
          var newHoney = ParasiteHoney_1.default.create(grid, spreadHp);
          newHoney.grow();
          grid.setParasiteAtLogicalPos(newHoney, spreadTarget);
        }
      };
      GridStateHoney.prototype.enter = function(grid) {
        grid.getPowerAmount(PowerID_1.PowerID.SpreadHoney) > 0 && grid.getPowerAmount(PowerID_1.PowerID.HoneyResist) <= 0 && this.spreadHoney(grid);
        grid.isObstructsEmpty() && grid.isCommandListEmpty() && grid.setCurrentState(GridStateComboWord_1.default.create());
      };
      GridStateHoney.prototype.update = function(grid, delta) {
        grid.isObstructsEmpty() && grid.isCommandListEmpty() && grid.setCurrentState(GridStateComboWord_1.default.create());
      };
      return GridStateHoney;
    }(GridStateBase_1.default);
    exports.default = GridStateHoney;
    cc._RF.pop();
  }, {
    "../../../../../extend/utils/GameMath": "GameMath",
    "../../../defines/PowerID": "PowerID",
    "../../../entity/fence/FencePos": "FencePos",
    "../../../entity/item/ItemBase": "ItemBase",
    "../../../entity/parasite/ParasiteBase": "ParasiteBase",
    "../../../entity/parasite/ParasiteHoney": "ParasiteHoney",
    "../GridStateBase": "GridStateBase",
    "./GridStateComboWord": "GridStateComboWord"
  } ],
  GridStateLaunchGears: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "5f86dMK1TtHJoSULI1Ig3y2", "GridStateLaunchGears");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var PowerID_1 = require("../../../defines/PowerID");
    var GridStateBase_1 = require("../GridStateBase");
    var GridStateAutoActivateBomb_1 = require("./GridStateAutoActivateBomb");
    var EntityID_1 = require("../../../defines/EntityID");
    var GameMath_1 = require("../../../../../extend/utils/GameMath");
    var GameCurrencyType_1 = require("../../../../../define/GameCurrencyType");
    var ItemBombBase_1 = require("../../../entity/item/color/bomb/ItemBombBase");
    var ItemFactory_1 = require("../../../entity/item/ItemFactory");
    var ItemStateReplace_1 = require("../../../entity/item/state/ItemStateReplace");
    var GridStateLaunchGears = function(_super) {
      __extends(GridStateLaunchGears, _super);
      function GridStateLaunchGears() {
        var _this = _super.call(this, GridStateBase_1.GridState.LaunchGears) || this;
        _this._availablePositions = [];
        return _this;
      }
      GridStateLaunchGears.create = function() {
        return new GridStateLaunchGears();
      };
      GridStateLaunchGears.prototype.enter = function(grid) {
        if (grid.getPowerAmount(PowerID_1.PowerID.LaunchGears) > 0) {
          grid.setPowerAmount(PowerID_1.PowerID.LaunchGears, 0);
          var itemsMap = grid.getItemsMap();
          for (var key in itemsMap) {
            var item = itemsMap[key];
            item.canUpgradeByRainbow() && this._availablePositions.push(item.getLogicalPos());
          }
          GameMath_1.default.shuffleArray(this._availablePositions);
          var gearMap = grid.getLaunchGearMap();
          for (var key in gearMap) {
            var gearID = Number(key);
            var amount = gearMap[key];
            this.progressGear(grid, gearID, amount);
          }
          grid.clearLaunchGears();
        } else grid.setCurrentState(GridStateAutoActivateBomb_1.default.create());
      };
      GridStateLaunchGears.prototype.update = function(grid, delta) {
        grid.isObstructsEmpty() && grid.isCommandListEmpty() && grid.setCurrentState(GridStateAutoActivateBomb_1.default.create());
      };
      GridStateLaunchGears.prototype.exit = function(grid) {
        this._availablePositions = null;
      };
      GridStateLaunchGears.prototype.progressGear = function(grid, gearID, amount) {
        for (var index = 0; index < amount; index++) switch (gearID) {
         case GameCurrencyType_1.GameCurrencyType.BeginLine:
         case GameCurrencyType_1.GameCurrencyType.InfiniteBeginLine:
         case GameCurrencyType_1.GameCurrencyType.OneRoundBeginLine:
          grid.setUsedGearAmount(gearID, grid.getUsedGearAmount(gearID) + 1);
          this.createBomb(grid, ItemBombBase_1.ItemBombType.Row);
          this.createBomb(grid, ItemBombBase_1.ItemBombType.Column);
          break;

         case GameCurrencyType_1.GameCurrencyType.BeginRange:
         case GameCurrencyType_1.GameCurrencyType.InfiniteBeginRange:
         case GameCurrencyType_1.GameCurrencyType.OneRoundBeginRange:
          grid.setUsedGearAmount(gearID, grid.getUsedGearAmount(gearID) + 1);
          this.createBomb(grid, ItemBombBase_1.ItemBombType.Range);
          this.createBomb(grid, ItemBombBase_1.ItemBombType.Cross);
          break;

         case GameCurrencyType_1.GameCurrencyType.BeginRainbow:
         case GameCurrencyType_1.GameCurrencyType.InfiniteBeginRainbow:
         case GameCurrencyType_1.GameCurrencyType.OneRoundBeginRainbow:
          grid.setUsedGearAmount(gearID, grid.getUsedGearAmount(gearID) + 1);
          this.createBomb(grid, ItemBombBase_1.ItemBombType.Rainbow);
          break;

         case GameCurrencyType_1.GameCurrencyType.ExtraStep1:
         case GameCurrencyType_1.GameCurrencyType.ExtraStep2:
         case GameCurrencyType_1.GameCurrencyType.ExtraStep3:
         case GameCurrencyType_1.GameCurrencyType.ExtraStep5:
          grid.setUsedGearAmount(gearID, grid.getUsedGearAmount(gearID) + 1);
          this.createExtraStep(grid, gearID);
          break;

         case GameCurrencyType_1.GameCurrencyType.LuckyWheelRow:
          grid.setUsedGearAmount(gearID, grid.getUsedGearAmount(gearID) + 1);
          this.createBomb(grid, ItemBombBase_1.ItemBombType.Row);
          break;

         case GameCurrencyType_1.GameCurrencyType.LuckyWheelColumn:
          grid.setUsedGearAmount(gearID, grid.getUsedGearAmount(gearID) + 1);
          this.createBomb(grid, ItemBombBase_1.ItemBombType.Column);
          break;

         case GameCurrencyType_1.GameCurrencyType.LuckyWheelCross:
          grid.setUsedGearAmount(gearID, grid.getUsedGearAmount(gearID) + 1);
          this.createBomb(grid, ItemBombBase_1.ItemBombType.Cross);
          break;

         case GameCurrencyType_1.GameCurrencyType.LuckyWheelRange:
          grid.setUsedGearAmount(gearID, grid.getUsedGearAmount(gearID) + 1);
          this.createBomb(grid, ItemBombBase_1.ItemBombType.Range);
          break;

         case GameCurrencyType_1.GameCurrencyType.LuckyWheelMissile_Row:
          grid.setUsedGearAmount(gearID, grid.getUsedGearAmount(gearID) + 1);
          this.createBomb(grid, ItemBombBase_1.ItemBombType.Row);
          this.createBomb(grid, ItemBombBase_1.ItemBombType.Butterfly);
          break;

         case GameCurrencyType_1.GameCurrencyType.LuckyWheelMissile_Column:
          grid.setUsedGearAmount(gearID, grid.getUsedGearAmount(gearID) + 1);
          this.createBomb(grid, ItemBombBase_1.ItemBombType.Column);
          this.createBomb(grid, ItemBombBase_1.ItemBombType.Butterfly);
          break;

         case GameCurrencyType_1.GameCurrencyType.LuckyWheelMissile_Cross:
          grid.setUsedGearAmount(gearID, grid.getUsedGearAmount(gearID) + 1);
          this.createBomb(grid, ItemBombBase_1.ItemBombType.Cross);
          this.createBomb(grid, ItemBombBase_1.ItemBombType.Butterfly);
          break;

         case GameCurrencyType_1.GameCurrencyType.LuckyWheelMissile_Range:
          grid.setUsedGearAmount(gearID, grid.getUsedGearAmount(gearID) + 1);
          this.createBomb(grid, ItemBombBase_1.ItemBombType.Range);
          this.createBomb(grid, ItemBombBase_1.ItemBombType.Butterfly);
          break;

         case GameCurrencyType_1.GameCurrencyType.LuckyWheelRow_Cross:
          grid.setUsedGearAmount(gearID, grid.getUsedGearAmount(gearID) + 1);
          this.createBomb(grid, ItemBombBase_1.ItemBombType.Row);
          this.createBomb(grid, ItemBombBase_1.ItemBombType.Cross);
          break;

         case GameCurrencyType_1.GameCurrencyType.LuckyWheelColumn_Cross:
          grid.setUsedGearAmount(gearID, grid.getUsedGearAmount(gearID) + 1);
          this.createBomb(grid, ItemBombBase_1.ItemBombType.Column);
          this.createBomb(grid, ItemBombBase_1.ItemBombType.Cross);
          break;

         case GameCurrencyType_1.GameCurrencyType.LuckyWheelRow_Range:
          grid.setUsedGearAmount(gearID, grid.getUsedGearAmount(gearID) + 1);
          this.createBomb(grid, ItemBombBase_1.ItemBombType.Row);
          this.createBomb(grid, ItemBombBase_1.ItemBombType.Range);
          break;

         case GameCurrencyType_1.GameCurrencyType.LuckyWheelColumn_Range:
          grid.setUsedGearAmount(gearID, grid.getUsedGearAmount(gearID) + 1);
          this.createBomb(grid, ItemBombBase_1.ItemBombType.Column);
          this.createBomb(grid, ItemBombBase_1.ItemBombType.Range);
          break;

         case GameCurrencyType_1.GameCurrencyType.LuckyWheelMissile_Row_Column:
          grid.setUsedGearAmount(gearID, grid.getUsedGearAmount(gearID) + 1);
          this.createBomb(grid, ItemBombBase_1.ItemBombType.Butterfly);
          this.createBomb(grid, ItemBombBase_1.ItemBombType.Row);
          this.createBomb(grid, ItemBombBase_1.ItemBombType.Column);
          break;

         case GameCurrencyType_1.GameCurrencyType.LuckyWheelMissile_Rainbow:
          grid.setUsedGearAmount(gearID, grid.getUsedGearAmount(gearID) + 1);
          this.createBomb(grid, ItemBombBase_1.ItemBombType.Butterfly);
          this.createBomb(grid, ItemBombBase_1.ItemBombType.Rainbow);
          break;

         case GameCurrencyType_1.GameCurrencyType.LuckyWheelMissile_Row_Cross:
          grid.setUsedGearAmount(gearID, grid.getUsedGearAmount(gearID) + 1);
          this.createBomb(grid, ItemBombBase_1.ItemBombType.Butterfly);
          this.createBomb(grid, ItemBombBase_1.ItemBombType.Row);
          this.createBomb(grid, ItemBombBase_1.ItemBombType.Cross);
          break;

         case GameCurrencyType_1.GameCurrencyType.LuckyWheelMissile_Column_Range:
          grid.setUsedGearAmount(gearID, grid.getUsedGearAmount(gearID) + 1);
          this.createBomb(grid, ItemBombBase_1.ItemBombType.Butterfly);
          this.createBomb(grid, ItemBombBase_1.ItemBombType.Column);
          this.createBomb(grid, ItemBombBase_1.ItemBombType.Range);
        }
      };
      GridStateLaunchGears.prototype.createBomb = function(grid, bombType) {
        if (this._availablePositions.length > 0) {
          var targetPos = this._availablePositions[0];
          var color = EntityID_1.EntityColor.None;
          if (bombType != ItemBombBase_1.ItemBombType.Rainbow) {
            var item = grid.getItemAtLogicalPos(targetPos);
            color = item.getEntityColor();
          }
          var bomb = ItemFactory_1.default.generateEffectBombItem(grid, bombType, color);
          if (bomb) {
            this._availablePositions.splice(0, 1);
            bomb.node.setPosition(cc.v2(-100, .5 * grid.node.getContentSize().height));
            grid.node.addChild(bomb.node, grid.getTopZOrder(bomb.getEntityType(), targetPos));
            bomb.setCurrentState(ItemStateReplace_1.default.create(targetPos));
          }
        }
      };
      GridStateLaunchGears.prototype.createExtraStep = function(grid, itemID) {
        var startPos = cc.v2(-2, Math.round(grid.getGridSize().height / 2));
        grid.gainStepWithItemID(itemID, true, startPos);
      };
      return GridStateLaunchGears;
    }(GridStateBase_1.default);
    exports.default = GridStateLaunchGears;
    cc._RF.pop();
  }, {
    "../../../../../define/GameCurrencyType": "GameCurrencyType",
    "../../../../../extend/utils/GameMath": "GameMath",
    "../../../defines/EntityID": "EntityID",
    "../../../defines/PowerID": "PowerID",
    "../../../entity/item/ItemFactory": "ItemFactory",
    "../../../entity/item/color/bomb/ItemBombBase": "ItemBombBase",
    "../../../entity/item/state/ItemStateReplace": "ItemStateReplace",
    "../GridStateBase": "GridStateBase",
    "./GridStateAutoActivateBomb": "GridStateAutoActivateBomb"
  } ],
  GridStateLaunchResidentGear: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "01715jKx8BEAKwGqRiYhqwd", "GridStateLaunchResidentGear");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var GridStateBase_1 = require("../GridStateBase");
    var GridStateLaunchGears_1 = require("./GridStateLaunchGears");
    var GridStateLaunchResidentGear = function(_super) {
      __extends(GridStateLaunchResidentGear, _super);
      function GridStateLaunchResidentGear() {
        return _super.call(this, GridStateBase_1.GridState.LaunchResidentGear) || this;
      }
      GridStateLaunchResidentGear.create = function() {
        return new GridStateLaunchResidentGear();
      };
      GridStateLaunchResidentGear.prototype.enter = function(grid) {
        grid.setCurrentState(GridStateLaunchGears_1.default.create());
      };
      return GridStateLaunchResidentGear;
    }(GridStateBase_1.default);
    exports.default = GridStateLaunchResidentGear;
    cc._RF.pop();
  }, {
    "../GridStateBase": "GridStateBase",
    "./GridStateLaunchGears": "GridStateLaunchGears"
  } ],
  GridStateMachine: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "10bcaQ/PLxEpINmLbxfZoe/", "GridStateMachine");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var StateMachineBase_1 = require("../../fsm/StateMachineBase");
    var GridBase_1 = require("../GridBase");
    var GridStateBase_1 = require("./GridStateBase");
    var GridStateMachine = function(_super) {
      __extends(GridStateMachine, _super);
      function GridStateMachine() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      GridStateMachine.create = function(grid) {
        return new GridStateMachine(grid);
      };
      GridStateMachine.prototype.onTapBegan = function(logicalPos) {
        if (this._currentState && this._currentState instanceof GridStateBase_1.default) {
          var currentState = this._currentState;
          if (this._owner instanceof GridBase_1.default) {
            var onwer = this._owner;
            currentState.onTapBegan(onwer, logicalPos);
          }
        }
        if (this._globalState && this._globalState instanceof GridStateBase_1.default) {
          var globalState = this._globalState;
          if (this._owner instanceof GridBase_1.default) {
            var onwer = this._owner;
            globalState.onTapBegan(onwer, logicalPos);
          }
        }
      };
      GridStateMachine.prototype.onTapMoved = function(logicalPos) {
        if (this._currentState && this._currentState instanceof GridStateBase_1.default) {
          var currentState = this._currentState;
          if (this._owner instanceof GridBase_1.default) {
            var onwer = this._owner;
            currentState.onTapMoved(onwer, logicalPos);
          }
        }
        if (this._globalState && this._globalState instanceof GridStateBase_1.default) {
          var globalState = this._globalState;
          if (this._owner instanceof GridBase_1.default) {
            var onwer = this._owner;
            globalState.onTapMoved(onwer, logicalPos);
          }
        }
      };
      GridStateMachine.prototype.onTapEnded = function(logicalPos) {
        if (this._currentState && this._currentState instanceof GridStateBase_1.default) {
          var currentState = this._currentState;
          if (this._owner instanceof GridBase_1.default) {
            var onwer = this._owner;
            currentState.onTapEnded(onwer, logicalPos);
          }
        }
        if (this._globalState && this._globalState instanceof GridStateBase_1.default) {
          var globalState = this._globalState;
          if (this._owner instanceof GridBase_1.default) {
            var onwer = this._owner;
            globalState.onTapEnded(onwer, logicalPos);
          }
        }
      };
      GridStateMachine.prototype.onEvent = function(event) {
        if (this._currentState && this._currentState instanceof GridStateBase_1.default) {
          var currentState = this._currentState;
          if (this._owner instanceof GridBase_1.default) {
            var onwer = this._owner;
            currentState.onEvent(onwer, event);
          }
        }
        if (this._globalState && this._globalState instanceof GridStateBase_1.default) {
          var globalState = this._globalState;
          if (this._owner instanceof GridBase_1.default) {
            var onwer = this._owner;
            globalState.onEvent(onwer, event);
          }
        }
      };
      GridStateMachine.prototype.onRespone = function(event) {
        if (this._currentState && this._currentState instanceof GridStateBase_1.default) {
          var currentState = this._currentState;
          if (this._owner instanceof GridBase_1.default) {
            var onwer = this._owner;
            currentState.onRespone(onwer, event);
          }
        }
        if (this._globalState && this._globalState instanceof GridStateBase_1.default) {
          var globalState = this._globalState;
          if (this._owner instanceof GridBase_1.default) {
            var onwer = this._owner;
            globalState.onRespone(onwer, event);
          }
        }
      };
      return GridStateMachine;
    }(StateMachineBase_1.default);
    exports.default = GridStateMachine;
    cc._RF.pop();
  }, {
    "../../fsm/StateMachineBase": "StateMachineBase",
    "../GridBase": "GridBase",
    "./GridStateBase": "GridStateBase"
  } ],
  GridStateMagicCrystal: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "55515q8Ai5HzqUuvS6fJeK1", "GridStateMagicCrystal");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.GridStateMagicCrystal = exports.AtkPointData = void 0;
    var EntityID_1 = require("../../../defines/EntityID");
    var ItemBase_1 = require("../../../entity/item/ItemBase");
    var ItemFactory_1 = require("../../../entity/item/ItemFactory");
    var ItemStateReplace_1 = require("../../../entity/item/state/ItemStateReplace");
    var GridStateBase_1 = require("../GridStateBase");
    var GridStateConveyer_1 = require("./GridStateConveyer");
    var GridStateMatch_1 = require("./GridStateMatch");
    var GameMath_1 = require("../../../../../extend/utils/GameMath");
    var IGame_1 = require("../../../../../base/IGame");
    var IdentifierManager_1 = require("../../../defines/IdentifierManager");
    var AtkPointData = function() {
      function AtkPointData() {
        this.priority = 1;
        this.x = 0;
        this.y = 0;
        this.beAttacked = false;
      }
      return AtkPointData;
    }();
    exports.AtkPointData = AtkPointData;
    var GridStateMagicCrystal = function(_super) {
      __extends(GridStateMagicCrystal, _super);
      function GridStateMagicCrystal() {
        var _this = _super.call(this, GridStateBase_1.GridState.MagicCrystal) || this;
        _this._magicCrystalVec = [];
        _this._atkPoints = [];
        _this._changeItemPos = [];
        _this._outputIng = false;
        _this._curGrid = null;
        return _this;
      }
      GridStateMagicCrystal.create = function() {
        return new GridStateMagicCrystal();
      };
      GridStateMagicCrystal.prototype.getCurGrid = function() {
        return this._curGrid;
      };
      GridStateMagicCrystal.prototype.enter = function(grid) {
        this._curGrid = grid;
        this.initMagicCryStalItems();
        this.initAtkPotins();
        this._magicCrystalVec.length > 0 ? this.doOutput() : grid.setCurrentState(GridStateConveyer_1.default.create());
      };
      GridStateMagicCrystal.prototype.update = function(grid, delta) {
        if (grid.isObstructsEmpty() && grid.isCommandListEmpty() && this._outputIng) {
          this._outputIng = false;
          this.onMagicCrystalDone();
        }
      };
      GridStateMagicCrystal.prototype.eixt = function(grid) {
        this._magicCrystalVec = null;
        this._atkPoints = null;
        this._changeItemPos = null;
        this._curGrid = null;
      };
      GridStateMagicCrystal.prototype.initMagicCryStalItems = function() {
        this._magicCrystalVec = [];
        var itemMap = this.getCurGrid().getItemsMap();
        for (var key in itemMap) {
          var tmpItem = itemMap[key];
          if (tmpItem.getItemType() == ItemBase_1.ItemType.MagicCrystal) {
            var magicItem = tmpItem;
            magicItem.isCanOutput() && this._magicCrystalVec.push(magicItem);
          }
        }
      };
      GridStateMagicCrystal.prototype.initAtkPotins = function() {
        this._atkPoints = [];
        var cellMap = this.getCurGrid().getCellsMap();
        for (var key in cellMap) {
          var tmpItem = cellMap[key];
          var ptData = new AtkPointData();
          ptData.x = tmpItem.getLogicalPos().x;
          ptData.y = tmpItem.getLogicalPos().y;
          ptData.priority = tmpItem.getCrystalAttackPriority();
          ptData.beAttacked = false;
          this._atkPoints.push(ptData);
        }
        GameMath_1.default.shuffleArray(this._atkPoints);
        this._atkPoints.sort(function(v1, v2) {
          return v1.priority < v2.priority ? -1 : 1;
        });
      };
      GridStateMagicCrystal.prototype.doOutput = function() {
        this._outputIng = true;
        for (var i = 0; i < this._magicCrystalVec.length; i++) {
          var magicItem = this._magicCrystalVec[i];
          if (magicItem) {
            var sequence = cc.sequence(cc.scaleTo(.2, 1.2), cc.scaleTo(.1, 1));
            magicItem.runAction(sequence);
          }
          for (var j = 0; j < magicItem.getAttrNum(); j++) {
            var newItem = ItemFactory_1.default.generateItemWithEntityID(this.getCurGrid(), magicItem.getOutputEntityId());
            if (newItem) {
              var nextPoint = this.getNextAtkPoint(newItem.getEntityColor());
              if (null == nextPoint) break;
              this._changeItemPos.push(cc.v2(nextPoint.x, nextPoint.y));
              newItem.node.setPosition(magicItem.node.getPosition());
              this.getCurGrid().node.addChild(newItem.node, this.getCurGrid().getTopZOrder(newItem.getEntityType(), cc.v2(nextPoint.x, nextPoint.y)));
              newItem.setCurrentState(ItemStateReplace_1.default.create(cc.v2(nextPoint.x, nextPoint.y)));
              IGame_1.default.playAudio(IdentifierManager_1.default.getInstance().getMatchAudioFilePath("magiccrystal"));
            }
          }
        }
      };
      GridStateMagicCrystal.prototype.removeAttackedPoints = function() {
        var index = 0;
        var len = this._atkPoints.length;
        for (var i = 0; i < len; i++) {
          var atkPoint = this._atkPoints[index];
          if (!atkPoint) break;
          atkPoint.beAttacked ? this._atkPoints.splice(index, 0) : index += 1;
        }
      };
      GridStateMagicCrystal.prototype.getNextAtkPoint = function(color) {
        this.removeAttackedPoints();
        if (this._atkPoints.length > 0) for (var i = 0; i < this._atkPoints.length; i++) if (!this._atkPoints[i].beAttacked) {
          var tempItem = this.getCurGrid().getItemAtLogicalPos(cc.v2(this._atkPoints[i].x, this._atkPoints[i].y));
          if (tempItem && tempItem.canTransformByMagicCrystal()) {
            if (color == EntityID_1.EntityColor.None) {
              this._atkPoints[i].beAttacked = true;
              return this._atkPoints[i];
            }
            if (tempItem.getEntityColor() != color) {
              this._atkPoints[i].beAttacked = true;
              return this._atkPoints[i];
            }
          }
        }
        return null;
      };
      GridStateMagicCrystal.prototype.onMagicCrystalDone = function() {
        this.getCurGrid().setCurrentState(GridStateMatch_1.default.create(this._changeItemPos));
      };
      return GridStateMagicCrystal;
    }(GridStateBase_1.default);
    exports.GridStateMagicCrystal = GridStateMagicCrystal;
    cc._RF.pop();
  }, {
    "../../../../../base/IGame": "IGame",
    "../../../../../extend/utils/GameMath": "GameMath",
    "../../../defines/EntityID": "EntityID",
    "../../../defines/IdentifierManager": "IdentifierManager",
    "../../../entity/item/ItemBase": "ItemBase",
    "../../../entity/item/ItemFactory": "ItemFactory",
    "../../../entity/item/state/ItemStateReplace": "ItemStateReplace",
    "../GridStateBase": "GridStateBase",
    "./GridStateConveyer": "GridStateConveyer",
    "./GridStateMatch": "GridStateMatch"
  } ],
  GridStateMatch: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "989e51iet5OzLi7Vp/Vjs2I", "GridStateMatch");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var GameMath_1 = require("../../../../../extend/utils/GameMath");
    var GridCommand_1 = require("../../../commond/GridCommand");
    var EntityEventBase_1 = require("../../../event/EntityEventBase");
    var GridStateBase_1 = require("../GridStateBase");
    var GridStateDrop_1 = require("./GridStateDrop");
    var PowerID_1 = require("../../../defines/PowerID");
    var GridStateLaunchResidentGear_1 = require("./GridStateLaunchResidentGear");
    var GridStateMatch = function(_super) {
      __extends(GridStateMatch, _super);
      function GridStateMatch(checkMatchPositions) {
        var _this = _super.call(this, GridStateBase_1.GridState.MatchItem) || this;
        _this._checkMatchPositions = [];
        _this._checkMatchPositions = checkMatchPositions;
        return _this;
      }
      GridStateMatch.create = function(checkMatchPositions) {
        void 0 === checkMatchPositions && (checkMatchPositions = []);
        return new GridStateMatch(checkMatchPositions);
      };
      GridStateMatch.prototype.enter = function(grid) {
        grid.clearAttackedPostionRecord();
        for (var _i = 0, _a = this._checkMatchPositions; _i < _a.length; _i++) {
          var pos = _a[_i];
          grid.dispatchCommand(pos, GridCommand_1.default.CheckMatch(), 0);
        }
        GameMath_1.default.clearArray(this._checkMatchPositions);
        grid.progressCommand(.001);
        grid.isObstructsEmpty() && grid.isCommandListEmpty() ? grid.setCurrentState(GridStateLaunchResidentGear_1.default.create()) : grid.gainPower(PowerID_1.PowerID.MatchCombo, 1);
      };
      GridStateMatch.prototype.update = function(grid, delta) {
        grid.isObstructsEmpty() && grid.isCommandListEmpty() && grid.setCurrentState(GridStateDrop_1.default.create(this._checkMatchPositions));
      };
      GridStateMatch.prototype.exit = function(grid) {
        this._checkMatchPositions = null;
      };
      GridStateMatch.prototype.onEvent = function(grid, event) {
        if (event.getEventName() == EntityEventBase_1.default.ENTITY_EVENT_KEY && event.getEventType() == EntityEventBase_1.EntityEventType.EntityChanged) {
          var changeEvent = event;
          if (changeEvent) {
            var checkPos = changeEvent.getEntity().getLogicalPos();
            var checkSize = changeEvent.getEntity().getLogicalSize();
            for (var row = 0; row < checkSize.height; row++) for (var column = 0; column < checkSize.width; column++) {
              var changedPos = checkPos.add(cc.v2(column, row));
              GameMath_1.default.insertAsSet(this._checkMatchPositions, changedPos);
            }
          }
        }
      };
      return GridStateMatch;
    }(GridStateBase_1.default);
    exports.default = GridStateMatch;
    cc._RF.pop();
  }, {
    "../../../../../extend/utils/GameMath": "GameMath",
    "../../../commond/GridCommand": "GridCommand",
    "../../../defines/PowerID": "PowerID",
    "../../../event/EntityEventBase": "EntityEventBase",
    "../GridStateBase": "GridStateBase",
    "./GridStateDrop": "GridStateDrop",
    "./GridStateLaunchResidentGear": "GridStateLaunchResidentGear"
  } ],
  GridStateNoMoreStep: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "1fc99ox34ZAW40tIhrgy7G6", "GridStateNoMoreStep");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var GridStateBase_1 = require("../GridStateBase");
    var GridStateNoMoreStep = function(_super) {
      __extends(GridStateNoMoreStep, _super);
      function GridStateNoMoreStep() {
        return _super.call(this, GridStateBase_1.GridState.NoMoreStep) || this;
      }
      GridStateNoMoreStep.create = function() {
        return new GridStateNoMoreStep();
      };
      GridStateNoMoreStep.prototype.enter = function(grid) {
        grid.noMoreStep();
      };
      return GridStateNoMoreStep;
    }(GridStateBase_1.default);
    exports.default = GridStateNoMoreStep;
    cc._RF.pop();
  }, {
    "../GridStateBase": "GridStateBase"
  } ],
  GridStateNull: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "fb1ceqsLEtLBJiuW7YcZCh2", "GridStateNull");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var GridStateBase_1 = require("../GridStateBase");
    var GridStateNull = function(_super) {
      __extends(GridStateNull, _super);
      function GridStateNull() {
        return _super.call(this, GridStateBase_1.GridState.Null) || this;
      }
      GridStateNull.create = function() {
        return new GridStateNull();
      };
      GridStateNull.prototype.enter = function(entity) {
        cc.log("onEnter");
      };
      GridStateNull.prototype.update = function(entity, delta) {
        cc.log("Update:");
      };
      GridStateNull.prototype.exit = function(entity) {
        cc.log("Exit:");
      };
      GridStateNull.prototype.onTapBegan = function(grid, logicalPos) {
        cc.log("onTapBegan:");
        cc.log(logicalPos);
      };
      GridStateNull.prototype.onTapMoved = function(grid, logicalPos) {
        cc.log("onTapMoved:");
        cc.log(logicalPos);
      };
      GridStateNull.prototype.onTapEnded = function(grid, logicalPos) {
        cc.log("onTapEnded:");
        cc.log(logicalPos);
      };
      GridStateNull.prototype.onEvent = function(grid, event) {};
      GridStateNull.prototype.onRespone = function(grid, event) {};
      return GridStateNull;
    }(GridStateBase_1.default);
    exports.default = GridStateNull;
    cc._RF.pop();
  }, {
    "../GridStateBase": "GridStateBase"
  } ],
  GridStatePrepare: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "43df47umgZJKaK1rD8ThjG9", "GridStatePrepare");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var GridStateBase_1 = require("../GridStateBase");
    var GridStatePrepare = function(_super) {
      __extends(GridStatePrepare, _super);
      function GridStatePrepare() {
        return _super.call(this, GridStateBase_1.GridState.Prepare) || this;
      }
      GridStatePrepare.create = function() {
        return new GridStatePrepare();
      };
      GridStatePrepare.prototype.enter = function(grid) {
        grid.showReplayPrepareUI();
      };
      GridStatePrepare.prototype.start = function() {};
      return GridStatePrepare;
    }(GridStateBase_1.default);
    exports.default = GridStatePrepare;
    cc._RF.pop();
  }, {
    "../GridStateBase": "GridStateBase"
  } ],
  GridStateShuffle: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "07568gxavdFzLyeO0YSUTHh", "GridStateShuffle");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var GridStateBase_1 = require("../GridStateBase");
    var GridStateStalemate_1 = require("./GridStateStalemate");
    var ItemStateShuffle_1 = require("../../../entity/item/state/ItemStateShuffle");
    var GridStateSwapNeighbour_1 = require("./GridStateSwapNeighbour");
    var GridStateShuffle = function(_super) {
      __extends(GridStateShuffle, _super);
      function GridStateShuffle() {
        return _super.call(this, GridStateBase_1.GridState.Shuffle) || this;
      }
      GridStateShuffle.create = function() {
        return new GridStateShuffle();
      };
      GridStateShuffle.prototype.enter = function(grid) {
        var positions = [];
        var itemsMap = grid.getItemsMap();
        for (var key in itemsMap) {
          var item = itemsMap[key];
          positions.push(item.getLogicalPos());
        }
        var result = this.shuffleGrid(grid, positions);
        if (result.length <= 0) grid.setCurrentState(GridStateStalemate_1.default.create()); else for (var _i = 0, result_1 = result; _i < result_1.length; _i++) {
          var info = result_1[_i];
          var item = info.first;
          var swapPair = info.second;
          var fromPos = swapPair.first;
          var toPos = swapPair.second;
          item.setCurrentState(ItemStateShuffle_1.default.create(fromPos, toPos));
        }
      };
      GridStateShuffle.prototype.update = function(grid, delta) {
        grid.isObstructsEmpty() && grid.isCommandListEmpty() && grid.setCurrentState(GridStateSwapNeighbour_1.default.create());
      };
      return GridStateShuffle;
    }(GridStateBase_1.default);
    exports.default = GridStateShuffle;
    cc._RF.pop();
  }, {
    "../../../entity/item/state/ItemStateShuffle": "ItemStateShuffle",
    "../GridStateBase": "GridStateBase",
    "./GridStateStalemate": "GridStateStalemate",
    "./GridStateSwapNeighbour": "GridStateSwapNeighbour"
  } ],
  GridStateStalemate: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "3309e86uX1D+5TIe/Jq8JyN", "GridStateStalemate");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var GridStateBase_1 = require("../GridStateBase");
    var GridStateStalemate = function(_super) {
      __extends(GridStateStalemate, _super);
      function GridStateStalemate() {
        return _super.call(this, GridStateBase_1.GridState.Stalemate) || this;
      }
      GridStateStalemate.create = function() {
        return new GridStateStalemate();
      };
      GridStateStalemate.prototype.enter = function(grid) {
        grid.stalemate();
      };
      return GridStateStalemate;
    }(GridStateBase_1.default);
    exports.default = GridStateStalemate;
    cc._RF.pop();
  }, {
    "../GridStateBase": "GridStateBase"
  } ],
  GridStateSwapNeighbour: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "19d63PdQvtL5qnikVphQ9YY", "GridStateSwapNeighbour");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var IGame_1 = require("../../../../../base/IGame");
    var GameConfig_1 = require("../../../../../define/GameConfig");
    var GameMath_1 = require("../../../../../extend/utils/GameMath");
    var GridCommand_1 = require("../../../commond/GridCommand");
    var IdentifierManager_1 = require("../../../defines/IdentifierManager");
    var PowerID_1 = require("../../../defines/PowerID");
    var ItemStateSwap_1 = require("../../../entity/item/state/ItemStateSwap");
    var GridBase_1 = require("../../GridBase");
    var GridStateBase_1 = require("../GridStateBase");
    var GridStateCompleteBanner_1 = require("./GridStateCompleteBanner");
    var GridStateMatch_1 = require("./GridStateMatch");
    var GridStateNoMoreStep_1 = require("./GridStateNoMoreStep");
    var GridStateShuffle_1 = require("./GridStateShuffle");
    var GridStateSwapNeighbour = function(_super) {
      __extends(GridStateSwapNeighbour, _super);
      function GridStateSwapNeighbour() {
        var _this = _super.call(this, GridStateBase_1.GridState.SwapNeighbour) || this;
        _this._AIOpratedWaitDuration = 0;
        _this._checkPositions = [];
        _this._checkIndex = 0;
        _this._availableSwaps = [];
        _this._availableSwapsSorted = false;
        _this._tipSwapIndex = 0;
        _this._swapPosA = GameMath_1.default.INVALID_LOGICAL_POSITION.clone();
        _this._swapPosB = GameMath_1.default.INVALID_LOGICAL_POSITION.clone();
        _this._itemSwaped = true;
        _this._selectedItem = null;
        _this._touchInterval = 0;
        _this._tipInterval = 0;
        return _this;
      }
      GridStateSwapNeighbour.create = function() {
        return new GridStateSwapNeighbour();
      };
      GridStateSwapNeighbour.prototype.enter = function(grid) {
        grid.setPowerAmount(PowerID_1.PowerID.MatchCombo, 0);
        if (grid.isComplete()) grid.setCurrentState(GridStateCompleteBanner_1.default.create()); else if (grid.isFailed()) grid.setCurrentState(GridStateNoMoreStep_1.default.create()); else {
          var mode = grid.getMode();
          switch (mode) {
           case GridBase_1.GridMode.Normal:
            this.hasAvailableSwap(grid) ? this.statisticsCheckPositions(grid) : grid.setCurrentState(GridStateShuffle_1.default.create());
            break;

           case GridBase_1.GridMode.ForceClean:
           case GridBase_1.GridMode.ForceSwap:
           case GridBase_1.GridMode.CrossBomb:
            grid.tryEnableMode(mode);
          }
          this._itemSwaped = false;
          grid.beforePlayerOperated();
        }
      };
      GridStateSwapNeighbour.prototype.statisticsCheckPositions = function(grid) {
        var itemsMap = grid.getItemsMap();
        GameMath_1.default.clearArray(this._availableSwaps);
        for (var key in itemsMap) {
          var item = itemsMap[key];
          this._checkPositions.push(item.getLogicalPos());
        }
        this._checkIndex = 0;
        this._tipSwapIndex = -1;
        this._tipInterval = 0;
        this._availableSwapsSorted = false;
      };
      GridStateSwapNeighbour.prototype.checkAvailableSwap = function(grid, pos) {
        var offsets = [ cc.v2(1, 0), cc.v2(-1, 0), cc.v2(0, 1), cc.v2(0, -1) ];
        for (var _i = 0, offsets_1 = offsets; _i < offsets_1.length; _i++) {
          var offset = offsets_1[_i];
          var answer = this.getAvailableSwapInfo(grid, pos, pos.add(offset));
          answer && this._availableSwaps.push(answer);
        }
      };
      GridStateSwapNeighbour.prototype.statisticsAvailableSwap = function(grid) {
        if (!this._itemSwaped) {
          var startTime = new Date().getTime();
          var checkPosCount = 0;
          while (1) {
            var timeDelta = new Date().getTime() - startTime;
            if (timeDelta >= 40 && checkPosCount > 0) break;
            if (this._checkIndex >= this._checkPositions.length) {
              if (!this._availableSwapsSorted) {
                this._availableSwaps.sort(function(lhs, rhs) {
                  return lhs.value > rhs.value ? -1 : 1;
                });
                this._availableSwapsSorted = true;
              }
              break;
            }
            this.checkAvailableSwap(grid, this._checkPositions[this._checkIndex]);
            this._checkIndex += 1;
            checkPosCount += 1;
          }
        }
      };
      GridStateSwapNeighbour.prototype.tipSwap = function(grid) {
        this._tipInterval = 0;
        if (this._availableSwaps.length <= 0) return;
        IGame_1.default.playAudio(IdentifierManager_1.default.getInstance().getMatchAudioFilePath("hint"));
        var newIndex = (this._tipSwapIndex + 1) % GridStateSwapNeighbour.MAX_TIP_SWAP_COUNT % this._availableSwaps.length;
        this.unTipSwap(grid);
        this._tipSwapIndex = newIndex;
        var swapInfo = this._availableSwaps[this._tipSwapIndex];
        var item = grid.getItemAtLogicalPos(swapInfo.swapPair.first);
        item.tipSlide(swapInfo.swapPair.second);
        for (var _i = 0, _a = swapInfo.linkedPositions; _i < _a.length; _i++) {
          var pos = _a[_i];
          if (!pos.equals(swapInfo.swapPair.second)) {
            var item_1 = grid.getItemAtLogicalPos(pos);
            item_1 && item_1.shake();
          }
        }
      };
      GridStateSwapNeighbour.prototype.unTipSwap = function(grid) {
        if (this._availableSwaps.length <= 0) return;
        if (this._tipSwapIndex < 0) return;
        var swapInfo = this._availableSwaps[this._tipSwapIndex];
        var item = grid.getItemAtLogicalPos(swapInfo.swapPair.first);
        item && item.untipSlide();
        for (var _i = 0, _a = swapInfo.linkedPositions; _i < _a.length; _i++) {
          var pos = _a[_i];
          if (!pos.equals(swapInfo.swapPair.second)) {
            var item_2 = grid.getItemAtLogicalPos(pos);
            item_2 && item_2.unshake();
          }
        }
        this._tipInterval = 0;
      };
      GridStateSwapNeighbour.prototype.canEliminateBySwapAtPos = function(grid, logicalPosA, logicalPosB) {
        var rootItem = grid.getItemAtLogicalPos(logicalPosA);
        if (!rootItem) return false;
        return rootItem.canExcuteCommand(GridCommand_1.default.NeighbourSwap(logicalPosB));
      };
      GridStateSwapNeighbour.prototype.trySwapItem = function(grid, logicalPosA, logicalPosB) {
        if (this._itemSwaped || !grid.isObstructsEmpty()) return false;
        if (this.canSwapItem(grid, logicalPosA, logicalPosB)) {
          this.unTipSwap(grid);
          this._swapPosA = logicalPosA;
          this._swapPosB = logicalPosB;
          var itemA = grid.getItemAtLogicalPos(this._swapPosA);
          var itemB = grid.getItemAtLogicalPos(this._swapPosB);
          grid.swapItem(this._swapPosA, this._swapPosB);
          itemA.setCurrentState(ItemStateSwap_1.default.create(this._swapPosA, this._swapPosB));
          itemB.setCurrentState(ItemStateSwap_1.default.create(this._swapPosB, this._swapPosA));
          if (this._selectedItem) {
            this._selectedItem.unselected();
            this._selectedItem = null;
          }
          this._touchInterval = 0;
          this._itemSwaped = true;
          return true;
        }
        return false;
      };
      GridStateSwapNeighbour.prototype.afterSwap = function(grid) {
        if (!this._itemSwaped) return;
        if (this.canEliminateBySwapAtPos(grid, this._swapPosA, this._swapPosB) || this.canEliminateBySwapAtPos(grid, this._swapPosB, this._swapPosA)) {
          grid.setPowerAmount(PowerID_1.PowerID.DyeingItem, 1);
          grid.setPowerAmount(PowerID_1.PowerID.SpreadHoney, 1);
          grid.setPowerAmount(PowerID_1.PowerID.ConveyerMove, 1);
          grid.setPowerAmount(PowerID_1.PowerID.HoneyResist, 0);
          grid.gainPower(PowerID_1.PowerID.UsedSwap, 1);
          grid.updateStepBarUIWithDelta(-1);
          grid.lossPower(PowerID_1.PowerID.AvailableSwap, 1);
          var commandA = GridCommand_1.default.NeighbourSwap(this._swapPosB);
          var commandB = GridCommand_1.default.NeighbourSwap(this._swapPosA);
          grid.dispatchCommand(this._swapPosB, commandB, 0);
          grid.dispatchCommand(this._swapPosA, commandA, 0);
          grid.onPlayerOperated();
          grid.setCurrentState(GridStateMatch_1.default.create());
        } else {
          var itemA = grid.getItemAtLogicalPos(this._swapPosA);
          var itemB = grid.getItemAtLogicalPos(this._swapPosB);
          grid.swapItem(this._swapPosA, this._swapPosB);
          itemA.setCurrentState(ItemStateSwap_1.default.create(this._swapPosA, this._swapPosB));
          itemB.setCurrentState(ItemStateSwap_1.default.create(this._swapPosB, this._swapPosA));
          IGame_1.default.playAudio(IdentifierManager_1.default.getInstance().getMatchAudioFilePath("prohibition_exchange"));
          this._selectedItem = null;
          this._touchInterval = 0;
          this._itemSwaped = false;
        }
      };
      GridStateSwapNeighbour.prototype.update = function(grid, delta) {
        this.statisticsAvailableSwap(grid);
        if (!this._itemSwaped && this._tipInterval < GridStateSwapNeighbour.TIP_SWAP_INTERVAL) {
          this._tipInterval += delta;
          this._tipInterval >= GridStateSwapNeighbour.TIP_SWAP_INTERVAL && this.tipSwap(grid);
        }
        this._itemSwaped && grid.isObstructsEmpty() && this.afterSwap(grid);
        this._AIOpratedWaitDuration += delta;
        if (this._AIOpratedWaitDuration >= 0 && GameConfig_1.default.EnableAutoPilot && !this._itemSwaped && grid.isObstructsEmpty() && this._availableSwapsSorted) {
          var swapIndex = GameMath_1.default.randomInt(0, this._availableSwaps.length - 1);
          var swapInfo = this._availableSwaps[swapIndex];
          var swapPosA = swapInfo.swapPair.first;
          var swapPosB = swapInfo.swapPair.second;
          this.trySwapItem(grid, swapPosA, swapPosB);
        }
      };
      GridStateSwapNeighbour.prototype.exit = function(grid) {
        this._checkPositions = null;
        this._availableSwaps = null;
        this._swapPosA = null;
        this._swapPosB = null;
        this._selectedItem = null;
      };
      GridStateSwapNeighbour.prototype.onTapBegan = function(grid, logicalPos) {
        if (this._itemSwaped || !grid.isObstructsEmpty()) return;
        var item = grid.getItemAtLogicalPos(logicalPos);
        if (!item) return;
        if (item === this._selectedItem) this._touchInterval <= GridStateSwapNeighbour.DOUBLE_CLICK_INTERVAL || (this._touchInterval = 0); else if (this._selectedItem) {
          var fromPos = this._selectedItem.getLogicalPos();
          if (!this.trySwapItem(grid, fromPos, logicalPos) && item.canSwap()) {
            this._selectedItem.unselected();
            item.selected();
            this._selectedItem = item;
            this._touchInterval = 0;
          }
        } else if (item.canSwap()) {
          item.selected();
          this._selectedItem = item;
          this._touchInterval = 0;
        }
      };
      GridStateSwapNeighbour.prototype.onTapMoved = function(grid, logicalPos) {
        if (null == this._selectedItem) return;
        if (this._itemSwaped || !grid.isObstructsEmpty()) return;
        var fromPos = this._selectedItem.getLogicalPos();
        this.trySwapItem(grid, fromPos, logicalPos);
      };
      GridStateSwapNeighbour.prototype.onTapEnded = function(grid, logicalPos) {};
      GridStateSwapNeighbour.prototype.onEvent = function(grid, event) {};
      GridStateSwapNeighbour.prototype.onRespone = function(grid, event) {};
      GridStateSwapNeighbour.prototype.canChangeState = function() {
        return true;
      };
      GridStateSwapNeighbour.prototype.canPause = function() {
        return true;
      };
      GridStateSwapNeighbour.DOUBLE_CLICK_INTERVAL = .25;
      GridStateSwapNeighbour.TIP_SWAP_INTERVAL = 5;
      GridStateSwapNeighbour.MAX_TIP_SWAP_COUNT = 3;
      return GridStateSwapNeighbour;
    }(GridStateBase_1.default);
    exports.default = GridStateSwapNeighbour;
    cc._RF.pop();
  }, {
    "../../../../../base/IGame": "IGame",
    "../../../../../define/GameConfig": "GameConfig",
    "../../../../../extend/utils/GameMath": "GameMath",
    "../../../commond/GridCommand": "GridCommand",
    "../../../defines/IdentifierManager": "IdentifierManager",
    "../../../defines/PowerID": "PowerID",
    "../../../entity/item/state/ItemStateSwap": "ItemStateSwap",
    "../../GridBase": "GridBase",
    "../GridStateBase": "GridStateBase",
    "./GridStateCompleteBanner": "GridStateCompleteBanner",
    "./GridStateMatch": "GridStateMatch",
    "./GridStateNoMoreStep": "GridStateNoMoreStep",
    "./GridStateShuffle": "GridStateShuffle"
  } ],
  Heap: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "05cdfc+9C5H/5CmU019ZKx0", "Heap");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Heap = function() {
      function Heap(compareFunc, equalsFunc) {
        this.elements = [];
        this.compareFunc = null;
        this.equalsFunc = null;
        this.compareFunc = compareFunc;
        this.equalsFunc = equalsFunc;
      }
      Heap.prototype.getElements = function() {
        return this.elements;
      };
      Heap.prototype.isEmpty = function() {
        return this.elements.length <= 0;
      };
      Heap.prototype.length = function() {
        return this.elements.length;
      };
      Heap.prototype.peek = function() {
        return this.elements[0];
      };
      Heap.prototype.leftChildIndexFromIndex = function(index) {
        return 2 * index + 1;
      };
      Heap.prototype.rightChildIndexFromIndex = function(index) {
        return 2 * index + 2;
      };
      Heap.prototype.parentIndexFormIndex = function(index) {
        return Math.floor((index - 1) / 2);
      };
      Heap.prototype.indexOf = function(element) {
        return this._indexOf(element, 0);
      };
      Heap.prototype.push = function(element) {
        this.elements.push(element);
        this.shiftUpFromIndex(this.length() - 1);
      };
      Heap.prototype.pop = function() {
        if (!this.isEmpty()) {
          var temp = this.elements[0];
          this.elements[0] = this.elements[this.length() - 1];
          this.elements[this.length() - 1] = temp;
          var result = this.elements.pop();
          this.shiftDownFormIndex(0);
          return result;
        }
        return null;
      };
      Heap.prototype.removeAtIndex = function(index) {
        if (index < this.length()) {
          var temp = this.elements[index];
          this.elements[index] = this.elements[this.length() - 1];
          this.elements[this.length() - 1] = temp;
          var removeElement = this.elements.pop();
          this.shiftDownFormIndex(index);
          this.shiftUpFromIndex(index);
          return removeElement;
        }
        return null;
      };
      Heap.prototype._indexOf = function(element, fromIndex) {
        if (fromIndex >= this.length()) return -1;
        if (this.compareFunc(element, this.elements[fromIndex])) return -1;
        if (this.equalsFunc(element, this.elements[fromIndex])) return fromIndex;
        var leftSearchIndex = this._indexOf(element, this.leftChildIndexFromIndex(fromIndex));
        if (-1 != leftSearchIndex) return leftSearchIndex;
        var rightSearchIndex = this._indexOf(element, this.rightChildIndexFromIndex(fromIndex));
        if (-1 != rightSearchIndex) return rightSearchIndex;
        return -1;
      };
      Heap.prototype.shiftUpFromIndex = function(index) {
        var parentIndex = this.parentIndexFormIndex(index);
        if (parentIndex >= 0 && this.compareFunc(this.elements[index], this.elements[parentIndex])) {
          var temp = this.elements[index];
          this.elements[index] = this.elements[parentIndex];
          this.elements[parentIndex] = temp;
          this.shiftUpFromIndex(parentIndex);
        }
      };
      Heap.prototype.shiftDownFormIndex = function(index) {
        var candidate = index;
        var leftChildIndex = this.leftChildIndexFromIndex(index);
        leftChildIndex < this.length() && this.compareFunc(this.elements[leftChildIndex], this.elements[candidate]) && (candidate = leftChildIndex);
        var rightChildIndex = this.rightChildIndexFromIndex(index);
        rightChildIndex < this.length() && this.compareFunc(this.elements[rightChildIndex], this.elements[candidate]) && (candidate = rightChildIndex);
        if (candidate == index) return;
        var temp = this.elements[index];
        this.elements[index] = this.elements[candidate];
        this.elements[candidate] = temp;
        this.shiftDownFormIndex(candidate);
      };
      return Heap;
    }();
    exports.default = Heap;
    cc._RF.pop();
  }, {} ],
  IGame: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "d3c53Frx6dPqrQ4s6+eC2Bo", "IGame");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var AudioManager_1 = require("../extend/audio/AudioManager");
    var IGame = function() {
      function IGame() {}
      IGame.init = function() {
        return true;
      };
      IGame.playAudio = function(Music, Volume, loop, succFunc) {
        void 0 === Volume && (Volume = 1);
        void 0 === loop && (loop = false);
        void 0 === succFunc && (succFunc = null);
        return AudioManager_1.default.getInstance().play(Music, Volume, loop, false, succFunc);
      };
      IGame.playAudioBGM = function(Music, Volume, succFunc) {
        void 0 === Volume && (Volume = 1);
        void 0 === succFunc && (succFunc = null);
        AudioManager_1.default.getInstance().play(Music, 1, true, true, succFunc);
      };
      IGame.stopBGM = function() {
        return AudioManager_1.default.getInstance().stopBGM();
      };
      IGame.stopAudio = function(MusicId) {
        return AudioManager_1.default.getInstance().stop(MusicId);
      };
      IGame.stopAudioAll = function() {
        return AudioManager_1.default.getInstance().stopAll();
      };
      return IGame;
    }();
    exports.default = IGame;
    cc._RF.pop();
  }, {
    "../extend/audio/AudioManager": "AudioManager"
  } ],
  IdentifierManager: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "7bf495j3RNPW7x3caczebUw", "IdentifierManager");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var CollectionID_1 = require("./CollectionID");
    var EntityGroupID_1 = require("./EntityGroupID");
    var EntityID_1 = require("./EntityID");
    var ItemInfoManager_1 = require("./ItemInfoManager");
    var KindID_1 = require("./KindID");
    var CollectionGroupID_1 = require("./CollectionGroupID");
    var IdentifierManager = function() {
      function IdentifierManager() {
        CollectionID_1.CollectionIDManager.getInstance();
        EntityID_1.EntityIDManager.getInstance();
        EntityGroupID_1.default.getInstance();
        KindID_1.KindIDManager.getInstance();
        ItemInfoManager_1.default.getInstance();
      }
      IdentifierManager.getInstance = function() {
        null == this.instance && (this.instance = new IdentifierManager());
        return this.instance;
      };
      IdentifierManager.prototype.getColorWithEntityColor = function(color) {
        var result = cc.Color.WHITE;
        switch (color) {
         case EntityID_1.EntityColor.Red:
          result = cc.color(255, 0, 0, 255);
          break;

         case EntityID_1.EntityColor.Green:
          result = cc.color(0, 255, 7, 255);
          break;

         case EntityID_1.EntityColor.Blue:
          result = cc.color(0, 137, 255, 255);
          break;

         case EntityID_1.EntityColor.Yellow:
          result = cc.color(255, 255, 0, 255);
          break;

         case EntityID_1.EntityColor.Orange:
          result = cc.color(255, 124, 0, 255);
          break;

         case EntityID_1.EntityColor.Purple:
          result = cc.color(255, 25, 193, 255);
        }
        return result;
      };
      IdentifierManager.prototype.getCollectionIDFromString = function(name) {
        return CollectionID_1.CollectionIDManager.getInstance().getCollectionIDFromString(name);
      };
      IdentifierManager.prototype.getCollectionNameFromID = function(collectionID) {
        return CollectionID_1.CollectionIDManager.getInstance().getCollectionNameFromID(collectionID);
      };
      IdentifierManager.prototype.getFrameNameFromCollectionID = function(collectionID) {
        return CollectionID_1.CollectionIDManager.getInstance().getFrameNameFromCollectionID(collectionID);
      };
      IdentifierManager.prototype.getCollectionGroupIDFromString = function(name) {
        return CollectionGroupID_1.default.getInstance().getCollectionGroupIDFromString(name);
      };
      IdentifierManager.prototype.getCollectionIDsFromCollectionGroupID = function(collectionGroupID) {
        return CollectionGroupID_1.default.getInstance().getCollectionIDsFromCollectionGroupID(collectionGroupID);
      };
      IdentifierManager.prototype.getEntityIDFromString = function(name) {
        return EntityID_1.EntityIDManager.getInstance().getEntityIDFromString(name);
      };
      IdentifierManager.prototype.getFrameNameFromEntityID = function(entityID) {
        return EntityID_1.EntityIDManager.getInstance().getFrameNameFromEntityID(entityID);
      };
      IdentifierManager.prototype.getHurtAnimationInfoPathFromEntityID = function(entityID) {
        return EntityID_1.EntityIDManager.getInstance().getHurtAnimationInfoFromEntityID(entityID);
      };
      IdentifierManager.prototype.getEntityIDFromKindID = function(kindID) {
        return KindID_1.KindIDManager.getInstance().getEntityIDFromKindID(kindID);
      };
      IdentifierManager.prototype.getEntityColorWithEntityID = function(entityID) {
        return EntityID_1.EntityIDManager.getInstance().getEntityColorWithEntityID(entityID);
      };
      IdentifierManager.prototype.needLayoutGrassFromKindID = function(kindID) {
        return KindID_1.KindIDManager.getInstance().needLayoutGrassFromKindID(kindID);
      };
      IdentifierManager.prototype.getEntityGroupIDFromString = function(name) {
        return EntityGroupID_1.default.getInstance().getEntityGroupIDFromString(name);
      };
      IdentifierManager.prototype.getFrameNameFromEntityGroupID = function(groupID) {
        return EntityGroupID_1.default.getInstance().getFrameNameFromEntityGroupID(groupID);
      };
      IdentifierManager.prototype.getEntityIDsFromEntityGroupID = function(groupID) {
        return EntityGroupID_1.default.getInstance().getEntityIDsFromEntityGroupID(groupID);
      };
      IdentifierManager.prototype.getEntityGroupIDFromEntityID = function(entityID) {
        return EntityGroupID_1.default.getInstance().getEntityGroupIDFromEntityID(entityID);
      };
      IdentifierManager.prototype.getItemInfoFromItemID = function(itemID) {
        return ItemInfoManager_1.default.getInstance().getItemInfoFromItemID(itemID);
      };
      IdentifierManager.prototype.getItemIDFromName = function(name) {
        return ItemInfoManager_1.default.getInstance().getItemIDFromName(name);
      };
      IdentifierManager.prototype.getDefaultButterflyPriorityFromEntityID = function(entityID) {
        return EntityID_1.EntityIDManager.getInstance().getDefaultButterflyPriorityFromEntityID(entityID);
      };
      IdentifierManager.prototype.getCorrespondingNormlaEntityID = function(entityID) {
        return EntityID_1.EntityIDManager.getInstance().getCorrespondingNormlaEntityID(entityID);
      };
      IdentifierManager.prototype.phraseTokens = function(types) {
        var result = types.split("|");
        return result;
      };
      IdentifierManager.prototype.phraseKeyValuePairs = function(keyString, valueString) {
        var result = {};
        var keys = this.phraseTokens(keyString);
        var values = this.phraseTokens(valueString);
        var count = keys.length;
        for (var index = 0; index < count; index++) {
          var key = keys[index];
          var value = values[index];
          result[key] = value;
        }
        return result;
      };
      IdentifierManager.prototype.getMatchAudioFilePath = function(fileName) {
        return "audio/match/" + fileName;
      };
      IdentifierManager.instance = null;
      return IdentifierManager;
    }();
    exports.default = IdentifierManager;
    cc._RF.pop();
  }, {
    "./CollectionGroupID": "CollectionGroupID",
    "./CollectionID": "CollectionID",
    "./EntityGroupID": "EntityGroupID",
    "./EntityID": "EntityID",
    "./ItemInfoManager": "ItemInfoManager",
    "./KindID": "KindID"
  } ],
  IdentifyNodeManager: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "fff94U8ONpAL4qXm7LeXCIc", "IdentifyNodeManager");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.IdentifyNodeRegistData = exports.NodeID = void 0;
    var NodeID = function() {
      function NodeID() {}
      NodeID.WholeWindow = "WholeWindow";
      NodeID.Common_CurrencyBar = "Common_CurrencyBar";
      NodeID.MainScene_PrepareButton = "MainScene_PrepareButton";
      NodeID.MainScene_PetTrainBar = "MainScene_PetTrainBar";
      NodeID.MainScene_FeedButton = "MainScene_FeedButton";
      NodeID.MainScene_BathButton = "MainScene_BathButton";
      NodeID.MainScene_SleepButton = "MainScene_SleepButton";
      NodeID.MainScene_DigGoldButton = "MainScene_DigGoldButton";
      NodeID.MainScene_PetInformationPanel = "MainScene_PetInformationPanel";
      NodeID.MainScene_UpgradeButton = "MainScene_UpgradeButton";
      NodeID.MainScene_PetHouseButton = "MainScene_PetHouseButton";
      NodeID.PetListPanel_FeedButton = "PetListPanel_FeedButton";
      NodeID.PetListPanel_BathButton = "PetListPanel_BathButton";
      NodeID.PetListPanel_SleepButton = "PetListPanel_SleepButton";
      NodeID.PetListPanel_CloseButton = "PetListPanel_CloseButton";
      NodeID.StartGamePanel_StartButton = "StartGamePanel_StartButton";
      NodeID.StartGamePanel_PowerupBeginLine = "StartGamePanel_PowerupBeginLine";
      NodeID.StartGamePanel_PowerupBeginRange = "StartGamePanel_PowerupBeginRange";
      NodeID.StartGamePanel_PowerupBeginRainbow = "StartGamePanel_PowerupBeginRainbow";
      NodeID.MatchScene_HammerButton = "MatchScene_HammerButton";
      NodeID.MatchScene_BombButton = "MatchScene_BombButton";
      NodeID.MatchScene_SwapButton = "MatchScene_SwapButton";
      NodeID.MatchScene_TargetBar = "MatchScene_TargetBar";
      NodeID.MatchScene_FoodIcon = "MatchScene_FoodIcon";
      NodeID.MatchScene_SoapIcon = "MatchScene_SoapIcon";
      NodeID.MatchScene_EyepatchIcon = "MatchScene_EyepatchIcon";
      NodeID.MatchScene_HoeIcon = "MatchScene_HoeIcon";
      NodeID.MatchScene_CoinIcon = "MatchScene_CoinIcon";
      NodeID.MatchScene_SoapAndEyepatchIcon = "MatchScene_SoapAndEyepatchIcon";
      NodeID.FeedScene_QuitButton = "FeedScene_QuitButton";
      NodeID.FeedScene_PetInformationPanel = "FeedScene_PetInformationPanel";
      NodeID.BathScene_QuitButton = "BathScene_QuitButton";
      NodeID.BathScene_PetInformationPanel = "BathScene_PetInformationPanel";
      NodeID.SleepScene_QuitButton = "SleepScene_QuitButton";
      NodeID.SleepScene_PetInformationPanel = "SleepScene_PetInformationPanel";
      NodeID.DigGoldScene_HoeAmountBar = "DigGoldScene_HoeAmountBar";
      NodeID.DigGoldScene_GoldListItem1 = "DigGoldScene_GoldListItem1";
      NodeID.DigGoldScene_DogListItem1 = "DigGoldScene_DogListItem1";
      NodeID.DigGoldScene_SelectDogCostBar = "DigGoldScene_SelectDogCostBar";
      NodeID.DigGoldScene_SelectDogDigButton = "DigGoldScene_SelectDogDigButton";
      NodeID.DigGoldScene_QuitButton = "DigGoldScene_QuitButton";
      NodeID.DigGoldScene_ReceiveRewardButton = "DigGoldScene_ReceiveRewardButton";
      NodeID.UpgradePanel_PropertyBar = "UpgradePanel_PropertyBar";
      NodeID.UpgradePanel_TerminateButton = "UpgradePanel_TerminateButton";
      return NodeID;
    }();
    exports.NodeID = NodeID;
    var IdentifyNodeRegistData = function() {
      function IdentifyNodeRegistData() {
        this.retainCount = 0;
        this.node = null;
      }
      IdentifyNodeRegistData.create = function(count, node) {
        var result = new IdentifyNodeRegistData();
        result.retainCount = count;
        result.node = node;
        return result;
      };
      return IdentifyNodeRegistData;
    }();
    exports.IdentifyNodeRegistData = IdentifyNodeRegistData;
    var IdentifyNodeManager = function() {
      function IdentifyNodeManager() {
        this._nodeMap = {};
      }
      IdentifyNodeManager.getInstance = function() {
        null == this.instance && (this.instance = new IdentifyNodeManager());
        return this.instance;
      };
      IdentifyNodeManager.prototype.regist = function(identifier, node) {
        if (identifier && "" != identifier) if (this._nodeMap.hasOwnProperty(identifier)) {
          var oldData = this._nodeMap[identifier];
          oldData.retainCount += 1;
        } else this._nodeMap[identifier] = IdentifyNodeRegistData.create(1, node);
      };
      IdentifyNodeManager.prototype.logout = function(identifier) {
        if ("" != identifier) {
          var data = this._nodeMap[identifier];
          if (data) {
            data.retainCount -= 1;
            data.retainCount <= 0 && delete this._nodeMap[identifier];
          }
        }
      };
      IdentifyNodeManager.prototype.getNode = function(identifier) {
        if (identifier == NodeID.WholeWindow) return cc.find("Canvas");
        var data = this._nodeMap[identifier];
        return data ? data.node : null;
      };
      IdentifyNodeManager.instance = null;
      return IdentifyNodeManager;
    }();
    exports.default = IdentifyNodeManager;
    cc._RF.pop();
  }, {} ],
  ItemBalloon: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "00c0ahqnctKfpfTcYU7wJpp", "ItemBalloon");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var GameMath_1 = require("../../../../../extend/utils/GameMath");
    var CollectionID_1 = require("../../../defines/CollectionID");
    var EntityID_1 = require("../../../defines/EntityID");
    var TMXConfigInfoKeys_1 = require("../../../defines/TMXConfigInfoKeys");
    var ItemBase_1 = require("../ItemBase");
    var EntityPrefabNodePool_1 = require("../../EntityPrefabNodePool");
    var FlyerAnimation_1 = require("../../flyer/FlyerAnimation");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ItemBalloon = function(_super) {
      __extends(ItemBalloon, _super);
      function ItemBalloon() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this._curPostal = cc.v2(-1, -1);
        _this._nextLevelId = "";
        return _this;
      }
      ItemBalloon_1 = ItemBalloon;
      ItemBalloon.create = function(grid) {
        var className = "ItemBalloon";
        var prefabFileName = "match_scene/prefab/entity/item/ItemBalloon";
        var pool = EntityPrefabNodePool_1.default.getInstance();
        var component = pool.getPrefabNodeWithFileNameAndClassName(prefabFileName, className);
        if (component) {
          component.init(grid);
          return component;
        }
        return null;
      };
      ItemBalloon.prototype.clone = function() {
        var item = ItemBalloon_1.create(this.getGrid());
        return item;
      };
      ItemBalloon.prototype.setCurPostal = function(val) {
        this._curPostal = val;
      };
      ItemBalloon.prototype.getCurPostal = function() {
        return this._curPostal;
      };
      ItemBalloon.prototype.setNextLevelId = function(val) {
        this._nextLevelId = val;
      };
      ItemBalloon.prototype.getNextLevelId = function() {
        return this._nextLevelId;
      };
      ItemBalloon.prototype.getProducedTrainSupplyMaps = function() {
        return {};
      };
      ItemBalloon.prototype.getCollectionID = function() {
        return CollectionID_1.CollectionID.ItemBalloon;
      };
      ItemBalloon.prototype.getEntityID = function() {
        return EntityID_1.EntityID.ItemBalloon;
      };
      ItemBalloon.prototype.getScore = function() {
        return 100;
      };
      ItemBalloon.prototype.dealWithConfigMap = function(configMap) {
        _super.prototype.dealWithConfigMap.call(this, configMap);
        configMap[TMXConfigInfoKeys_1.default.CFG_POSTAL_VEC] && this.setCurPostal(GameMath_1.default.getVec2FromConfigString(configMap[TMXConfigInfoKeys_1.default.CFG_POSTAL_VEC]));
        configMap[TMXConfigInfoKeys_1.default.CFG_NEXT_MAP_ID] && this.setNextLevelId(configMap[TMXConfigInfoKeys_1.default.CFG_NEXT_MAP_ID]);
      };
      ItemBalloon.prototype.init = function(grid) {
        _super.prototype.initItem.call(this, grid, ItemBase_1.ItemType.Balloon);
        this._curPostal = cc.v2(-1, -1);
        this._nextLevelId = "";
      };
      ItemBalloon.prototype._canDrop = function() {
        return false;
      };
      ItemBalloon.prototype._canSwap = function() {
        return false;
      };
      ItemBalloon.prototype._canMatch = function() {
        return false;
      };
      ItemBalloon.prototype._canCleanByNeighbour = function(color) {
        return false;
      };
      ItemBalloon.prototype._canCleanByBomb = function(cleanColor) {
        return false;
      };
      ItemBalloon.prototype._canCleanByTerminate = function(cleanColor) {
        return true;
      };
      ItemBalloon.prototype._onClean = function(cleanOption) {
        this.getGrid().gainScoreWithEntity(this);
        this.setVisible(false);
        this.progressDeathWish(cleanOption);
        this.selfDestory();
        var flyer = FlyerAnimation_1.default.createAnimationWithType(this.getGrid(), FlyerAnimation_1.FlyerAnimationType.CommonHurt);
        this.getGrid().setFlyerAtLogicalPos(flyer, this.getLogicalPos());
        flyer.node.zIndex = this.getTopZOrder();
      };
      ItemBalloon.prototype.onDestroy = function() {
        _super.prototype.onDestroy.call(this);
        this._curPostal = null;
        this._nextLevelId = null;
      };
      var ItemBalloon_1;
      ItemBalloon = ItemBalloon_1 = __decorate([ ccclass ], ItemBalloon);
      return ItemBalloon;
    }(ItemBase_1.default);
    exports.default = ItemBalloon;
    cc._RF.pop();
  }, {
    "../../../../../extend/utils/GameMath": "GameMath",
    "../../../defines/CollectionID": "CollectionID",
    "../../../defines/EntityID": "EntityID",
    "../../../defines/TMXConfigInfoKeys": "TMXConfigInfoKeys",
    "../../EntityPrefabNodePool": "EntityPrefabNodePool",
    "../../flyer/FlyerAnimation": "FlyerAnimation",
    "../ItemBase": "ItemBase"
  } ],
  ItemBase: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "230ac7U2dhLT4DxqpsZGMn+", "ItemBase");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.ItemType = void 0;
    var GameMath_1 = require("../../../../extend/utils/GameMath");
    var GridCommand_1 = require("../../commond/GridCommand");
    var EntityID_1 = require("../../defines/EntityID");
    var EntityBase_1 = require("../EntityBase");
    var CollectionID_1 = require("../../defines/CollectionID");
    var ItemBombBase_1 = require("./color/bomb/ItemBombBase");
    var GameCurrencyType_1 = require("../../../../define/GameCurrencyType");
    var ItemType;
    (function(ItemType) {
      ItemType[ItemType["None"] = 0] = "None";
      ItemType[ItemType["Normal"] = 1] = "Normal";
      ItemType[ItemType["EffectBomb"] = 2] = "EffectBomb";
      ItemType[ItemType["Block"] = 3] = "Block";
      ItemType[ItemType["Doughnut"] = 4] = "Doughnut";
      ItemType[ItemType["MagicCrystal"] = 5] = "MagicCrystal";
      ItemType[ItemType["Bone"] = 6] = "Bone";
      ItemType[ItemType["Mower"] = 7] = "Mower";
      ItemType[ItemType["Chestnut"] = 8] = "Chestnut";
      ItemType[ItemType["Puppy"] = 9] = "Puppy";
      ItemType[ItemType["DogHouse"] = 10] = "DogHouse";
      ItemType[ItemType["DogPaw"] = 11] = "DogPaw";
      ItemType[ItemType["Balloon"] = 12] = "Balloon";
      ItemType[ItemType["HoneyComb"] = 13] = "HoneyComb";
      ItemType[ItemType["JamBottle"] = 14] = "JamBottle";
      ItemType[ItemType["ItemWatermelon"] = 15] = "ItemWatermelon";
      ItemType[ItemType["ItemFireWormBottle"] = 16] = "ItemFireWormBottle";
      ItemType[ItemType["FruitCake"] = 17] = "FruitCake";
      ItemType[ItemType["Fireworks"] = 18] = "Fireworks";
      ItemType[ItemType["Statue"] = 19] = "Statue";
    })(ItemType = exports.ItemType || (exports.ItemType = {}));
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ItemBase = function(_super) {
      __extends(ItemBase, _super);
      function ItemBase() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this._itemType = ItemType.None;
        _this._targetCount = 0;
        _this._chargeCount = 0;
        _this._willChargeCount = 0;
        _this._chargePriority = 999;
        _this._chargetCollectionID = CollectionID_1.CollectionID.None;
        return _this;
      }
      ItemBase.prototype.getItemType = function() {
        return this._itemType;
      };
      ItemBase.prototype.getProducedTrainSupplyMaps = function() {
        var result = {};
        result[GameCurrencyType_1.GameCurrencyType.GoldCoin] = 1;
        return result;
      };
      ItemBase.prototype.getButterflyPriority = function(color, layoutGrass) {
        var grid = this.getGrid();
        if (grid.isTargetCollectionID(CollectionID_1.CollectionID.ItemBone) && this.canCleanByBomb(color)) {
          var checkPos = this.getLogicalPos().clone();
          while (1) {
            var cell = grid.getCellAtLogicalPos(checkPos);
            if (!cell) break;
            cell.getIsWormholeExit() ? checkPos = cell.getWormholeSource().clone() : checkPos.addSelf(cc.v2(0, 1));
            var item = grid.getItemAtLogicalPos(checkPos);
            if (item && item.getItemType() == ItemType.Bone) return 1;
          }
        }
        return _super.prototype.getButterflyPriority.call(this, color, layoutGrass);
      };
      ItemBase.prototype.getTopParasite = function() {
        var grid = this.getGrid();
        var occupyArea = this.getOccupyArea();
        for (var row = occupyArea.yMin; row < occupyArea.yMax; row++) for (var column = occupyArea.xMin; column < occupyArea.xMax; column++) {
          var parasite = grid.getParasiteAtLogicalPos(cc.v2(column, row));
          if (parasite) return parasite;
        }
        return null;
      };
      ItemBase.prototype.canLink = function(item) {
        if (!item) return false;
        if (!item.canMatch()) return false;
        if (!this.canMatch()) return false;
        var color = this.getEntityColor();
        if (color >= EntityID_1.EntityColor.Begin && color <= EntityID_1.EntityColor.End) return item.getEntityColor() == color;
        return false;
      };
      ItemBase.prototype.getLinkedPositions = function() {
        var result = [];
        if (!this.canMatch()) return result;
        var linkedPos = [ this.getLogicalPos() ];
        var moveOffsets = [ cc.v2(1, 0), cc.v2(-1, 0), cc.v2(0, 1), cc.v2(0, -1) ];
        var grid = this.getGrid();
        for (var index = 0; index < linkedPos.length; index++) {
          var currentPos = linkedPos[index];
          for (var _i = 0, moveOffsets_1 = moveOffsets; _i < moveOffsets_1.length; _i++) {
            var offset = moveOffsets_1[_i];
            var checkPos = currentPos.add(offset);
            if (-1 != GameMath_1.default.indexOf(linkedPos, checkPos)) continue;
            var checkItem = grid.getItemAtLogicalPos(checkPos);
            checkItem && this.canLink(checkItem) && linkedPos.push(checkPos);
          }
        }
        linkedPos.sort(function(infoA, infoB) {
          return GameMath_1.default.vec2Less(infoA, infoB) ? -1 : 1;
        });
        GameMath_1.default.filterInvalidMathPositions(linkedPos);
        return linkedPos;
      };
      ItemBase.prototype.canDrop = function() {
        var parasite = this.getTopParasite();
        return parasite ? parasite.hostCanDrop() : this._canDrop();
      };
      ItemBase.prototype._canDrop = function() {
        return false;
      };
      ItemBase.prototype.canSwap = function() {
        var parasite = this.getTopParasite();
        return parasite ? parasite.hostCanSwap() : this._canSwap();
      };
      ItemBase.prototype._canSwap = function() {
        return false;
      };
      ItemBase.prototype.canMatch = function() {
        var parasite = this.getTopParasite();
        return parasite ? parasite.hostCanMatch() : this._canMatch();
      };
      ItemBase.prototype._canMatch = function() {
        return false;
      };
      ItemBase.prototype.canShuffle = function() {
        if (this.canSwap()) return this._canShuffle();
        return false;
      };
      ItemBase.prototype._canShuffle = function() {
        return false;
      };
      ItemBase.prototype.canShuffleWhenCreate = function() {
        if (this.canSwap()) return this._canShuffleWhenCreate();
        return false;
      };
      ItemBase.prototype._canShuffleWhenCreate = function() {
        return false;
      };
      ItemBase.prototype.canForceSwap = function() {
        return this.canSwap();
      };
      ItemBase.prototype.canChange = function() {
        var parasite = this.getTopParasite();
        if (!parasite) return this._canChange();
        return false;
      };
      ItemBase.prototype._canChange = function() {
        return false;
      };
      ItemBase.prototype.canCharge = function(collectionID) {
        var parasite = this.getTopParasite();
        if (!parasite) return this._canCharge(collectionID);
        return false;
      };
      ItemBase.prototype.onCharge = function(option) {
        this._onCharge(option);
      };
      ItemBase.prototype._onCharge = function(option) {};
      ItemBase.prototype.canWillCharge = function(collectionID) {
        var parasite = this.getTopParasite();
        if (!parasite) return this._canWillCharge(collectionID);
        return false;
      };
      ItemBase.prototype._canCharge = function(collectionID) {
        if (this._chargeCount < this._targetCount) return this.getChargeID() == collectionID;
        return false;
      };
      ItemBase.prototype._canWillCharge = function(collectionID) {
        if (this._chargeCount + this._willChargeCount < this._targetCount) return this.getChargeID() == collectionID;
        return false;
      };
      ItemBase.prototype.getChargePriority = function() {
        return this._chargePriority;
      };
      ItemBase.prototype.getChargeID = function() {
        return this._chargetCollectionID;
      };
      ItemBase.prototype.setChargeID = function(collectionID) {
        this._chargetCollectionID = collectionID;
      };
      ItemBase.prototype.absorbWillChargeAmount = function(collectionID, amount) {
        if (this.getChargeID() == collectionID) {
          var absorbAmount = Math.min(amount, this._willChargeCount);
          this.setWillChargeAmount(this.getWillChargeAmount() - absorbAmount);
          this.setChargeAmount(this.getChargeAmount() + absorbAmount);
        }
      };
      ItemBase.prototype.getChargeAmount = function() {
        return this._chargeCount;
      };
      ItemBase.prototype.setChargeAmount = function(amount) {
        this._chargeCount = amount;
      };
      ItemBase.prototype.getWillChargeAmount = function() {
        return this._willChargeCount;
      };
      ItemBase.prototype.setWillChargeAmount = function(willChargetAmount) {
        this._willChargeCount = willChargetAmount;
      };
      ItemBase.prototype.getChargeTargetAmount = function() {
        return this._targetCount;
      };
      ItemBase.prototype.setChargeTargetAmount = function(amount) {
        this._targetCount = amount;
      };
      ItemBase.prototype.haveEnoughEnergy = function() {
        return this.getChargeAmount() >= this.getChargeTargetAmount();
      };
      ItemBase.prototype.canTransformByMagicCrystal = function() {
        var parasite = this.getTopParasite();
        if (!parasite) return this._canTransformByMagicCrystal();
        return false;
      };
      ItemBase.prototype._canTransformByMagicCrystal = function() {
        return false;
      };
      ItemBase.prototype.canUpgradeByRainbow = function() {
        var parasite = this.getTopParasite();
        if (!parasite) return this._canUpgradeByRainbow();
        return false;
      };
      ItemBase.prototype._canUpgradeByRainbow = function() {
        return false;
      };
      ItemBase.prototype.canChangeColor = function() {
        var parasite = this.getTopParasite();
        if (!parasite) return this._canChangeColor();
        return false;
      };
      ItemBase.prototype._canChangeColor = function() {
        return false;
      };
      ItemBase.prototype.canCoveredByHoney = function() {
        var parasite = this.getTopParasite();
        if (!parasite) return this._canCoveredByHoney();
        return false;
      };
      ItemBase.prototype._canCoveredByHoney = function() {
        return this._canDrop();
      };
      ItemBase.prototype.canBlockBombRay = function() {
        var parasite = this.getTopParasite();
        if (!parasite) return this._canBlockBombRay();
        return false;
      };
      ItemBase.prototype._canBlockBombRay = function() {
        return false;
      };
      ItemBase.prototype.canCleanByBomb = function(cleanColor) {
        var parasite = this.getTopParasite();
        return parasite ? parasite.canCleanByBomb(cleanColor) : !this.getImmuneDamage() && this._canCleanByBomb(cleanColor);
      };
      ItemBase.prototype._canCleanByBomb = function(cleanColor) {
        return false;
      };
      ItemBase.prototype.canCleanByActivate = function() {
        var parasite = this.getTopParasite();
        if (!parasite) return this._canCleanByActivate();
        return false;
      };
      ItemBase.prototype._canCleanByActivate = function() {
        return false;
      };
      ItemBase.prototype.canCleanByMatch = function() {
        var parasite = this.getTopParasite();
        return parasite ? parasite.canCleanByMatch() : !this.getImmuneDamage() && this._canCleanByMatch();
      };
      ItemBase.prototype._canCleanByMatch = function() {
        return false;
      };
      ItemBase.prototype.canCleanByNeighbour = function(color) {
        var parasite = this.getTopParasite();
        return parasite ? parasite.canCleanByNeighbour(color) : !this.getImmuneDamage() && this._canCleanByNeighbour(color);
      };
      ItemBase.prototype._canCleanByNeighbour = function(color) {
        return false;
      };
      ItemBase.prototype.canCleanBySuicide = function() {
        var parasite = this.getTopParasite();
        if (!parasite) return this._canCleanBySuicide();
        return false;
      };
      ItemBase.prototype._canCleanBySuicide = function() {
        return false;
      };
      ItemBase.prototype.canCleanByTerminate = function(cleanColor) {
        var parasite = this.getTopParasite();
        return parasite ? parasite.canCleanByTerminate(cleanColor) : this._canCleanByTerminate(cleanColor);
      };
      ItemBase.prototype._canCleanByTerminate = function(cleanColor) {
        return this._canCleanByBomb(cleanColor);
      };
      ItemBase.prototype.coverUnderForever = function() {
        return this._converUnderForever();
      };
      ItemBase.prototype._converUnderForever = function() {
        return false;
      };
      ItemBase.prototype.canActivatedByDoubleTabbed = function() {
        var parasite = this.getTopParasite();
        if (!parasite) return this._canActivatedByDoubleTabbed();
        return false;
      };
      ItemBase.prototype._canActivatedByDoubleTabbed = function() {
        return false;
      };
      ItemBase.prototype.onActivatedByDoubleTabbed = function() {
        var parasite = this.getTopParasite();
        parasite || this._onActivatedByDoubleTabbed();
      };
      ItemBase.prototype._onActivatedByDoubleTabbed = function() {};
      ItemBase.prototype.satisfyMatch = function() {
        return this._satisfyMatch();
      };
      ItemBase.prototype._satisfyMatch = function() {
        var linkedPos = this.getLinkedPositions();
        if (linkedPos.length > 0) return true;
        return false;
      };
      ItemBase.prototype.onSatisfyMatch = function() {
        this._onSatisfyMatch(0);
      };
      ItemBase.prototype._onSatisfyMatch = function(basePriority) {
        var totalLinkPos = this.getLinkedPositions();
        if (totalLinkPos.length > 0) {
          var baseSteps = [];
          for (var _i = 0, totalLinkPos_1 = totalLinkPos; _i < totalLinkPos_1.length; _i++) {
            var pos = totalLinkPos_1[_i];
            if (pos.equals(this.getLogicalPos())) baseSteps.push(basePriority); else {
              var priority = 0;
              var item = this.getGrid().getItemAtLogicalPos(pos);
              item && null != item.getTopParasite() && (priority = 1e4);
              baseSteps.push(priority);
            }
          }
          var mergeRoot = GameMath_1.default.getMergePos(totalLinkPos, baseSteps);
          var createBombType = GameMath_1.default.getCreateBombType(totalLinkPos);
          this.getGrid().canGenerateBomb() || (createBombType = ItemBombBase_1.ItemBombType.None);
          var grid = this.getGrid();
          var layoutGrass = false;
          for (var _a = 0, totalLinkPos_2 = totalLinkPos; _a < totalLinkPos_2.length; _a++) {
            var pos = totalLinkPos_2[_a];
            if (grid.isGrassFloorAtLogicalPos(pos)) {
              layoutGrass = true;
              break;
            }
          }
          for (var _b = 0, totalLinkPos_3 = totalLinkPos; _b < totalLinkPos_3.length; _b++) {
            var pos = totalLinkPos_3[_b];
            grid.dispatchCommand(pos, GridCommand_1.default.MatchClean(mergeRoot, createBombType, layoutGrass), 0);
          }
        }
      };
      ItemBase.prototype.canMatchWithNeighbourSwap = function(swapPos) {
        return this._canMatchWithNeighbourSwap(swapPos);
      };
      ItemBase.prototype._canMatchWithNeighbourSwap = function(swapPos) {
        var swapItem = this.getGrid().getItemAtLogicalPos(swapPos);
        if (swapItem && swapItem.getEntityID() != EntityID_1.EntityID.ItemBombRainbow) return this._satisfyMatch();
        return false;
      };
      ItemBase.prototype.onMatchWithNeighbourSwap = function(swapPos) {
        this._onMatchWithNeighbourSwap(swapPos);
      };
      ItemBase.prototype._onMatchWithNeighbourSwap = function(swapPos) {
        var swapItem = this.getGrid().getItemAtLogicalPos(swapPos);
        swapItem && swapItem.getEntityID() != EntityID_1.EntityID.ItemBombRainbow && this._onSatisfyMatch(-1e3);
      };
      ItemBase.prototype.canMatchWithForceSwap = function(swapPos) {
        return this._canMatchWithForceSwap(swapPos);
      };
      ItemBase.prototype._canMatchWithForceSwap = function(swapPos) {
        return this._satisfyMatch();
      };
      ItemBase.prototype.onMatchWithForceSwap = function(swapPos) {
        this._onMatchWithForceSwap(swapPos);
      };
      ItemBase.prototype._onMatchWithForceSwap = function(swapPos) {
        this._onSatisfyMatch(-1e3);
      };
      ItemBase.prototype.canLayoutGrass = function() {
        var parasite = this.getTopParasite();
        if (!parasite) return this._canLayoutGrass();
        return false;
      };
      ItemBase.prototype._canLayoutGrass = function() {
        return this._canHitFloor();
      };
      ItemBase.prototype._onLayourGrass = function() {
        this.getGrid().dispatchCommand(this.getLogicalPos(), GridCommand_1.default.LayoutGrass(), 0);
      };
      ItemBase.prototype._canHitNeighbour = function() {
        return this._canMatch();
      };
      ItemBase.prototype._onHitNeighbour = function() {
        var grid = this.getGrid();
        var neighborOffsets = [ cc.v2(1, 0), cc.v2(-1, 0), cc.v2(0, 1), cc.v2(0, -1) ];
        var origin = this.getLogicalPos();
        for (var _i = 0, neighborOffsets_1 = neighborOffsets; _i < neighborOffsets_1.length; _i++) {
          var offset = neighborOffsets_1[_i];
          grid.dispatchCommand(origin.add(offset), GridCommand_1.default.NeighborClean(origin, this.getEntityColor()), 0);
        }
      };
      ItemBase.prototype._canHitFloor = function() {
        return this._canMatch();
      };
      ItemBase.prototype._onHitFloor = function() {
        this.getGrid().dispatchCommand(this.getLogicalPos(), GridCommand_1.default.FloorClean(), 0);
      };
      ItemBase.prototype.progressDeathWish = function(cleanOption) {
        this.onCollected();
        cleanOption.hitFloor && this._canHitFloor() && this._onHitFloor();
        cleanOption.hitNeighbour && this._canHitNeighbour() && this._onHitNeighbour();
        cleanOption.layoutGrass && this._canLayoutGrass() && this._onLayourGrass();
        this.getLogicalPos().equals(cleanOption.cleanRoot) && this.getGrid().generateBomb(cleanOption.cleanRoot, cleanOption.createBombType, this.getEntityColor());
      };
      ItemBase.prototype.onClean = function(cleanOption) {
        var parasite = this.getTopParasite();
        if (parasite) parasite.onClean(cleanOption); else {
          this._onClean(cleanOption);
          this._canImmuneDamageAfterHurt() && this.setImmuneDamage(true);
        }
      };
      ItemBase.prototype._onClean = function(cleanOption) {};
      ItemBase.prototype._canImmuneDamageAfterHurt = function() {
        return true;
      };
      ItemBase.prototype.onChange = function(changeOption) {
        this._onChange(changeOption);
      };
      ItemBase.prototype._onChange = function(changeOption) {};
      ItemBase.prototype.canExcuteCommand = function(command) {
        switch (command.type) {
         case GridCommand_1.GridCommandType.DoubleTabbed:
          return this.canActivatedByDoubleTabbed();

         case GridCommand_1.GridCommandType.NeighbourSwap:
          return this.canMatchWithNeighbourSwap(command.swapPos);

         case GridCommand_1.GridCommandType.ForceSwap:
          return this.canMatchWithForceSwap(command.swapPos);

         case GridCommand_1.GridCommandType.CheckMatch:
          return this.satisfyMatch();

         case GridCommand_1.GridCommandType.BombClean:
          return this.canCleanByBomb(command.cleanColor);

         case GridCommand_1.GridCommandType.ActivateClean:
          return this.canCleanByActivate();

         case GridCommand_1.GridCommandType.MatchClean:
          return this.canCleanByMatch();

         case GridCommand_1.GridCommandType.NeighborClean:
          return this.canCleanByNeighbour(command.cleanColor);

         case GridCommand_1.GridCommandType.SuicideClean:
          return this.canCleanBySuicide();

         case GridCommand_1.GridCommandType.TerminateClean:
          return this.canCleanByTerminate(command.cleanColor);

         case GridCommand_1.GridCommandType.Change:
          return this.canChange();

         case GridCommand_1.GridCommandType.Charge:
          return this.canCharge(command.chargeID);
        }
        return false;
      };
      ItemBase.prototype.excuteCommand = function(command) {
        if (!this.canExcuteCommand(command)) return;
        switch (command.type) {
         case GridCommand_1.GridCommandType.DoubleTabbed:
          this.onActivatedByDoubleTabbed();
          break;

         case GridCommand_1.GridCommandType.NeighbourSwap:
          this.onMatchWithNeighbourSwap(command.swapPos);
          break;

         case GridCommand_1.GridCommandType.ForceSwap:
          this.onMatchWithForceSwap(command.swapPos);
          break;

         case GridCommand_1.GridCommandType.CheckMatch:
          this.onSatisfyMatch();
          break;

         case GridCommand_1.GridCommandType.BombClean:
          this.onClean(EntityID_1.EntityCleanOption.create(EntityID_1.EntityCleanType.Bomb, command.cleanRoot, command.cleanColor, command.createBombType, command.hitNeighbour, command.hitFloor, command.layoutGrass));
          break;

         case GridCommand_1.GridCommandType.ActivateClean:
          this.onClean(EntityID_1.EntityCleanOption.create(EntityID_1.EntityCleanType.Activate, command.cleanRoot, command.cleanColor, command.createBombType, command.hitNeighbour, command.hitFloor, command.layoutGrass));
          break;

         case GridCommand_1.GridCommandType.MatchClean:
          this.onClean(EntityID_1.EntityCleanOption.create(EntityID_1.EntityCleanType.Match, command.cleanRoot, command.cleanColor, command.createBombType, command.hitNeighbour, command.hitFloor, command.layoutGrass));
          break;

         case GridCommand_1.GridCommandType.NeighborClean:
          this.onClean(EntityID_1.EntityCleanOption.create(EntityID_1.EntityCleanType.Neighbor, command.cleanRoot, command.cleanColor, command.createBombType, command.hitNeighbour, command.hitFloor, command.layoutGrass));
          break;

         case GridCommand_1.GridCommandType.SuicideClean:
          this.onClean(EntityID_1.EntityCleanOption.create(EntityID_1.EntityCleanType.Suicide, command.cleanRoot, command.cleanColor, command.createBombType, command.hitNeighbour, command.hitFloor, command.layoutGrass));
          break;

         case GridCommand_1.GridCommandType.TerminateClean:
          this.onClean(EntityID_1.EntityCleanOption.create(EntityID_1.EntityCleanType.Terminate, command.cleanRoot, command.cleanColor, command.createBombType, command.hitNeighbour, command.hitFloor, command.layoutGrass));
          break;

         case GridCommand_1.GridCommandType.Change:
          this.onChange(EntityID_1.EntityChangeOption.create(command.targetID, command.collectOld));
          break;

         case GridCommand_1.GridCommandType.Charge:
          this.onCharge(EntityID_1.EntityChargeOption.create(command.chargeID, command.chargeAmount));
        }
      };
      ItemBase.prototype.selected = function() {
        var scale = .05;
        var outDuration = .2;
        var backDuration = .15;
        var toDuration = .15;
        var recoverDuration = .5;
        this.node.angle = 0;
        this.node.scale = 1;
        var outAction = cc.scaleTo(outDuration, 1 + scale).easing(cc.easeOut(2));
        var backAction = cc.scaleTo(backDuration, 1).easing(cc.easeIn(2));
        var toAction = cc.scaleTo(toDuration, 1 - scale).easing(cc.easeOut(2));
        var recoverAction = cc.scaleTo(recoverDuration, 1).easing(cc.easeIn(2));
        var action = cc.sequence(outAction, backAction, toAction, recoverAction).repeatForever();
        action.setTag(1001);
        this._puppet.runAction(action);
        this.node.zIndex = this.getTopZOrder();
      };
      ItemBase.prototype.unselected = function() {
        this._puppet.stopActionByTag(1001);
        this._puppet.angle = 0;
        this._puppet.scale = 1;
        this._puppet.setPosition(cc.Vec2.ZERO);
        this.node.zIndex = this.getBottomZOrder();
      };
      ItemBase.prototype.shake = function() {
        var _this = this;
        var rotation = 3;
        var scale = .05;
        var outDuration = .2;
        var backDuration = .15;
        var toDuration = .15;
        var recoverDuration = .5;
        this.node.angle = 0;
        this.node.scale = 1;
        var outAction = cc.spawn(cc.callFunc(function() {
          _this.getGrid().highlightedCell(_this.getLogicalPos());
        }), cc.rotateTo(outDuration, rotation).easing(cc.easeOut(2)), cc.scaleTo(outDuration, 1 + scale).easing(cc.easeOut(2)));
        var backAction = cc.spawn(cc.rotateTo(backDuration, .5 * rotation).easing(cc.easeIn(2)), cc.scaleTo(backDuration, 1 + .5 * scale).easing(cc.easeIn(2)));
        var toAction = cc.spawn(cc.rotateTo(toDuration, rotation).easing(cc.easeOut(2)), cc.scaleTo(toDuration, 1 + scale).easing(cc.easeOut(2)));
        var recoverAction = cc.spawn(cc.rotateTo(recoverDuration, 0).easing(cc.easeIn(2)), cc.scaleTo(recoverDuration, 1).easing(cc.easeIn(2)));
        var action = cc.sequence(outAction, backAction, toAction, recoverAction).repeat(2);
        action.setTag(1002);
        this._puppet.runAction(action);
        this.node.zIndex = this.getTopZOrder();
      };
      ItemBase.prototype.unshake = function() {
        this._puppet.stopActionByTag(1002);
        this._puppet.angle = 0;
        this._puppet.scale = 1;
        this._puppet.setPosition(cc.Vec2.ZERO);
        this.node.zIndex = this.getBottomZOrder();
      };
      ItemBase.prototype.tipSlide = function(target) {
        var _this = this;
        this.setPixelPos(this.getLogicalPos());
        var sourcePos = this.getGrid().getPixelPosFromLogicalPos(this.getLogicalPos());
        var targetPos = this.getGrid().getPixelPosFromLogicalPos(target);
        var offset = targetPos.sub(sourcePos).mul(.1);
        var scale = .05;
        var outDuration = .2;
        var backDuration = .15;
        var toDuration = .15;
        var recoverDuration = .5;
        var origin = cc.Vec2.ZERO;
        var outAction = cc.spawn(cc.callFunc(function() {
          _this.getGrid().highlightedCell(_this.getLogicalPos());
        }), cc.moveTo(outDuration, origin.add(offset)).easing(cc.easeOut(2)), cc.scaleTo(outDuration, 1 + scale).easing(cc.easeOut(2)));
        var backAction = cc.spawn(cc.moveTo(backDuration, origin.add(offset.mul(.5))).easing(cc.easeIn(2)), cc.scaleTo(backDuration, 1 + .5 * scale).easing(cc.easeIn(2)));
        var toAction = cc.spawn(cc.moveTo(toDuration, origin.add(offset)).easing(cc.easeOut(2)), cc.scaleTo(toDuration, 1 + scale).easing(cc.easeOut(2)));
        var recoverAction = cc.spawn(cc.moveTo(recoverDuration, origin).easing(cc.easeIn(2)), cc.scaleTo(recoverDuration, 1).easing(cc.easeIn(2)));
        var action = cc.sequence(outAction, backAction, toAction, recoverAction).repeat(2);
        action.setTag(1003);
        this._puppet.runAction(action);
        this.node.zIndex = this.getTopZOrder();
      };
      ItemBase.prototype.untipSlide = function() {
        this._puppet.stopActionByTag(1003);
        this._puppet.angle = 0;
        this._puppet.scale = 1;
        this._puppet.setPosition(cc.Vec2.ZERO);
        this.node.zIndex = this.getBottomZOrder();
      };
      ItemBase.prototype.bounce = function() {
        return null;
      };
      ItemBase.prototype.initItem = function(grid, itemType, width, height) {
        void 0 === width && (width = 1);
        void 0 === height && (height = 1);
        _super.prototype.initEntity.call(this, grid, EntityID_1.EntityType.Item, width, height);
        this._itemType = itemType;
        this._targetCount = 0;
        this._chargeCount = 0;
        this._willChargeCount = 0;
        this._chargePriority = 999;
        this._chargetCollectionID = CollectionID_1.CollectionID.None;
      };
      ItemBase.prototype.onDestroy = function() {
        _super.prototype.onDestroy.call(this);
      };
      ItemBase = __decorate([ ccclass ], ItemBase);
      return ItemBase;
    }(EntityBase_1.default);
    exports.default = ItemBase;
    cc._RF.pop();
  }, {
    "../../../../define/GameCurrencyType": "GameCurrencyType",
    "../../../../extend/utils/GameMath": "GameMath",
    "../../commond/GridCommand": "GridCommand",
    "../../defines/CollectionID": "CollectionID",
    "../../defines/EntityID": "EntityID",
    "../EntityBase": "EntityBase",
    "./color/bomb/ItemBombBase": "ItemBombBase"
  } ],
  ItemBlock: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "c64cdxqeAxJRbFoHmkKt5Ml", "ItemBlock");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var ItemBase_1 = require("../ItemBase");
    var CollectionID_1 = require("../../../defines/CollectionID");
    var EntityID_1 = require("../../../defines/EntityID");
    var IdentifierManager_1 = require("../../../defines/IdentifierManager");
    var FlyerAnimation_1 = require("../../flyer/FlyerAnimation");
    var IGame_1 = require("../../../../../base/IGame");
    var EntityPrefabNodePool_1 = require("../../EntityPrefabNodePool");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ItemBlock = function(_super) {
      __extends(ItemBlock, _super);
      function ItemBlock() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this._healthPoint = 0;
        return _this;
      }
      ItemBlock_1 = ItemBlock;
      ItemBlock.create = function(grid, healthPoint) {
        var className = "ItemBlock";
        var prefabFileName = "match_scene/prefab/entity/item/ItemBlock";
        var pool = EntityPrefabNodePool_1.default.getInstance();
        var component = pool.getPrefabNodeWithFileNameAndClassName(prefabFileName, className);
        if (component) {
          component.init(grid, healthPoint);
          return component;
        }
        return null;
      };
      ItemBlock.prototype.clone = function() {
        var item = ItemBlock_1.create(this.getGrid(), this.getHealthPoint());
        return item;
      };
      ItemBlock.prototype.init = function(grid, healthPoint) {
        _super.prototype.initItem.call(this, grid, ItemBase_1.ItemType.Block);
        this.setHealthPoint(healthPoint);
      };
      ItemBlock.prototype.getHealthPoint = function() {
        return this._healthPoint;
      };
      ItemBlock.prototype.setHealthPoint = function(val) {
        this._healthPoint = val;
        this.updatePuppet();
      };
      ItemBlock.prototype.getCollectionID = function() {
        return CollectionID_1.CollectionID.ItemBlock;
      };
      ItemBlock.prototype.getEntityID = function() {
        var result = EntityID_1.EntityID.None;
        switch (this.getHealthPoint()) {
         case 1:
          result = EntityID_1.EntityID.ItemBlockHp1;
          break;

         case 2:
          result = EntityID_1.EntityID.ItemBlockHp2;
          break;

         case 3:
          result = EntityID_1.EntityID.ItemBlockHp3;
          break;

         case 4:
          result = EntityID_1.EntityID.ItemBlockHp4;
          break;

         case 5:
          result = EntityID_1.EntityID.ItemBlockHp5;
          break;

         case 6:
          result = EntityID_1.EntityID.ItemBlockHp6;
        }
        return result;
      };
      ItemBlock.prototype.getScore = function() {
        return 100;
      };
      ItemBlock.prototype._canDrop = function() {
        return false;
      };
      ItemBlock.prototype._canSwap = function() {
        return false;
      };
      ItemBlock.prototype._canMatch = function() {
        return false;
      };
      ItemBlock.prototype._canCleanByBomb = function(cleanColor) {
        return true;
      };
      ItemBlock.prototype._canCleanByNeighbour = function(color) {
        return true;
      };
      ItemBlock.prototype._onClean = function(cleanOption) {
        var rate = 1;
        if (cleanOption.cleanType == EntityID_1.EntityCleanType.Terminate) {
          rate = this.getHealthPoint();
          this.setHealthPoint(1);
        }
        this.getGrid().gainScoreWithEntity(this, rate);
        if (this.getHealthPoint() <= 1) {
          if (!this.isTargetCollection()) {
            var flyer = FlyerAnimation_1.default.createDieAnimation(this.getGrid(), this.getEntityID());
            this.getGrid().setFlyerAtLogicalPos(flyer, this.getLogicalPos());
            IGame_1.default.playAudio(IdentifierManager_1.default.getInstance().getMatchAudioFilePath("block"));
          }
          this.progressDeathWish(cleanOption);
          this.setVisible(false);
          this.selfDestory();
        } else {
          this.setHealthPoint(this.getHealthPoint() - 1);
          this.selfHurt();
          IGame_1.default.playAudio(IdentifierManager_1.default.getInstance().getMatchAudioFilePath("eliminate_0"));
          var flyer = FlyerAnimation_1.default.createAnimationWithType(this.getGrid(), FlyerAnimation_1.FlyerAnimationType.CommonHurt);
          this.getGrid().setFlyerAtLogicalPos(flyer, this.getLogicalPos());
          flyer.node.zIndex = this.getTopZOrder();
        }
      };
      var ItemBlock_1;
      ItemBlock = ItemBlock_1 = __decorate([ ccclass ], ItemBlock);
      return ItemBlock;
    }(ItemBase_1.default);
    exports.default = ItemBlock;
    cc._RF.pop();
  }, {
    "../../../../../base/IGame": "IGame",
    "../../../defines/CollectionID": "CollectionID",
    "../../../defines/EntityID": "EntityID",
    "../../../defines/IdentifierManager": "IdentifierManager",
    "../../EntityPrefabNodePool": "EntityPrefabNodePool",
    "../../flyer/FlyerAnimation": "FlyerAnimation",
    "../ItemBase": "ItemBase"
  } ],
  ItemBombBase: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "592c9ZxpgRIhYut/sQhPAMT", "ItemBombBase");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.ItemBombType = void 0;
    var IGame_1 = require("../../../../../../base/IGame");
    var Pair_1 = require("../../../../../../base/Pair");
    var EntityID_1 = require("../../../../defines/EntityID");
    var IdentifierManager_1 = require("../../../../defines/IdentifierManager");
    var FlyerBomb_1 = require("../../../flyer/FlyerBomb");
    var FlyerCannon_1 = require("../../../flyer/FlyerCannon");
    var FlyerMissile_1 = require("../../../flyer/FlyerMissile");
    var ItemBase_1 = require("../../ItemBase");
    var ItemBombType;
    (function(ItemBombType) {
      ItemBombType[ItemBombType["None"] = 0] = "None";
      ItemBombType[ItemBombType["Butterfly"] = 1] = "Butterfly";
      ItemBombType[ItemBombType["Row"] = 2] = "Row";
      ItemBombType[ItemBombType["Column"] = 3] = "Column";
      ItemBombType[ItemBombType["Cross"] = 4] = "Cross";
      ItemBombType[ItemBombType["Range"] = 5] = "Range";
      ItemBombType[ItemBombType["Rainbow"] = 6] = "Rainbow";
    })(ItemBombType = exports.ItemBombType || (exports.ItemBombType = {}));
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ItemBombBase = function(_super) {
      __extends(ItemBombBase, _super);
      function ItemBombBase() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this._bombType = ItemBombType.None;
        _this._isDud = false;
        _this._selfDestructIndex = false;
        _this._isGrassBomb = false;
        return _this;
      }
      ItemBombBase.prototype.getBombType = function() {
        return this._bombType;
      };
      ItemBombBase.prototype.getIsDud = function() {
        return this._isDud;
      };
      ItemBombBase.prototype.setIsDud = function(isDud) {
        this._isDud = isDud;
      };
      ItemBombBase.prototype.getSelfDestructIndex = function() {
        return this._selfDestructIndex;
      };
      ItemBombBase.prototype.setSelfDestructIndex = function(selfDestructIndex) {
        this._selfDestructIndex = selfDestructIndex;
      };
      ItemBombBase.prototype.getIsGrassBomb = function() {
        return this._isGrassBomb;
      };
      ItemBombBase.prototype.setIsGrassBomb = function(isGrassBomb) {
        this._isGrassBomb = isGrassBomb;
      };
      ItemBombBase.prototype.getShouldLayoutGrass = function() {
        return this.getIsGrassBomb() || this.getGrid().isGrassFloorAtLogicalPos(this.getLogicalPos());
      };
      ItemBombBase.prototype._canDrop = function() {
        return true;
      };
      ItemBombBase.prototype._canSwap = function() {
        return true;
      };
      ItemBombBase.prototype._canMatch = function() {
        return true;
      };
      ItemBombBase.prototype._canChangeColor = function() {
        return true;
      };
      ItemBombBase.prototype._canCleanByBomb = function(cleanColor) {
        return true;
      };
      ItemBombBase.prototype._canCleanByMatch = function() {
        return true;
      };
      ItemBombBase.prototype._canCleanByActivate = function() {
        return true;
      };
      ItemBombBase.prototype._canShuffleWhenCreate = function() {
        return true;
      };
      ItemBombBase.prototype._canBombCombineWithNeighbour = function(swapPos) {
        var neighbourItem = this.getGrid().getItemAtLogicalPos(swapPos);
        if (neighbourItem && neighbourItem.canMatch() && neighbourItem.getItemType() == ItemBase_1.ItemType.EffectBomb) return true;
        return false;
      };
      ItemBombBase.prototype._onBombCombineWithNeighbour = function(swapPos) {
        var neighbourItem = this.getGrid().getItemAtLogicalPos(swapPos);
        var anotherBomb = neighbourItem;
        anotherBomb && this._onBombCombine(anotherBomb);
      };
      ItemBombBase.prototype._onBombCombine = function(bombB) {
        var typeA = this.getBombType();
        var typeB = bombB.getBombType();
        var minType = Math.min(typeA, typeB);
        var maxType = Math.max(typeA, typeB);
        var code = 100 * maxType + minType;
        var canLayoutGrass = this.getShouldLayoutGrass() || bombB.getShouldLayoutGrass();
        var grid = this.getGrid();
        var matchColor = this.getEntityColor();
        var startPos = this.getLogicalPos();
        switch (code) {
         case 101:
          for (var i = 0; i < 3; i++) {
            var missile = FlyerMissile_1.default.create(grid, FlyerMissile_1.FlyerMissileType.Dot, matchColor, canLayoutGrass);
            grid.setFlyerAtLogicalPos(missile, startPos);
          }
          break;

         case 201:
          var rayDirections = [ new Pair_1.Pair(cc.v2(1, 0), true), new Pair_1.Pair(cc.v2(-1, 0), false) ];
          var grid_1 = this.getGrid();
          for (var _i = 0, rayDirections_1 = rayDirections; _i < rayDirections_1.length; _i++) {
            var ray = rayDirections_1[_i];
            var cannon = FlyerCannon_1.default.create(grid_1, matchColor, canLayoutGrass, startPos, ray.first, ray.second);
            grid_1.setFlyerAtLogicalPos(cannon, startPos);
          }
          var missile = FlyerMissile_1.default.create(grid_1, FlyerMissile_1.FlyerMissileType.Row, matchColor, canLayoutGrass);
          grid_1.setFlyerAtLogicalPos(missile, startPos);
          break;

         case 301:
          var rayDirections = [ new Pair_1.Pair(cc.v2(0, 1), true), new Pair_1.Pair(cc.v2(0, -1), false) ];
          var grid_2 = this.getGrid();
          for (var _a = 0, rayDirections_2 = rayDirections; _a < rayDirections_2.length; _a++) {
            var ray = rayDirections_2[_a];
            var cannon = FlyerCannon_1.default.create(grid_2, matchColor, canLayoutGrass, startPos, ray.first, ray.second);
            grid_2.setFlyerAtLogicalPos(cannon, startPos);
          }
          var missile = FlyerMissile_1.default.create(grid_2, FlyerMissile_1.FlyerMissileType.Column, matchColor, canLayoutGrass);
          grid_2.setFlyerAtLogicalPos(missile, startPos);
          break;

         case 401:
          IGame_1.default.playAudio(IdentifierManager_1.default.getInstance().getMatchAudioFilePath("eliminate_special_cross"));
          var rayDirections = [ new Pair_1.Pair(cc.v2(1, 1), true), new Pair_1.Pair(cc.v2(-1, -1), false), new Pair_1.Pair(cc.v2(1, -1), false), new Pair_1.Pair(cc.v2(-1, 1), false) ];
          for (var _b = 0, rayDirections_3 = rayDirections; _b < rayDirections_3.length; _b++) {
            var ray = rayDirections_3[_b];
            var cannon = FlyerCannon_1.default.create(grid, matchColor, canLayoutGrass, startPos, ray.first, ray.second);
            grid.setFlyerAtLogicalPos(cannon, startPos);
          }
          var missile = FlyerMissile_1.default.create(grid, FlyerMissile_1.FlyerMissileType.Cross, matchColor, canLayoutGrass);
          grid.setFlyerAtLogicalPos(missile, startPos);
          break;

         case 501:
          var bomb = FlyerBomb_1.default.create(grid, matchColor, canLayoutGrass, startPos, 2);
          grid.setFlyerAtLogicalPos(bomb, startPos);
          var missile = FlyerMissile_1.default.create(grid, FlyerMissile_1.FlyerMissileType.Range, matchColor, canLayoutGrass);
          grid.setFlyerAtLogicalPos(missile, startPos);
          break;

         case 202:
         case 302:
         case 303:
          IGame_1.default.playAudio(IdentifierManager_1.default.getInstance().getMatchAudioFilePath("eliminate_special_colorline"));
          var rayDirections = [ new Pair_1.Pair(cc.v2(1, 0), true), new Pair_1.Pair(cc.v2(-1, 0), false), new Pair_1.Pair(cc.v2(0, 1), false), new Pair_1.Pair(cc.v2(0, -1), false) ];
          for (var _c = 0, rayDirections_4 = rayDirections; _c < rayDirections_4.length; _c++) {
            var ray = rayDirections_4[_c];
            var cannon = FlyerCannon_1.default.create(grid, matchColor, canLayoutGrass, startPos, ray.first, ray.second);
            grid.setFlyerAtLogicalPos(cannon, startPos);
          }
          break;

         case 402:
         case 403:
         case 404:
          IGame_1.default.playAudio(IdentifierManager_1.default.getInstance().getMatchAudioFilePath("eliminate_special_linecross"));
          var rayDirections = [ new Pair_1.Pair(cc.v2(1, 0), true), new Pair_1.Pair(cc.v2(-1, 0), false), new Pair_1.Pair(cc.v2(0, 1), false), new Pair_1.Pair(cc.v2(0, -1), false), new Pair_1.Pair(cc.v2(1, 1), false), new Pair_1.Pair(cc.v2(-1, -1), false), new Pair_1.Pair(cc.v2(-1, 1), false), new Pair_1.Pair(cc.v2(1, -1), false) ];
          for (var _d = 0, rayDirections_5 = rayDirections; _d < rayDirections_5.length; _d++) {
            var ray = rayDirections_5[_d];
            var cannon = FlyerCannon_1.default.create(grid, matchColor, canLayoutGrass, startPos, ray.first, ray.second);
            grid.setFlyerAtLogicalPos(cannon, startPos);
          }
          break;

         case 502:
          IGame_1.default.playAudio(IdentifierManager_1.default.getInstance().getMatchAudioFilePath("eliminate_special_linebomb"));
          var rayDirections = [ new Pair_1.Pair(cc.v2(1, 0), true), new Pair_1.Pair(cc.v2(-1, 0), false) ];
          var lineOffsets = [ cc.v2(0, 1), cc.v2(0, 0), cc.v2(0, -1) ];
          for (var _e = 0, lineOffsets_1 = lineOffsets; _e < lineOffsets_1.length; _e++) {
            var offset = lineOffsets_1[_e];
            for (var _f = 0, rayDirections_6 = rayDirections; _f < rayDirections_6.length; _f++) {
              var ray = rayDirections_6[_f];
              var cannon = FlyerCannon_1.default.create(grid, matchColor, canLayoutGrass, startPos.add(offset), ray.first, ray.second);
              grid.setFlyerAtLogicalPos(cannon, startPos.add(offset));
            }
          }
          break;

         case 503:
          IGame_1.default.playAudio(IdentifierManager_1.default.getInstance().getMatchAudioFilePath("eliminate_special_linebomb"));
          var rayDirections = [ new Pair_1.Pair(cc.v2(0, 1), true), new Pair_1.Pair(cc.v2(0, -1), false) ];
          var lineOffsets = [ cc.v2(1, 0), cc.v2(0, 0), cc.v2(-1, 0) ];
          for (var _g = 0, lineOffsets_2 = lineOffsets; _g < lineOffsets_2.length; _g++) {
            var offset = lineOffsets_2[_g];
            for (var _h = 0, rayDirections_7 = rayDirections; _h < rayDirections_7.length; _h++) {
              var ray = rayDirections_7[_h];
              var cannon = FlyerCannon_1.default.create(grid, matchColor, canLayoutGrass, startPos.add(offset), ray.first, ray.second);
              grid.setFlyerAtLogicalPos(cannon, startPos.add(offset));
            }
          }
          break;

         case 504:
          IGame_1.default.playAudio(IdentifierManager_1.default.getInstance().getMatchAudioFilePath("eliminate_special_bombcross"));
          var rayDirections1 = [ new Pair_1.Pair(cc.v2(0, 0), true), new Pair_1.Pair(cc.v2(-1, 0), true), new Pair_1.Pair(cc.v2(0, -1), true) ];
          for (var _j = 0, rayDirections1_1 = rayDirections1; _j < rayDirections1_1.length; _j++) {
            var ray = rayDirections1_1[_j];
            var origin = startPos.add(ray.first);
            var cannon = FlyerCannon_1.default.create(grid, matchColor, canLayoutGrass, origin, cc.v2(-1, -1), ray.second);
            grid.setFlyerAtLogicalPos(cannon, origin);
          }
          var rayDirections2 = [ new Pair_1.Pair(cc.v2(0, 0), false), new Pair_1.Pair(cc.v2(1, 0), true), new Pair_1.Pair(cc.v2(0, 1), true) ];
          for (var _k = 0, rayDirections2_1 = rayDirections2; _k < rayDirections2_1.length; _k++) {
            var ray = rayDirections2_1[_k];
            var origin = startPos.add(ray.first);
            var cannon = FlyerCannon_1.default.create(grid, matchColor, canLayoutGrass, origin, cc.v2(1, 1), ray.second);
            grid.setFlyerAtLogicalPos(cannon, origin);
          }
          var rayDirections3 = [ new Pair_1.Pair(cc.v2(0, 0), false), new Pair_1.Pair(cc.v2(1, 0), false), new Pair_1.Pair(cc.v2(0, -1), false) ];
          for (var _l = 0, rayDirections3_1 = rayDirections3; _l < rayDirections3_1.length; _l++) {
            var ray = rayDirections3_1[_l];
            var origin = startPos.add(ray.first);
            var cannon = FlyerCannon_1.default.create(grid, matchColor, canLayoutGrass, origin, cc.v2(1, -1), ray.second);
            grid.setFlyerAtLogicalPos(cannon, origin);
          }
          var rayDirections4 = [ new Pair_1.Pair(cc.v2(0, 0), false), new Pair_1.Pair(cc.v2(-1, 0), false), new Pair_1.Pair(cc.v2(0, 1), false) ];
          for (var _m = 0, rayDirections4_1 = rayDirections4; _m < rayDirections4_1.length; _m++) {
            var ray = rayDirections4_1[_m];
            var origin = startPos.add(ray.first);
            var cannon = FlyerCannon_1.default.create(grid, matchColor, canLayoutGrass, origin, cc.v2(-1, 1), ray.second);
            grid.setFlyerAtLogicalPos(cannon, origin);
          }
          break;

         case 505:
          IGame_1.default.playAudio(IdentifierManager_1.default.getInstance().getMatchAudioFilePath("eliminate_special_bombbomb"));
          var bomb = FlyerBomb_1.default.create(grid, matchColor, canLayoutGrass, startPos, 3);
          grid.setFlyerAtLogicalPos(bomb, startPos);
        }
        this.setIsDud(true);
        this._satisfyMatch() ? this._onSatisfyMatch(-1e3) : this._onClean(EntityID_1.EntityCleanOption.create(EntityID_1.EntityCleanType.Match, this.getLogicalPos(), EntityID_1.EntityColor.None, ItemBombType.None, true, true, canLayoutGrass));
        bombB.setIsDud(true);
        bombB._satisfyMatch() ? bombB._onSatisfyMatch(-1e3) : bombB._onClean(EntityID_1.EntityCleanOption.create(EntityID_1.EntityCleanType.Match, bombB.getLogicalPos(), EntityID_1.EntityColor.None, ItemBombType.None, true, true, canLayoutGrass));
      };
      ItemBombBase.prototype._canMatchWithNeighbourSwap = function(swapPos) {
        return !!this._canBombCombineWithNeighbour(swapPos) || _super.prototype._canMatchWithNeighbourSwap.call(this, swapPos);
      };
      ItemBombBase.prototype._onMatchWithNeighbourSwap = function(swapPos) {
        this._canBombCombineWithNeighbour(swapPos) ? this._onBombCombineWithNeighbour(swapPos) : _super.prototype._onMatchWithNeighbourSwap.call(this, swapPos);
      };
      ItemBombBase.prototype._onClean = function(cleanOption) {
        this.setVisible(false);
        cleanOption.layoutGrass && this.setIsGrassBomb(true);
        this.progressDeathWish(cleanOption);
        this.selfDestory();
      };
      ItemBombBase.prototype.initBomb = function(grid, bombType) {
        _super.prototype.initItem.call(this, grid, ItemBase_1.ItemType.EffectBomb);
        this._bombType = bombType;
        this.setIsDud(false);
        this._selfDestructIndex = false;
        this._isGrassBomb = false;
      };
      ItemBombBase = __decorate([ ccclass ], ItemBombBase);
      return ItemBombBase;
    }(ItemBase_1.default);
    exports.default = ItemBombBase;
    cc._RF.pop();
  }, {
    "../../../../../../base/IGame": "IGame",
    "../../../../../../base/Pair": "Pair",
    "../../../../defines/EntityID": "EntityID",
    "../../../../defines/IdentifierManager": "IdentifierManager",
    "../../../flyer/FlyerBomb": "FlyerBomb",
    "../../../flyer/FlyerCannon": "FlyerCannon",
    "../../../flyer/FlyerMissile": "FlyerMissile",
    "../../ItemBase": "ItemBase"
  } ],
  ItemBombButterfly: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "dd8a9suQ0JJKrF63p7gKdhJ", "ItemBombButterfly");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var CollectionID_1 = require("../../../../defines/CollectionID");
    var EntityID_1 = require("../../../../defines/EntityID");
    var FlyerMissile_1 = require("../../../flyer/FlyerMissile");
    var ItemBombBase_1 = require("./ItemBombBase");
    var EntityPrefabNodePool_1 = require("../../../EntityPrefabNodePool");
    var GameCurrencyType_1 = require("../../../../../../define/GameCurrencyType");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ItemBombButterfly = function(_super) {
      __extends(ItemBombButterfly, _super);
      function ItemBombButterfly() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      ItemBombButterfly_1 = ItemBombButterfly;
      ItemBombButterfly.prototype.getCollectionID = function() {
        var result = CollectionID_1.CollectionID.None;
        switch (this.getEntityColor()) {
         case EntityID_1.EntityColor.Red:
          result = CollectionID_1.CollectionID.ItemBombButterflyRed;
          break;

         case EntityID_1.EntityColor.Green:
          result = CollectionID_1.CollectionID.ItemBombButterflyGreen;
          break;

         case EntityID_1.EntityColor.Blue:
          result = CollectionID_1.CollectionID.ItemBombButterflyBlue;
          break;

         case EntityID_1.EntityColor.Yellow:
          result = CollectionID_1.CollectionID.ItemBombButterflyYellow;
          break;

         case EntityID_1.EntityColor.Orange:
          result = CollectionID_1.CollectionID.ItemBombButterflyOrange;
          break;

         case EntityID_1.EntityColor.Purple:
          result = CollectionID_1.CollectionID.ItemBombButterflyPurple;
        }
        return result;
      };
      ItemBombButterfly.prototype.getEntityID = function() {
        var result = EntityID_1.EntityID.None;
        switch (this.getEntityColor()) {
         case EntityID_1.EntityColor.Red:
          result = EntityID_1.EntityID.ItemBombButterflyRed;
          break;

         case EntityID_1.EntityColor.Green:
          result = EntityID_1.EntityID.ItemBombButterflyGreen;
          break;

         case EntityID_1.EntityColor.Blue:
          result = EntityID_1.EntityID.ItemBombButterflyBlue;
          break;

         case EntityID_1.EntityColor.Yellow:
          result = EntityID_1.EntityID.ItemBombButterflyYellow;
          break;

         case EntityID_1.EntityColor.Orange:
          result = EntityID_1.EntityID.ItemBombButterflyOrange;
          break;

         case EntityID_1.EntityColor.Purple:
          result = EntityID_1.EntityID.ItemBombButterflyPurple;
        }
        return result;
      };
      ItemBombButterfly.prototype.getProducedTrainSupplyMaps = function() {
        var result = {};
        result[GameCurrencyType_1.GameCurrencyType.GoldCoin] = 1;
        result[GameCurrencyType_1.GameCurrencyType.TrainFood] = 1;
        return result;
      };
      ItemBombButterfly.prototype.getScore = function() {
        return 200;
      };
      ItemBombButterfly.prototype._onClean = function(cleanOption) {
        _super.prototype._onClean.call(this, cleanOption);
        this.getGrid().gainScoreWithEntity(this);
        if (!this.getIsDud()) {
          var grid = this.getGrid();
          var missile = FlyerMissile_1.default.create(grid, FlyerMissile_1.FlyerMissileType.Dot, this.getEntityColor(), this.getShouldLayoutGrass());
          grid.setFlyerAtLogicalPos(missile, this.getLogicalPos());
          this.setVisible(false);
        }
      };
      ItemBombButterfly.create = function(grid, color) {
        var className = "ItemBombButterfly";
        var prefabFileName = "match_scene/prefab/entity/item/ItemBombButterfly";
        var pool = EntityPrefabNodePool_1.default.getInstance();
        var component = pool.getPrefabNodeWithFileNameAndClassName(prefabFileName, className);
        if (component) {
          component.init(grid, color);
          return component;
        }
        return null;
      };
      ItemBombButterfly.prototype.clone = function() {
        var item = ItemBombButterfly_1.create(this.getGrid(), this.getEntityColor());
        return item;
      };
      ItemBombButterfly.prototype.init = function(grid, entityColor) {
        _super.prototype.initBomb.call(this, grid, ItemBombBase_1.ItemBombType.Butterfly);
        this.setEntityColor(entityColor);
      };
      ItemBombButterfly.prototype.start = function() {};
      var ItemBombButterfly_1;
      ItemBombButterfly = ItemBombButterfly_1 = __decorate([ ccclass ], ItemBombButterfly);
      return ItemBombButterfly;
    }(ItemBombBase_1.default);
    exports.default = ItemBombButterfly;
    cc._RF.pop();
  }, {
    "../../../../../../define/GameCurrencyType": "GameCurrencyType",
    "../../../../defines/CollectionID": "CollectionID",
    "../../../../defines/EntityID": "EntityID",
    "../../../EntityPrefabNodePool": "EntityPrefabNodePool",
    "../../../flyer/FlyerMissile": "FlyerMissile",
    "./ItemBombBase": "ItemBombBase"
  } ],
  ItemBombColumn: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "5a8bdieQRFFM6Z+DFFwQ8tB", "ItemBombColumn");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Pair_1 = require("../../../../../../base/Pair");
    var CollectionID_1 = require("../../../../defines/CollectionID");
    var EntityID_1 = require("../../../../defines/EntityID");
    var FlyerCannon_1 = require("../../../flyer/FlyerCannon");
    var ItemBombBase_1 = require("./ItemBombBase");
    var IGame_1 = require("../../../../../../base/IGame");
    var IdentifierManager_1 = require("../../../../defines/IdentifierManager");
    var EntityPrefabNodePool_1 = require("../../../EntityPrefabNodePool");
    var GameCurrencyType_1 = require("../../../../../../define/GameCurrencyType");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ItemBombColumn = function(_super) {
      __extends(ItemBombColumn, _super);
      function ItemBombColumn() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      ItemBombColumn_1 = ItemBombColumn;
      ItemBombColumn.prototype.getCollectionID = function() {
        var result = CollectionID_1.CollectionID.None;
        switch (this.getEntityColor()) {
         case EntityID_1.EntityColor.Red:
          result = CollectionID_1.CollectionID.ItemBombColumnRed;
          break;

         case EntityID_1.EntityColor.Green:
          result = CollectionID_1.CollectionID.ItemBombColumnGreen;
          break;

         case EntityID_1.EntityColor.Blue:
          result = CollectionID_1.CollectionID.ItemBombColumnBlue;
          break;

         case EntityID_1.EntityColor.Yellow:
          result = CollectionID_1.CollectionID.ItemBombColumnYellow;
          break;

         case EntityID_1.EntityColor.Orange:
          result = CollectionID_1.CollectionID.ItemBombColumnOrange;
          break;

         case EntityID_1.EntityColor.Purple:
          result = CollectionID_1.CollectionID.ItemBombColumnPurple;
        }
        return result;
      };
      ItemBombColumn.prototype.getEntityID = function() {
        var result = EntityID_1.EntityID.None;
        switch (this.getEntityColor()) {
         case EntityID_1.EntityColor.Red:
          result = EntityID_1.EntityID.ItemBombColumnRed;
          break;

         case EntityID_1.EntityColor.Green:
          result = EntityID_1.EntityID.ItemBombColumnGreen;
          break;

         case EntityID_1.EntityColor.Blue:
          result = EntityID_1.EntityID.ItemBombColumnBlue;
          break;

         case EntityID_1.EntityColor.Yellow:
          result = EntityID_1.EntityID.ItemBombColumnYellow;
          break;

         case EntityID_1.EntityColor.Orange:
          result = EntityID_1.EntityID.ItemBombColumnOrange;
          break;

         case EntityID_1.EntityColor.Purple:
          result = EntityID_1.EntityID.ItemBombColumnPurple;
        }
        return result;
      };
      ItemBombColumn.prototype.getProducedTrainSupplyMaps = function() {
        var result = {};
        result[GameCurrencyType_1.GameCurrencyType.GoldCoin] = 1;
        result[GameCurrencyType_1.GameCurrencyType.TrainEyepatch] = 1;
        return result;
      };
      ItemBombColumn.prototype.getScore = function() {
        return 300;
      };
      ItemBombColumn.prototype._onClean = function(cleanOption) {
        _super.prototype._onClean.call(this, cleanOption);
        this.getGrid().gainScoreWithEntity(this);
        if (!this.getIsDud()) {
          IGame_1.default.playAudio(IdentifierManager_1.default.getInstance().getMatchAudioFilePath("eliminate_special_line"));
          var rayDirections = [ new Pair_1.Pair(cc.v2(0, 1), true), new Pair_1.Pair(cc.v2(0, -1), false) ];
          var grid = this.getGrid();
          for (var _i = 0, rayDirections_1 = rayDirections; _i < rayDirections_1.length; _i++) {
            var ray = rayDirections_1[_i];
            var cannon = FlyerCannon_1.default.create(grid, this.getEntityColor(), this.getShouldLayoutGrass(), this.getLogicalPos(), ray.first, ray.second);
            grid.setFlyerAtLogicalPos(cannon, this.getLogicalPos());
          }
          this.setVisible(false);
        }
      };
      ItemBombColumn.create = function(grid, color) {
        var className = "ItemBombColumn";
        var prefabFileName = "match_scene/prefab/entity/item/ItemBombColumn";
        var pool = EntityPrefabNodePool_1.default.getInstance();
        var component = pool.getPrefabNodeWithFileNameAndClassName(prefabFileName, className);
        if (component) {
          component.init(grid, color);
          return component;
        }
        return null;
      };
      ItemBombColumn.prototype.clone = function() {
        var item = ItemBombColumn_1.create(this.getGrid(), this.getEntityColor());
        return item;
      };
      ItemBombColumn.prototype.init = function(grid, entityColor) {
        _super.prototype.initBomb.call(this, grid, ItemBombBase_1.ItemBombType.Column);
        this.setEntityColor(entityColor);
      };
      ItemBombColumn.prototype.start = function() {};
      var ItemBombColumn_1;
      ItemBombColumn = ItemBombColumn_1 = __decorate([ ccclass ], ItemBombColumn);
      return ItemBombColumn;
    }(ItemBombBase_1.default);
    exports.default = ItemBombColumn;
    cc._RF.pop();
  }, {
    "../../../../../../base/IGame": "IGame",
    "../../../../../../base/Pair": "Pair",
    "../../../../../../define/GameCurrencyType": "GameCurrencyType",
    "../../../../defines/CollectionID": "CollectionID",
    "../../../../defines/EntityID": "EntityID",
    "../../../../defines/IdentifierManager": "IdentifierManager",
    "../../../EntityPrefabNodePool": "EntityPrefabNodePool",
    "../../../flyer/FlyerCannon": "FlyerCannon",
    "./ItemBombBase": "ItemBombBase"
  } ],
  ItemBombCross: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "ce5775OqmtK76ElclAfSGzL", "ItemBombCross");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Pair_1 = require("../../../../../../base/Pair");
    var CollectionID_1 = require("../../../../defines/CollectionID");
    var EntityID_1 = require("../../../../defines/EntityID");
    var FlyerCannon_1 = require("../../../flyer/FlyerCannon");
    var ItemBombBase_1 = require("./ItemBombBase");
    var IGame_1 = require("../../../../../../base/IGame");
    var IdentifierManager_1 = require("../../../../defines/IdentifierManager");
    var EntityPrefabNodePool_1 = require("../../../EntityPrefabNodePool");
    var GameCurrencyType_1 = require("../../../../../../define/GameCurrencyType");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ItemBombCross = function(_super) {
      __extends(ItemBombCross, _super);
      function ItemBombCross() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      ItemBombCross_1 = ItemBombCross;
      ItemBombCross.prototype.getCollectionID = function() {
        var result = CollectionID_1.CollectionID.None;
        switch (this.getEntityColor()) {
         case EntityID_1.EntityColor.Red:
          result = CollectionID_1.CollectionID.ItemBombCrossRed;
          break;

         case EntityID_1.EntityColor.Green:
          result = CollectionID_1.CollectionID.ItemBombCrossGreen;
          break;

         case EntityID_1.EntityColor.Blue:
          result = CollectionID_1.CollectionID.ItemBombCrossBlue;
          break;

         case EntityID_1.EntityColor.Yellow:
          result = CollectionID_1.CollectionID.ItemBombCrossYellow;
          break;

         case EntityID_1.EntityColor.Orange:
          result = CollectionID_1.CollectionID.ItemBombCrossOrange;
          break;

         case EntityID_1.EntityColor.Purple:
          result = CollectionID_1.CollectionID.ItemBombCrossPurple;
        }
        return result;
      };
      ItemBombCross.prototype.getEntityID = function() {
        var result = EntityID_1.EntityID.None;
        switch (this.getEntityColor()) {
         case EntityID_1.EntityColor.Red:
          result = EntityID_1.EntityID.ItemBombCrossRed;
          break;

         case EntityID_1.EntityColor.Green:
          result = EntityID_1.EntityID.ItemBombCrossGreen;
          break;

         case EntityID_1.EntityColor.Blue:
          result = EntityID_1.EntityID.ItemBombCrossBlue;
          break;

         case EntityID_1.EntityColor.Yellow:
          result = EntityID_1.EntityID.ItemBombCrossYellow;
          break;

         case EntityID_1.EntityColor.Orange:
          result = EntityID_1.EntityID.ItemBombCrossOrange;
          break;

         case EntityID_1.EntityColor.Purple:
          result = EntityID_1.EntityID.ItemBombCrossPurple;
        }
        return result;
      };
      ItemBombCross.prototype.getProducedTrainSupplyMaps = function() {
        var result = {};
        result[GameCurrencyType_1.GameCurrencyType.GoldCoin] = 1;
        result[GameCurrencyType_1.GameCurrencyType.TrainHoe] = 1;
        return result;
      };
      ItemBombCross.prototype.getScore = function() {
        return 400;
      };
      ItemBombCross.prototype._onClean = function(cleanOption) {
        _super.prototype._onClean.call(this, cleanOption);
        this.getGrid().gainScoreWithEntity(this);
        if (!this.getIsDud()) {
          IGame_1.default.playAudio(IdentifierManager_1.default.getInstance().getMatchAudioFilePath("eliminate_special_cross"));
          var rayDirections = [ new Pair_1.Pair(cc.v2(1, 1), true), new Pair_1.Pair(cc.v2(-1, -1), false), new Pair_1.Pair(cc.v2(1, -1), false), new Pair_1.Pair(cc.v2(-1, 1), false) ];
          var grid = this.getGrid();
          for (var _i = 0, rayDirections_1 = rayDirections; _i < rayDirections_1.length; _i++) {
            var ray = rayDirections_1[_i];
            var cannon = FlyerCannon_1.default.create(grid, this.getEntityColor(), this.getShouldLayoutGrass(), this.getLogicalPos(), ray.first, ray.second);
            grid.setFlyerAtLogicalPos(cannon, this.getLogicalPos());
          }
          this.setVisible(false);
        }
      };
      ItemBombCross.create = function(grid, color) {
        var className = "ItemBombCross";
        var prefabFileName = "match_scene/prefab/entity/item/ItemBombCross";
        var pool = EntityPrefabNodePool_1.default.getInstance();
        var component = pool.getPrefabNodeWithFileNameAndClassName(prefabFileName, className);
        if (component) {
          component.init(grid, color);
          return component;
        }
        return null;
      };
      ItemBombCross.prototype.clone = function() {
        var item = ItemBombCross_1.create(this.getGrid(), this.getEntityColor());
        return item;
      };
      ItemBombCross.prototype.init = function(grid, entityColor) {
        _super.prototype.initBomb.call(this, grid, ItemBombBase_1.ItemBombType.Cross);
        this.setEntityColor(entityColor);
      };
      ItemBombCross.prototype.start = function() {};
      var ItemBombCross_1;
      ItemBombCross = ItemBombCross_1 = __decorate([ ccclass ], ItemBombCross);
      return ItemBombCross;
    }(ItemBombBase_1.default);
    exports.default = ItemBombCross;
    cc._RF.pop();
  }, {
    "../../../../../../base/IGame": "IGame",
    "../../../../../../base/Pair": "Pair",
    "../../../../../../define/GameCurrencyType": "GameCurrencyType",
    "../../../../defines/CollectionID": "CollectionID",
    "../../../../defines/EntityID": "EntityID",
    "../../../../defines/IdentifierManager": "IdentifierManager",
    "../../../EntityPrefabNodePool": "EntityPrefabNodePool",
    "../../../flyer/FlyerCannon": "FlyerCannon",
    "./ItemBombBase": "ItemBombBase"
  } ],
  ItemBombRainbow: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "7f2a5M56zxKC4rM8ySirQk2", "ItemBombRainbow");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var GameMath_1 = require("../../../../../../extend/utils/GameMath");
    var CollectionID_1 = require("../../../../defines/CollectionID");
    var EntityID_1 = require("../../../../defines/EntityID");
    var FlyerLaser_1 = require("../../../flyer/FlyerLaser");
    var FlyerNuclear_1 = require("../../../flyer/FlyerNuclear");
    var ItemBase_1 = require("../../ItemBase");
    var ItemBombBase_1 = require("./ItemBombBase");
    var EntityPrefabNodePool_1 = require("../../../EntityPrefabNodePool");
    var GameCurrencyType_1 = require("../../../../../../define/GameCurrencyType");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ItemBombRainbow = function(_super) {
      __extends(ItemBombRainbow, _super);
      function ItemBombRainbow() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this._cleanOption = EntityID_1.EntityCleanOption.create(EntityID_1.EntityCleanType.None, cc.Vec2.ZERO, EntityID_1.EntityColor.None, ItemBombBase_1.ItemBombType.None, false, false, false);
        return _this;
      }
      ItemBombRainbow_1 = ItemBombRainbow;
      ItemBombRainbow.prototype.getCollectionID = function() {
        return CollectionID_1.CollectionID.ItemBombRainbow;
      };
      ItemBombRainbow.prototype.getEntityID = function() {
        return EntityID_1.EntityID.ItemBombRainbow;
      };
      ItemBombRainbow.prototype.getProducedTrainSupplyMaps = function() {
        var result = {};
        result[GameCurrencyType_1.GameCurrencyType.GoldCoin] = 1;
        return result;
      };
      ItemBombRainbow.prototype.getScore = function() {
        return 1e3;
      };
      ItemBombRainbow.prototype.selfDestory = function() {
        this.getGrid().gainScoreWithEntity(this);
        this.getGrid().canGenerateTrainSupply() && this.getGrid().gainStepWithItemID(GameCurrencyType_1.GameCurrencyType.ExtraStep1, true, this.getLogicalPos());
        var entity = this.getGrid().getEntity(this.getEntityType(), this.getLogicalPos());
        entity == this && this.removeFromGridAndAddToEffect();
        this.getGrid().addObstructs(this);
        this.progressDeathWish(this._cleanOption);
        var dispear = cc.spawn(cc.scaleTo(.15, 0), cc.fadeOut(.15));
        var action = cc.sequence(dispear, cc.callFunc(function() {
          this.getGrid().removeObstructs(this);
          this.destoryWithRecycle(true);
        }, this));
        this.runAction(action);
      };
      ItemBombRainbow.prototype._canMatch = function() {
        return false;
      };
      ItemBombRainbow.prototype._canHitFloor = function() {
        return true;
      };
      ItemBombRainbow.prototype._canHitNeighbour = function() {
        return true;
      };
      ItemBombRainbow.prototype._canLayoutGrass = function() {
        return true;
      };
      ItemBombRainbow.prototype._canChangeColor = function() {
        return false;
      };
      ItemBombRainbow.prototype._canCleanBySuicide = function() {
        return true;
      };
      ItemBombRainbow.prototype._canCleanByMatch = function() {
        return false;
      };
      ItemBombRainbow.prototype._canCleanByBomb = function(cleanColor) {
        return false;
      };
      ItemBombRainbow.prototype._canCleanByTerminate = function(cleanColor) {
        return true;
      };
      ItemBombRainbow.prototype._canCleanByActivate = function() {
        return true;
      };
      ItemBombRainbow.prototype.getCleanOption = function() {
        return this._cleanOption;
      };
      ItemBombRainbow.prototype.setCleanOption = function(cleanOption) {
        this._cleanOption = cleanOption;
      };
      ItemBombRainbow.prototype._canMatchWithNeighbourSwap = function(swapPos) {
        if (this._canBombCombineWithNeighbour(swapPos)) return true;
        var neighbourItem = this.getGrid().getItemAtLogicalPos(swapPos);
        if (neighbourItem && neighbourItem.canMatch() && neighbourItem.getEntityColor() >= EntityID_1.EntityColor.Begin && neighbourItem.getEntityColor() <= EntityID_1.EntityColor.End) return true;
        return false;
      };
      ItemBombRainbow.prototype._onMatchWithNeighbourSwap = function(swapPos) {
        var matchColor = EntityID_1.EntityColor.None;
        var bombType = ItemBombBase_1.ItemBombType.None;
        var layoutGrass = this.getShouldLayoutGrass() || this.getGrid().isGrassFloorAtLogicalPos(swapPos);
        var neighbourItem = this.getGrid().getItemAtLogicalPos(swapPos);
        neighbourItem && (matchColor = neighbourItem.getEntityColor());
        if (this._canBombCombineWithNeighbour(swapPos)) {
          var bombB = neighbourItem;
          bombType = bombB.getBombType();
          if (bombB.getBombType() == ItemBombBase_1.ItemBombType.Rainbow) {
            var grid = this.getGrid();
            var nuclear = FlyerNuclear_1.default.create(this.getGrid(), layoutGrass, this.getLogicalPos());
            grid.setFlyerAtLogicalPos(nuclear, this.getLogicalPos());
            this.setIsDud(true);
            this._cleanOption = EntityID_1.EntityCleanOption.create(EntityID_1.EntityCleanType.Match, this.getLogicalPos(), EntityID_1.EntityColor.None, ItemBombBase_1.ItemBombType.None, true, true, layoutGrass);
            this.selfDestory();
            var rainbowB = bombB;
            if (rainbowB) {
              rainbowB.setIsDud(true);
              rainbowB.setCleanOption(EntityID_1.EntityCleanOption.create(EntityID_1.EntityCleanType.Match, this.getLogicalPos(), EntityID_1.EntityColor.None, ItemBombBase_1.ItemBombType.None, true, true, layoutGrass));
              rainbowB.selfDestory();
            }
          } else this._launchLaser(matchColor, bombType, layoutGrass);
        } else this._launchLaser(matchColor, bombType, layoutGrass);
      };
      ItemBombRainbow.prototype._canBombCombineWithNeighbour = function(swapPos) {
        var neighbourItem = this.getGrid().getItemAtLogicalPos(swapPos);
        if (false == this.getIsDud() && null == this.getTopParasite() && neighbourItem && null == neighbourItem.getTopParasite() && neighbourItem.getItemType() == ItemBase_1.ItemType.EffectBomb) return true;
        return false;
      };
      ItemBombRainbow.prototype._onClean = function(cleanOption) {
        cleanOption.layoutGrass && this.setIsGrassBomb(true);
        if (this.getIsDud()) this.selfDestory(); else {
          this.setIsDud(true);
          var colors = [];
          var itemMap = this.getGrid().getItemsMap();
          for (var key in itemMap) {
            var item = itemMap[key];
            if (item.canMatch()) {
              var entityColor = item.getEntityColor();
              entityColor != EntityID_1.EntityColor.None && GameMath_1.default.insertAsSet(colors, entityColor);
            }
          }
          if (colors.length > 0) {
            var index = GameMath_1.default.randomInt(0, colors.length - 1);
            var color = colors[index];
            this._launchLaser(color, ItemBombBase_1.ItemBombType.None, this.getShouldLayoutGrass());
          }
        }
      };
      ItemBombRainbow.prototype._launchLaser = function(color, type, layoutGrass) {
        this.setIsDud(true);
        this._cleanOption = EntityID_1.EntityCleanOption.create(EntityID_1.EntityCleanType.Match, this.getLogicalPos(), color, ItemBombBase_1.ItemBombType.None, true, true, layoutGrass);
        this.removeFromGridAndAddToEffect();
        var grid = this.getGrid();
        var laser = FlyerLaser_1.default.create(grid, this, this.getLogicalPos(), color, type, layoutGrass);
        grid.setFlyerAtLogicalPos(laser, this.getLogicalPos());
      };
      ItemBombRainbow.create = function(grid) {
        var className = "ItemBombRainbow";
        var prefabFileName = "match_scene/prefab/entity/item/ItemBombRainbow";
        var pool = EntityPrefabNodePool_1.default.getInstance();
        var component = pool.getPrefabNodeWithFileNameAndClassName(prefabFileName, className);
        if (component) {
          component.init(grid);
          return component;
        }
        return null;
      };
      ItemBombRainbow.prototype.clone = function() {
        var item = ItemBombRainbow_1.create(this.getGrid());
        return item;
      };
      ItemBombRainbow.prototype.init = function(grid) {
        _super.prototype.initBomb.call(this, grid, ItemBombBase_1.ItemBombType.Rainbow);
        this.setEntityColor(EntityID_1.EntityColor.None);
        this._cleanOption = EntityID_1.EntityCleanOption.create(EntityID_1.EntityCleanType.None, cc.Vec2.ZERO, EntityID_1.EntityColor.None, ItemBombBase_1.ItemBombType.None, false, false, false);
      };
      ItemBombRainbow.prototype.start = function() {};
      var ItemBombRainbow_1;
      ItemBombRainbow = ItemBombRainbow_1 = __decorate([ ccclass ], ItemBombRainbow);
      return ItemBombRainbow;
    }(ItemBombBase_1.default);
    exports.default = ItemBombRainbow;
    cc._RF.pop();
  }, {
    "../../../../../../define/GameCurrencyType": "GameCurrencyType",
    "../../../../../../extend/utils/GameMath": "GameMath",
    "../../../../defines/CollectionID": "CollectionID",
    "../../../../defines/EntityID": "EntityID",
    "../../../EntityPrefabNodePool": "EntityPrefabNodePool",
    "../../../flyer/FlyerLaser": "FlyerLaser",
    "../../../flyer/FlyerNuclear": "FlyerNuclear",
    "../../ItemBase": "ItemBase",
    "./ItemBombBase": "ItemBombBase"
  } ],
  ItemBombRange: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "3f8f6qsTIpDhrXiOPrAyKnD", "ItemBombRange");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var CollectionID_1 = require("../../../../defines/CollectionID");
    var EntityID_1 = require("../../../../defines/EntityID");
    var FlyerBomb_1 = require("../../../flyer/FlyerBomb");
    var ItemBombBase_1 = require("./ItemBombBase");
    var IGame_1 = require("../../../../../../base/IGame");
    var IdentifierManager_1 = require("../../../../defines/IdentifierManager");
    var EntityPrefabNodePool_1 = require("../../../EntityPrefabNodePool");
    var GameCurrencyType_1 = require("../../../../../../define/GameCurrencyType");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ItemBombRange = function(_super) {
      __extends(ItemBombRange, _super);
      function ItemBombRange() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      ItemBombRange_1 = ItemBombRange;
      ItemBombRange.prototype.getCollectionID = function() {
        var result = CollectionID_1.CollectionID.None;
        switch (this.getEntityColor()) {
         case EntityID_1.EntityColor.Red:
          result = CollectionID_1.CollectionID.ItemBombRangeRed;
          break;

         case EntityID_1.EntityColor.Green:
          result = CollectionID_1.CollectionID.ItemBombRangeGreen;
          break;

         case EntityID_1.EntityColor.Blue:
          result = CollectionID_1.CollectionID.ItemBombRangeBlue;
          break;

         case EntityID_1.EntityColor.Yellow:
          result = CollectionID_1.CollectionID.ItemBombRangeYellow;
          break;

         case EntityID_1.EntityColor.Orange:
          result = CollectionID_1.CollectionID.ItemBombRangeOrange;
          break;

         case EntityID_1.EntityColor.Purple:
          result = CollectionID_1.CollectionID.ItemBombRangePurple;
        }
        return result;
      };
      ItemBombRange.prototype.getEntityID = function() {
        var result = EntityID_1.EntityID.None;
        switch (this.getEntityColor()) {
         case EntityID_1.EntityColor.Red:
          result = EntityID_1.EntityID.ItemBombRangeRed;
          break;

         case EntityID_1.EntityColor.Green:
          result = EntityID_1.EntityID.ItemBombRangeGreen;
          break;

         case EntityID_1.EntityColor.Blue:
          result = EntityID_1.EntityID.ItemBombRangeBlue;
          break;

         case EntityID_1.EntityColor.Yellow:
          result = EntityID_1.EntityID.ItemBombRangeYellow;
          break;

         case EntityID_1.EntityColor.Orange:
          result = EntityID_1.EntityID.ItemBombRangeOrange;
          break;

         case EntityID_1.EntityColor.Purple:
          result = EntityID_1.EntityID.ItemBombRangePurple;
        }
        return result;
      };
      ItemBombRange.prototype.getProducedTrainSupplyMaps = function() {
        var result = {};
        result[GameCurrencyType_1.GameCurrencyType.GoldCoin] = 1;
        result[GameCurrencyType_1.GameCurrencyType.TrainHoe] = 1;
        return result;
      };
      ItemBombRange.prototype.getScore = function() {
        return 500;
      };
      ItemBombRange.prototype._onClean = function(cleanOption) {
        _super.prototype._onClean.call(this, cleanOption);
        this.getGrid().gainScoreWithEntity(this);
        if (!this.getIsDud()) {
          IGame_1.default.playAudio(IdentifierManager_1.default.getInstance().getMatchAudioFilePath("eliminate_special_bomb"));
          var grid = this.getGrid();
          var bomb = FlyerBomb_1.default.create(grid, this.getEntityColor(), this.getShouldLayoutGrass(), this.getLogicalPos(), 2);
          grid.setFlyerAtLogicalPos(bomb, this.getLogicalPos());
          this.setVisible(false);
        }
      };
      ItemBombRange.create = function(grid, color) {
        var className = "ItemBombRange";
        var prefabFileName = "match_scene/prefab/entity/item/ItemBombRange";
        var pool = EntityPrefabNodePool_1.default.getInstance();
        var component = pool.getPrefabNodeWithFileNameAndClassName(prefabFileName, className);
        if (component) {
          component.init(grid, color);
          return component;
        }
        return null;
      };
      ItemBombRange.prototype.clone = function() {
        var item = ItemBombRange_1.create(this.getGrid(), this.getEntityColor());
        return item;
      };
      ItemBombRange.prototype.init = function(grid, entityColor) {
        _super.prototype.initBomb.call(this, grid, ItemBombBase_1.ItemBombType.Range);
        this.setEntityColor(entityColor);
      };
      ItemBombRange.prototype.start = function() {};
      var ItemBombRange_1;
      ItemBombRange = ItemBombRange_1 = __decorate([ ccclass ], ItemBombRange);
      return ItemBombRange;
    }(ItemBombBase_1.default);
    exports.default = ItemBombRange;
    cc._RF.pop();
  }, {
    "../../../../../../base/IGame": "IGame",
    "../../../../../../define/GameCurrencyType": "GameCurrencyType",
    "../../../../defines/CollectionID": "CollectionID",
    "../../../../defines/EntityID": "EntityID",
    "../../../../defines/IdentifierManager": "IdentifierManager",
    "../../../EntityPrefabNodePool": "EntityPrefabNodePool",
    "../../../flyer/FlyerBomb": "FlyerBomb",
    "./ItemBombBase": "ItemBombBase"
  } ],
  ItemBombRow: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "a24cbU8cjlClboxTgH8QM0f", "ItemBombRow");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Pair_1 = require("../../../../../../base/Pair");
    var CollectionID_1 = require("../../../../defines/CollectionID");
    var EntityID_1 = require("../../../../defines/EntityID");
    var FlyerCannon_1 = require("../../../flyer/FlyerCannon");
    var ItemBombBase_1 = require("./ItemBombBase");
    var IGame_1 = require("../../../../../../base/IGame");
    var IdentifierManager_1 = require("../../../../defines/IdentifierManager");
    var EntityPrefabNodePool_1 = require("../../../EntityPrefabNodePool");
    var GameCurrencyType_1 = require("../../../../../../define/GameCurrencyType");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ItemBombRow = function(_super) {
      __extends(ItemBombRow, _super);
      function ItemBombRow() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      ItemBombRow_1 = ItemBombRow;
      ItemBombRow.prototype.getCollectionID = function() {
        var result = CollectionID_1.CollectionID.None;
        switch (this.getEntityColor()) {
         case EntityID_1.EntityColor.Red:
          result = CollectionID_1.CollectionID.ItemBombRowRed;
          break;

         case EntityID_1.EntityColor.Green:
          result = CollectionID_1.CollectionID.ItemBombRowGreen;
          break;

         case EntityID_1.EntityColor.Blue:
          result = CollectionID_1.CollectionID.ItemBombRowBlue;
          break;

         case EntityID_1.EntityColor.Yellow:
          result = CollectionID_1.CollectionID.ItemBombRowYellow;
          break;

         case EntityID_1.EntityColor.Orange:
          result = CollectionID_1.CollectionID.ItemBombRowOrange;
          break;

         case EntityID_1.EntityColor.Purple:
          result = CollectionID_1.CollectionID.ItemBombRowPurple;
        }
        return result;
      };
      ItemBombRow.prototype.getEntityID = function() {
        var result = EntityID_1.EntityID.None;
        switch (this.getEntityColor()) {
         case EntityID_1.EntityColor.Red:
          result = EntityID_1.EntityID.ItemBombRowRed;
          break;

         case EntityID_1.EntityColor.Green:
          result = EntityID_1.EntityID.ItemBombRowGreen;
          break;

         case EntityID_1.EntityColor.Blue:
          result = EntityID_1.EntityID.ItemBombRowBlue;
          break;

         case EntityID_1.EntityColor.Yellow:
          result = EntityID_1.EntityID.ItemBombRowYellow;
          break;

         case EntityID_1.EntityColor.Orange:
          result = EntityID_1.EntityID.ItemBombRowOrange;
          break;

         case EntityID_1.EntityColor.Purple:
          result = EntityID_1.EntityID.ItemBombRowPurple;
        }
        return result;
      };
      ItemBombRow.prototype.getProducedTrainSupplyMaps = function() {
        var result = {};
        result[GameCurrencyType_1.GameCurrencyType.GoldCoin] = 1;
        result[GameCurrencyType_1.GameCurrencyType.TrainSoap] = 1;
        return result;
      };
      ItemBombRow.prototype.getScore = function() {
        return 300;
      };
      ItemBombRow.prototype._onClean = function(cleanOption) {
        _super.prototype._onClean.call(this, cleanOption);
        this.getGrid().gainScoreWithEntity(this);
        if (!this.getIsDud()) {
          IGame_1.default.playAudio(IdentifierManager_1.default.getInstance().getMatchAudioFilePath("eliminate_special_line"));
          var rayDirections = [ new Pair_1.Pair(cc.v2(1, 0), true), new Pair_1.Pair(cc.v2(-1, 0), false) ];
          var grid = this.getGrid();
          for (var _i = 0, rayDirections_1 = rayDirections; _i < rayDirections_1.length; _i++) {
            var ray = rayDirections_1[_i];
            var cannon = FlyerCannon_1.default.create(grid, this.getEntityColor(), this.getShouldLayoutGrass(), this.getLogicalPos(), ray.first, ray.second);
            grid.setFlyerAtLogicalPos(cannon, this.getLogicalPos());
          }
          this.setVisible(false);
        }
      };
      ItemBombRow.create = function(grid, color) {
        var className = "ItemBombRow";
        var prefabFileName = "match_scene/prefab/entity/item/ItemBombRow";
        var pool = EntityPrefabNodePool_1.default.getInstance();
        var component = pool.getPrefabNodeWithFileNameAndClassName(prefabFileName, className);
        if (component) {
          component.init(grid, color);
          return component;
        }
        return null;
      };
      ItemBombRow.prototype.clone = function() {
        var item = ItemBombRow_1.create(this.getGrid(), this.getEntityColor());
        return item;
      };
      ItemBombRow.prototype.init = function(grid, entityColor) {
        _super.prototype.initBomb.call(this, grid, ItemBombBase_1.ItemBombType.Row);
        this.setEntityColor(entityColor);
      };
      ItemBombRow.prototype.start = function() {};
      var ItemBombRow_1;
      ItemBombRow = ItemBombRow_1 = __decorate([ ccclass ], ItemBombRow);
      return ItemBombRow;
    }(ItemBombBase_1.default);
    exports.default = ItemBombRow;
    cc._RF.pop();
  }, {
    "../../../../../../base/IGame": "IGame",
    "../../../../../../base/Pair": "Pair",
    "../../../../../../define/GameCurrencyType": "GameCurrencyType",
    "../../../../defines/CollectionID": "CollectionID",
    "../../../../defines/EntityID": "EntityID",
    "../../../../defines/IdentifierManager": "IdentifierManager",
    "../../../EntityPrefabNodePool": "EntityPrefabNodePool",
    "../../../flyer/FlyerCannon": "FlyerCannon",
    "./ItemBombBase": "ItemBombBase"
  } ],
  ItemBone: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "7d476kXhRBMI76wbPId2lGt", "ItemBone");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var ItemBase_1 = require("../ItemBase");
    var CollectionID_1 = require("../../../defines/CollectionID");
    var EntityID_1 = require("../../../defines/EntityID");
    var GridCommand_1 = require("../../../commond/GridCommand");
    var FlyerAnimation_1 = require("../../flyer/FlyerAnimation");
    var IGame_1 = require("../../../../../base/IGame");
    var IdentifierManager_1 = require("../../../defines/IdentifierManager");
    var EntityPrefabNodePool_1 = require("../../EntityPrefabNodePool");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ItemBone = function(_super) {
      __extends(ItemBone, _super);
      function ItemBone() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      ItemBone_1 = ItemBone;
      ItemBone.create = function(grid) {
        var className = "ItemBone";
        var prefabFileName = "match_scene/prefab/entity/item/ItemBone";
        var pool = EntityPrefabNodePool_1.default.getInstance();
        var component = pool.getPrefabNodeWithFileNameAndClassName(prefabFileName, className);
        if (component) {
          component.init(grid);
          return component;
        }
        return null;
      };
      ItemBone.prototype.clone = function() {
        var item = ItemBone_1.create(this.getGrid());
        return item;
      };
      ItemBone.prototype.getCollectionID = function() {
        return CollectionID_1.CollectionID.ItemBone;
      };
      ItemBone.prototype.getEntityID = function() {
        return EntityID_1.EntityID.ItemBone;
      };
      ItemBone.prototype.getScore = function() {
        return 500;
      };
      ItemBone.prototype.init = function(grid) {
        _super.prototype.initItem.call(this, grid, ItemBase_1.ItemType.Bone);
      };
      ItemBone.prototype._canDrop = function() {
        return true;
      };
      ItemBone.prototype._canSwap = function() {
        return true;
      };
      ItemBone.prototype._canMatch = function() {
        return false;
      };
      ItemBone.prototype._canCleanBySuicide = function() {
        return true;
      };
      ItemBone.prototype._satisfyMatch = function() {
        var cell = this.getGrid().getCellAtLogicalPos(this.getLogicalPos());
        if (cell && cell.getIsBoneCollector()) return true;
        return false;
      };
      ItemBone.prototype._onSatisfyMatch = function(basePriority) {
        this.getGrid().dispatchCommand(this.getLogicalPos(), GridCommand_1.default.SuicideClean(this.getLogicalPos(), EntityID_1.EntityColor.None, false), 0);
      };
      ItemBone.prototype._canMatchWithNeighbourSwap = function(swapPos) {
        var item = this.getGrid().getItemAtLogicalPos(swapPos);
        if (item) {
          if (item.getEntityID() == EntityID_1.EntityID.ItemBone) return false;
          if (item.getEntityID() == EntityID_1.EntityID.ItemBombRainbow || item.canExcuteCommand(GridCommand_1.default.NeighbourSwap(this.getLogicalPos()))) return this._satisfyMatch();
        }
        return false;
      };
      ItemBone.prototype._onMatchWithNeighbourSwap = function(swapPos) {
        this.getGrid().dispatchCommand(this.getLogicalPos(), GridCommand_1.default.SuicideClean(this.getLogicalPos(), EntityID_1.EntityColor.None, false), 0);
      };
      ItemBone.prototype._onClean = function(cleanOption) {
        this.setVisible(false);
        this.getGrid().gainScoreWithEntity(this);
        this.progressDeathWish(cleanOption);
        this.selfDestory(true);
        var flyer = FlyerAnimation_1.default.createAnimationWithType(this.getGrid(), FlyerAnimation_1.FlyerAnimationType.CommonHurt);
        this.getGrid().setFlyerAtLogicalPos(flyer, this.getLogicalPos());
        flyer.node.zIndex = this.getTopZOrder();
        IGame_1.default.playAudio(IdentifierManager_1.default.getInstance().getMatchAudioFilePath("bone"));
      };
      var ItemBone_1;
      ItemBone = ItemBone_1 = __decorate([ ccclass ], ItemBone);
      return ItemBone;
    }(ItemBase_1.default);
    exports.default = ItemBone;
    cc._RF.pop();
  }, {
    "../../../../../base/IGame": "IGame",
    "../../../commond/GridCommand": "GridCommand",
    "../../../defines/CollectionID": "CollectionID",
    "../../../defines/EntityID": "EntityID",
    "../../../defines/IdentifierManager": "IdentifierManager",
    "../../EntityPrefabNodePool": "EntityPrefabNodePool",
    "../../flyer/FlyerAnimation": "FlyerAnimation",
    "../ItemBase": "ItemBase"
  } ],
  ItemChestnut: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "da5b6zM5o9MY55D20uGtNon", "ItemChestnut");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var ItemBase_1 = require("../ItemBase");
    var CollectionID_1 = require("../../../defines/CollectionID");
    var EntityID_1 = require("../../../defines/EntityID");
    var FlyerAnimation_1 = require("../../flyer/FlyerAnimation");
    var IGame_1 = require("../../../../../base/IGame");
    var IdentifierManager_1 = require("../../../defines/IdentifierManager");
    var EntityPrefabNodePool_1 = require("../../EntityPrefabNodePool");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ItemChestnut = function(_super) {
      __extends(ItemChestnut, _super);
      function ItemChestnut() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      ItemChestnut_1 = ItemChestnut;
      ItemChestnut.create = function(grid) {
        var className = "ItemChestnut";
        var prefabFileName = "match_scene/prefab/entity/item/ItemChestnut";
        var pool = EntityPrefabNodePool_1.default.getInstance();
        var component = pool.getPrefabNodeWithFileNameAndClassName(prefabFileName, className);
        if (component) {
          component.init(grid);
          return component;
        }
        return null;
      };
      ItemChestnut.prototype.clone = function() {
        var item = ItemChestnut_1.create(this.getGrid());
        return item;
      };
      ItemChestnut.prototype.getCollectionID = function() {
        return CollectionID_1.CollectionID.ItemChestnut;
      };
      ItemChestnut.prototype.getEntityID = function() {
        return EntityID_1.EntityID.ItemChestnut;
      };
      ItemChestnut.prototype.getScore = function() {
        return 150;
      };
      ItemChestnut.prototype.getButterflyPriority = function(color, layoutGrass) {
        if (this.getGrid().isTargetCollectionID(this.getCollectionID())) return 1;
        return _super.prototype.getButterflyPriority.call(this, color, layoutGrass);
      };
      ItemChestnut.prototype.init = function(grid) {
        _super.prototype.initItem.call(this, grid, ItemBase_1.ItemType.Chestnut);
      };
      ItemChestnut.prototype._canDrop = function() {
        return true;
      };
      ItemChestnut.prototype._canSwap = function() {
        return true;
      };
      ItemChestnut.prototype._canBlockBombRay = function() {
        return true;
      };
      ItemChestnut.prototype._canCleanByBomb = function(cleanColor) {
        return true;
      };
      ItemChestnut.prototype._canCleanByNeighbour = function(color) {
        return true;
      };
      ItemChestnut.prototype._onClean = function(cleanOption) {
        this.getGrid().gainScoreWithEntity(this);
        if (!this.isTargetCollection()) {
          var flyer = FlyerAnimation_1.default.createDieAnimation(this.getGrid(), this.getEntityID());
          this.getGrid().setFlyerAtLogicalPos(flyer, this.getLogicalPos());
          IGame_1.default.playAudio(IdentifierManager_1.default.getInstance().getMatchAudioFilePath("nut"));
        }
        this.setVisible(false);
        this.progressDeathWish(cleanOption);
        this.selfDestory(true);
      };
      var ItemChestnut_1;
      ItemChestnut = ItemChestnut_1 = __decorate([ ccclass ], ItemChestnut);
      return ItemChestnut;
    }(ItemBase_1.default);
    exports.default = ItemChestnut;
    cc._RF.pop();
  }, {
    "../../../../../base/IGame": "IGame",
    "../../../defines/CollectionID": "CollectionID",
    "../../../defines/EntityID": "EntityID",
    "../../../defines/IdentifierManager": "IdentifierManager",
    "../../EntityPrefabNodePool": "EntityPrefabNodePool",
    "../../flyer/FlyerAnimation": "FlyerAnimation",
    "../ItemBase": "ItemBase"
  } ],
  ItemDogHouse: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "ef13dbK3idGv415WZNpClz4", "ItemDogHouse");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var CollectionID_1 = require("../../../defines/CollectionID");
    var EntityID_1 = require("../../../defines/EntityID");
    var ItemBase_1 = require("../ItemBase");
    var EntityPrefabNodePool_1 = require("../../EntityPrefabNodePool");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ItemDogHouse = function(_super) {
      __extends(ItemDogHouse, _super);
      function ItemDogHouse() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      ItemDogHouse_1 = ItemDogHouse;
      ItemDogHouse.create = function(grid) {
        var className = "ItemDogHouse";
        var prefabFileName = "match_scene/prefab/entity/item/ItemDogHouse";
        var pool = EntityPrefabNodePool_1.default.getInstance();
        var component = pool.getPrefabNodeWithFileNameAndClassName(prefabFileName, className);
        if (component) {
          component.init(grid);
          return component;
        }
        return null;
      };
      ItemDogHouse.prototype.clone = function() {
        var item = ItemDogHouse_1.create(this.getGrid());
        return item;
      };
      ItemDogHouse.prototype.getCollectionID = function() {
        return CollectionID_1.CollectionID.ItemDogHouse;
      };
      ItemDogHouse.prototype.getEntityID = function() {
        return EntityID_1.EntityID.ItemDogHouse;
      };
      ItemDogHouse.prototype.init = function(grid) {
        _super.prototype.initItem.call(this, grid, ItemBase_1.ItemType.DogHouse);
      };
      ItemDogHouse.prototype._canDrop = function() {
        return false;
      };
      ItemDogHouse.prototype._canSwap = function() {
        return false;
      };
      ItemDogHouse.prototype._canMatch = function() {
        return false;
      };
      ItemDogHouse.prototype._converUnderForever = function() {
        return true;
      };
      var ItemDogHouse_1;
      ItemDogHouse = ItemDogHouse_1 = __decorate([ ccclass ], ItemDogHouse);
      return ItemDogHouse;
    }(ItemBase_1.default);
    exports.default = ItemDogHouse;
    cc._RF.pop();
  }, {
    "../../../defines/CollectionID": "CollectionID",
    "../../../defines/EntityID": "EntityID",
    "../../EntityPrefabNodePool": "EntityPrefabNodePool",
    "../ItemBase": "ItemBase"
  } ],
  ItemDogPaw: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "b3014JsLrZCVYkSoIOUSPEL", "ItemDogPaw");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var CollectionID_1 = require("../../../defines/CollectionID");
    var EntityID_1 = require("../../../defines/EntityID");
    var PowerID_1 = require("../../../defines/PowerID");
    var GridBase_1 = require("../../../grid/GridBase");
    var ItemBase_1 = require("../ItemBase");
    var IGame_1 = require("../../../../../base/IGame");
    var IdentifierManager_1 = require("../../../defines/IdentifierManager");
    var EntityPrefabNodePool_1 = require("../../EntityPrefabNodePool");
    var GameMath_1 = require("../../../../../extend/utils/GameMath");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ItemDogPaw = function(_super) {
      __extends(ItemDogPaw, _super);
      function ItemDogPaw() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      ItemDogPaw_1 = ItemDogPaw;
      ItemDogPaw.create = function(grid, color) {
        var className = "ItemDogPaw";
        var prefabFileName = "match_scene/prefab/entity/item/ItemDogPaw";
        var pool = EntityPrefabNodePool_1.default.getInstance();
        var component = pool.getPrefabNodeWithFileNameAndClassName(prefabFileName, className);
        if (component) {
          component.init(grid, color);
          return component;
        }
        return null;
      };
      ItemDogPaw.prototype.clone = function() {
        var item = ItemDogPaw_1.create(this.getGrid(), this.getEntityColor());
        return item;
      };
      ItemDogPaw.prototype.init = function(grid, color) {
        _super.prototype.initItem.call(this, grid, ItemBase_1.ItemType.DogPaw);
        this.setEntityColor(color);
      };
      ItemDogPaw.prototype.getCollectionID = function() {
        var result = CollectionID_1.CollectionID.None;
        switch (this.getEntityColor()) {
         case EntityID_1.EntityColor.Red:
          result = CollectionID_1.CollectionID.ItemPawRed;
          break;

         case EntityID_1.EntityColor.Green:
          result = CollectionID_1.CollectionID.ItemPawGreen;
          break;

         case EntityID_1.EntityColor.Blue:
          result = CollectionID_1.CollectionID.ItemPawBlue;
          break;

         case EntityID_1.EntityColor.Yellow:
          result = CollectionID_1.CollectionID.ItemPawYellow;
          break;

         case EntityID_1.EntityColor.Orange:
          result = CollectionID_1.CollectionID.ItemPawOrange;
          break;

         case EntityID_1.EntityColor.Purple:
          result = CollectionID_1.CollectionID.ItemPawPurple;
        }
        return result;
      };
      ItemDogPaw.prototype.getEntityID = function() {
        var result = EntityID_1.EntityID.None;
        switch (this.getEntityColor()) {
         case EntityID_1.EntityColor.Red:
          result = EntityID_1.EntityID.ItemPawRed;
          break;

         case EntityID_1.EntityColor.Green:
          result = EntityID_1.EntityID.ItemPawGreen;
          break;

         case EntityID_1.EntityColor.Blue:
          result = EntityID_1.EntityID.ItemPawBlue;
          break;

         case EntityID_1.EntityColor.Yellow:
          result = EntityID_1.EntityID.ItemPawYellow;
          break;

         case EntityID_1.EntityColor.Orange:
          result = EntityID_1.EntityID.ItemPawOrange;
          break;

         case EntityID_1.EntityColor.Purple:
          result = EntityID_1.EntityID.ItemPawPurple;
        }
        return result;
      };
      ItemDogPaw.prototype.getPowerID = function() {
        return PowerID_1.PowerID.PuppyVitality;
      };
      ItemDogPaw.prototype.getScore = function() {
        return 100;
      };
      ItemDogPaw.prototype._canDrop = function() {
        return true;
      };
      ItemDogPaw.prototype._canSwap = function() {
        return true;
      };
      ItemDogPaw.prototype._canMatch = function() {
        return true;
      };
      ItemDogPaw.prototype._canChangeColor = function() {
        return true;
      };
      ItemDogPaw.prototype._canCleanByBomb = function(cleanColor) {
        return true;
      };
      ItemDogPaw.prototype._canCleanByMatch = function() {
        return true;
      };
      ItemDogPaw.prototype._canShuffleWhenCreate = function() {
        return true;
      };
      ItemDogPaw.prototype._onClean = function(cleanOption) {
        var _this = this;
        this.progressDeathWish(cleanOption);
        var state = this.playAnimation("matched");
        if (state) {
          this.removeFromGridAndAddToEffect();
          this.node.zIndex = GridBase_1.default.ZORDER_PUPPY_TOP;
          this.getGrid().addObstructs(this);
          var removeAction = cc.sequence(cc.delayTime(state.duration), cc.callFunc(function() {
            _this._flyToDog();
          }));
          this.runAction(removeAction);
        } else this.selfDestory(true);
        this.getGrid().gainScoreWithEntity(this);
        if (cleanOption.cleanType == EntityID_1.EntityCleanType.Match) {
          var combo = this.getGrid().getPowerAmount(PowerID_1.PowerID.MatchCombo);
          var fileName = "eliminate_0";
          switch (combo) {
           case 0:
            fileName = "eliminate_0";
            break;

           case 1:
            fileName = "eliminate_1";
            break;

           case 2:
            fileName = "eliminate_2";
            break;

           case 3:
            fileName = "eliminate_3";
            break;

           case 4:
            fileName = "eliminate_4";
            break;

           case 5:
            fileName = "eliminate_5";
            break;

           case 6:
            fileName = "eliminate_6";
            break;

           case 7:
            fileName = "eliminate_7";
            break;

           case 8:
           default:
            fileName = "eliminate_8";
          }
          IGame_1.default.playAudio(IdentifierManager_1.default.getInstance().getMatchAudioFilePath(fileName));
        }
      };
      ItemDogPaw.prototype._flyToDog = function() {
        var _this = this;
        if (this.getGrid().isTargetCollectionID(CollectionID_1.CollectionID.ItemPuppy)) {
          var targetPos_1 = cc.Vec2.ZERO;
          var itemsMap = this.getGrid().getItemsMap();
          for (var key in itemsMap) {
            var item = itemsMap[key];
            if (item.getEntityID() == EntityID_1.EntityID.ItemPuppy) {
              targetPos_1 = item.getLogicalPos();
              break;
            }
          }
          var distance = GameMath_1.default.getDistance(this.node.position, this.getPixelPos(targetPos_1));
          var duration = distance / 1e3;
          var move = cc.sequence(cc.spawn(cc.moveTo(duration, this.getPixelPos(targetPos_1)), cc.scaleTo(duration, .5)), cc.callFunc(function() {
            _this.getGrid().bombCell(targetPos_1);
            _this.getGrid().removeObstructs(_this);
            _this.destoryWithRecycle(true);
          }));
          this.runAction(move);
        } else this.selfDestory(true);
      };
      var ItemDogPaw_1;
      ItemDogPaw = ItemDogPaw_1 = __decorate([ ccclass ], ItemDogPaw);
      return ItemDogPaw;
    }(ItemBase_1.default);
    exports.default = ItemDogPaw;
    cc._RF.pop();
  }, {
    "../../../../../base/IGame": "IGame",
    "../../../../../extend/utils/GameMath": "GameMath",
    "../../../defines/CollectionID": "CollectionID",
    "../../../defines/EntityID": "EntityID",
    "../../../defines/IdentifierManager": "IdentifierManager",
    "../../../defines/PowerID": "PowerID",
    "../../../grid/GridBase": "GridBase",
    "../../EntityPrefabNodePool": "EntityPrefabNodePool",
    "../ItemBase": "ItemBase"
  } ],
  ItemDoughnut: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "a1008d1EBtKPJeLWe9CZdlJ", "ItemDoughnut");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var ItemBase_1 = require("../ItemBase");
    var CollectionID_1 = require("../../../defines/CollectionID");
    var EntityID_1 = require("../../../defines/EntityID");
    var IdentifierManager_1 = require("../../../defines/IdentifierManager");
    var FlyerAnimation_1 = require("../../flyer/FlyerAnimation");
    var IGame_1 = require("../../../../../base/IGame");
    var EntityPrefabNodePool_1 = require("../../EntityPrefabNodePool");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ItemDoughnut = function(_super) {
      __extends(ItemDoughnut, _super);
      function ItemDoughnut() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this._healthPoint = 0;
        return _this;
      }
      ItemDoughnut_1 = ItemDoughnut;
      ItemDoughnut.create = function(grid, healthPoint) {
        var className = "ItemDoughnut";
        var prefabFileName = "match_scene/prefab/entity/item/ItemDoughnut";
        var pool = EntityPrefabNodePool_1.default.getInstance();
        var component = pool.getPrefabNodeWithFileNameAndClassName(prefabFileName, className);
        if (component) {
          component.init(grid, healthPoint);
          return component;
        }
        return null;
      };
      ItemDoughnut.prototype.clone = function() {
        var item = ItemDoughnut_1.create(this.getGrid(), this.getHealthPoint());
        return item;
      };
      ItemDoughnut.prototype.getCollectionID = function() {
        return CollectionID_1.CollectionID.ItemDoughnut;
      };
      ItemDoughnut.prototype.getEntityID = function() {
        var result = EntityID_1.EntityID.None;
        switch (this.getHealthPoint()) {
         case 1:
          result = EntityID_1.EntityID.ItemDoughnutHp1;
          break;

         case 2:
          result = EntityID_1.EntityID.ItemDoughnutHp2;
          break;

         case 3:
          result = EntityID_1.EntityID.ItemDoughnutHp3;
        }
        return result;
      };
      ItemDoughnut.prototype.getScore = function() {
        return 100;
      };
      ItemDoughnut.prototype.getButterflyPriority = function(color, layoutGrass) {
        if (this.getGrid().isTargetCollectionID(this.getCollectionID())) return 1;
        return _super.prototype.getButterflyPriority.call(this, color, layoutGrass);
      };
      ItemDoughnut.prototype.init = function(grid, healthPoint) {
        _super.prototype.initItem.call(this, grid, ItemBase_1.ItemType.Doughnut);
        this.setHealthPoint(healthPoint);
      };
      ItemDoughnut.prototype._canDrop = function() {
        return true;
      };
      ItemDoughnut.prototype._canSwap = function() {
        return true;
      };
      ItemDoughnut.prototype._canCleanByBomb = function(cleanColor) {
        return true;
      };
      ItemDoughnut.prototype._canCleanByNeighbour = function(color) {
        return true;
      };
      ItemDoughnut.prototype._onClean = function(cleanOption) {
        var rate = 1;
        if (cleanOption.cleanType == EntityID_1.EntityCleanType.Terminate) {
          rate = this.getHealthPoint();
          this.setHealthPoint(1);
        }
        this.getGrid().gainScoreWithEntity(this, rate);
        if (this.getHealthPoint() <= 1) {
          if (!this.isTargetCollection()) {
            var flyer = FlyerAnimation_1.default.createDieAnimation(this.getGrid(), this.getEntityID());
            this.getGrid().setFlyerAtLogicalPos(flyer, this.getLogicalPos());
            IGame_1.default.playAudio(IdentifierManager_1.default.getInstance().getMatchAudioFilePath("doughnut"));
          }
          this.setVisible(false);
          this.progressDeathWish(cleanOption);
          this.selfDestory(true);
        } else {
          this.setHealthPoint(this.getHealthPoint() - 1);
          this.selfHurt();
          IGame_1.default.playAudio(IdentifierManager_1.default.getInstance().getMatchAudioFilePath("eliminate_0"));
          var flyer = FlyerAnimation_1.default.createAnimationWithType(this.getGrid(), FlyerAnimation_1.FlyerAnimationType.CommonHurt);
          this.getGrid().setFlyerAtLogicalPos(flyer, this.getLogicalPos());
          flyer.node.zIndex = this.getTopZOrder();
        }
      };
      ItemDoughnut.prototype.getHealthPoint = function() {
        return this._healthPoint;
      };
      ItemDoughnut.prototype.setHealthPoint = function(val) {
        this._healthPoint = val;
        this.updatePuppet();
      };
      var ItemDoughnut_1;
      ItemDoughnut = ItemDoughnut_1 = __decorate([ ccclass ], ItemDoughnut);
      return ItemDoughnut;
    }(ItemBase_1.default);
    exports.default = ItemDoughnut;
    cc._RF.pop();
  }, {
    "../../../../../base/IGame": "IGame",
    "../../../defines/CollectionID": "CollectionID",
    "../../../defines/EntityID": "EntityID",
    "../../../defines/IdentifierManager": "IdentifierManager",
    "../../EntityPrefabNodePool": "EntityPrefabNodePool",
    "../../flyer/FlyerAnimation": "FlyerAnimation",
    "../ItemBase": "ItemBase"
  } ],
  ItemFactory: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "68828C8uZ5BZbjT3gNOHYmL", "ItemFactory");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var GameMath_1 = require("../../../../extend/utils/GameMath");
    var EntityID_1 = require("../../defines/EntityID");
    var IdentifierManager_1 = require("../../defines/IdentifierManager");
    var KindID_1 = require("../../defines/KindID");
    var ItemBombBase_1 = require("./color/bomb/ItemBombBase");
    var ItemBombButterfly_1 = require("./color/bomb/ItemBombButterfly");
    var ItemBombColumn_1 = require("./color/bomb/ItemBombColumn");
    var ItemBombCross_1 = require("./color/bomb/ItemBombCross");
    var ItemBombRainbow_1 = require("./color/bomb/ItemBombRainbow");
    var ItemBombRange_1 = require("./color/bomb/ItemBombRange");
    var ItemBombRow_1 = require("./color/bomb/ItemBombRow");
    var ItemDogPaw_1 = require("./color/ItemDogPaw");
    var ItemNormal_1 = require("./color/ItemNormal");
    var ItemBalloon_1 = require("./special/ItemBalloon");
    var ItemDogHouse_1 = require("./special/ItemDogHouse");
    var ItemMagicCrystal_1 = require("./special/ItemMagicCrystal");
    var ItemPuppy_1 = require("./special/ItemPuppy");
    var ItemBlock_1 = require("./special/ItemBlock");
    var ItemBone_1 = require("./special/ItemBone");
    var ItemWatermelon_1 = require("./special/ItemWatermelon");
    var ItemDoughnut_1 = require("./special/ItemDoughnut");
    var ItemFireWormBottle_1 = require("./special/ItemFireWormBottle");
    var ItemJamBottle_1 = require("./special/ItemJamBottle");
    var ItemFruitCake_1 = require("./special/ItemFruitCake");
    var ItemChestnut_1 = require("./special/ItemChestnut");
    var ItemHoneyComb_1 = require("./special/ItemHoneyComb");
    var ItemMower_1 = require("./special/ItemMower");
    var ItemFireworks_1 = require("./special/ItemFireworks");
    var ItemStatue_1 = require("./special/ItemStatue");
    var EntityGroupID_1 = require("../../defines/EntityGroupID");
    var ItemFactory = function() {
      function ItemFactory() {}
      ItemFactory.generateItemWithEntityID = function(grid, entityID) {
        var item = null;
        switch (entityID) {
         case EntityID_1.EntityID.ItemNormalRed:
         case EntityID_1.EntityID.ItemNormalGreen:
         case EntityID_1.EntityID.ItemNormalBlue:
         case EntityID_1.EntityID.ItemNormalYellow:
         case EntityID_1.EntityID.ItemNormalOrange:
         case EntityID_1.EntityID.ItemNormalPurple:
          var color = entityID - EntityID_1.EntityID.ItemNormalRed + EntityID_1.EntityColor.Red;
          item = ItemNormal_1.default.create(grid, color);
          break;

         case EntityID_1.EntityID.ItemBombButterflyRed:
         case EntityID_1.EntityID.ItemBombButterflyGreen:
         case EntityID_1.EntityID.ItemBombButterflyBlue:
         case EntityID_1.EntityID.ItemBombButterflyYellow:
         case EntityID_1.EntityID.ItemBombButterflyOrange:
         case EntityID_1.EntityID.ItemBombButterflyPurple:
          var color = entityID - EntityID_1.EntityID.ItemBombButterflyRed + EntityID_1.EntityColor.Red;
          item = ItemBombButterfly_1.default.create(grid, color);
          break;

         case EntityID_1.EntityID.ItemBombRowRed:
         case EntityID_1.EntityID.ItemBombRowGreen:
         case EntityID_1.EntityID.ItemBombRowBlue:
         case EntityID_1.EntityID.ItemBombRowYellow:
         case EntityID_1.EntityID.ItemBombRowOrange:
         case EntityID_1.EntityID.ItemBombRowPurple:
          var color = entityID - EntityID_1.EntityID.ItemBombRowRed + EntityID_1.EntityColor.Red;
          item = ItemBombRow_1.default.create(grid, color);
          break;

         case EntityID_1.EntityID.ItemBombColumnRed:
         case EntityID_1.EntityID.ItemBombColumnGreen:
         case EntityID_1.EntityID.ItemBombColumnBlue:
         case EntityID_1.EntityID.ItemBombColumnYellow:
         case EntityID_1.EntityID.ItemBombColumnOrange:
         case EntityID_1.EntityID.ItemBombColumnPurple:
          var color = entityID - EntityID_1.EntityID.ItemBombColumnRed + EntityID_1.EntityColor.Red;
          item = ItemBombColumn_1.default.create(grid, color);
          break;

         case EntityID_1.EntityID.ItemBombCrossRed:
         case EntityID_1.EntityID.ItemBombCrossGreen:
         case EntityID_1.EntityID.ItemBombCrossBlue:
         case EntityID_1.EntityID.ItemBombCrossYellow:
         case EntityID_1.EntityID.ItemBombCrossOrange:
         case EntityID_1.EntityID.ItemBombCrossPurple:
          var color = entityID - EntityID_1.EntityID.ItemBombCrossRed + EntityID_1.EntityColor.Red;
          item = ItemBombCross_1.default.create(grid, color);
          break;

         case EntityID_1.EntityID.ItemBombRangeRed:
         case EntityID_1.EntityID.ItemBombRangeGreen:
         case EntityID_1.EntityID.ItemBombRangeBlue:
         case EntityID_1.EntityID.ItemBombRangeYellow:
         case EntityID_1.EntityID.ItemBombRangeOrange:
         case EntityID_1.EntityID.ItemBombRangePurple:
          var color = entityID - EntityID_1.EntityID.ItemBombRangeRed + EntityID_1.EntityColor.Red;
          item = ItemBombRange_1.default.create(grid, color);
          break;

         case EntityID_1.EntityID.ItemPawRed:
         case EntityID_1.EntityID.ItemPawGreen:
         case EntityID_1.EntityID.ItemPawBlue:
         case EntityID_1.EntityID.ItemPawYellow:
         case EntityID_1.EntityID.ItemPawOrange:
         case EntityID_1.EntityID.ItemPawPurple:
          var color = entityID - EntityID_1.EntityID.ItemPawRed + EntityID_1.EntityColor.Red;
          item = ItemDogPaw_1.default.create(grid, color);
          break;

         case EntityID_1.EntityID.ItemBombRainbow:
          item = ItemBombRainbow_1.default.create(grid);
          break;

         case EntityID_1.EntityID.ItemDoughnutHp1:
         case EntityID_1.EntityID.ItemDoughnutHp2:
         case EntityID_1.EntityID.ItemDoughnutHp3:
          var hp = entityID - EntityID_1.EntityID.ItemDoughnutHp1 + 1;
          item = ItemDoughnut_1.default.create(grid, hp);
          break;

         case EntityID_1.EntityID.ItemBlockHp1:
         case EntityID_1.EntityID.ItemBlockHp2:
         case EntityID_1.EntityID.ItemBlockHp3:
         case EntityID_1.EntityID.ItemBlockHp4:
         case EntityID_1.EntityID.ItemBlockHp5:
         case EntityID_1.EntityID.ItemBlockHp6:
          var hp = entityID - EntityID_1.EntityID.ItemBlockHp1 + 1;
          item = ItemBlock_1.default.create(grid, hp);
          break;

         case EntityID_1.EntityID.ItemMagicCrystal:
          item = ItemMagicCrystal_1.default.create(grid);
          break;

         case EntityID_1.EntityID.ItemMowerUp:
         case EntityID_1.EntityID.ItemMowerRight:
         case EntityID_1.EntityID.ItemMowerDown:
         case EntityID_1.EntityID.ItemMowerLeft:
          var dirction = entityID - EntityID_1.EntityID.ItemMowerUp + ItemMower_1.ItemMowerDirection.Up;
          item = ItemMower_1.default.create(grid, dirction);
          break;

         case EntityID_1.EntityID.ItemBone:
          item = ItemBone_1.default.create(grid);
          break;

         case EntityID_1.EntityID.ItemChestnut:
          item = ItemChestnut_1.default.create(grid);
          break;

         case EntityID_1.EntityID.ItemPuppy:
          item = ItemPuppy_1.default.create(grid);
          break;

         case EntityID_1.EntityID.ItemDogHouse:
          item = ItemDogHouse_1.default.create(grid);
          break;

         case EntityID_1.EntityID.ItemBalloon:
          item = ItemBalloon_1.default.create(grid);
          break;

         case EntityID_1.EntityID.ItemHoneyComb:
          item = ItemHoneyComb_1.default.create(grid);
          break;

         case EntityID_1.EntityID.ItemJamBottle:
          item = ItemJamBottle_1.default.create(grid);
          break;

         case EntityID_1.EntityID.ItemWatermelon:
          item = ItemWatermelon_1.default.create(grid);
          break;

         case EntityID_1.EntityID.ItemFruitCake:
          item = ItemFruitCake_1.default.create(grid);
          break;

         case EntityID_1.EntityID.ItemFireWormBottle:
          item = ItemFireWormBottle_1.default.create(grid);
          break;

         case EntityID_1.EntityID.ItemFireworksHp1:
         case EntityID_1.EntityID.ItemFireworksHp2:
         case EntityID_1.EntityID.ItemFireworksHp3:
         case EntityID_1.EntityID.ItemFireworksHp4:
          var hp = entityID - EntityID_1.EntityID.ItemFireworksHp1 + 1;
          item = ItemFireworks_1.default.create(grid, hp);
          break;

         case EntityID_1.EntityID.ItemStatueHp1:
         case EntityID_1.EntityID.ItemStatueHp2:
         case EntityID_1.EntityID.ItemStatueHp3:
          var hp = entityID - EntityID_1.EntityID.ItemStatueHp1 + 1;
          item = ItemStatue_1.default.create(grid, hp);
        }
        item || (item = this.generateNormalRandomItem(grid));
        return item;
      };
      ItemFactory.generateNormalRandomItem = function(grid) {
        var dropEntityMap = grid.getDropEntityMap();
        var avilabelEntityMap = {};
        var normalIDs = IdentifierManager_1.default.getInstance().getEntityIDsFromEntityGroupID(EntityGroupID_1.EntityGroupID.ItemNormal);
        var pawIDs = IdentifierManager_1.default.getInstance().getEntityIDsFromEntityGroupID(EntityGroupID_1.EntityGroupID.ItemPaw);
        for (var key in dropEntityMap) {
          var amount = dropEntityMap[key];
          var entityID_1 = Number(key);
          -1 == normalIDs.indexOf(entityID_1) && -1 == pawIDs.indexOf(entityID_1) || (avilabelEntityMap[entityID_1] = amount);
        }
        var entityID = grid.getRandomEntityID(avilabelEntityMap, grid.getLimitedEntityMap(), grid.getLimitedGroupMap(), true);
        return ItemFactory.generateItemWithEntityID(grid, entityID);
      };
      ItemFactory.generateRandomItemWithGroupIDs = function(groupIDs, grid) {
        var dropEntityMap = grid.getDropEntityMap();
        var avilabelEntityMap = {};
        for (var _i = 0, groupIDs_1 = groupIDs; _i < groupIDs_1.length; _i++) {
          var groupID = groupIDs_1[_i];
          var entityIDs = IdentifierManager_1.default.getInstance().getEntityIDsFromEntityGroupID(groupID);
          for (var _a = 0, entityIDs_1 = entityIDs; _a < entityIDs_1.length; _a++) {
            var entityID_2 = entityIDs_1[_a];
            var relevantEntityID = IdentifierManager_1.default.getInstance().getCorrespondingNormlaEntityID(entityID_2);
            var value = dropEntityMap[relevantEntityID];
            value && (avilabelEntityMap[entityID_2] = value);
          }
        }
        var entityID = grid.getRandomEntityID(avilabelEntityMap, {}, {});
        return ItemFactory.generateItemWithEntityID(grid, entityID);
      };
      ItemFactory.generateItemWithKindID = function(grid, kindID) {
        var item = null;
        switch (kindID) {
         case KindID_1.KindID.ItemNormalRandom:
          item = ItemFactory.generateNormalRandomItem(grid);
          break;

         case KindID_1.KindID.ItemBombButterflyRandom:
          item = ItemFactory.generateRandomItemWithGroupIDs([ EntityGroupID_1.EntityGroupID.ItemBombButterfly ], grid);
          break;

         case KindID_1.KindID.ItemBombRowRandom:
          item = ItemFactory.generateRandomItemWithGroupIDs([ EntityGroupID_1.EntityGroupID.ItemBombRow ], grid);
          break;

         case KindID_1.KindID.ItemBombColumnRandom:
          item = ItemFactory.generateRandomItemWithGroupIDs([ EntityGroupID_1.EntityGroupID.ItemBombColumn ], grid);
          break;

         case KindID_1.KindID.ItemBombCrossRandom:
          item = ItemFactory.generateRandomItemWithGroupIDs([ EntityGroupID_1.EntityGroupID.ItemBombCross ], grid);
          break;

         case KindID_1.KindID.ItemBombRangeRandom:
          item = ItemFactory.generateRandomItemWithGroupIDs([ EntityGroupID_1.EntityGroupID.ItemBombRange ], grid);
          break;

         case KindID_1.KindID.ItemPawRandom:
          item = ItemFactory.generateRandomItemWithGroupIDs([ EntityGroupID_1.EntityGroupID.ItemPaw ], grid);
          break;

         default:
          var entityID = IdentifierManager_1.default.getInstance().getEntityIDFromKindID(kindID);
          item = ItemFactory.generateItemWithEntityID(grid, entityID);
        }
        return item;
      };
      ItemFactory.generateGlobalRandomItem = function(grid) {
        var normalItemIDs = [ EntityID_1.EntityID.ItemNormalRed, EntityID_1.EntityID.ItemNormalGreen, EntityID_1.EntityID.ItemNormalBlue, EntityID_1.EntityID.ItemNormalYellow, EntityID_1.EntityID.ItemNormalOrange, EntityID_1.EntityID.ItemNormalPurple, EntityID_1.EntityID.ItemPawRed, EntityID_1.EntityID.ItemPawGreen, EntityID_1.EntityID.ItemPawBlue, EntityID_1.EntityID.ItemPawYellow, EntityID_1.EntityID.ItemPawOrange, EntityID_1.EntityID.ItemPawPurple ];
        var normalItemMap = {};
        var dropMap = grid.getDropEntityMap();
        for (var entityID_3 in dropMap) {
          var value = dropMap[entityID_3];
          -1 != GameMath_1.default.indexOf(normalItemIDs, entityID_3) && (normalItemMap[entityID_3] = value);
        }
        var entityID = grid.getRandomEntityID(normalItemIDs, grid.getLimitedEntityMap(), grid.getLimitedGroupMap());
        return this.generateItemWithEntityID(grid, entityID);
      };
      ItemFactory.generateEffectBombItem = function(grid, bombType, color) {
        var item = null;
        switch (bombType) {
         case ItemBombBase_1.ItemBombType.Rainbow:
          item = ItemBombRainbow_1.default.create(grid);
          break;

         case ItemBombBase_1.ItemBombType.Range:
          item = ItemBombRange_1.default.create(grid, color);
          break;

         case ItemBombBase_1.ItemBombType.Cross:
          item = ItemBombCross_1.default.create(grid, color);
          break;

         case ItemBombBase_1.ItemBombType.Row:
          item = ItemBombRow_1.default.create(grid, color);
          break;

         case ItemBombBase_1.ItemBombType.Column:
          item = ItemBombColumn_1.default.create(grid, color);
          break;

         case ItemBombBase_1.ItemBombType.Butterfly:
          item = ItemBombButterfly_1.default.create(grid, color);
        }
        return item;
      };
      ItemFactory.generateItemWithName = function(grid, name) {
        var item = null;
        var entityID = IdentifierManager_1.default.getInstance().getEntityIDFromString(name);
        item = this.generateItemWithEntityID(grid, entityID);
        return item;
      };
      ItemFactory.isShuffleKindID = function(kindID) {
        return kindID == KindID_1.KindID.ItemNormalRandom;
      };
      return ItemFactory;
    }();
    exports.default = ItemFactory;
    cc._RF.pop();
  }, {
    "../../../../extend/utils/GameMath": "GameMath",
    "../../defines/EntityGroupID": "EntityGroupID",
    "../../defines/EntityID": "EntityID",
    "../../defines/IdentifierManager": "IdentifierManager",
    "../../defines/KindID": "KindID",
    "./color/ItemDogPaw": "ItemDogPaw",
    "./color/ItemNormal": "ItemNormal",
    "./color/bomb/ItemBombBase": "ItemBombBase",
    "./color/bomb/ItemBombButterfly": "ItemBombButterfly",
    "./color/bomb/ItemBombColumn": "ItemBombColumn",
    "./color/bomb/ItemBombCross": "ItemBombCross",
    "./color/bomb/ItemBombRainbow": "ItemBombRainbow",
    "./color/bomb/ItemBombRange": "ItemBombRange",
    "./color/bomb/ItemBombRow": "ItemBombRow",
    "./special/ItemBalloon": "ItemBalloon",
    "./special/ItemBlock": "ItemBlock",
    "./special/ItemBone": "ItemBone",
    "./special/ItemChestnut": "ItemChestnut",
    "./special/ItemDogHouse": "ItemDogHouse",
    "./special/ItemDoughnut": "ItemDoughnut",
    "./special/ItemFireWormBottle": "ItemFireWormBottle",
    "./special/ItemFireworks": "ItemFireworks",
    "./special/ItemFruitCake": "ItemFruitCake",
    "./special/ItemHoneyComb": "ItemHoneyComb",
    "./special/ItemJamBottle": "ItemJamBottle",
    "./special/ItemMagicCrystal": "ItemMagicCrystal",
    "./special/ItemMower": "ItemMower",
    "./special/ItemPuppy": "ItemPuppy",
    "./special/ItemStatue": "ItemStatue",
    "./special/ItemWatermelon": "ItemWatermelon"
  } ],
  ItemFireWormBottle: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "f00e9pvQiFFvbbI+SEWGvmW", "ItemFireWormBottle");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var ItemBase_1 = require("../ItemBase");
    var CollectionID_1 = require("../../../defines/CollectionID");
    var EntityID_1 = require("../../../defines/EntityID");
    var TMXConfigInfoKeys_1 = require("../../../defines/TMXConfigInfoKeys");
    var FlyerAnimation_1 = require("../../flyer/FlyerAnimation");
    var IGame_1 = require("../../../../../base/IGame");
    var IdentifierManager_1 = require("../../../defines/IdentifierManager");
    var EntityPrefabNodePool_1 = require("../../EntityPrefabNodePool");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ItemFireWormBottle = function(_super) {
      __extends(ItemFireWormBottle, _super);
      function ItemFireWormBottle() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this._healthPoint = 0;
        _this._fireWorms = [];
        return _this;
      }
      ItemFireWormBottle_1 = ItemFireWormBottle;
      ItemFireWormBottle.create = function(grid) {
        var className = "ItemFireWormBottle";
        var prefabFileName = "match_scene/prefab/entity/item/ItemFireWormBottle";
        var pool = EntityPrefabNodePool_1.default.getInstance();
        var component = pool.getPrefabNodeWithFileNameAndClassName(prefabFileName, className);
        if (component) {
          component.init(grid);
          return component;
        }
        return null;
      };
      ItemFireWormBottle.prototype.clone = function() {
        var bottle = ItemFireWormBottle_1.create(this.getGrid());
        bottle.setHealthPoint(this.getHealthPoint());
        return bottle;
      };
      ItemFireWormBottle.prototype.getCollectionID = function() {
        return CollectionID_1.CollectionID.FlyerFireWorm;
      };
      ItemFireWormBottle.prototype.getEntityID = function() {
        return EntityID_1.EntityID.ItemFireWormBottle;
      };
      ItemFireWormBottle.prototype.getScore = function() {
        return 100;
      };
      ItemFireWormBottle.prototype.getButterflyPriority = function(color, layoutGrass) {
        if (this.getGrid().isTargetCollectionID(CollectionID_1.CollectionID.FlyerFireWorm)) return 1;
        return _super.prototype.getButterflyPriority.call(this, color, layoutGrass);
      };
      ItemFireWormBottle.prototype.dealWithConfigMap = function(configMap) {
        _super.prototype.dealWithConfigMap.call(this, configMap);
        configMap[TMXConfigInfoKeys_1.default.CFG_FIREWORM_BOTTLE_MAX] && (this._healthPoint = configMap[TMXConfigInfoKeys_1.default.CFG_FIREWORM_BOTTLE_MAX]);
        this.setHealthPoint(this._healthPoint);
      };
      ItemFireWormBottle.prototype.init = function(grid) {
        _super.prototype.initItem.call(this, grid, ItemBase_1.ItemType.ItemFireWormBottle);
        for (var i = 0; i < 5; i++) {
          var key = "FireWorm" + i;
          var node = this._puppet.getChildByName(key);
          node && this._fireWorms.push(node);
        }
      };
      ItemFireWormBottle.prototype._canDrop = function() {
        return false;
      };
      ItemFireWormBottle.prototype._canSwap = function() {
        return false;
      };
      ItemFireWormBottle.prototype._canMatch = function() {
        return false;
      };
      ItemFireWormBottle.prototype._canCleanByBomb = function(cleanColor) {
        return true;
      };
      ItemFireWormBottle.prototype._canCleanByNeighbour = function(color) {
        return true;
      };
      ItemFireWormBottle.prototype._onClean = function(cleanOption) {
        var rate = 1;
        if (cleanOption.cleanType == EntityID_1.EntityCleanType.Terminate) {
          rate = this.getHealthPoint();
          for (var i = this.getHealthPoint(); i > 1; i--) this.onCollected();
          this.setHealthPoint(1);
        }
        this.getGrid().gainScoreWithEntity(this, rate);
        if (this.getHealthPoint() <= 1) {
          this.setVisible(false);
          this.progressDeathWish(cleanOption);
          this.selfDestory();
          var flyer = FlyerAnimation_1.default.createDieAnimation(this.getGrid(), this.getEntityID());
          this.getGrid().setFlyerAtLogicalPos(flyer, this.getLogicalPos());
          IGame_1.default.playAudio(IdentifierManager_1.default.getInstance().getMatchAudioFilePath("firewormfly"));
          IGame_1.default.playAudio(IdentifierManager_1.default.getInstance().getMatchAudioFilePath("firewormbottle"));
        } else {
          this.onCollected();
          this.setHealthPoint(this.getHealthPoint() - 1);
          this.selfHurt();
          var flyer = FlyerAnimation_1.default.createAnimationWithType(this.getGrid(), FlyerAnimation_1.FlyerAnimationType.CommonHurt);
          this.getGrid().setFlyerAtLogicalPos(flyer, this.getLogicalPos());
          flyer.node.zIndex = this.getTopZOrder();
          IGame_1.default.playAudio(IdentifierManager_1.default.getInstance().getMatchAudioFilePath("firewormfly"));
        }
      };
      ItemFireWormBottle.prototype.getHealthPoint = function() {
        return this._healthPoint;
      };
      ItemFireWormBottle.prototype.setHealthPoint = function(val) {
        this._healthPoint = val;
        this.updatePuppet();
        for (var i = 0; i < 5; i++) {
          var fireWorm = this._fireWorms[i];
          fireWorm && (fireWorm.active = i < this._healthPoint);
        }
      };
      ItemFireWormBottle.prototype.onDestroy = function() {
        _super.prototype.onDestroy.call(this);
        this._fireWorms = null;
      };
      var ItemFireWormBottle_1;
      ItemFireWormBottle = ItemFireWormBottle_1 = __decorate([ ccclass ], ItemFireWormBottle);
      return ItemFireWormBottle;
    }(ItemBase_1.default);
    exports.default = ItemFireWormBottle;
    cc._RF.pop();
  }, {
    "../../../../../base/IGame": "IGame",
    "../../../defines/CollectionID": "CollectionID",
    "../../../defines/EntityID": "EntityID",
    "../../../defines/IdentifierManager": "IdentifierManager",
    "../../../defines/TMXConfigInfoKeys": "TMXConfigInfoKeys",
    "../../EntityPrefabNodePool": "EntityPrefabNodePool",
    "../../flyer/FlyerAnimation": "FlyerAnimation",
    "../ItemBase": "ItemBase"
  } ],
  ItemFireworks: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "792aa/ckuFGjrU+HMjXGGwn", "ItemFireworks");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var ItemBase_1 = require("../ItemBase");
    var CollectionID_1 = require("../../../defines/CollectionID");
    var EntityID_1 = require("../../../defines/EntityID");
    var EntityPrefabNodePool_1 = require("../../EntityPrefabNodePool");
    var IGame_1 = require("../../../../../base/IGame");
    var IdentifierManager_1 = require("../../../defines/IdentifierManager");
    var FlyerAnimation_1 = require("../../flyer/FlyerAnimation");
    var FlyerFireworksMissile_1 = require("../../flyer/FlyerFireworksMissile");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ItemFireworks = function(_super) {
      __extends(ItemFireworks, _super);
      function ItemFireworks() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this._healthPoint = 0;
        return _this;
      }
      ItemFireworks_1 = ItemFireworks;
      ItemFireworks.create = function(grid, healthPoint) {
        var className = "ItemFireworks";
        var prefabFileName = "match_scene/prefab/entity/item/ItemFireworks";
        var pool = EntityPrefabNodePool_1.default.getInstance();
        var component = pool.getPrefabNodeWithFileNameAndClassName(prefabFileName, className);
        if (component) {
          component.init(grid, healthPoint);
          return component;
        }
        return null;
      };
      ItemFireworks.prototype.clone = function() {
        var item = ItemFireworks_1.create(this.getGrid(), this.getHealthPoint());
        return item;
      };
      ItemFireworks.prototype.init = function(grid, healthPoint) {
        _super.prototype.initItem.call(this, grid, ItemBase_1.ItemType.Fireworks);
        this.setHealthPoint(healthPoint);
      };
      ItemFireworks.prototype.getHealthPoint = function() {
        return this._healthPoint;
      };
      ItemFireworks.prototype.setHealthPoint = function(val) {
        this._healthPoint = val;
        this.updatePuppet();
      };
      ItemFireworks.prototype.getEntityID = function() {
        var result = EntityID_1.EntityID.None;
        switch (this.getHealthPoint()) {
         case 1:
          result = EntityID_1.EntityID.ItemFireworksHp1;
          break;

         case 2:
          result = EntityID_1.EntityID.ItemFireworksHp2;
          break;

         case 3:
          result = EntityID_1.EntityID.ItemFireworksHp3;
          break;

         case 4:
          result = EntityID_1.EntityID.ItemFireworksHp4;
        }
        return result;
      };
      ItemFireworks.prototype.getCollectionID = function() {
        return CollectionID_1.CollectionID.ItemFireworks;
      };
      ItemFireworks.prototype.getScore = function() {
        return 100;
      };
      ItemFireworks.prototype._canDrop = function() {
        return false;
      };
      ItemFireworks.prototype._canSwap = function() {
        return false;
      };
      ItemFireworks.prototype._canMatch = function() {
        return false;
      };
      ItemFireworks.prototype._canCleanByBomb = function(cleanColor) {
        return true;
      };
      ItemFireworks.prototype._canCleanByNeighbour = function(color) {
        return true;
      };
      ItemFireworks.prototype._onClean = function(cleanOption) {
        var rate = 1;
        cleanOption.cleanType == EntityID_1.EntityCleanType.Terminate && this.setHealthPoint(1);
        this.getGrid().gainScoreWithEntity(this, rate);
        if (this.getHealthPoint() <= 1) {
          this.progressDeathWish(cleanOption);
          this.setVisible(false);
          this.selfDestory();
          var grid = this.getGrid();
          var isLayoutGrass = this.getGrid().isGrassFloorAtLogicalPos(this.getLogicalPos());
          for (var i = 0; i < 3; i++) {
            var missile = FlyerFireworksMissile_1.default.create(grid, isLayoutGrass);
            grid.setFlyerAtLogicalPos(missile, this.getLogicalPos());
          }
        } else {
          this.setHealthPoint(this.getHealthPoint() - 1);
          this.selfHurt();
          IGame_1.default.playAudio(IdentifierManager_1.default.getInstance().getMatchAudioFilePath("eliminate_0"));
          var flyer = FlyerAnimation_1.default.createAnimationWithType(this.getGrid(), FlyerAnimation_1.FlyerAnimationType.CommonHurt);
          this.getGrid().setFlyerAtLogicalPos(flyer, this.getLogicalPos());
          flyer.node.zIndex = this.getTopZOrder();
        }
      };
      var ItemFireworks_1;
      ItemFireworks = ItemFireworks_1 = __decorate([ ccclass ], ItemFireworks);
      return ItemFireworks;
    }(ItemBase_1.default);
    exports.default = ItemFireworks;
    cc._RF.pop();
  }, {
    "../../../../../base/IGame": "IGame",
    "../../../defines/CollectionID": "CollectionID",
    "../../../defines/EntityID": "EntityID",
    "../../../defines/IdentifierManager": "IdentifierManager",
    "../../EntityPrefabNodePool": "EntityPrefabNodePool",
    "../../flyer/FlyerAnimation": "FlyerAnimation",
    "../../flyer/FlyerFireworksMissile": "FlyerFireworksMissile",
    "../ItemBase": "ItemBase"
  } ],
  ItemFruitCake: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "f4023mj+QFHWa40hreFYCNC", "ItemFruitCake");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var ItemBase_1 = require("../ItemBase");
    var CollectionID_1 = require("../../../defines/CollectionID");
    var EntityID_1 = require("../../../defines/EntityID");
    var GameMath_1 = require("../../../../../extend/utils/GameMath");
    var Pair_1 = require("../../../../../base/Pair");
    var FlyerNuclear_1 = require("../../flyer/FlyerNuclear");
    var IdentifierManager_1 = require("../../../defines/IdentifierManager");
    var IGame_1 = require("../../../../../base/IGame");
    var EntityPrefabNodePool_1 = require("../../EntityPrefabNodePool");
    var EntityBase_1 = require("../../EntityBase");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ItemFruitCake = function(_super) {
      __extends(ItemFruitCake, _super);
      function ItemFruitCake() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this._pieces = [];
        return _this;
      }
      ItemFruitCake.create = function(grid) {
        var className = "ItemFruitCake";
        var prefabFileName = "match_scene/prefab/entity/item/ItemFruitCake";
        var pool = EntityPrefabNodePool_1.default.getInstance();
        var component = pool.getPrefabNodeWithFileNameAndClassName(prefabFileName, className);
        if (component) {
          component.init(grid);
          return component;
        }
        return null;
      };
      ItemFruitCake.prototype.getCollectionID = function() {
        return CollectionID_1.CollectionID.ItemFruitCake;
      };
      ItemFruitCake.prototype.getEntityID = function() {
        return EntityID_1.EntityID.ItemFruitCake;
      };
      ItemFruitCake.prototype.getScore = function() {
        return 200;
      };
      ItemFruitCake.prototype.getButterflyPriority = function(color, layoutGrass) {
        var hasPiece = false;
        for (var _i = 0, _a = this._pieces; _i < _a.length; _i++) {
          var pari = _a[_i];
          if (pari.first == color) {
            hasPiece = true;
            break;
          }
        }
        if (hasPiece) return 1;
        return _super.prototype.getButterflyPriority.call(this, color, layoutGrass);
      };
      ItemFruitCake.prototype.init = function(grid) {
        _super.prototype.initItem.call(this, grid, ItemBase_1.ItemType.FruitCake, 2, 2);
        this._pieces.length = 0;
        var availableColors = grid.getAvailableColors();
        var pieceCount = availableColors.length;
        var index = 0;
        for (var _i = 0, availableColors_1 = availableColors; _i < availableColors_1.length; _i++) {
          var color = availableColors_1[_i];
          var sprite = this.createPiece(pieceCount, color);
          if (sprite) {
            sprite.setAnchorPoint(cc.v2(.5, .5));
            this._puppet.addChild(sprite);
            var ratation = 360 / pieceCount;
            sprite.angle = -(ratation * index - 90);
            index++;
            var pair = new Pair_1.Pair(color, sprite);
            this._pieces.push(pair);
          }
        }
      };
      ItemFruitCake.prototype._canDrop = function() {
        return false;
      };
      ItemFruitCake.prototype._canSwap = function() {
        return false;
      };
      ItemFruitCake.prototype._canMatch = function() {
        return false;
      };
      ItemFruitCake.prototype._canCleanByBomb = function(cleanColor) {
        return true;
      };
      ItemFruitCake.prototype._canCleanByNeighbour = function(color) {
        return true;
      };
      ItemFruitCake.prototype._canImmuneDamageAfterHurt = function() {
        return false;
      };
      ItemFruitCake.prototype._onClean = function(cleanOption) {
        var _this = this;
        var index = GameMath_1.default.indexOf(this._pieces, cleanOption, 0, function(pair) {
          return pair.first == cleanOption.cleanColor;
        });
        if (-1 != index) {
          this.getGrid().gainScoreWithEntity(this);
          if (this._pieces.length <= 1) {
            this.progressDeathWish(cleanOption);
            this.removeFromGridAndAddToEffect();
            this.getGrid().addObstructs(this);
            var action_1 = cc.sequence(cc.scaleTo(.25, 1.2).easing(cc.easeInOut(2)), cc.scaleTo(.25, 1).easing(cc.easeInOut(2)), cc.delayTime(.25), cc.callFunc(function() {
              var rect = _this.getOccupyArea();
              var shouldLayoutGrass = false;
              for (var row = 0; row < rect.size.height; row++) {
                for (var column = 0; column < rect.size.width; column++) if (_this.getGrid().isGrassFloorAtLogicalPos(rect.origin.add(cc.v2(column, row)))) {
                  shouldLayoutGrass = true;
                  break;
                }
                if (shouldLayoutGrass) break;
              }
              var bomb = FlyerNuclear_1.default.create(_this.getGrid(), shouldLayoutGrass, _this.getLogicalPos());
              _this.getGrid().setFlyerAtLogicalPos(bomb, _this.getLogicalPos());
              bomb.node.setPosition(_this.node.getPosition());
              bomb.launch();
              IGame_1.default.playAudio(IdentifierManager_1.default.getInstance().getMatchAudioFilePath("fruitCake"));
              _this.selfDestory();
            }));
            this.runAction(action_1);
          } else this.selfHurt();
          var piece_1 = this._pieces[index].second;
          var action = cc.sequence(cc.fadeOut(.33).easing(cc.easeOut(2)), cc.callFunc(function() {
            piece_1.removeFromParent();
          }));
          piece_1.runAction(action);
          this._pieces.splice(index, 1);
        }
      };
      ItemFruitCake.prototype.createPiece = function(pieceCount, color) {
        var result = new cc.Node();
        var frameName = IdentifierManager_1.default.getInstance().getFrameNameFromEntityID(EntityID_1.EntityID.ItemFruitCake);
        if ("" != frameName) {
          frameName = frameName + "_" + pieceCount + "_" + (color + 1);
          var sprite = result.addComponent(cc.Sprite);
          sprite.sizeMode = cc.Sprite.SizeMode.RAW;
          sprite.trim = false;
          sprite.spriteFrame = EntityBase_1.default.getEntitySpriteFarme(frameName);
        }
        return result;
      };
      ItemFruitCake.prototype.onDestroy = function() {
        _super.prototype.onDestroy.call(this);
        this._pieces = null;
      };
      ItemFruitCake = __decorate([ ccclass ], ItemFruitCake);
      return ItemFruitCake;
    }(ItemBase_1.default);
    exports.default = ItemFruitCake;
    cc._RF.pop();
  }, {
    "../../../../../base/IGame": "IGame",
    "../../../../../base/Pair": "Pair",
    "../../../../../extend/utils/GameMath": "GameMath",
    "../../../defines/CollectionID": "CollectionID",
    "../../../defines/EntityID": "EntityID",
    "../../../defines/IdentifierManager": "IdentifierManager",
    "../../EntityBase": "EntityBase",
    "../../EntityPrefabNodePool": "EntityPrefabNodePool",
    "../../flyer/FlyerNuclear": "FlyerNuclear",
    "../ItemBase": "ItemBase"
  } ],
  ItemHoneyComb: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "176abjJ4blNpqUOYFV9f9iG", "ItemHoneyComb");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var ItemBase_1 = require("../ItemBase");
    var EntityID_1 = require("../../../defines/EntityID");
    var CollectionID_1 = require("../../../defines/CollectionID");
    var GameMath_1 = require("../../../../../extend/utils/GameMath");
    var TMXConfigInfoKeys_1 = require("../../../defines/TMXConfigInfoKeys");
    var IdentifierManager_1 = require("../../../defines/IdentifierManager");
    var EntityPrefabNodePool_1 = require("../../EntityPrefabNodePool");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ItemHoneyComb = function(_super) {
      __extends(ItemHoneyComb, _super);
      function ItemHoneyComb() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this._spreadHoneyIDs = [];
        return _this;
      }
      ItemHoneyComb_1 = ItemHoneyComb;
      ItemHoneyComb.create = function(grid) {
        var className = "ItemHoneyComb";
        var prefabFileName = "match_scene/prefab/entity/item/ItemHoneyComb";
        var pool = EntityPrefabNodePool_1.default.getInstance();
        var component = pool.getPrefabNodeWithFileNameAndClassName(prefabFileName, className);
        if (component) {
          component.init(grid);
          return component;
        }
        return null;
      };
      ItemHoneyComb.prototype.clone = function() {
        var item = ItemHoneyComb_1.create(this.getGrid());
        return item;
      };
      ItemHoneyComb.prototype.init = function(grid) {
        _super.prototype.initItem.call(this, grid, ItemBase_1.ItemType.HoneyComb);
        this._spreadHoneyIDs.length = 0;
      };
      ItemHoneyComb.prototype.getSpreadHoneyHp = function() {
        var hp = 1;
        if (this._spreadHoneyIDs.length > 0) {
          var index = GameMath_1.default.randomInt(0, this._spreadHoneyIDs.length - 1);
          var entityID = this._spreadHoneyIDs[index];
          hp = entityID - EntityID_1.EntityID.ParasiteHoneyHp1 + 1;
        }
        return hp;
      };
      ItemHoneyComb.prototype.getEntityID = function() {
        return EntityID_1.EntityID.ItemHoneyComb;
      };
      ItemHoneyComb.prototype.getCollectionID = function() {
        return CollectionID_1.CollectionID.ItemHoneyComb;
      };
      ItemHoneyComb.prototype.dealWithConfigMap = function(configMap) {
        _super.prototype.dealWithConfigMap.call(this, configMap);
        var entityNameString = configMap[TMXConfigInfoKeys_1.default.CFG_HONEY_COMB_OUTPUT];
        if (entityNameString) {
          var entityNames = entityNameString.split("|");
          for (var _i = 0, entityNames_1 = entityNames; _i < entityNames_1.length; _i++) {
            var entityName = entityNames_1[_i];
            var entityID = IdentifierManager_1.default.getInstance().getEntityIDFromString(entityName);
            entityID != EntityID_1.EntityID.ParasiteHoneyHp1 && entityID != EntityID_1.EntityID.ParasiteHoneyHp2 || this._spreadHoneyIDs.push(entityID);
          }
        }
      };
      ItemHoneyComb.prototype._canDrop = function() {
        return false;
      };
      ItemHoneyComb.prototype._canSwap = function() {
        return false;
      };
      ItemHoneyComb.prototype._canMatch = function() {
        return false;
      };
      ItemHoneyComb.prototype._canCleanByBomb = function(cleanColor) {
        return false;
      };
      ItemHoneyComb.prototype._canCleanByNeighbour = function(color) {
        return false;
      };
      ItemHoneyComb.prototype._converUnderForever = function() {
        return true;
      };
      ItemHoneyComb.prototype.onDestroy = function() {
        _super.prototype.onDestroy.call(this);
        this._spreadHoneyIDs = null;
      };
      var ItemHoneyComb_1;
      ItemHoneyComb = ItemHoneyComb_1 = __decorate([ ccclass ], ItemHoneyComb);
      return ItemHoneyComb;
    }(ItemBase_1.default);
    exports.default = ItemHoneyComb;
    cc._RF.pop();
  }, {
    "../../../../../extend/utils/GameMath": "GameMath",
    "../../../defines/CollectionID": "CollectionID",
    "../../../defines/EntityID": "EntityID",
    "../../../defines/IdentifierManager": "IdentifierManager",
    "../../../defines/TMXConfigInfoKeys": "TMXConfigInfoKeys",
    "../../EntityPrefabNodePool": "EntityPrefabNodePool",
    "../ItemBase": "ItemBase"
  } ],
  ItemInfoManager: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "174cenp7wxAvJakfI76jy0d", "ItemInfoManager");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var GameCurrencyType_1 = require("../../../define/GameCurrencyType");
    var ItemInfo_1 = require("./ItemInfo");
    var GameConfig_1 = require("../../../define/GameConfig");
    var ItemInfoManager = function() {
      function ItemInfoManager() {
        this.ItemID_To_FrameName_Map = {};
        this.Name_To_ItemID_Map = {};
        this.initItemID_To_FrameName_Map();
        this.initName_To_ItemID_Map();
      }
      ItemInfoManager.getInstance = function() {
        null == this.instance && (this.instance = new ItemInfoManager());
        return this.instance;
      };
      ItemInfoManager.prototype.initItemID_To_FrameName_Map = function() {
        this.ItemID_To_FrameName_Map[GameCurrencyType_1.GameCurrencyType.DiamondCoin] = ItemInfo_1.default.create("diamondcoin", "itemName_1", "itemDepict_1", false);
        this.ItemID_To_FrameName_Map[GameCurrencyType_1.GameCurrencyType.StarCoin] = ItemInfo_1.default.create("starcoin", "itemName_2", "itemDepict_2", false);
        this.ItemID_To_FrameName_Map[GameCurrencyType_1.GameCurrencyType.GoldCoin] = ItemInfo_1.default.create("goldcoin", "itemName_3", "itemDepict_3", false);
        this.ItemID_To_FrameName_Map[GameCurrencyType_1.GameCurrencyType.LifeHeart] = ItemInfo_1.default.create("lifeheart", "itemName_4", "itemDepict_4", false);
        this.ItemID_To_FrameName_Map[GameCurrencyType_1.GameCurrencyType.ExtraStep1] = ItemInfo_1.default.create("jiabu_1", "itemName_10011", "itemDepict_10011", false);
        this.ItemID_To_FrameName_Map[GameCurrencyType_1.GameCurrencyType.ExtraStep2] = ItemInfo_1.default.create("jiabu_2", "itemName_10013", "itemDepict_10013", false);
        this.ItemID_To_FrameName_Map[GameCurrencyType_1.GameCurrencyType.ExtraStep3] = ItemInfo_1.default.create("jiabu_3", "itemName_10012", "itemDepict_10012", false);
        this.ItemID_To_FrameName_Map[GameCurrencyType_1.GameCurrencyType.ExtraStep5] = ItemInfo_1.default.create("jiabu_5", "itemName_10010", "itemDepict_10010", false);
        this.ItemID_To_FrameName_Map[GameCurrencyType_1.GameCurrencyType.BeginLine] = ItemInfo_1.default.create("beginline", "itemName_10020", "itemDepict_10020", false);
        this.ItemID_To_FrameName_Map[GameCurrencyType_1.GameCurrencyType.BeginRange] = ItemInfo_1.default.create("beginrange", "itemName_10030", "itemDepict_10030", false);
        this.ItemID_To_FrameName_Map[GameCurrencyType_1.GameCurrencyType.BeginRainbow] = ItemInfo_1.default.create("beginrainbow", "itemName_10040", "itemDepict_10040", false);
        this.ItemID_To_FrameName_Map[GameCurrencyType_1.GameCurrencyType.AidHammer] = ItemInfo_1.default.create("aidhammer", "itemName_10050", "itemDepict_10050", false);
        this.ItemID_To_FrameName_Map[GameCurrencyType_1.GameCurrencyType.AidBomb] = ItemInfo_1.default.create("aidbomb", "itemName_10060", "itemDepict_10060", false);
        this.ItemID_To_FrameName_Map[GameCurrencyType_1.GameCurrencyType.AidSwap] = ItemInfo_1.default.create("aidswap", "itemName_10070", "itemDepict_10070", false);
        this.ItemID_To_FrameName_Map[GameCurrencyType_1.GameCurrencyType.TimeLimitedAidHammer] = ItemInfo_1.default.create("aidhammer", "itemName_10051", "itemDepict_10051", false);
        this.ItemID_To_FrameName_Map[GameCurrencyType_1.GameCurrencyType.TimeLimitedAidBomb] = ItemInfo_1.default.create("aidbomb", "itemName_10061", "itemDepict_10061", false);
        this.ItemID_To_FrameName_Map[GameCurrencyType_1.GameCurrencyType.TimeLimitedAidSwap] = ItemInfo_1.default.create("aidswap", "itemName_10071", "itemDepict_10071", false);
        this.ItemID_To_FrameName_Map[GameCurrencyType_1.GameCurrencyType.LifeAddOnePoint] = ItemInfo_1.default.create("lifeaddonepoint", "itemName_10080", "itemDepict_10080", false);
        this.ItemID_To_FrameName_Map[GameCurrencyType_1.GameCurrencyType.LifeEverOneHour] = ItemInfo_1.default.create("lifeeveronehour", "itemName_10090", "itemDepict_10090", false);
        this.ItemID_To_FrameName_Map[GameCurrencyType_1.GameCurrencyType.LifeEverTwoHour] = ItemInfo_1.default.create("lifeevertwohour", "itemName_10100", "itemDepict_10100", false);
        this.ItemID_To_FrameName_Map[GameCurrencyType_1.GameCurrencyType.TrainFood] = ItemInfo_1.default.create("food", "itemName_10110", "itemDepict_10110", false);
        this.ItemID_To_FrameName_Map[GameCurrencyType_1.GameCurrencyType.TrainSoap] = ItemInfo_1.default.create("soap", "itemName_10120", "itemDepict_10120", false);
        this.ItemID_To_FrameName_Map[GameCurrencyType_1.GameCurrencyType.TrainEyepatch] = ItemInfo_1.default.create("eyepatch", "itemName_10130", "itemDepict_10130", false);
        this.ItemID_To_FrameName_Map[GameCurrencyType_1.GameCurrencyType.TrainHoe] = ItemInfo_1.default.create("hoe", "itemName_10140", "itemDepict_10140", false);
        this.ItemID_To_FrameName_Map[GameCurrencyType_1.GameCurrencyType.VirtualCoin] = ItemInfo_1.default.create("virtualcoin", "LocalizationItemVirtualCoinName", "LocalizationItemVirtualCoinDetail", false);
        this.ItemID_To_FrameName_Map[GameCurrencyType_1.GameCurrencyType.InfiniteBeginLine] = ItemInfo_1.default.create("beginline", "itemName_10022", "itemDepict_10022", false);
        this.ItemID_To_FrameName_Map[GameCurrencyType_1.GameCurrencyType.InfiniteBeginRange] = ItemInfo_1.default.create("beginrange", "itemName_10032", "itemDepict_10032", false);
        this.ItemID_To_FrameName_Map[GameCurrencyType_1.GameCurrencyType.InfiniteBeginRainbow] = ItemInfo_1.default.create("beginrainbow", "itemName_10042", "itemDepict_10042", false);
        this.ItemID_To_FrameName_Map[GameCurrencyType_1.GameCurrencyType.TimeLimitedBeginLine] = ItemInfo_1.default.create("beginline", "itemName_10021", "itemDepict_10021", false);
        this.ItemID_To_FrameName_Map[GameCurrencyType_1.GameCurrencyType.TimeLimitedBeginRange] = ItemInfo_1.default.create("beginrange", "itemName_10031", "itemDepict_10031", false);
        this.ItemID_To_FrameName_Map[GameCurrencyType_1.GameCurrencyType.TimeLimitedBeginRainbow] = ItemInfo_1.default.create("beginrainbow", "itemName_10041", "itemDepict_10041", false);
        this.ItemID_To_FrameName_Map[GameCurrencyType_1.GameCurrencyType.OneRoundBeginLine] = ItemInfo_1.default.create("beginline", "itemName_10023", "itemDepict_10023", false);
        this.ItemID_To_FrameName_Map[GameCurrencyType_1.GameCurrencyType.OneRoundBeginRange] = ItemInfo_1.default.create("beginrange", "itemName_10033", "itemDepict_10033", false);
        this.ItemID_To_FrameName_Map[GameCurrencyType_1.GameCurrencyType.OneRoundBeginRainbow] = ItemInfo_1.default.create("beginrainbow", "itemName_10043", "itemDepict_10043", false);
        this.ItemID_To_FrameName_Map[GameCurrencyType_1.GameCurrencyType.AddSpeed] = ItemInfo_1.default.create("speed", "itemName_10150", "itemDepict_10150", false);
        this.ItemID_To_FrameName_Map[GameCurrencyType_1.GameCurrencyType.LuckyWheelRow] = ItemInfo_1.default.create("hline", "itemName_13020", "itemDepict_13020", false);
        this.ItemID_To_FrameName_Map[GameCurrencyType_1.GameCurrencyType.LuckyWheelColumn] = ItemInfo_1.default.create("vline", "itemName_13030", "itemDepict_13030", false);
        this.ItemID_To_FrameName_Map[GameCurrencyType_1.GameCurrencyType.LuckyWheelCross] = ItemInfo_1.default.create("cross", "itemName_13040", "itemDepict_13040", false);
        this.ItemID_To_FrameName_Map[GameCurrencyType_1.GameCurrencyType.LuckyWheelRange] = ItemInfo_1.default.create("range", "itemName_13050", "itemDepict_13050", false);
        this.ItemID_To_FrameName_Map[GameCurrencyType_1.GameCurrencyType.LuckyWheelMissile_Row] = ItemInfo_1.default.create("hline_missile", "itemName_13060", "itemDepict_13060", false);
        this.ItemID_To_FrameName_Map[GameCurrencyType_1.GameCurrencyType.LuckyWheelMissile_Column] = ItemInfo_1.default.create("vline_missile", "itemName_13070", "itemDepict_13070", false);
        this.ItemID_To_FrameName_Map[GameCurrencyType_1.GameCurrencyType.LuckyWheelMissile_Cross] = ItemInfo_1.default.create("cross_missile", "itemName_13080", "itemDepict_13080", false);
        this.ItemID_To_FrameName_Map[GameCurrencyType_1.GameCurrencyType.LuckyWheelMissile_Range] = ItemInfo_1.default.create("range_missile", "itemName_13090", "itemDepict_13090", false);
        this.ItemID_To_FrameName_Map[GameCurrencyType_1.GameCurrencyType.LuckyWheelRow_Cross] = ItemInfo_1.default.create("item_13100", "itemName_13100", "itemDepict_13100", false);
        this.ItemID_To_FrameName_Map[GameCurrencyType_1.GameCurrencyType.LuckyWheelColumn_Cross] = ItemInfo_1.default.create("item_13110", "itemName_13110", "itemDepict_13110", false);
        this.ItemID_To_FrameName_Map[GameCurrencyType_1.GameCurrencyType.LuckyWheelRow_Range] = ItemInfo_1.default.create("item_13120", "itemName_13120", "itemDepict_13120", false);
        this.ItemID_To_FrameName_Map[GameCurrencyType_1.GameCurrencyType.LuckyWheelColumn_Range] = ItemInfo_1.default.create("item_13130", "itemName_13130", "itemDepict_13130", false);
        this.ItemID_To_FrameName_Map[GameCurrencyType_1.GameCurrencyType.LuckyWheelMissile_Row_Column] = ItemInfo_1.default.create("item_13140", "itemName_13140", "itemDepict_13140", false);
        this.ItemID_To_FrameName_Map[GameCurrencyType_1.GameCurrencyType.LuckyWheelMissile_Rainbow] = ItemInfo_1.default.create("item_13150", "itemName_13150", "itemDepict_13150", false);
        this.ItemID_To_FrameName_Map[GameCurrencyType_1.GameCurrencyType.LuckyWheelMissile_Row_Cross] = ItemInfo_1.default.create("item_13160", "itemName_13160", "itemDepict_13160", false);
        this.ItemID_To_FrameName_Map[GameCurrencyType_1.GameCurrencyType.LuckyWheelMissile_Column_Range] = ItemInfo_1.default.create("item_13170", "itemName_13170", "itemDepict_13170", false);
        this.ItemID_To_FrameName_Map[GameCurrencyType_1.GameCurrencyType.PetKeJi] = ItemInfo_1.default.create("kejiquan", "itemName_20010", "itemDepict_20010", false);
      };
      ItemInfoManager.prototype.initName_To_ItemID_Map = function() {
        this.Name_To_ItemID_Map["1"] = GameCurrencyType_1.GameCurrencyType.DiamondCoin;
        this.Name_To_ItemID_Map["2"] = GameCurrencyType_1.GameCurrencyType.StarCoin;
        this.Name_To_ItemID_Map["3"] = GameCurrencyType_1.GameCurrencyType.GoldCoin;
        this.Name_To_ItemID_Map["4"] = GameCurrencyType_1.GameCurrencyType.LifeHeart;
        this.Name_To_ItemID_Map["5"] = GameCurrencyType_1.GameCurrencyType.VirtualCoin;
        this.Name_To_ItemID_Map["7"] = GameCurrencyType_1.GameCurrencyType.RedPacket;
        this.Name_To_ItemID_Map["10010"] = GameCurrencyType_1.GameCurrencyType.ExtraStep5;
        this.Name_To_ItemID_Map["10011"] = GameCurrencyType_1.GameCurrencyType.ExtraStep1;
        this.Name_To_ItemID_Map["10012"] = GameCurrencyType_1.GameCurrencyType.ExtraStep3;
        this.Name_To_ItemID_Map["10013"] = GameCurrencyType_1.GameCurrencyType.ExtraStep2;
        this.Name_To_ItemID_Map["10020"] = GameCurrencyType_1.GameCurrencyType.BeginLine;
        this.Name_To_ItemID_Map["10030"] = GameCurrencyType_1.GameCurrencyType.BeginRange;
        this.Name_To_ItemID_Map["10040"] = GameCurrencyType_1.GameCurrencyType.BeginRainbow;
        this.Name_To_ItemID_Map["10021"] = GameCurrencyType_1.GameCurrencyType.TimeLimitedBeginLine;
        this.Name_To_ItemID_Map["10031"] = GameCurrencyType_1.GameCurrencyType.TimeLimitedBeginRange;
        this.Name_To_ItemID_Map["10041"] = GameCurrencyType_1.GameCurrencyType.TimeLimitedBeginRainbow;
        this.Name_To_ItemID_Map["10022"] = GameCurrencyType_1.GameCurrencyType.InfiniteBeginLine;
        this.Name_To_ItemID_Map["10032"] = GameCurrencyType_1.GameCurrencyType.InfiniteBeginRange;
        this.Name_To_ItemID_Map["10042"] = GameCurrencyType_1.GameCurrencyType.InfiniteBeginRainbow;
        this.Name_To_ItemID_Map["10023"] = GameCurrencyType_1.GameCurrencyType.OneRoundBeginLine;
        this.Name_To_ItemID_Map["10033"] = GameCurrencyType_1.GameCurrencyType.OneRoundBeginRange;
        this.Name_To_ItemID_Map["10043"] = GameCurrencyType_1.GameCurrencyType.OneRoundBeginRainbow;
        this.Name_To_ItemID_Map["13020"] = GameCurrencyType_1.GameCurrencyType.LuckyWheelRow;
        this.Name_To_ItemID_Map["13030"] = GameCurrencyType_1.GameCurrencyType.LuckyWheelColumn;
        this.Name_To_ItemID_Map["13040"] = GameCurrencyType_1.GameCurrencyType.LuckyWheelCross;
        this.Name_To_ItemID_Map["13050"] = GameCurrencyType_1.GameCurrencyType.LuckyWheelRange;
        this.Name_To_ItemID_Map["13060"] = GameCurrencyType_1.GameCurrencyType.LuckyWheelMissile_Row;
        this.Name_To_ItemID_Map["13070"] = GameCurrencyType_1.GameCurrencyType.LuckyWheelMissile_Column;
        this.Name_To_ItemID_Map["13080"] = GameCurrencyType_1.GameCurrencyType.LuckyWheelMissile_Cross;
        this.Name_To_ItemID_Map["13090"] = GameCurrencyType_1.GameCurrencyType.LuckyWheelMissile_Range;
        this.Name_To_ItemID_Map["13100"] = GameCurrencyType_1.GameCurrencyType.LuckyWheelRow_Cross;
        this.Name_To_ItemID_Map["13110"] = GameCurrencyType_1.GameCurrencyType.LuckyWheelColumn_Cross;
        this.Name_To_ItemID_Map["13120"] = GameCurrencyType_1.GameCurrencyType.LuckyWheelRow_Range;
        this.Name_To_ItemID_Map["13130"] = GameCurrencyType_1.GameCurrencyType.LuckyWheelColumn_Range;
        this.Name_To_ItemID_Map["13140"] = GameCurrencyType_1.GameCurrencyType.LuckyWheelMissile_Row_Column;
        this.Name_To_ItemID_Map["13150"] = GameCurrencyType_1.GameCurrencyType.LuckyWheelMissile_Rainbow;
        this.Name_To_ItemID_Map["13160"] = GameCurrencyType_1.GameCurrencyType.LuckyWheelMissile_Row_Cross;
        this.Name_To_ItemID_Map["13170"] = GameCurrencyType_1.GameCurrencyType.LuckyWheelMissile_Column_Range;
        this.Name_To_ItemID_Map["10050"] = GameCurrencyType_1.GameCurrencyType.AidHammer;
        this.Name_To_ItemID_Map["10060"] = GameCurrencyType_1.GameCurrencyType.AidBomb;
        this.Name_To_ItemID_Map["10070"] = GameCurrencyType_1.GameCurrencyType.AidSwap;
        this.Name_To_ItemID_Map["10051"] = GameCurrencyType_1.GameCurrencyType.TimeLimitedAidHammer;
        this.Name_To_ItemID_Map["10061"] = GameCurrencyType_1.GameCurrencyType.TimeLimitedAidBomb;
        this.Name_To_ItemID_Map["10071"] = GameCurrencyType_1.GameCurrencyType.TimeLimitedAidSwap;
        this.Name_To_ItemID_Map["10080"] = GameCurrencyType_1.GameCurrencyType.LifeAddOnePoint;
        this.Name_To_ItemID_Map["10090"] = GameCurrencyType_1.GameCurrencyType.LifeEverOneHour;
        this.Name_To_ItemID_Map["10100"] = GameCurrencyType_1.GameCurrencyType.LifeEverTwoHour;
        this.Name_To_ItemID_Map["10110"] = GameCurrencyType_1.GameCurrencyType.TrainFood;
        this.Name_To_ItemID_Map["10120"] = GameCurrencyType_1.GameCurrencyType.TrainSoap;
        this.Name_To_ItemID_Map["10130"] = GameCurrencyType_1.GameCurrencyType.TrainEyepatch;
        this.Name_To_ItemID_Map["10140"] = GameCurrencyType_1.GameCurrencyType.TrainHoe;
        this.Name_To_ItemID_Map["10150"] = GameCurrencyType_1.GameCurrencyType.AddSpeed;
        this.Name_To_ItemID_Map["20010"] = GameCurrencyType_1.GameCurrencyType.PetKeJi;
      };
      ItemInfoManager.prototype.getItemIDFromName = function(name) {
        var result = this.Name_To_ItemID_Map[name];
        if (result) return result;
        return GameCurrencyType_1.GameCurrencyType.NoneType;
      };
      ItemInfoManager.prototype.getItemInfoFromItemID = function(itemID) {
        var result = this.ItemID_To_FrameName_Map[itemID];
        if (result) {
          10140 == itemID && (GameConfig_1.default.DigRedPacket || (result.description = "itemDepict_10140_fix"));
          var answer = ItemInfo_1.default.create("texture/icons/item/" + result.frameName, result.localization, result.description, result.isUnlimited, result.scaleX, result.scaleY);
          return answer;
        }
        return null;
      };
      ItemInfoManager.prototype.getUnlimitedItemIDs = function() {
        var unlimitedItemIDs = [ GameCurrencyType_1.GameCurrencyType.InfiniteBeginLine, GameCurrencyType_1.GameCurrencyType.InfiniteBeginRange, GameCurrencyType_1.GameCurrencyType.InfiniteBeginRainbow ];
        return unlimitedItemIDs;
      };
      ItemInfoManager.instance = null;
      return ItemInfoManager;
    }();
    exports.default = ItemInfoManager;
    cc._RF.pop();
  }, {
    "../../../define/GameConfig": "GameConfig",
    "../../../define/GameCurrencyType": "GameCurrencyType",
    "./ItemInfo": "ItemInfo"
  } ],
  ItemInfo: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "5ab1cWG0j5HLoCs5zofJ7wL", "ItemInfo");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var ItemInfo = function() {
      function ItemInfo(FrameName, Localization, Description, isUnlimited, ScaleX, ScaleY) {
        this.frameName = "";
        this.localization = "";
        this.description = "";
        this.isUnlimited = false;
        this.scaleX = 1;
        this.scaleY = 1;
        this.frameName = FrameName;
        this.localization = Localization;
        this.description = Description;
        this.isUnlimited = isUnlimited;
        this.scaleX = ScaleX;
        this.scaleY = ScaleY;
      }
      ItemInfo.create = function(FrameName, Localization, Description, isUnlimited, ScaleX, ScaleY) {
        void 0 === FrameName && (FrameName = "");
        void 0 === Localization && (Localization = "");
        void 0 === Description && (Description = "");
        void 0 === isUnlimited && (isUnlimited = false);
        void 0 === ScaleX && (ScaleX = 1);
        void 0 === ScaleY && (ScaleY = 1);
        return new ItemInfo(FrameName, Localization, Description, isUnlimited, ScaleX, ScaleY);
      };
      return ItemInfo;
    }();
    exports.default = ItemInfo;
    cc._RF.pop();
  }, {} ],
  ItemJamBottle: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "b30a0z30BpGkacmuYcBU4TX", "ItemJamBottle");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var ItemBase_1 = require("../ItemBase");
    var CollectionID_1 = require("../../../defines/CollectionID");
    var EntityID_1 = require("../../../defines/EntityID");
    var RugJam_1 = require("../../rug/RugJam");
    var FlyerAnimation_1 = require("../../flyer/FlyerAnimation");
    var IGame_1 = require("../../../../../base/IGame");
    var IdentifierManager_1 = require("../../../defines/IdentifierManager");
    var EntityPrefabNodePool_1 = require("../../EntityPrefabNodePool");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ItemJamBottle = function(_super) {
      __extends(ItemJamBottle, _super);
      function ItemJamBottle() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      ItemJamBottle_1 = ItemJamBottle;
      ItemJamBottle.create = function(grid) {
        var className = "ItemJamBottle";
        var prefabFileName = "match_scene/prefab/entity/item/ItemJamBottle";
        var pool = EntityPrefabNodePool_1.default.getInstance();
        var component = pool.getPrefabNodeWithFileNameAndClassName(prefabFileName, className);
        if (component) {
          component.init(grid);
          return component;
        }
        return null;
      };
      ItemJamBottle.prototype.clone = function() {
        var item = ItemJamBottle_1.create(this.getGrid());
        return item;
      };
      ItemJamBottle.prototype.getCollectionID = function() {
        return CollectionID_1.CollectionID.ItemJamBottle;
      };
      ItemJamBottle.prototype.getEntityID = function() {
        return EntityID_1.EntityID.ItemJamBottle;
      };
      ItemJamBottle.prototype.getScore = function() {
        return 200;
      };
      ItemJamBottle.prototype.init = function(grid) {
        _super.prototype.initItem.call(this, grid, ItemBase_1.ItemType.JamBottle);
      };
      ItemJamBottle.prototype._canDrop = function() {
        return true;
      };
      ItemJamBottle.prototype._canSwap = function() {
        return true;
      };
      ItemJamBottle.prototype._canCleanByBomb = function(cleanColor) {
        return true;
      };
      ItemJamBottle.prototype._canCleanByNeighbour = function(color) {
        return true;
      };
      ItemJamBottle.prototype._onClean = function(cleanOption) {
        this.getGrid().gainScoreWithEntity(this);
        this.setVisible(false);
        this.progressDeathWish(cleanOption);
        this.selfDestory();
        IGame_1.default.playAudio(IdentifierManager_1.default.getInstance().getMatchAudioFilePath("jambottle"));
        var flyer = FlyerAnimation_1.default.createDieAnimation(this.getGrid(), this.getEntityID());
        this.getGrid().setFlyerAtLogicalPos(flyer, this.getLogicalPos());
        var offsets = [ cc.v2(-1, -1), cc.v2(0, -1), cc.v2(1, -1), cc.v2(-1, 0), cc.v2(0, 0), cc.v2(1, 0), cc.v2(-1, 1), cc.v2(0, 1), cc.v2(1, 1) ];
        for (var _i = 0, offsets_1 = offsets; _i < offsets_1.length; _i++) {
          var offset = offsets_1[_i];
          var checkPos = this.getLogicalPos().add(offset);
          var cell = this.getGrid().getCellAtLogicalPos(checkPos);
          if (cell && cell.canHoldItem()) {
            var item = this.getGrid().getItemAtLogicalPos(checkPos);
            if (item && item.coverUnderForever()) continue;
            var oldJam = this.getGrid().getRugAtLogicalPos(checkPos);
            if (!oldJam) {
              var jam = RugJam_1.default.create(this.getGrid());
              jam.setImmuneDamage(true);
              jam.grow();
              this.getGrid().setRugAtLogicalPos(jam, checkPos);
            }
          }
        }
      };
      var ItemJamBottle_1;
      ItemJamBottle = ItemJamBottle_1 = __decorate([ ccclass ], ItemJamBottle);
      return ItemJamBottle;
    }(ItemBase_1.default);
    exports.default = ItemJamBottle;
    cc._RF.pop();
  }, {
    "../../../../../base/IGame": "IGame",
    "../../../defines/CollectionID": "CollectionID",
    "../../../defines/EntityID": "EntityID",
    "../../../defines/IdentifierManager": "IdentifierManager",
    "../../EntityPrefabNodePool": "EntityPrefabNodePool",
    "../../flyer/FlyerAnimation": "FlyerAnimation",
    "../../rug/RugJam": "RugJam",
    "../ItemBase": "ItemBase"
  } ],
  ItemMagicCrystal: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "219b0PWNThCCLcOH34ZzKxt", "ItemMagicCrystal");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var CollectionID_1 = require("../../../defines/CollectionID");
    var EntityID_1 = require("../../../defines/EntityID");
    var IdentifierManager_1 = require("../../../defines/IdentifierManager");
    var TMXConfigInfoKeys_1 = require("../../../defines/TMXConfigInfoKeys");
    var ItemBase_1 = require("../ItemBase");
    var EntityPrefabNodePool_1 = require("../../EntityPrefabNodePool");
    var EntityBase_1 = require("../../EntityBase");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ItemMagicCrystal = function(_super) {
      __extends(ItemMagicCrystal, _super);
      function ItemMagicCrystal() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this._curAttackCount = 0;
        _this._attrOutput = "";
        _this._attrNum = 1;
        _this._attrMax = 1;
        _this._attrStatus = 0;
        _this._itemNode = null;
        return _this;
      }
      ItemMagicCrystal_1 = ItemMagicCrystal;
      ItemMagicCrystal.create = function(grid) {
        var className = "ItemMagicCrystal";
        var prefabFileName = "match_scene/prefab/entity/item/ItemMagicCrystal";
        var pool = EntityPrefabNodePool_1.default.getInstance();
        var component = pool.getPrefabNodeWithFileNameAndClassName(prefabFileName, className);
        if (component) {
          component.init(grid);
          return component;
        }
        return null;
      };
      ItemMagicCrystal.prototype.clone = function() {
        var item = ItemMagicCrystal_1.create(this.getGrid());
        item.initMagicItemImg(this._attrOutput);
        return item;
      };
      ItemMagicCrystal.prototype.init = function(grid) {
        _super.prototype.initItem.call(this, grid, ItemBase_1.ItemType.MagicCrystal);
        this._itemNode = this._puppet.getChildByName("item_sprite");
        this._curAttackCount = 0;
        this._attrOutput = "";
        this._attrNum = 1;
        this._attrMax = 1;
        this._attrStatus = 0;
      };
      ItemMagicCrystal.prototype.getAttrNum = function() {
        return this._attrNum;
      };
      ItemMagicCrystal.prototype.getEntityID = function() {
        return EntityID_1.EntityID.ItemMagicCrystal;
      };
      ItemMagicCrystal.prototype.getCollectionID = function() {
        return CollectionID_1.CollectionID.ItemMagicCrystal;
      };
      ItemMagicCrystal.prototype.getScore = function() {
        return 50;
      };
      ItemMagicCrystal.prototype.dealWithConfigMap = function(configMap) {
        _super.prototype.dealWithConfigMap.call(this, configMap);
        configMap[TMXConfigInfoKeys_1.default.CFG_MATIC_CRYSTAL_OUTPUT] && (this._attrOutput = configMap[TMXConfigInfoKeys_1.default.CFG_MATIC_CRYSTAL_OUTPUT]);
        configMap[TMXConfigInfoKeys_1.default.CFG_MATIC_CRYSTAL_NUM] && (this._attrNum = Number(configMap[TMXConfigInfoKeys_1.default.CFG_MATIC_CRYSTAL_NUM]));
        configMap[TMXConfigInfoKeys_1.default.CFG_MATIC_CRYSTAL_MAX] && (this._attrMax = Number(configMap[TMXConfigInfoKeys_1.default.CFG_MATIC_CRYSTAL_MAX]) - 1);
        if (configMap[TMXConfigInfoKeys_1.default.CFG_MATIC_CRYSTAL_STATUS]) {
          this._attrStatus = Number(configMap[TMXConfigInfoKeys_1.default.CFG_MATIC_CRYSTAL_STATUS]) - 1;
          this._curAttackCount = this._attrStatus;
          if (this._curAttackCount > this._attrMax) {
            this._curAttackCount = this._attrMax;
            this._attrStatus = this._curAttackCount;
          }
        } else this._curAttackCount = 0;
        this.updateProgress();
        this.initMagicItemImg(this._attrOutput);
      };
      ItemMagicCrystal.prototype.getOutputEntityId = function() {
        var entityID = EntityID_1.EntityID.None;
        entityID = IdentifierManager_1.default.getInstance().getEntityIDFromString(this._attrOutput);
        if (entityID != EntityID_1.EntityID.None) return entityID;
        var tmpGroupId = IdentifierManager_1.default.getInstance().getEntityGroupIDFromString(this._attrOutput);
        var groupIds = IdentifierManager_1.default.getInstance().getEntityIDsFromEntityGroupID(tmpGroupId);
        if (groupIds.length <= 0) return entityID;
        var colorItemMap = {};
        var dropMap = this.getGrid().getDropEntityMap();
        for (var i = 0; i < groupIds.length; i++) {
          var NormalColorId = IdentifierManager_1.default.getInstance().getCorrespondingNormlaEntityID(groupIds[i]);
          dropMap[NormalColorId] && (colorItemMap[groupIds[i]] = dropMap[NormalColorId]);
        }
        var tempMap1 = {};
        var tempMap2 = {};
        entityID = this.getGrid().getRandomEntityID(colorItemMap, tempMap1, tempMap2);
        return entityID;
      };
      ItemMagicCrystal.prototype.isCanOutput = function() {
        if (this.getGrid().hasShowCompleteBanner()) return false;
        if (this._curAttackCount >= this._attrMax) {
          this._curAttackCount = 0;
          this.updateProgress();
          return true;
        }
        return false;
      };
      ItemMagicCrystal.prototype.initMagicItemImg = function(output) {
        this._attrOutput = output;
        var imgPath = "";
        var entityID = EntityID_1.EntityID.None;
        entityID = IdentifierManager_1.default.getInstance().getEntityIDFromString(output);
        entityID != EntityID_1.EntityID.None && (imgPath = IdentifierManager_1.default.getInstance().getFrameNameFromEntityID(entityID));
        if ("" == imgPath) {
          var tmpGroupId = IdentifierManager_1.default.getInstance().getEntityGroupIDFromString(output);
          imgPath = IdentifierManager_1.default.getInstance().getFrameNameFromEntityGroupID(tmpGroupId);
        }
        if ("" != imgPath && this._itemNode) {
          var itemNode = new cc.Node();
          var itemIcon = this._itemNode.getComponent(cc.Sprite);
          itemIcon.spriteFrame = EntityBase_1.default.getEntitySpriteFarme(imgPath);
        }
      };
      ItemMagicCrystal.prototype.updateProgress = function() {
        var progress = this._curAttackCount / this._attrMax;
        progress > 1 && (progress = 1);
        var progressNode = this._puppet.getChildByName("magic_crystal_bottom");
        progressNode.scaleY = progress;
      };
      ItemMagicCrystal.prototype._canDrop = function() {
        return false;
      };
      ItemMagicCrystal.prototype._canSwap = function() {
        return false;
      };
      ItemMagicCrystal.prototype._canMatch = function() {
        return false;
      };
      ItemMagicCrystal.prototype._canCleanByBomb = function(cleanColor) {
        return true;
      };
      ItemMagicCrystal.prototype._canCleanByNeighbour = function(color) {
        return true;
      };
      ItemMagicCrystal.prototype._converUnderForever = function() {
        return true;
      };
      ItemMagicCrystal.prototype._onClean = function(cleanOption) {
        if (this._curAttackCount < this._attrMax) {
          var rate = 1;
          if (cleanOption.cleanType == EntityID_1.EntityCleanType.Terminate) {
            rate = this._attrMax - this._curAttackCount;
            this._curAttackCount = this._attrMax;
          }
          this.getGrid().gainScoreWithEntity(this, rate);
          this._curAttackCount += 1;
          this.updateProgress();
        }
      };
      ItemMagicCrystal.prototype.onDestroy = function() {
        _super.prototype.onDestroy.call(this);
        this._attrOutput = null;
        this._itemNode = null;
      };
      var ItemMagicCrystal_1;
      ItemMagicCrystal = ItemMagicCrystal_1 = __decorate([ ccclass ], ItemMagicCrystal);
      return ItemMagicCrystal;
    }(ItemBase_1.default);
    exports.default = ItemMagicCrystal;
    cc._RF.pop();
  }, {
    "../../../defines/CollectionID": "CollectionID",
    "../../../defines/EntityID": "EntityID",
    "../../../defines/IdentifierManager": "IdentifierManager",
    "../../../defines/TMXConfigInfoKeys": "TMXConfigInfoKeys",
    "../../EntityBase": "EntityBase",
    "../../EntityPrefabNodePool": "EntityPrefabNodePool",
    "../ItemBase": "ItemBase"
  } ],
  ItemMower: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "23978ZrCcRI4aIHHc8vV2gC", "ItemMower");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.ItemMowerDirection = void 0;
    var UISpriteExt_1 = require("../../../../../component/UISpriteExt");
    var CollectionID_1 = require("../../../defines/CollectionID");
    var EntityID_1 = require("../../../defines/EntityID");
    var IdentifierManager_1 = require("../../../defines/IdentifierManager");
    var TMXConfigInfoKeys_1 = require("../../../defines/TMXConfigInfoKeys");
    var EntityPrefabNodePool_1 = require("../../EntityPrefabNodePool");
    var FlyerMower_1 = require("../../flyer/FlyerMower");
    var ItemBase_1 = require("../ItemBase");
    var ItemMowerDirection;
    (function(ItemMowerDirection) {
      ItemMowerDirection[ItemMowerDirection["Up"] = 0] = "Up";
      ItemMowerDirection[ItemMowerDirection["Right"] = 1] = "Right";
      ItemMowerDirection[ItemMowerDirection["Down"] = 2] = "Down";
      ItemMowerDirection[ItemMowerDirection["Left"] = 3] = "Left";
    })(ItemMowerDirection = exports.ItemMowerDirection || (exports.ItemMowerDirection = {}));
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ItemMower = function(_super) {
      __extends(ItemMower, _super);
      function ItemMower() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this._direction = ItemMowerDirection.Up;
        _this._targetIcon = null;
        _this._targetFrame = null;
        _this._targetLabel = null;
        return _this;
      }
      ItemMower_1 = ItemMower;
      ItemMower.create = function(grid, direction) {
        var className = "ItemMower";
        var prefabFileName = "match_scene/prefab/entity/item/ItemMower";
        var pool = EntityPrefabNodePool_1.default.getInstance();
        var component = pool.getPrefabNodeWithFileNameAndClassName(prefabFileName, className);
        if (component) {
          component.init(grid, direction);
          return component;
        }
        return null;
      };
      ItemMower.prototype.init = function(grid, direction) {
        _super.prototype.initItem.call(this, grid, ItemBase_1.ItemType.Mower);
        this._targetIcon = this._puppet.getChildByName("targetIcon").getComponent(cc.Sprite);
        this._targetFrame = this._puppet.getChildByName("targetFrame");
        this._targetLabel = this._targetFrame.getChildByName("targetAmountLabel").getComponent(cc.Label);
        this.setDirection(direction);
        this.setChargeTargetAmount(0);
      };
      ItemMower.prototype.dealWithConfigMap = function(configMap) {
        _super.prototype.dealWithConfigMap.call(this, configMap);
        if (configMap[TMXConfigInfoKeys_1.default.CFG_MOWER_CHARGE_TARGET]) {
          var targetName = configMap[TMXConfigInfoKeys_1.default.CFG_MOWER_CHARGE_TARGET];
          var collectionID = IdentifierManager_1.default.getInstance().getCollectionIDFromString(targetName);
          collectionID != CollectionID_1.CollectionID.None && this.setChargeID(collectionID);
          var count = configMap[TMXConfigInfoKeys_1.default.CFG_MOWER_CHARGE_COUNT];
          count && this.setChargeTargetAmount(Number(count));
          var priority = configMap[TMXConfigInfoKeys_1.default.CFG_MOWER_CHARGE_PRIORITY];
          priority && (this._chargePriority = priority);
        }
      };
      ItemMower.prototype.setChargeID = function(collectionID) {
        _super.prototype.setChargeID.call(this, collectionID);
        var frameName = IdentifierManager_1.default.getInstance().getFrameNameFromCollectionID(this._chargetCollectionID);
        var component = this._targetIcon.getComponent(UISpriteExt_1.default);
        component && (component.src = frameName);
      };
      ItemMower.prototype.setChargeAmount = function(amount) {
        _super.prototype.setChargeAmount.call(this, amount);
        this.updateTargetAmount();
      };
      ItemMower.prototype.setChargeTargetAmount = function(amount) {
        _super.prototype.setChargeTargetAmount.call(this, amount);
        this.updateTargetAmount();
      };
      ItemMower.prototype.updateTargetAmount = function() {
        var amount = Math.max(this._targetCount - this._chargeCount, 0);
        this._targetLabel.string = amount.toString();
      };
      ItemMower.prototype.getDirection = function() {
        return this._direction;
      };
      ItemMower.prototype.setDirection = function(direction) {
        this._direction = direction;
        this.updatePuppet();
        var targetFramePos = ItemMower_1.targetFramePositions[this._direction];
        targetFramePos && this._targetFrame.setPosition(targetFramePos);
      };
      ItemMower.prototype.clone = function() {
        var item = ItemMower_1.create(this.getGrid(), this.getDirection());
        return item;
      };
      ItemMower.prototype.getCollectionID = function() {
        return CollectionID_1.CollectionID.ItemMower;
      };
      ItemMower.prototype.getEntityID = function() {
        var result = EntityID_1.EntityID.None;
        switch (this._direction) {
         case ItemMowerDirection.Up:
          result = EntityID_1.EntityID.ItemMowerUp;
          break;

         case ItemMowerDirection.Right:
          result = EntityID_1.EntityID.ItemMowerRight;
          break;

         case ItemMowerDirection.Down:
          result = EntityID_1.EntityID.ItemMowerDown;
          break;

         case ItemMowerDirection.Left:
          result = EntityID_1.EntityID.ItemMowerLeft;
        }
        return result;
      };
      ItemMower.prototype.getScore = function() {
        return 50 * this.getChargeTargetAmount();
      };
      ItemMower.prototype._onCharge = function(option) {
        this.absorbWillChargeAmount(option.chargeID, option.chargeAmount);
        if (this.getChargeAmount() >= this.getChargeTargetAmount()) {
          this.getGrid().gainScoreWithEntity(this);
          this.setVisible(false);
          this.selfDestory();
          var layoutGrass = this.getGrid().isGrassFloorAtLogicalPos(this.getLogicalPos());
          var direction = FlyerMower_1.FlyerMowerDirection.Up;
          switch (this._direction) {
           case ItemMowerDirection.Up:
            direction = FlyerMower_1.FlyerMowerDirection.Up;
            break;

           case ItemMowerDirection.Right:
            direction = FlyerMower_1.FlyerMowerDirection.Right;
            break;

           case ItemMowerDirection.Down:
            direction = FlyerMower_1.FlyerMowerDirection.Down;
            break;

           case ItemMowerDirection.Left:
            direction = FlyerMower_1.FlyerMowerDirection.Left;
          }
          var flyer = FlyerMower_1.default.create(this.getGrid(), layoutGrass, this.getLogicalPos(), direction);
          this.getGrid().setFlyerAtLogicalPos(flyer, this.getLogicalPos());
        }
      };
      ItemMower.prototype.onDestroy = function() {
        _super.prototype.onDestroy.call(this);
        this._targetIcon = null;
        this._targetFrame = null;
        this._targetLabel = null;
      };
      var ItemMower_1;
      ItemMower.targetFramePositions = {
        0: cc.v2(20, -25),
        1: cc.v2(-25, -20),
        2: cc.v2(-20, 25),
        3: cc.v2(25, 20)
      };
      ItemMower = ItemMower_1 = __decorate([ ccclass ], ItemMower);
      return ItemMower;
    }(ItemBase_1.default);
    exports.default = ItemMower;
    cc._RF.pop();
  }, {
    "../../../../../component/UISpriteExt": "UISpriteExt",
    "../../../defines/CollectionID": "CollectionID",
    "../../../defines/EntityID": "EntityID",
    "../../../defines/IdentifierManager": "IdentifierManager",
    "../../../defines/TMXConfigInfoKeys": "TMXConfigInfoKeys",
    "../../EntityPrefabNodePool": "EntityPrefabNodePool",
    "../../flyer/FlyerMower": "FlyerMower",
    "../ItemBase": "ItemBase"
  } ],
  ItemNormal: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "11079pg8CtFUJUSSpSzn6AO", "ItemNormal");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var CollectionID_1 = require("../../../defines/CollectionID");
    var EntityID_1 = require("../../../defines/EntityID");
    var ItemBase_1 = require("../ItemBase");
    var ItemBombBase_1 = require("./bomb/ItemBombBase");
    var ItemFactory_1 = require("../ItemFactory");
    var FlyerAnimation_1 = require("../../flyer/FlyerAnimation");
    var IGame_1 = require("../../../../../base/IGame");
    var PowerID_1 = require("../../../defines/PowerID");
    var IdentifierManager_1 = require("../../../defines/IdentifierManager");
    var EntityPrefabNodePool_1 = require("../../EntityPrefabNodePool");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ItemNormal = function(_super) {
      __extends(ItemNormal, _super);
      function ItemNormal() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      ItemNormal_1 = ItemNormal;
      ItemNormal.prototype.getCollectionID = function() {
        var result = CollectionID_1.CollectionID.None;
        switch (this.getEntityColor()) {
         case EntityID_1.EntityColor.Red:
          result = CollectionID_1.CollectionID.ItemNormalRed;
          break;

         case EntityID_1.EntityColor.Green:
          result = CollectionID_1.CollectionID.ItemNormalGreen;
          break;

         case EntityID_1.EntityColor.Blue:
          result = CollectionID_1.CollectionID.ItemNormalBlue;
          break;

         case EntityID_1.EntityColor.Yellow:
          result = CollectionID_1.CollectionID.ItemNormalYellow;
          break;

         case EntityID_1.EntityColor.Orange:
          result = CollectionID_1.CollectionID.ItemNormalOrange;
          break;

         case EntityID_1.EntityColor.Purple:
          result = CollectionID_1.CollectionID.ItemNormalPurple;
        }
        return result;
      };
      ItemNormal.prototype.getEntityID = function() {
        var result = EntityID_1.EntityID.None;
        switch (this.getEntityColor()) {
         case EntityID_1.EntityColor.Red:
          result = EntityID_1.EntityID.ItemNormalRed;
          break;

         case EntityID_1.EntityColor.Green:
          result = EntityID_1.EntityID.ItemNormalGreen;
          break;

         case EntityID_1.EntityColor.Blue:
          result = EntityID_1.EntityID.ItemNormalBlue;
          break;

         case EntityID_1.EntityColor.Yellow:
          result = EntityID_1.EntityID.ItemNormalYellow;
          break;

         case EntityID_1.EntityColor.Orange:
          result = EntityID_1.EntityID.ItemNormalOrange;
          break;

         case EntityID_1.EntityColor.Purple:
          result = EntityID_1.EntityID.ItemNormalPurple;
        }
        return result;
      };
      ItemNormal.prototype.getScore = function() {
        return 30;
      };
      ItemNormal.prototype.getButterflyPriority = function(color, layoutGrass) {
        if (this.getGrid().isTargetCollectionID(this.getCollectionID())) return 1;
        return _super.prototype.getButterflyPriority.call(this, color, layoutGrass);
      };
      ItemNormal.prototype._canDrop = function() {
        return true;
      };
      ItemNormal.prototype._canSwap = function() {
        return true;
      };
      ItemNormal.prototype._canMatch = function() {
        return true;
      };
      ItemNormal.prototype._canChange = function() {
        return true;
      };
      ItemNormal.prototype._canShuffle = function() {
        return true;
      };
      ItemNormal.prototype._canShuffleWhenCreate = function() {
        return true;
      };
      ItemNormal.prototype._canTransformByMagicCrystal = function() {
        if (this.getGrid().isTargetCollectionID(this.getCollectionID())) return false;
        return true;
      };
      ItemNormal.prototype._canUpgradeByRainbow = function() {
        return true;
      };
      ItemNormal.prototype._canChangeColor = function() {
        return true;
      };
      ItemNormal.prototype._canCleanByBomb = function(cleanColor) {
        return true;
      };
      ItemNormal.prototype._canCleanByMatch = function() {
        return true;
      };
      ItemNormal.prototype._onClean = function(cleanOption) {
        this.setVisible(false);
        this.getGrid().gainScoreWithEntity(this);
        if (cleanOption.createBombType != ItemBombBase_1.ItemBombType.None) {
          this.removeFromGridAndAddToEffect();
          this.getGrid().addObstructs(this);
          this.setVisible(!this.isTargetCollection());
          this.progressDeathWish(cleanOption);
          var targetPos = this.getPixelPos(cleanOption.cleanRoot);
          var obstructAction = cc.sequence(cc.delayTime(.1), cc.callFunc(function() {
            this.getGrid().removeObstructs(this);
          }, this));
          this.runAction(obstructAction);
          var removeAction = cc.sequence(cc.spawn(cc.scaleTo(.3, 0), cc.moveTo(.15, targetPos)), cc.callFunc(function() {
            this.getGrid().removeObstructs(this);
            this.destoryWithRecycle(true);
          }, this));
          this.runAction(removeAction);
        } else {
          this.selfDestory(true);
          if (!this.isTargetCollection()) {
            var flyer = FlyerAnimation_1.default.createDieAnimation(this.getGrid(), this.getEntityID());
            this.getGrid().setFlyerAtLogicalPos(flyer, this.getLogicalPos());
            if (cleanOption.cleanType == EntityID_1.EntityCleanType.Match) {
              var combo = this.getGrid().getPowerAmount(PowerID_1.PowerID.MatchCombo);
              var fileName = "eliminate_0";
              switch (combo) {
               case 0:
                fileName = "eliminate_0";
                break;

               case 1:
                fileName = "eliminate_1";
                break;

               case 2:
                fileName = "eliminate_2";
                break;

               case 3:
                fileName = "eliminate_3";
                break;

               case 4:
                fileName = "eliminate_4";
                break;

               case 5:
                fileName = "eliminate_5";
                break;

               case 6:
                fileName = "eliminate_6";
                break;

               case 7:
                fileName = "eliminate_7";
                break;

               case 8:
               default:
                fileName = "eliminate_8";
              }
              IGame_1.default.playAudio(IdentifierManager_1.default.getInstance().getMatchAudioFilePath(fileName));
            }
          }
          this.progressDeathWish(cleanOption);
        }
      };
      ItemNormal.prototype._onChange = function(changeOption) {
        changeOption.collectOld && this.onCollected();
        var grid = this.getGrid();
        var newItem = ItemFactory_1.default.generateItemWithEntityID(grid, changeOption.targetID);
        newItem && grid.setEntity(newItem, this.getLogicalPos());
      };
      ItemNormal.prototype.bounce = function() {
        var state = this.playAnimation("bounce");
        IGame_1.default.playAudio(IdentifierManager_1.default.getInstance().getMatchAudioFilePath("fall_back"));
        return state;
      };
      ItemNormal.create = function(grid, color) {
        var className = "ItemNormal";
        var prefabFileName = "match_scene/prefab/entity/item/ItemNormal";
        var pool = EntityPrefabNodePool_1.default.getInstance();
        var component = pool.getPrefabNodeWithFileNameAndClassName(prefabFileName, className);
        if (component) {
          component.init(grid, color);
          return component;
        }
        return null;
      };
      ItemNormal.prototype.clone = function() {
        var item = ItemNormal_1.create(this.getGrid(), this.getEntityColor());
        return item;
      };
      ItemNormal.prototype.init = function(grid, color) {
        _super.prototype.initItem.call(this, grid, ItemBase_1.ItemType.Normal);
        this.setEntityColor(color);
      };
      var ItemNormal_1;
      ItemNormal = ItemNormal_1 = __decorate([ ccclass ], ItemNormal);
      return ItemNormal;
    }(ItemBase_1.default);
    exports.default = ItemNormal;
    cc._RF.pop();
  }, {
    "../../../../../base/IGame": "IGame",
    "../../../defines/CollectionID": "CollectionID",
    "../../../defines/EntityID": "EntityID",
    "../../../defines/IdentifierManager": "IdentifierManager",
    "../../../defines/PowerID": "PowerID",
    "../../EntityPrefabNodePool": "EntityPrefabNodePool",
    "../../flyer/FlyerAnimation": "FlyerAnimation",
    "../ItemBase": "ItemBase",
    "../ItemFactory": "ItemFactory",
    "./bomb/ItemBombBase": "ItemBombBase"
  } ],
  ItemPuppy: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "a1e16XIHylLv77yRAwEmds6", "ItemPuppy");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.PuppyDirection = void 0;
    var CollectionID_1 = require("../../../defines/CollectionID");
    var EntityID_1 = require("../../../defines/EntityID");
    var GridBase_1 = require("../../../grid/GridBase");
    var ItemBase_1 = require("../ItemBase");
    var EntityPrefabNodePool_1 = require("../../EntityPrefabNodePool");
    var PuppyDirection;
    (function(PuppyDirection) {
      PuppyDirection[PuppyDirection["None"] = 0] = "None";
      PuppyDirection[PuppyDirection["Left"] = 1] = "Left";
      PuppyDirection[PuppyDirection["Right"] = 2] = "Right";
      PuppyDirection[PuppyDirection["Front"] = 3] = "Front";
      PuppyDirection[PuppyDirection["Back"] = 4] = "Back";
    })(PuppyDirection = exports.PuppyDirection || (exports.PuppyDirection = {}));
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ItemPuppy = function(_super) {
      __extends(ItemPuppy, _super);
      function ItemPuppy() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      ItemPuppy_1 = ItemPuppy;
      ItemPuppy.create = function(grid) {
        var className = "ItemPuppy";
        var prefabFileName = "match_scene/prefab/entity/item/ItemPuppy";
        var pool = EntityPrefabNodePool_1.default.getInstance();
        var component = pool.getPrefabNodeWithFileNameAndClassName(prefabFileName, className);
        if (component) {
          component.init(grid);
          return component;
        }
        return null;
      };
      ItemPuppy.prototype.clone = function() {
        var item = ItemPuppy_1.create(this.getGrid());
        return item;
      };
      ItemPuppy.prototype.getTopZOrder = function() {
        return GridBase_1.default.ZORDER_PUPPY_TOP;
      };
      ItemPuppy.prototype.getBottomZOrder = function() {
        return GridBase_1.default.ZORDER_PUPPY_BOTTOM;
      };
      ItemPuppy.prototype.getCollectionID = function() {
        return CollectionID_1.CollectionID.ItemPuppy;
      };
      ItemPuppy.prototype.getEntityID = function() {
        return EntityID_1.EntityID.ItemPuppy;
      };
      ItemPuppy.prototype.setLogicalPos = function(pos) {
        _super.prototype.setLogicalPos.call(this, pos);
        this.node.zIndex = GridBase_1.default.ZORDER_PUPPY_BOTTOM;
      };
      ItemPuppy.prototype.onCollected = function() {
        this.getGrid().isTargetCollectionID(this.getCollectionID()) && this.getGrid().updateTargetBarUIWithDelta(this.getCollectionID(), -1);
        this.getGrid().collectEntity(this);
      };
      ItemPuppy.prototype.init = function(grid) {
        _super.prototype.initItem.call(this, grid, ItemBase_1.ItemType.Puppy);
      };
      ItemPuppy.prototype._canDrop = function() {
        return false;
      };
      ItemPuppy.prototype._canSwap = function() {
        return false;
      };
      ItemPuppy.prototype._canMatch = function() {
        return false;
      };
      ItemPuppy.prototype.stay = function() {
        this.playAnimation("item_puppy_idle");
      };
      ItemPuppy.prototype.attack = function(direction) {
        var animationName = "item_puppy_idle";
        switch (direction) {
         case PuppyDirection.Left:
          animationName = "item_puppy_attack_left";
          break;

         case PuppyDirection.Right:
          animationName = "item_puppy_attack_right";
          break;

         case PuppyDirection.Front:
          animationName = "item_puppy_attack_front";
          break;

         case PuppyDirection.Back:
          animationName = "item_puppy_attack_back";
        }
        this.playAnimation(animationName);
      };
      ItemPuppy.prototype.move = function(direction) {
        var animationName = "item_puppy_idle";
        switch (direction) {
         case PuppyDirection.Left:
          animationName = "item_puppy_move_left";
          break;

         case PuppyDirection.Right:
          animationName = "item_puppy_move_right";
          break;

         case PuppyDirection.Front:
          animationName = "item_puppy_move_front";
          break;

         case PuppyDirection.Back:
          animationName = "item_puppy_move_back";
        }
        this.getCurrentAnimationClipName() != animationName && this.playAnimation(animationName);
      };
      ItemPuppy.prototype.fly = function() {
        this.playAnimation("item_puppy_fly");
      };
      ItemPuppy.prototype.win = function() {
        this.playAnimation("item_puppy_win");
      };
      var ItemPuppy_1;
      ItemPuppy = ItemPuppy_1 = __decorate([ ccclass ], ItemPuppy);
      return ItemPuppy;
    }(ItemBase_1.default);
    exports.default = ItemPuppy;
    cc._RF.pop();
  }, {
    "../../../defines/CollectionID": "CollectionID",
    "../../../defines/EntityID": "EntityID",
    "../../../grid/GridBase": "GridBase",
    "../../EntityPrefabNodePool": "EntityPrefabNodePool",
    "../ItemBase": "ItemBase"
  } ],
  ItemStateChangeColor: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "7b10aJceXBGJLeWyUC2Azxu", "ItemStateChangeColor");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var EntityStateBase_1 = require("../../state/EntityStateBase");
    var EntityStateWait_1 = require("../../state/concreteState/EntityStateWait");
    var ItemStateChangeColor = function(_super) {
      __extends(ItemStateChangeColor, _super);
      function ItemStateChangeColor(color) {
        var _this = _super.call(this, EntityStateBase_1.EntityStateType.ChangeColor) || this;
        _this._targetColor = null;
        _this._targetColor = color;
        return _this;
      }
      ItemStateChangeColor.create = function(color) {
        return new ItemStateChangeColor(color);
      };
      ItemStateChangeColor.prototype.enter = function(entity) {
        var _this = this;
        var grid = entity.getGrid();
        grid.addObstructs(entity);
        var animate = cc.sequence(cc.fadeOut(.1), cc.callFunc(function() {
          entity.setEntityColor(_this._targetColor);
        }), cc.fadeIn(.1));
        var callBack = cc.callFunc(function() {
          entity.setCurrentState(EntityStateWait_1.default.create());
          grid.removeObstructs(entity);
        });
        entity.runAction(cc.sequence(animate, callBack));
      };
      ItemStateChangeColor.prototype.update = function(entity, delta) {};
      ItemStateChangeColor.prototype.exit = function(entity) {
        var grid = entity.getGrid();
        grid.removeObstructs(entity);
      };
      return ItemStateChangeColor;
    }(EntityStateBase_1.default);
    exports.default = ItemStateChangeColor;
    cc._RF.pop();
  }, {
    "../../state/EntityStateBase": "EntityStateBase",
    "../../state/concreteState/EntityStateWait": "EntityStateWait"
  } ],
  ItemStateDrop: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "6c45dwvw1lL37MFT1zv0lWt", "ItemStateDrop");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var GameMath_1 = require("../../../../../extend/utils/GameMath");
    var EntityID_1 = require("../../../defines/EntityID");
    var EntityStateWait_1 = require("../../state/concreteState/EntityStateWait");
    var EntityStateBase_1 = require("../../state/EntityStateBase");
    var ItemStateDrop = function(_super) {
      __extends(ItemStateDrop, _super);
      function ItemStateDrop() {
        var _this = _super.call(this, EntityStateBase_1.EntityStateType.Drop) || this;
        _this._pathIndex = 0;
        _this._pathCount = 0;
        _this._timeDelta = 0;
        _this._stepDuraton = 0;
        return _this;
      }
      ItemStateDrop.create = function() {
        return new ItemStateDrop();
      };
      ItemStateDrop.prototype.initDropPath = function(entity) {
        var grid = entity.getGrid();
        var path = entity.getPath();
        if (path.length < 2) {
          entity.setCurrentState(EntityStateWait_1.default.create());
          entity.clearPath();
          return;
        }
        var lastTargetIndex = path.length - 1;
        for (;lastTargetIndex >= 0; lastTargetIndex--) if (path[lastTargetIndex].type != EntityID_1.EntityDropStepType.Stay) break;
        if (lastTargetIndex < 0) {
          entity.setCurrentState(EntityStateWait_1.default.create());
          entity.clearPath();
          return;
        }
        grid.addObstructs(entity);
        var firstStep = path[0];
        entity.setPixelPos(firstStep.logicalPos);
        entity.setVisible(firstStep.type != EntityID_1.EntityDropStepType.Hide);
        this._pathCount = lastTargetIndex + 1;
        this._pathIndex = 1;
        this._timeDelta = 0;
        this._stepDuraton = ItemStateDrop.MAX_DROP_DRUATION;
      };
      ItemStateDrop.prototype.updatePath = function(entity, delta) {
        this._timeDelta += delta;
        while (1) {
          var needNextLoop = false;
          if (this._pathIndex >= this._pathCount) {
            var item = entity;
            item.bounce();
            entity.getGrid().removeObstructs(entity);
            entity.clearPath();
            entity.setCurrentState(EntityStateWait_1.default.create());
            break;
          }
          var path = entity.getPath();
          var step = path[this._pathIndex];
          switch (step.type) {
           case EntityID_1.EntityDropStepType.Hide:
            entity.setVisible(false);
            if (this._timeDelta >= ItemStateDrop.MAX_DROP_DRUATION) {
              this._timeDelta -= ItemStateDrop.MAX_DROP_DRUATION;
              this._pathIndex += 1;
              needNextLoop = true;
              this._stepDuraton = ItemStateDrop.MAX_DROP_DRUATION;
            }
            break;

           case EntityID_1.EntityDropStepType.Born:
            entity.setVisible(true);
            var startPos = entity.getPixelPos(step.logicalPos).add(cc.v2(0, .5 * entity.getContentSize().height));
            var offset = cc.v2(0, .5 * -entity.getContentSize().height);
            var startScale = 0;
            var scaleDelta = 1;
            var percentage = Math.min(this._timeDelta / ItemStateDrop.MAX_DROP_DRUATION, 1);
            entity.node.setPosition(startPos.add(offset.mul(percentage)));
            entity.node.setScale(startScale + scaleDelta * percentage);
            if (this._timeDelta >= ItemStateDrop.MAX_DROP_DRUATION) {
              this._timeDelta -= ItemStateDrop.MAX_DROP_DRUATION;
              this._pathIndex += 1;
              needNextLoop = true;
              this._stepDuraton = ItemStateDrop.MAX_DROP_DRUATION;
            }
            break;

           case EntityID_1.EntityDropStepType.Stay:
            entity.setVisible(true);
            if (this._timeDelta >= ItemStateDrop.MAX_DROP_DRUATION) {
              this._timeDelta -= ItemStateDrop.MAX_DROP_DRUATION;
              this._pathIndex += 1;
              needNextLoop = true;
              this._stepDuraton = ItemStateDrop.MAX_DROP_DRUATION;
            }
            break;

           case EntityID_1.EntityDropStepType.Drop:
            var startPos = entity.getPixelPos(path[this._pathIndex - 1].logicalPos);
            var offset = entity.getPixelPos(step.logicalPos).sub(startPos);
            var percentage = Math.min(this._timeDelta / this._stepDuraton, 1);
            entity.node.setPosition(startPos.add(offset.mul(percentage)));
            if (this._timeDelta >= this._stepDuraton) {
              this._timeDelta -= this._stepDuraton;
              this._pathIndex += 1;
              needNextLoop = true;
              var newDuration = this._stepDuraton * ItemStateDrop.DROP_DRUATION_DECAY_FACTOR;
              this._stepDuraton = GameMath_1.default.clamp(newDuration, ItemStateDrop.MIN_DROP_DRUATION, ItemStateDrop.MAX_DROP_DRUATION);
            }
            break;

           case EntityID_1.EntityDropStepType.Wormhole:
            var percentage = Math.min(this._timeDelta / this._stepDuraton, 1);
            if (percentage <= .5) {
              percentage /= .5;
              var startPos = entity.getPixelPos(path[this._pathIndex - 1].logicalPos);
              var offset = cc.v2(0, .5 * -entity.getContentSize().height);
              var startScale = 1;
              var scaleDelta = -1;
              entity.node.setPosition(startPos.add(offset.mul(percentage)));
              entity.node.setScale(startScale + scaleDelta * percentage);
            } else {
              percentage = Math.min((percentage - .5) / .5, 1);
              var startPos = entity.getPixelPos(step.logicalPos).add(cc.v2(0, .5 * entity.getContentSize().height));
              var offset = cc.v2(0, .5 * -entity.getContentSize().height);
              var startScale = 0;
              var scaleDelta = 1;
              entity.node.setPosition(startPos.add(offset.mul(percentage)));
              entity.node.setScale(startScale + scaleDelta * percentage);
            }
            if (this._timeDelta >= ItemStateDrop.MAX_DROP_DRUATION) {
              this._timeDelta -= ItemStateDrop.MAX_DROP_DRUATION;
              this._pathIndex += 1;
              needNextLoop = true;
              var newDuration = this._stepDuraton * ItemStateDrop.DROP_DRUATION_DECAY_FACTOR;
              this._stepDuraton = GameMath_1.default.clamp(newDuration, ItemStateDrop.MIN_DROP_DRUATION, ItemStateDrop.MAX_DROP_DRUATION);
            }
          }
          if (false == needNextLoop) break;
        }
      };
      ItemStateDrop.prototype.enter = function(entity) {
        this.initDropPath(entity);
      };
      ItemStateDrop.prototype.update = function(entity, delta) {
        this.updatePath(entity, delta * cc.director.getScheduler().getTimeScale());
      };
      ItemStateDrop.prototype.exit = function(entity) {
        entity.getGrid().removeObstructs(entity);
      };
      ItemStateDrop.MAX_DROP_DRUATION = .125;
      ItemStateDrop.MIN_DROP_DRUATION = .065;
      ItemStateDrop.DROP_DRUATION_DECAY_FACTOR = .9;
      return ItemStateDrop;
    }(EntityStateBase_1.default);
    exports.default = ItemStateDrop;
    cc._RF.pop();
  }, {
    "../../../../../extend/utils/GameMath": "GameMath",
    "../../../defines/EntityID": "EntityID",
    "../../state/EntityStateBase": "EntityStateBase",
    "../../state/concreteState/EntityStateWait": "EntityStateWait"
  } ],
  ItemStateGenerate: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "16874H13NpAF5/Q8wK/wJJ8", "ItemStateGenerate");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var EntityStateBase_1 = require("../../state/EntityStateBase");
    var EntityStateWait_1 = require("../../state/concreteState/EntityStateWait");
    var EntityEventChanged_1 = require("../../../event/EntityEventChanged");
    var GridBase_1 = require("../../../grid/GridBase");
    var FlyerAnimation_1 = require("../../flyer/FlyerAnimation");
    var ItemStateGenerate = function(_super) {
      __extends(ItemStateGenerate, _super);
      function ItemStateGenerate(pos) {
        var _this = _super.call(this, EntityStateBase_1.EntityStateType.Generate) || this;
        _this._targetPos = cc.Vec2.ZERO;
        _this._targetPos = pos;
        return _this;
      }
      ItemStateGenerate.create = function(pos) {
        return new ItemStateGenerate(pos);
      };
      ItemStateGenerate.prototype.enter = function(entity) {
        var _this = this;
        var grid = entity.getGrid();
        var pixelTargetPos = entity.getPixelPos(this._targetPos);
        entity.node.setPosition(pixelTargetPos);
        entity.node.setScale(0);
        grid.addObstructs(entity);
        entity.node.zIndex = entity.getTopZOrder();
        var flyer = FlyerAnimation_1.default.createAnimationWithType(entity.getGrid(), FlyerAnimation_1.FlyerAnimationType.CommonHurt);
        grid.setFlyerAtLogicalPos(flyer, this._targetPos);
        flyer.node.zIndex = entity.getBottomZOrder() - 499;
        var sequence = cc.sequence(cc.scaleTo(.3, 1).easing(cc.easeBackOut()), cc.callFunc(function() {
          grid.setEntity(entity, _this._targetPos);
          entity.setCurrentState(EntityStateWait_1.default.create());
          var changedEvent = EntityEventChanged_1.default.create(entity);
          entity.node.dispatchEvent(changedEvent);
          entity.getGrid().removeObstructs(entity);
          entity.node.zIndex = GridBase_1.default.ZORDER_ITEM_BOTTOM;
        }));
        entity.runAction(sequence);
      };
      ItemStateGenerate.prototype.update = function(entity, delta) {};
      ItemStateGenerate.prototype.exit = function(entity) {
        entity.getGrid().removeObstructs(entity);
      };
      return ItemStateGenerate;
    }(EntityStateBase_1.default);
    exports.default = ItemStateGenerate;
    cc._RF.pop();
  }, {
    "../../../event/EntityEventChanged": "EntityEventChanged",
    "../../../grid/GridBase": "GridBase",
    "../../flyer/FlyerAnimation": "FlyerAnimation",
    "../../state/EntityStateBase": "EntityStateBase",
    "../../state/concreteState/EntityStateWait": "EntityStateWait"
  } ],
  ItemStateReplace: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "2082eUUHYBNbKoESdV5X70m", "ItemStateReplace");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var EntityStateBase_1 = require("../../state/EntityStateBase");
    var EntityStateWait_1 = require("../../state/concreteState/EntityStateWait");
    var CurveToAction_1 = require("../../../../../extend/action/CurveToAction");
    var GridBase_1 = require("../../../grid/GridBase");
    var ItemStateReplace = function(_super) {
      __extends(ItemStateReplace, _super);
      function ItemStateReplace(toPos, delay, score, supplys) {
        var _this = _super.call(this, EntityStateBase_1.EntityStateType.Replace) || this;
        _this._delayTime = 0;
        _this._targetPos = null;
        _this._gainScore = 0;
        _this._supplys = {};
        _this._targetPos = toPos;
        _this._delayTime = delay;
        _this._gainScore = score;
        _this._supplys = supplys;
        return _this;
      }
      ItemStateReplace.create = function(targetPos, delay, score, supplys) {
        void 0 === delay && (delay = 0);
        void 0 === score && (score = 0);
        void 0 === supplys && (supplys = {});
        return new ItemStateReplace(targetPos, delay, score, supplys);
      };
      ItemStateReplace.prototype.enter = function(entity) {
        var _this = this;
        var grid = entity.getGrid();
        var pixelTargetPos = entity.getPixelPos(this._targetPos);
        grid.addObstructs(entity);
        entity.node.zIndex = GridBase_1.default.ZORDER_EFFECT;
        entity.shiftToEffectLayer();
        var actions = [];
        this._delayTime > 0 && actions.push(cc.delayTime(this._delayTime));
        var moveTime = 1;
        actions.push(CurveToAction_1.default.create(moveTime, entity.node.getPosition(), pixelTargetPos));
        var gainReward = cc.callFunc(function() {
          _this._gainScore > 0 && grid.gainScoreWithPixelPos(_this._gainScore, pixelTargetPos, true);
          for (var key in _this._supplys) {
            var supplyID = Number(key);
            var amount = _this._supplys[key];
            grid.gainCollectedSupply(supplyID, amount);
          }
        });
        actions.push(gainReward);
        var callback = cc.callFunc(function() {
          grid.setEntity(entity, _this._targetPos);
          entity.setCurrentState(EntityStateWait_1.default.create());
          grid.removeObstructs(entity);
        });
        actions.push(callback);
        entity.runAction(cc.sequence(actions));
      };
      ItemStateReplace.prototype.update = function(entity, delta) {};
      ItemStateReplace.prototype.exit = function(entity) {
        entity.getGrid().removeObstructs(entity);
      };
      return ItemStateReplace;
    }(EntityStateBase_1.default);
    exports.default = ItemStateReplace;
    cc._RF.pop();
  }, {
    "../../../../../extend/action/CurveToAction": "CurveToAction",
    "../../../grid/GridBase": "GridBase",
    "../../state/EntityStateBase": "EntityStateBase",
    "../../state/concreteState/EntityStateWait": "EntityStateWait"
  } ],
  ItemStateShuffle: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "973eb3MzOJJk5v6obDm82Al", "ItemStateShuffle");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var EntityStateBase_1 = require("../../state/EntityStateBase");
    var GameMath_1 = require("../../../../../extend/utils/GameMath");
    var EntityStateWait_1 = require("../../state/concreteState/EntityStateWait");
    var GridBase_1 = require("../../../grid/GridBase");
    var ItemStateShuffle = function(_super) {
      __extends(ItemStateShuffle, _super);
      function ItemStateShuffle(fromPos, toPos, duration) {
        var _this = _super.call(this, EntityStateBase_1.EntityStateType.Shuffle) || this;
        _this._fromPos = GameMath_1.default.INVALID_LOGICAL_POSITION.clone();
        _this._toPos = GameMath_1.default.INVALID_LOGICAL_POSITION.clone();
        _this._duration = ItemStateShuffle.SHUFFLE_DRUATION;
        _this._fromPos = fromPos;
        _this._toPos = toPos;
        _this._duration = duration;
        return _this;
      }
      ItemStateShuffle.create = function(fromPos, toPos, duration) {
        void 0 === duration && (duration = ItemStateShuffle.SHUFFLE_DRUATION);
        return new ItemStateShuffle(fromPos, toPos, duration);
      };
      ItemStateShuffle.prototype.enter = function(entity) {
        var grid = entity.getGrid();
        grid.addObstructs(entity);
        var cellSize = grid.getCellSize();
        var startPos = entity.getPixelPos(this._fromPos);
        entity.node.setPosition(startPos);
        entity.node.zIndex = GridBase_1.default.ZORDER_EFFECT;
        entity.shiftToEffectLayer();
        var duration = this._duration + GameMath_1.default.random(-.5 * this._duration, .5 * this._duration);
        var fly = cc.spawn(cc.moveTo(.33 * duration, startPos.add(cc.v2(0, .75 * cellSize.height))), cc.scaleTo(.33 * duration, 1.2));
        var stay = cc.delayTime(.34 * duration);
        var move = cc.spawn(cc.moveTo(.33 * duration, entity.getPixelPos(this._toPos)), cc.scaleTo(duration, 1));
        var callback = cc.callFunc(function() {
          grid.setEntity(entity, entity.getLogicalPos());
          entity.setCurrentState(EntityStateWait_1.default.create());
        }, this);
        entity.runAction(cc.sequence(fly, stay, move, callback));
      };
      ItemStateShuffle.prototype.update = function(entity, delta) {};
      ItemStateShuffle.prototype.exit = function(entity) {
        entity.getGrid().removeObstructs(entity);
      };
      ItemStateShuffle.SHUFFLE_DRUATION = 1;
      return ItemStateShuffle;
    }(EntityStateBase_1.default);
    exports.default = ItemStateShuffle;
    cc._RF.pop();
  }, {
    "../../../../../extend/utils/GameMath": "GameMath",
    "../../../grid/GridBase": "GridBase",
    "../../state/EntityStateBase": "EntityStateBase",
    "../../state/concreteState/EntityStateWait": "EntityStateWait"
  } ],
  ItemStateSwap: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "1462c9fSeZCFrVCnwVGRlyy", "ItemStateSwap");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var GameMath_1 = require("../../../../../extend/utils/GameMath");
    var EntityStateWait_1 = require("../../state/concreteState/EntityStateWait");
    var EntityStateBase_1 = require("../../state/EntityStateBase");
    var GridBase_1 = require("../../../grid/GridBase");
    var ItemStateSwap = function(_super) {
      __extends(ItemStateSwap, _super);
      function ItemStateSwap(fromPos, toPos, duration) {
        var _this = _super.call(this, EntityStateBase_1.EntityStateType.Swap) || this;
        _this._fromPos = GameMath_1.default.INVALID_LOGICAL_POSITION.clone();
        _this._toPos = GameMath_1.default.INVALID_LOGICAL_POSITION.clone();
        _this._duration = ItemStateSwap.SWAP_DRUATION;
        _this._timePast = 0;
        _this._fromPos = fromPos;
        _this._toPos = toPos;
        _this._duration = duration;
        _this._timePast = 0;
        return _this;
      }
      ItemStateSwap.create = function(fromPos, toPos, duration) {
        void 0 === duration && (duration = ItemStateSwap.SWAP_DRUATION);
        return new ItemStateSwap(fromPos, toPos, duration);
      };
      ItemStateSwap.prototype.enter = function(entity) {
        var grid = entity.getGrid();
        grid.addObstructs(entity);
        entity.setPixelPos(this._fromPos);
        entity.node.zIndex = GridBase_1.default.ZORDER_EFFECT;
        var move = cc.moveTo(this._duration, entity.getPixelPos(this._toPos));
        var callback = cc.callFunc(function() {
          entity.setCurrentState(EntityStateWait_1.default.create());
          entity.node.zIndex = entity.getBottomZOrder();
        }, this);
        entity.runAction(cc.sequence(move, callback));
        this._timePast = 0;
      };
      ItemStateSwap.prototype.update = function(entity, delta) {
        this._timePast += delta;
        if (this._timePast >= this._duration + .1) {
          entity.node.stopAllActions();
          entity.setPixelPos(this._toPos);
          entity.setCurrentState(EntityStateWait_1.default.create());
        }
      };
      ItemStateSwap.prototype.exit = function(entity) {
        entity.getGrid().removeObstructs(entity);
      };
      ItemStateSwap.SWAP_DRUATION = .15;
      return ItemStateSwap;
    }(EntityStateBase_1.default);
    exports.default = ItemStateSwap;
    cc._RF.pop();
  }, {
    "../../../../../extend/utils/GameMath": "GameMath",
    "../../../grid/GridBase": "GridBase",
    "../../state/EntityStateBase": "EntityStateBase",
    "../../state/concreteState/EntityStateWait": "EntityStateWait"
  } ],
  ItemStatue: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "bc521mULhdPj5svR5zOWzNp", "ItemStatue");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var ItemBase_1 = require("../ItemBase");
    var EntityPrefabNodePool_1 = require("../../EntityPrefabNodePool");
    var CollectionID_1 = require("../../../defines/CollectionID");
    var EntityID_1 = require("../../../defines/EntityID");
    var FlyerAnimation_1 = require("../../flyer/FlyerAnimation");
    var IdentifierManager_1 = require("../../../defines/IdentifierManager");
    var IGame_1 = require("../../../../../base/IGame");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ItemStatue = function(_super) {
      __extends(ItemStatue, _super);
      function ItemStatue() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this._healthPoint = 0;
        return _this;
      }
      ItemStatue_1 = ItemStatue;
      ItemStatue.create = function(grid, healthPoint) {
        var className = "ItemStatue";
        var prefabFileName = "match_scene/prefab/entity/item/ItemStatue";
        var pool = EntityPrefabNodePool_1.default.getInstance();
        var component = pool.getPrefabNodeWithFileNameAndClassName(prefabFileName, className);
        if (component) {
          component.init(grid, healthPoint);
          return component;
        }
        return null;
      };
      ItemStatue.prototype.clone = function() {
        var item = ItemStatue_1.create(this.getGrid(), this.getHealthPoint());
        return item;
      };
      ItemStatue.prototype.init = function(grid, healthPoint) {
        _super.prototype.initItem.call(this, grid, ItemBase_1.ItemType.Statue);
        this.setHealthPoint(healthPoint);
      };
      ItemStatue.prototype.getHealthPoint = function() {
        return this._healthPoint;
      };
      ItemStatue.prototype.setHealthPoint = function(val) {
        this._healthPoint = val;
        this.updatePuppet();
      };
      ItemStatue.prototype.getCollectionID = function() {
        return CollectionID_1.CollectionID.ItemStatue;
      };
      ItemStatue.prototype.getEntityID = function() {
        var result = EntityID_1.EntityID.None;
        switch (this.getHealthPoint()) {
         case 1:
          result = EntityID_1.EntityID.ItemStatueHp1;
          break;

         case 2:
          result = EntityID_1.EntityID.ItemStatueHp2;
          break;

         case 3:
          result = EntityID_1.EntityID.ItemStatueHp3;
        }
        return result;
      };
      ItemStatue.prototype.getScore = function() {
        return 150;
      };
      ItemStatue.prototype._canDrop = function() {
        return false;
      };
      ItemStatue.prototype._canSwap = function() {
        return false;
      };
      ItemStatue.prototype._canMatch = function() {
        return false;
      };
      ItemStatue.prototype._canCleanByBomb = function(cleanColor) {
        return true;
      };
      ItemStatue.prototype._canCleanByNeighbour = function(color) {
        return false;
      };
      ItemStatue.prototype._onClean = function(cleanOption) {
        var rate = 1;
        if (cleanOption.cleanType == EntityID_1.EntityCleanType.Terminate) {
          rate = this.getHealthPoint();
          this.setHealthPoint(1);
        }
        this.getGrid().gainScoreWithEntity(this, rate);
        if (this.getHealthPoint() <= 1) {
          if (!this.isTargetCollection()) {
            var flyer = FlyerAnimation_1.default.createDieAnimation(this.getGrid(), this.getEntityID());
            this.getGrid().setFlyerAtLogicalPos(flyer, this.getLogicalPos());
          }
          this.progressDeathWish(cleanOption);
          this.setVisible(false);
          this.selfDestory();
          IGame_1.default.playAudio(IdentifierManager_1.default.getInstance().getMatchAudioFilePath("statue"));
        } else {
          IGame_1.default.playAudio(IdentifierManager_1.default.getInstance().getMatchAudioFilePath("eliminate_0"));
          this.setHealthPoint(this.getHealthPoint() - 1);
          this.selfHurt();
          var flyer = FlyerAnimation_1.default.createAnimationWithType(this.getGrid(), FlyerAnimation_1.FlyerAnimationType.CommonHurt);
          this.getGrid().setFlyerAtLogicalPos(flyer, this.getLogicalPos());
          flyer.node.zIndex = this.getTopZOrder();
        }
      };
      var ItemStatue_1;
      ItemStatue = ItemStatue_1 = __decorate([ ccclass ], ItemStatue);
      return ItemStatue;
    }(ItemBase_1.default);
    exports.default = ItemStatue;
    cc._RF.pop();
  }, {
    "../../../../../base/IGame": "IGame",
    "../../../defines/CollectionID": "CollectionID",
    "../../../defines/EntityID": "EntityID",
    "../../../defines/IdentifierManager": "IdentifierManager",
    "../../EntityPrefabNodePool": "EntityPrefabNodePool",
    "../../flyer/FlyerAnimation": "FlyerAnimation",
    "../ItemBase": "ItemBase"
  } ],
  ItemWatermelon: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "fc3d48kJINKQYOEoGZfPziZ", "ItemWatermelon");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var ItemBase_1 = require("../ItemBase");
    var CollectionID_1 = require("../../../defines/CollectionID");
    var EntityID_1 = require("../../../defines/EntityID");
    var TMXConfigInfoKeys_1 = require("../../../defines/TMXConfigInfoKeys");
    var FlyerAnimation_1 = require("../../flyer/FlyerAnimation");
    var IGame_1 = require("../../../../../base/IGame");
    var IdentifierManager_1 = require("../../../defines/IdentifierManager");
    var EntityPrefabNodePool_1 = require("../../EntityPrefabNodePool");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ItemWatermelon = function(_super) {
      __extends(ItemWatermelon, _super);
      function ItemWatermelon() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.piecesNode = [];
        _this._healthPoint = 1;
        return _this;
      }
      ItemWatermelon_1 = ItemWatermelon;
      ItemWatermelon.create = function(grid) {
        var className = "ItemWatermelon";
        var prefabFileName = "match_scene/prefab/entity/item/ItemWatermelon";
        var pool = EntityPrefabNodePool_1.default.getInstance();
        var component = pool.getPrefabNodeWithFileNameAndClassName(prefabFileName, className);
        if (component) {
          component.init(grid);
          return component;
        }
        return null;
      };
      ItemWatermelon.prototype.clone = function() {
        var item = ItemWatermelon_1.create(this.getGrid());
        item.setHealthPoint(this.getHealthPoint());
        return item;
      };
      ItemWatermelon.prototype.getCollectionID = function() {
        return CollectionID_1.CollectionID.ItemWatermelon;
      };
      ItemWatermelon.prototype.getEntityID = function() {
        return EntityID_1.EntityID.ItemWatermelon;
      };
      ItemWatermelon.prototype.getScore = function() {
        return 100;
      };
      ItemWatermelon.prototype.dealWithConfigMap = function(configMap) {
        _super.prototype.dealWithConfigMap.call(this, configMap);
        configMap[TMXConfigInfoKeys_1.default.CFG_WATERMELON_MAX] && (this._healthPoint = Number(configMap[TMXConfigInfoKeys_1.default.CFG_WATERMELON_MAX]));
        this.setHealthPoint(this._healthPoint);
      };
      ItemWatermelon.prototype.init = function(grid) {
        _super.prototype.initItem.call(this, grid, ItemBase_1.ItemType.ItemWatermelon, 2, 2);
      };
      ItemWatermelon.prototype._canDrop = function() {
        return false;
      };
      ItemWatermelon.prototype._canSwap = function() {
        return false;
      };
      ItemWatermelon.prototype._canMatch = function() {
        return false;
      };
      ItemWatermelon.prototype._canCleanByTerminate = function(cleanColor) {
        return false;
      };
      ItemWatermelon.prototype._canCleanByBomb = function(cleanColor) {
        return true;
      };
      ItemWatermelon.prototype._canCleanByNeighbour = function(color) {
        return true;
      };
      ItemWatermelon.prototype._onClean = function(cleanOption) {
        var _this = this;
        this.getGrid().gainScoreWithEntity(this);
        if (this.getHealthPoint() <= 1) {
          this.progressDeathWish(cleanOption);
          this.removeFromGridAndAddToEffect();
          this.getGrid().addObstructs(this);
          var size = cc.view.getVisibleSize();
          var worldPos = cc.v2(size.width + 2e3, -500);
          var gridPos = this.getGrid().node.convertToNodeSpace(worldPos);
          var removeObstruct = cc.sequence(cc.delayTime(.2), cc.callFunc(function() {
            _this.getGrid().removeObstructs(_this);
          }));
          var disappear = cc.sequence(cc.spawn(cc.moveTo(1, gridPos), cc.fadeOut(1)), cc.callFunc(function() {
            _this.getGrid().removeObstructs(_this);
            _this.node.removeFromParent();
          }));
          var action = cc.spawn(removeObstruct, disappear);
          this.runAction(action);
          var flyer = FlyerAnimation_1.default.createDieAnimation(this.getGrid(), this.getEntityID());
          this.getGrid().setFlyerAtLogicalPos(flyer, this.getLogicalPos());
          flyer.node.setPosition(this.node.getPosition());
          flyer.node.zIndex = this.getTopZOrder();
          IGame_1.default.playAudio(IdentifierManager_1.default.getInstance().getMatchAudioFilePath("watermelon"));
          this.setHealthPoint(0);
        } else {
          this.onCollected();
          this.setHealthPoint(this.getHealthPoint() - 1);
          this.selfHurt();
          var flyer = FlyerAnimation_1.default.createDieAnimation(this.getGrid(), this.getEntityID());
          this.getGrid().setFlyerAtLogicalPos(flyer, this.getLogicalPos());
          flyer.node.setPosition(this.node.getPosition());
          flyer.node.zIndex = this.getTopZOrder();
          IGame_1.default.playAudio(IdentifierManager_1.default.getInstance().getMatchAudioFilePath("watermelon"));
        }
      };
      ItemWatermelon.prototype.getHealthPoint = function() {
        return this._healthPoint;
      };
      ItemWatermelon.prototype.setHealthPoint = function(val) {
        this._healthPoint = val;
        this.updatePuppet();
      };
      ItemWatermelon.prototype.updatePuppet = function() {
        for (var i = 0; i < 8; i++) this.piecesNode[i].active = i < this._healthPoint;
      };
      var ItemWatermelon_1;
      __decorate([ property([ cc.Node ]) ], ItemWatermelon.prototype, "piecesNode", void 0);
      ItemWatermelon = ItemWatermelon_1 = __decorate([ ccclass ], ItemWatermelon);
      return ItemWatermelon;
    }(ItemBase_1.default);
    exports.default = ItemWatermelon;
    cc._RF.pop();
  }, {
    "../../../../../base/IGame": "IGame",
    "../../../defines/CollectionID": "CollectionID",
    "../../../defines/EntityID": "EntityID",
    "../../../defines/IdentifierManager": "IdentifierManager",
    "../../../defines/TMXConfigInfoKeys": "TMXConfigInfoKeys",
    "../../EntityPrefabNodePool": "EntityPrefabNodePool",
    "../../flyer/FlyerAnimation": "FlyerAnimation",
    "../ItemBase": "ItemBase"
  } ],
  KindID: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "9a5c4D4APpBipzqGU+5sKSS", "KindID");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.KindIDManager = exports.KindID = void 0;
    var EntityID_1 = require("./EntityID");
    var KindID;
    (function(KindID) {
      KindID[KindID["CellNormal"] = 10101] = "CellNormal";
      KindID[KindID["CellConveyerD2U"] = 20101] = "CellConveyerD2U";
      KindID[KindID["CellConveyerL2R"] = 20102] = "CellConveyerL2R";
      KindID[KindID["CellConveyerU2D"] = 20103] = "CellConveyerU2D";
      KindID[KindID["CellConveyerR2L"] = 20104] = "CellConveyerR2L";
      KindID[KindID["CellConveyerD2L"] = 20105] = "CellConveyerD2L";
      KindID[KindID["CellConveyerL2U"] = 20106] = "CellConveyerL2U";
      KindID[KindID["CellConveyerU2R"] = 20107] = "CellConveyerU2R";
      KindID[KindID["CellConveyerR2D"] = 20108] = "CellConveyerR2D";
      KindID[KindID["CellConveyerD2R"] = 20109] = "CellConveyerD2R";
      KindID[KindID["CellConveyerR2U"] = 20110] = "CellConveyerR2U";
      KindID[KindID["CellConveyerU2L"] = 20111] = "CellConveyerU2L";
      KindID[KindID["CellConveyerL2D"] = 20112] = "CellConveyerL2D";
      KindID[KindID["CellMovablePlate"] = 20201] = "CellMovablePlate";
      KindID[KindID["PopsicleNormal"] = 30101] = "PopsicleNormal";
      KindID[KindID["PopsicleBoom"] = 30201] = "PopsicleBoom";
      KindID[KindID["PopsicleLine"] = 30301] = "PopsicleLine";
      KindID[KindID["FloorGrass"] = 40101] = "FloorGrass";
      KindID[KindID["FloorIceHp1"] = 40201] = "FloorIceHp1";
      KindID[KindID["FloorIceHp2"] = 40202] = "FloorIceHp2";
      KindID[KindID["FloorIceHp3"] = 40203] = "FloorIceHp3";
      KindID[KindID["FloorIceHp4"] = 40204] = "FloorIceHp4";
      KindID[KindID["FloorChangerRed"] = 40301] = "FloorChangerRed";
      KindID[KindID["FloorChangerGreen"] = 40302] = "FloorChangerGreen";
      KindID[KindID["FloorChangerBlue"] = 40303] = "FloorChangerBlue";
      KindID[KindID["FloorChangerYellow"] = 40304] = "FloorChangerYellow";
      KindID[KindID["FloorChangerOrange"] = 40305] = "FloorChangerOrange";
      KindID[KindID["FloorChangerPurple"] = 40306] = "FloorChangerPurple";
      KindID[KindID["FloorDouble"] = 40401] = "FloorDouble";
      KindID[KindID["FloorRoadLineVU"] = 40501] = "FloorRoadLineVU";
      KindID[KindID["FloorRoadLineHR"] = 40502] = "FloorRoadLineHR";
      KindID[KindID["FloorRoadLineVD"] = 40503] = "FloorRoadLineVD";
      KindID[KindID["FloorRoadLineHL"] = 40504] = "FloorRoadLineHL";
      KindID[KindID["FloorRoadTurnLdD"] = 40505] = "FloorRoadTurnLdD";
      KindID[KindID["FloorRoadTurnLuL"] = 40506] = "FloorRoadTurnLuL";
      KindID[KindID["FloorRoadTurnRuU"] = 40507] = "FloorRoadTurnRuU";
      KindID[KindID["FloorRoadTurnRdR"] = 40508] = "FloorRoadTurnRdR";
      KindID[KindID["FloorRoadTurnRdD"] = 40509] = "FloorRoadTurnRdD";
      KindID[KindID["FloorRoadTurnRuR"] = 40510] = "FloorRoadTurnRuR";
      KindID[KindID["FloorRoadTurnLuU"] = 40511] = "FloorRoadTurnLuU";
      KindID[KindID["FloorRoadTurnLdL"] = 40512] = "FloorRoadTurnLdL";
      KindID[KindID["PolishJam"] = 50101] = "PolishJam";
      KindID[KindID["ItemNormalRed"] = 60101] = "ItemNormalRed";
      KindID[KindID["ItemNormalGreen"] = 60102] = "ItemNormalGreen";
      KindID[KindID["ItemNormalBlue"] = 60103] = "ItemNormalBlue";
      KindID[KindID["ItemNormalYellow"] = 60104] = "ItemNormalYellow";
      KindID[KindID["ItemNormalOrange"] = 60105] = "ItemNormalOrange";
      KindID[KindID["ItemNormalPurple"] = 60106] = "ItemNormalPurple";
      KindID[KindID["ItemBombButterflyRed"] = 60201] = "ItemBombButterflyRed";
      KindID[KindID["ItemBombButterflyGreen"] = 60202] = "ItemBombButterflyGreen";
      KindID[KindID["ItemBombButterflyBlue"] = 60203] = "ItemBombButterflyBlue";
      KindID[KindID["ItemBombButterflyYellow"] = 60204] = "ItemBombButterflyYellow";
      KindID[KindID["ItemBombButterflyOrange"] = 60205] = "ItemBombButterflyOrange";
      KindID[KindID["ItemBombButterflyPurple"] = 60206] = "ItemBombButterflyPurple";
      KindID[KindID["ItemBombRowRed"] = 60301] = "ItemBombRowRed";
      KindID[KindID["ItemBombRowGreen"] = 60302] = "ItemBombRowGreen";
      KindID[KindID["ItemBombRowBlue"] = 60303] = "ItemBombRowBlue";
      KindID[KindID["ItemBombRowYellow"] = 60304] = "ItemBombRowYellow";
      KindID[KindID["ItemBombRowOrange"] = 60305] = "ItemBombRowOrange";
      KindID[KindID["ItemBombRowPurple"] = 60306] = "ItemBombRowPurple";
      KindID[KindID["ItemBombColumnRed"] = 60401] = "ItemBombColumnRed";
      KindID[KindID["ItemBombColumnGreen"] = 60402] = "ItemBombColumnGreen";
      KindID[KindID["ItemBombColumnBlue"] = 60403] = "ItemBombColumnBlue";
      KindID[KindID["ItemBombColumnYellow"] = 60404] = "ItemBombColumnYellow";
      KindID[KindID["ItemBombColumnOrange"] = 60405] = "ItemBombColumnOrange";
      KindID[KindID["ItemBombColumnPurple"] = 60406] = "ItemBombColumnPurple";
      KindID[KindID["ItemBombCrossRed"] = 60501] = "ItemBombCrossRed";
      KindID[KindID["ItemBombCrossGreen"] = 60502] = "ItemBombCrossGreen";
      KindID[KindID["ItemBombCrossBlue"] = 60503] = "ItemBombCrossBlue";
      KindID[KindID["ItemBombCrossYellow"] = 60504] = "ItemBombCrossYellow";
      KindID[KindID["ItemBombCrossOrange"] = 60505] = "ItemBombCrossOrange";
      KindID[KindID["ItemBombCrossPurple"] = 60506] = "ItemBombCrossPurple";
      KindID[KindID["ItemBombRangeRed"] = 60601] = "ItemBombRangeRed";
      KindID[KindID["ItemBombRangeGreen"] = 60602] = "ItemBombRangeGreen";
      KindID[KindID["ItemBombRangeBlue"] = 60603] = "ItemBombRangeBlue";
      KindID[KindID["ItemBombRangeYellow"] = 60604] = "ItemBombRangeYellow";
      KindID[KindID["ItemBombRangeOrange"] = 60605] = "ItemBombRangeOrange";
      KindID[KindID["ItemBombRangePurple"] = 60606] = "ItemBombRangePurple";
      KindID[KindID["ItemBombRainbow"] = 60701] = "ItemBombRainbow";
      KindID[KindID["ItemBlock_Begin"] = 60801] = "ItemBlock_Begin";
      KindID[KindID["ItemBlock_HP1"] = 60801] = "ItemBlock_HP1";
      KindID[KindID["ItemBlock_HP2"] = 60802] = "ItemBlock_HP2";
      KindID[KindID["ItemBlock_HP3"] = 60803] = "ItemBlock_HP3";
      KindID[KindID["ItemBlock_HP4"] = 60804] = "ItemBlock_HP4";
      KindID[KindID["ItemBlock_HP5"] = 60805] = "ItemBlock_HP5";
      KindID[KindID["ItemBlock_HP6"] = 60806] = "ItemBlock_HP6";
      KindID[KindID["ItemDoughnut_Begin"] = 60901] = "ItemDoughnut_Begin";
      KindID[KindID["ItemDoughnut_HP1"] = 60901] = "ItemDoughnut_HP1";
      KindID[KindID["ItemDoughnut_HP2"] = 60902] = "ItemDoughnut_HP2";
      KindID[KindID["ItemDoughnut_HP3"] = 60903] = "ItemDoughnut_HP3";
      KindID[KindID["ItemMagicCrystal"] = 61001] = "ItemMagicCrystal";
      KindID[KindID["ItemWatermelon"] = 61101] = "ItemWatermelon";
      KindID[KindID["ItemFruitCake"] = 61201] = "ItemFruitCake";
      KindID[KindID["ItemFireWormBottle"] = 61301] = "ItemFireWormBottle";
      KindID[KindID["ItemMowerUp"] = 61401] = "ItemMowerUp";
      KindID[KindID["ItemMowerRight"] = 61402] = "ItemMowerRight";
      KindID[KindID["ItemMowerDown"] = 61403] = "ItemMowerDown";
      KindID[KindID["ItemMowerLeft"] = 61404] = "ItemMowerLeft";
      KindID[KindID["ItemBone"] = 61501] = "ItemBone";
      KindID[KindID["ItemChestnut"] = 61601] = "ItemChestnut";
      KindID[KindID["ItemFireworksHp1"] = 61701] = "ItemFireworksHp1";
      KindID[KindID["ItemFireworksHp2"] = 61702] = "ItemFireworksHp2";
      KindID[KindID["ItemFireworksHp3"] = 61703] = "ItemFireworksHp3";
      KindID[KindID["ItemFireworksHp4"] = 61704] = "ItemFireworksHp4";
      KindID[KindID["ItemPuppy"] = 62001] = "ItemPuppy";
      KindID[KindID["ItemDogPaw_Red"] = 62101] = "ItemDogPaw_Red";
      KindID[KindID["ItemDogPaw_Green"] = 62102] = "ItemDogPaw_Green";
      KindID[KindID["ItemDogPaw_Blue"] = 62103] = "ItemDogPaw_Blue";
      KindID[KindID["ItemDogPaw_Yellow"] = 62104] = "ItemDogPaw_Yellow";
      KindID[KindID["ItemDogPaw_Orange"] = 62105] = "ItemDogPaw_Orange";
      KindID[KindID["ItemDogPaw_Purple"] = 62106] = "ItemDogPaw_Purple";
      KindID[KindID["ItemBalloon"] = 62201] = "ItemBalloon";
      KindID[KindID["ItemDogHouse"] = 62301] = "ItemDogHouse";
      KindID[KindID["ItemJamBottle"] = 62401] = "ItemJamBottle";
      KindID[KindID["ItemNormalRandom"] = 62501] = "ItemNormalRandom";
      KindID[KindID["ItemHoneyComb"] = 62601] = "ItemHoneyComb";
      KindID[KindID["ItemBombButterflyRandom"] = 62701] = "ItemBombButterflyRandom";
      KindID[KindID["ItemBombRowRandom"] = 62702] = "ItemBombRowRandom";
      KindID[KindID["ItemBombColumnRandom"] = 62703] = "ItemBombColumnRandom";
      KindID[KindID["ItemBombCrossRandom"] = 62704] = "ItemBombCrossRandom";
      KindID[KindID["ItemBombRangeRandom"] = 62705] = "ItemBombRangeRandom";
      KindID[KindID["ItemPawRandom"] = 62708] = "ItemPawRandom";
      KindID[KindID["ItemStatueHp1"] = 62801] = "ItemStatueHp1";
      KindID[KindID["ItemStatueHp2"] = 62802] = "ItemStatueHp2";
      KindID[KindID["ItemStatueHp3"] = 62803] = "ItemStatueHp3";
      KindID[KindID["ParasiteIceCubeHp1"] = 70101] = "ParasiteIceCubeHp1";
      KindID[KindID["ParasiteIceCubeHp2"] = 70102] = "ParasiteIceCubeHp2";
      KindID[KindID["ParasiteIceCubeHp3"] = 70103] = "ParasiteIceCubeHp3";
      KindID[KindID["ParasiteIceCubeHp4"] = 70104] = "ParasiteIceCubeHp4";
      KindID[KindID["ParasiteIceCubeHp5"] = 70105] = "ParasiteIceCubeHp5";
      KindID[KindID["ParasiteIceCubeHp6"] = 70106] = "ParasiteIceCubeHp6";
      KindID[KindID["ParasiteShackleHp1"] = 70201] = "ParasiteShackleHp1";
      KindID[KindID["ParasiteShackleHp2"] = 70202] = "ParasiteShackleHp2";
      KindID[KindID["ParasiteShackleHp3"] = 70203] = "ParasiteShackleHp3";
      KindID[KindID["ParasiteHoneyHp1"] = 70301] = "ParasiteHoneyHp1";
      KindID[KindID["ParasiteHoneyHp2"] = 70302] = "ParasiteHoneyHp2";
      KindID[KindID["ParasiteGiftBoxRed"] = 70401] = "ParasiteGiftBoxRed";
      KindID[KindID["ParasiteGiftBoxGreen"] = 70402] = "ParasiteGiftBoxGreen";
      KindID[KindID["ParasiteGiftBoxBlue"] = 70403] = "ParasiteGiftBoxBlue";
      KindID[KindID["ParasiteGiftBoxYellow"] = 70404] = "ParasiteGiftBoxYellow";
      KindID[KindID["ParasiteGiftBoxOrange"] = 70405] = "ParasiteGiftBoxOrange";
      KindID[KindID["ParasiteGiftBoxPurple"] = 70406] = "ParasiteGiftBoxPurple";
      KindID[KindID["MarkBoneCollector"] = 80101] = "MarkBoneCollector";
      KindID[KindID["MarkWormholeEntrance"] = 80201] = "MarkWormholeEntrance";
      KindID[KindID["MarkWormholeExit"] = 80301] = "MarkWormholeExit";
      KindID[KindID["FenceVineVertical"] = 80401] = "FenceVineVertical";
      KindID[KindID["FenceVineHorizontal"] = 80501] = "FenceVineHorizontal";
      KindID[KindID["MarkDropMachine"] = 80801] = "MarkDropMachine";
    })(KindID = exports.KindID || (exports.KindID = {}));
    var KindIDManager = function() {
      function KindIDManager() {
        this.KindID_To_EntityID_Map = {};
        this.initKindID_To_EntityID_Map();
      }
      KindIDManager.getInstance = function() {
        null == this.instance && (this.instance = new KindIDManager());
        return this.instance;
      };
      KindIDManager.prototype.initKindID_To_EntityID_Map = function() {
        this.KindID_To_EntityID_Map[KindID.CellNormal] = EntityID_1.EntityID.CellNormal;
        this.KindID_To_EntityID_Map[KindID.CellConveyerL2R] = EntityID_1.EntityID.CellConveyerL2R;
        this.KindID_To_EntityID_Map[KindID.CellConveyerL2U] = EntityID_1.EntityID.CellConveyerL2U;
        this.KindID_To_EntityID_Map[KindID.CellConveyerL2D] = EntityID_1.EntityID.CellConveyerL2D;
        this.KindID_To_EntityID_Map[KindID.CellConveyerR2L] = EntityID_1.EntityID.CellConveyerR2L;
        this.KindID_To_EntityID_Map[KindID.CellConveyerR2U] = EntityID_1.EntityID.CellConveyerR2U;
        this.KindID_To_EntityID_Map[KindID.CellConveyerR2D] = EntityID_1.EntityID.CellConveyerR2D;
        this.KindID_To_EntityID_Map[KindID.CellConveyerU2L] = EntityID_1.EntityID.CellConveyerU2L;
        this.KindID_To_EntityID_Map[KindID.CellConveyerU2R] = EntityID_1.EntityID.CellConveyerU2R;
        this.KindID_To_EntityID_Map[KindID.CellConveyerU2D] = EntityID_1.EntityID.CellConveyerU2D;
        this.KindID_To_EntityID_Map[KindID.CellConveyerD2L] = EntityID_1.EntityID.CellConveyerD2L;
        this.KindID_To_EntityID_Map[KindID.CellConveyerD2R] = EntityID_1.EntityID.CellConveyerD2R;
        this.KindID_To_EntityID_Map[KindID.CellConveyerD2U] = EntityID_1.EntityID.CellConveyerD2U;
        this.KindID_To_EntityID_Map[KindID.CellMovablePlate] = EntityID_1.EntityID.CellMovablePlate;
        this.KindID_To_EntityID_Map[KindID.PopsicleNormal] = EntityID_1.EntityID.PopsicleNormal;
        this.KindID_To_EntityID_Map[KindID.PopsicleLine] = EntityID_1.EntityID.PopsicleLine;
        this.KindID_To_EntityID_Map[KindID.PopsicleBoom] = EntityID_1.EntityID.PopsicleBoom;
        this.KindID_To_EntityID_Map[KindID.FloorGrass] = EntityID_1.EntityID.FloorGrass;
        this.KindID_To_EntityID_Map[KindID.FloorDouble] = EntityID_1.EntityID.FloorDouble;
        this.KindID_To_EntityID_Map[KindID.FloorIceHp1] = EntityID_1.EntityID.FloorIceHp1;
        this.KindID_To_EntityID_Map[KindID.FloorIceHp2] = EntityID_1.EntityID.FloorIceHp2;
        this.KindID_To_EntityID_Map[KindID.FloorIceHp3] = EntityID_1.EntityID.FloorIceHp3;
        this.KindID_To_EntityID_Map[KindID.FloorIceHp4] = EntityID_1.EntityID.FloorIceHp4;
        this.KindID_To_EntityID_Map[KindID.FloorChangerRed] = EntityID_1.EntityID.FloorChangerRed;
        this.KindID_To_EntityID_Map[KindID.FloorChangerGreen] = EntityID_1.EntityID.FloorChangerGreen;
        this.KindID_To_EntityID_Map[KindID.FloorChangerBlue] = EntityID_1.EntityID.FloorChangerBlue;
        this.KindID_To_EntityID_Map[KindID.FloorChangerYellow] = EntityID_1.EntityID.FloorChangerYellow;
        this.KindID_To_EntityID_Map[KindID.FloorChangerOrange] = EntityID_1.EntityID.FloorChangerOrange;
        this.KindID_To_EntityID_Map[KindID.FloorChangerPurple] = EntityID_1.EntityID.FloorChangerPurple;
        this.KindID_To_EntityID_Map[KindID.FloorRoadLineVU] = EntityID_1.EntityID.FloorRoadLineVU;
        this.KindID_To_EntityID_Map[KindID.FloorRoadLineHR] = EntityID_1.EntityID.FloorRoadLineHR;
        this.KindID_To_EntityID_Map[KindID.FloorRoadLineVD] = EntityID_1.EntityID.FloorRoadLineVD;
        this.KindID_To_EntityID_Map[KindID.FloorRoadLineHL] = EntityID_1.EntityID.FloorRoadLineHL;
        this.KindID_To_EntityID_Map[KindID.FloorRoadTurnLdD] = EntityID_1.EntityID.FloorRoadTurnLdD;
        this.KindID_To_EntityID_Map[KindID.FloorRoadTurnLuL] = EntityID_1.EntityID.FloorRoadTurnLuL;
        this.KindID_To_EntityID_Map[KindID.FloorRoadTurnRuU] = EntityID_1.EntityID.FloorRoadTurnRuU;
        this.KindID_To_EntityID_Map[KindID.FloorRoadTurnRdR] = EntityID_1.EntityID.FloorRoadTurnRdR;
        this.KindID_To_EntityID_Map[KindID.FloorRoadTurnRdD] = EntityID_1.EntityID.FloorRoadTurnRdD;
        this.KindID_To_EntityID_Map[KindID.FloorRoadTurnRuR] = EntityID_1.EntityID.FloorRoadTurnRuR;
        this.KindID_To_EntityID_Map[KindID.FloorRoadTurnLuU] = EntityID_1.EntityID.FloorRoadTurnLuU;
        this.KindID_To_EntityID_Map[KindID.FloorRoadTurnLdL] = EntityID_1.EntityID.FloorRoadTurnLdL;
        this.KindID_To_EntityID_Map[KindID.PolishJam] = EntityID_1.EntityID.RugJam;
        this.KindID_To_EntityID_Map[KindID.ItemNormalRed] = EntityID_1.EntityID.ItemNormalRed;
        this.KindID_To_EntityID_Map[KindID.ItemNormalGreen] = EntityID_1.EntityID.ItemNormalGreen;
        this.KindID_To_EntityID_Map[KindID.ItemNormalBlue] = EntityID_1.EntityID.ItemNormalBlue;
        this.KindID_To_EntityID_Map[KindID.ItemNormalYellow] = EntityID_1.EntityID.ItemNormalYellow;
        this.KindID_To_EntityID_Map[KindID.ItemNormalOrange] = EntityID_1.EntityID.ItemNormalOrange;
        this.KindID_To_EntityID_Map[KindID.ItemNormalPurple] = EntityID_1.EntityID.ItemNormalPurple;
        this.KindID_To_EntityID_Map[KindID.ItemBombButterflyRed] = EntityID_1.EntityID.ItemBombButterflyRed;
        this.KindID_To_EntityID_Map[KindID.ItemBombButterflyGreen] = EntityID_1.EntityID.ItemBombButterflyGreen;
        this.KindID_To_EntityID_Map[KindID.ItemBombButterflyBlue] = EntityID_1.EntityID.ItemBombButterflyBlue;
        this.KindID_To_EntityID_Map[KindID.ItemBombButterflyYellow] = EntityID_1.EntityID.ItemBombButterflyYellow;
        this.KindID_To_EntityID_Map[KindID.ItemBombButterflyOrange] = EntityID_1.EntityID.ItemBombButterflyOrange;
        this.KindID_To_EntityID_Map[KindID.ItemBombButterflyPurple] = EntityID_1.EntityID.ItemBombButterflyPurple;
        this.KindID_To_EntityID_Map[KindID.ItemBombRowRed] = EntityID_1.EntityID.ItemBombRowRed;
        this.KindID_To_EntityID_Map[KindID.ItemBombRowGreen] = EntityID_1.EntityID.ItemBombRowGreen;
        this.KindID_To_EntityID_Map[KindID.ItemBombRowBlue] = EntityID_1.EntityID.ItemBombRowBlue;
        this.KindID_To_EntityID_Map[KindID.ItemBombRowYellow] = EntityID_1.EntityID.ItemBombRowYellow;
        this.KindID_To_EntityID_Map[KindID.ItemBombRowOrange] = EntityID_1.EntityID.ItemBombRowOrange;
        this.KindID_To_EntityID_Map[KindID.ItemBombRowPurple] = EntityID_1.EntityID.ItemBombRowPurple;
        this.KindID_To_EntityID_Map[KindID.ItemBombColumnRed] = EntityID_1.EntityID.ItemBombColumnRed;
        this.KindID_To_EntityID_Map[KindID.ItemBombColumnGreen] = EntityID_1.EntityID.ItemBombColumnGreen;
        this.KindID_To_EntityID_Map[KindID.ItemBombColumnBlue] = EntityID_1.EntityID.ItemBombColumnBlue;
        this.KindID_To_EntityID_Map[KindID.ItemBombColumnYellow] = EntityID_1.EntityID.ItemBombColumnYellow;
        this.KindID_To_EntityID_Map[KindID.ItemBombColumnOrange] = EntityID_1.EntityID.ItemBombColumnOrange;
        this.KindID_To_EntityID_Map[KindID.ItemBombColumnPurple] = EntityID_1.EntityID.ItemBombColumnPurple;
        this.KindID_To_EntityID_Map[KindID.ItemBombCrossRed] = EntityID_1.EntityID.ItemBombCrossRed;
        this.KindID_To_EntityID_Map[KindID.ItemBombCrossGreen] = EntityID_1.EntityID.ItemBombCrossGreen;
        this.KindID_To_EntityID_Map[KindID.ItemBombCrossBlue] = EntityID_1.EntityID.ItemBombCrossBlue;
        this.KindID_To_EntityID_Map[KindID.ItemBombCrossYellow] = EntityID_1.EntityID.ItemBombCrossYellow;
        this.KindID_To_EntityID_Map[KindID.ItemBombCrossOrange] = EntityID_1.EntityID.ItemBombCrossOrange;
        this.KindID_To_EntityID_Map[KindID.ItemBombCrossPurple] = EntityID_1.EntityID.ItemBombCrossPurple;
        this.KindID_To_EntityID_Map[KindID.ItemBombRangeRed] = EntityID_1.EntityID.ItemBombRangeRed;
        this.KindID_To_EntityID_Map[KindID.ItemBombRangeGreen] = EntityID_1.EntityID.ItemBombRangeGreen;
        this.KindID_To_EntityID_Map[KindID.ItemBombRangeBlue] = EntityID_1.EntityID.ItemBombRangeBlue;
        this.KindID_To_EntityID_Map[KindID.ItemBombRangeYellow] = EntityID_1.EntityID.ItemBombRangeYellow;
        this.KindID_To_EntityID_Map[KindID.ItemBombRangeOrange] = EntityID_1.EntityID.ItemBombRangeOrange;
        this.KindID_To_EntityID_Map[KindID.ItemBombRangePurple] = EntityID_1.EntityID.ItemBombRangePurple;
        this.KindID_To_EntityID_Map[KindID.ItemBombRainbow] = EntityID_1.EntityID.ItemBombRainbow;
        this.KindID_To_EntityID_Map[KindID.ItemBlock_HP1] = EntityID_1.EntityID.ItemBlockHp1;
        this.KindID_To_EntityID_Map[KindID.ItemBlock_HP2] = EntityID_1.EntityID.ItemBlockHp2;
        this.KindID_To_EntityID_Map[KindID.ItemBlock_HP3] = EntityID_1.EntityID.ItemBlockHp3;
        this.KindID_To_EntityID_Map[KindID.ItemBlock_HP4] = EntityID_1.EntityID.ItemBlockHp4;
        this.KindID_To_EntityID_Map[KindID.ItemBlock_HP5] = EntityID_1.EntityID.ItemBlockHp5;
        this.KindID_To_EntityID_Map[KindID.ItemBlock_HP6] = EntityID_1.EntityID.ItemBlockHp6;
        this.KindID_To_EntityID_Map[KindID.ItemDoughnut_HP1] = EntityID_1.EntityID.ItemDoughnutHp1;
        this.KindID_To_EntityID_Map[KindID.ItemDoughnut_HP2] = EntityID_1.EntityID.ItemDoughnutHp2;
        this.KindID_To_EntityID_Map[KindID.ItemDoughnut_HP3] = EntityID_1.EntityID.ItemDoughnutHp3;
        this.KindID_To_EntityID_Map[KindID.ItemMagicCrystal] = EntityID_1.EntityID.ItemMagicCrystal;
        this.KindID_To_EntityID_Map[KindID.ItemWatermelon] = EntityID_1.EntityID.ItemWatermelon;
        this.KindID_To_EntityID_Map[KindID.ItemFruitCake] = EntityID_1.EntityID.ItemFruitCake;
        this.KindID_To_EntityID_Map[KindID.ItemMowerUp] = EntityID_1.EntityID.ItemMowerUp;
        this.KindID_To_EntityID_Map[KindID.ItemMowerRight] = EntityID_1.EntityID.ItemMowerRight;
        this.KindID_To_EntityID_Map[KindID.ItemMowerDown] = EntityID_1.EntityID.ItemMowerDown;
        this.KindID_To_EntityID_Map[KindID.ItemMowerLeft] = EntityID_1.EntityID.ItemMowerLeft;
        this.KindID_To_EntityID_Map[KindID.ItemBone] = EntityID_1.EntityID.ItemBone;
        this.KindID_To_EntityID_Map[KindID.ItemChestnut] = EntityID_1.EntityID.ItemChestnut;
        this.KindID_To_EntityID_Map[KindID.ItemFireWormBottle] = EntityID_1.EntityID.ItemFireWormBottle;
        this.KindID_To_EntityID_Map[KindID.ItemPuppy] = EntityID_1.EntityID.ItemPuppy;
        this.KindID_To_EntityID_Map[KindID.ItemDogPaw_Red] = EntityID_1.EntityID.ItemPawRed;
        this.KindID_To_EntityID_Map[KindID.ItemDogPaw_Green] = EntityID_1.EntityID.ItemPawGreen;
        this.KindID_To_EntityID_Map[KindID.ItemDogPaw_Blue] = EntityID_1.EntityID.ItemPawBlue;
        this.KindID_To_EntityID_Map[KindID.ItemDogPaw_Yellow] = EntityID_1.EntityID.ItemPawYellow;
        this.KindID_To_EntityID_Map[KindID.ItemDogPaw_Orange] = EntityID_1.EntityID.ItemPawOrange;
        this.KindID_To_EntityID_Map[KindID.ItemDogPaw_Purple] = EntityID_1.EntityID.ItemPawPurple;
        this.KindID_To_EntityID_Map[KindID.ItemBalloon] = EntityID_1.EntityID.ItemBalloon;
        this.KindID_To_EntityID_Map[KindID.ItemDogHouse] = EntityID_1.EntityID.ItemDogHouse;
        this.KindID_To_EntityID_Map[KindID.ItemJamBottle] = EntityID_1.EntityID.ItemJamBottle;
        this.KindID_To_EntityID_Map[KindID.ItemHoneyComb] = EntityID_1.EntityID.ItemHoneyComb;
        this.KindID_To_EntityID_Map[KindID.ItemStatueHp1] = EntityID_1.EntityID.ItemStatueHp1;
        this.KindID_To_EntityID_Map[KindID.ItemStatueHp2] = EntityID_1.EntityID.ItemStatueHp2;
        this.KindID_To_EntityID_Map[KindID.ItemStatueHp3] = EntityID_1.EntityID.ItemStatueHp3;
        this.KindID_To_EntityID_Map[KindID.ParasiteIceCubeHp1] = EntityID_1.EntityID.ParasiteIceCubeHp1;
        this.KindID_To_EntityID_Map[KindID.ParasiteIceCubeHp2] = EntityID_1.EntityID.ParasiteIceCubeHp2;
        this.KindID_To_EntityID_Map[KindID.ParasiteIceCubeHp3] = EntityID_1.EntityID.ParasiteIceCubeHp3;
        this.KindID_To_EntityID_Map[KindID.ParasiteIceCubeHp4] = EntityID_1.EntityID.ParasiteIceCubeHp4;
        this.KindID_To_EntityID_Map[KindID.ParasiteIceCubeHp5] = EntityID_1.EntityID.ParasiteIceCubeHp5;
        this.KindID_To_EntityID_Map[KindID.ParasiteIceCubeHp6] = EntityID_1.EntityID.ParasiteIceCubeHp6;
        this.KindID_To_EntityID_Map[KindID.ParasiteShackleHp1] = EntityID_1.EntityID.ParasiteShackleHp1;
        this.KindID_To_EntityID_Map[KindID.ParasiteShackleHp2] = EntityID_1.EntityID.ParasiteShackleHp2;
        this.KindID_To_EntityID_Map[KindID.ParasiteShackleHp3] = EntityID_1.EntityID.ParasiteShackleHp3;
        this.KindID_To_EntityID_Map[KindID.ParasiteHoneyHp1] = EntityID_1.EntityID.ParasiteHoneyHp1;
        this.KindID_To_EntityID_Map[KindID.ParasiteHoneyHp2] = EntityID_1.EntityID.ParasiteHoneyHp2;
        this.KindID_To_EntityID_Map[KindID.ParasiteGiftBoxRed] = EntityID_1.EntityID.ParasiteGiftBoxRed;
        this.KindID_To_EntityID_Map[KindID.ParasiteGiftBoxGreen] = EntityID_1.EntityID.ParasiteGiftBoxGreen;
        this.KindID_To_EntityID_Map[KindID.ParasiteGiftBoxBlue] = EntityID_1.EntityID.ParasiteGiftBoxBlue;
        this.KindID_To_EntityID_Map[KindID.ParasiteGiftBoxYellow] = EntityID_1.EntityID.ParasiteGiftBoxYellow;
        this.KindID_To_EntityID_Map[KindID.ParasiteGiftBoxOrange] = EntityID_1.EntityID.ParasiteGiftBoxOrange;
        this.KindID_To_EntityID_Map[KindID.ParasiteGiftBoxPurple] = EntityID_1.EntityID.ParasiteGiftBoxPurple;
        this.KindID_To_EntityID_Map[KindID.MarkBoneCollector] = EntityID_1.EntityID.MarkBoneCollector;
        this.KindID_To_EntityID_Map[KindID.MarkWormholeEntrance] = EntityID_1.EntityID.MarkWormholeEntrance;
        this.KindID_To_EntityID_Map[KindID.MarkWormholeExit] = EntityID_1.EntityID.MarkWormholeExit;
        this.KindID_To_EntityID_Map[KindID.FenceVineHorizontal] = EntityID_1.EntityID.FenceVineHorizontal;
        this.KindID_To_EntityID_Map[KindID.FenceVineVertical] = EntityID_1.EntityID.FenceVineVertical;
        this.KindID_To_EntityID_Map[KindID.MarkDropMachine] = EntityID_1.EntityID.MarkDropMachine;
        this.KindID_To_EntityID_Map[KindID.ItemFireworksHp1] = EntityID_1.EntityID.ItemFireworksHp1;
        this.KindID_To_EntityID_Map[KindID.ItemFireworksHp2] = EntityID_1.EntityID.ItemFireworksHp2;
        this.KindID_To_EntityID_Map[KindID.ItemFireworksHp3] = EntityID_1.EntityID.ItemFireworksHp3;
        this.KindID_To_EntityID_Map[KindID.ItemFireworksHp4] = EntityID_1.EntityID.ItemFireworksHp4;
      };
      KindIDManager.prototype.getEntityIDFromKindID = function(kindID) {
        var result = this.KindID_To_EntityID_Map[kindID];
        if (result) return result;
        return EntityID_1.EntityID.None;
      };
      KindIDManager.prototype.needLayoutGrassFromKindID = function(kindID) {
        var needLayoutGrass = false;
        var entityID = this.getEntityIDFromKindID(kindID);
        switch (entityID) {
         case EntityID_1.EntityID.CellNormal:
         case EntityID_1.EntityID.CellMovablePlate:
          needLayoutGrass = true;
        }
        return needLayoutGrass;
      };
      KindIDManager.instance = null;
      return KindIDManager;
    }();
    exports.KindIDManager = KindIDManager;
    cc._RF.pop();
  }, {
    "./EntityID": "EntityID"
  } ],
  LevelSelectorPanel: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "cf97d7U8zlDPpzt0EdL+QHB", "LevelSelectorPanel");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var GameSceneBase_1 = require("../GameSceneBase");
    var GameMath_1 = require("../../../extend/utils/GameMath");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var LevelSelectorPanel = function(_super) {
      __extends(LevelSelectorPanel, _super);
      function LevelSelectorPanel() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.mask = null;
        _this.frame = null;
        _this.drawer = null;
        _this.previous = null;
        _this.next = null;
        _this.editBox = null;
        _this.updateCfgBtn = null;
        _this.speedUpButton = null;
        _this.speedEditBox = null;
        _this.speedDownButton = null;
        _this._gameScene = null;
        _this._levelConfig = null;
        _this._speed = 1;
        return _this;
      }
      LevelSelectorPanel_1 = LevelSelectorPanel;
      LevelSelectorPanel.create = function() {
        var res = cc.loader.getRes("match_scene/prefab/userInterface/LevelSelectorPanel", cc.Prefab);
        if (res) {
          var node = cc.instantiate(res);
          if (node) {
            var component = node.getComponent(LevelSelectorPanel_1);
            component && component.init();
            return component;
          }
        }
      };
      LevelSelectorPanel.prototype.init = function() {
        this.drawer.on("touchend", this.onPull, this);
        this.previous.on("touchend", this.onPrevious, this);
        this.next.on("touchend", this.onNext, this);
        this.updateCfgBtn.on("touchend", this.onUpdateCfgBtnClick, this);
        this.mask.active = false;
        this.editBox.inputMode = cc.EditBox.InputMode.NUMERIC;
        this.editBox.maxLength = 20;
        this.editBox.placeholder = "1";
        this.editBox.node.on("editing-did-began", this.levelTextDidBegan, this);
        this.editBox.node.on("editing-did-ended", this.levelTextDidEnded, this);
        this.editBox.node.on("text-changed", this.levelTextChanged, this);
        this.speedUpButton.on("touchend", this.onSpeedUp, this);
        this.speedDownButton.on("touchend", this.onSpeedDown, this);
        this.speedEditBox.node.on("editing-did-began", this.speedTextDidBegan, this);
        this.speedEditBox.node.on("editing-did-ended", this.speedTextDidEnded, this);
        this.speedEditBox.node.on("text-changed", this.speedTextChanged, this);
        var canvas = cc.find("Canvas");
        canvas && (this._gameScene = canvas.getComponent(GameSceneBase_1.default));
      };
      LevelSelectorPanel.prototype.onLoad = function() {};
      LevelSelectorPanel.prototype.start = function() {};
      LevelSelectorPanel.prototype.onDestroy = function() {
        this.mask = null;
        this.frame = null;
        this.drawer = null;
        this.previous = null;
        this.next = null;
        this.editBox = null;
        this._gameScene = null;
        this._levelConfig = null;
        cc.director.getScheduler().setTimeScale(1);
      };
      LevelSelectorPanel.prototype.onPull = function(evt) {
        var winSize = this.node.getContentSize();
        var frameSize = this.frame.getContentSize();
        var targetPos = cc.v2(-frameSize.width - .5 * (winSize.width - this.frame.width), this.frame.position.y);
        this.frame.stopAllActions();
        var duration = Math.abs(this.frame.position.x - targetPos.x) / 1e3 * cc.director.getScheduler().getTimeScale();
        var pullAction = cc.moveTo(duration, targetPos).easing(cc.easeBackInOut());
        this.frame.runAction(pullAction);
        this.node.on("touchend", this.onPush, this);
        this.drawer.setPosition(-1e3, this.drawer.position.y);
        this.mask.active = true;
      };
      LevelSelectorPanel.prototype.onPush = function(evt) {
        var targetPos = cc.v2(0, this.frame.position.y);
        this.frame.stopAllActions();
        var duration = Math.abs(this.frame.position.x - targetPos.x) / 1e3 * cc.director.getScheduler().getTimeScale();
        var pushAction = cc.moveTo(duration, targetPos).easing(cc.easeBackInOut());
        this.frame.runAction(pushAction);
        this.node.off("touchend", this.onPush, this);
        this.drawer.setPosition(-20, this.drawer.position.y);
        this.mask.active = false;
      };
      LevelSelectorPanel.prototype.onPrevious = function(evt) {
        this._gameScene.cheatGameWithLevel(this._gameScene.getLevel() - 1);
        this.onPush(null);
      };
      LevelSelectorPanel.prototype.onNext = function(evt) {
        var level = Number(this.editBox.string);
        level ? this._gameScene.cheatGameWithLevel(level) : this._gameScene.cheatGameWithLevel(this._gameScene.getLevel() + 1);
        this.onPush(null);
      };
      LevelSelectorPanel.prototype.onUpdateCfgBtnClick = function(evt) {
        cc.log("onUpdateCfgBtnClick");
      };
      LevelSelectorPanel.prototype.restartGame = function() {
        this._gameScene.cheatGameWithLevel(this._gameScene.getLevel());
        this.onPush(null);
      };
      LevelSelectorPanel.prototype.levelTextDidBegan = function(event) {
        cc.log("levelTextDidBegan:" + this.editBox.string);
      };
      LevelSelectorPanel.prototype.levelTextChanged = function(event) {
        cc.log("levelTextChanged:" + this.editBox.string);
      };
      LevelSelectorPanel.prototype.levelTextDidEnded = function(event) {
        cc.log("levelTextDidEnded:" + this.editBox.string);
      };
      LevelSelectorPanel.prototype.setSpeed = function(speed) {
        var newSpeed = GameMath_1.default.clamp(speed, .0625, 16);
        this._speed = newSpeed;
        this.speedEditBox.string = newSpeed.toString();
        cc.director.getScheduler().setTimeScale(this._speed);
      };
      LevelSelectorPanel.prototype.onSpeedUp = function(evt) {
        this.setSpeed(2 * this._speed);
      };
      LevelSelectorPanel.prototype.onSpeedDown = function(evt) {
        this.setSpeed(.5 * this._speed);
      };
      LevelSelectorPanel.prototype.speedTextDidBegan = function(event) {
        cc.log("speedTextDidBegan:" + this.speedEditBox.string);
      };
      LevelSelectorPanel.prototype.speedTextChanged = function(event) {
        cc.log("speedTextChanged:" + this.speedEditBox.string);
        var number = Number(this.speedEditBox.string);
        number && this.setSpeed(number);
      };
      LevelSelectorPanel.prototype.speedTextDidEnded = function(event) {
        cc.log("speedTextDidEnded:" + this.speedEditBox.string);
      };
      var LevelSelectorPanel_1;
      __decorate([ property(cc.Node) ], LevelSelectorPanel.prototype, "mask", void 0);
      __decorate([ property(cc.Node) ], LevelSelectorPanel.prototype, "frame", void 0);
      __decorate([ property(cc.Node) ], LevelSelectorPanel.prototype, "drawer", void 0);
      __decorate([ property(cc.Node) ], LevelSelectorPanel.prototype, "previous", void 0);
      __decorate([ property(cc.Node) ], LevelSelectorPanel.prototype, "next", void 0);
      __decorate([ property(cc.EditBox) ], LevelSelectorPanel.prototype, "editBox", void 0);
      __decorate([ property(cc.Node) ], LevelSelectorPanel.prototype, "updateCfgBtn", void 0);
      __decorate([ property(cc.Node) ], LevelSelectorPanel.prototype, "speedUpButton", void 0);
      __decorate([ property(cc.EditBox) ], LevelSelectorPanel.prototype, "speedEditBox", void 0);
      __decorate([ property(cc.Node) ], LevelSelectorPanel.prototype, "speedDownButton", void 0);
      LevelSelectorPanel = LevelSelectorPanel_1 = __decorate([ ccclass ], LevelSelectorPanel);
      return LevelSelectorPanel;
    }(cc.Component);
    exports.default = LevelSelectorPanel;
    cc._RF.pop();
  }, {
    "../../../extend/utils/GameMath": "GameMath",
    "../GameSceneBase": "GameSceneBase"
  } ],
  LoadingScene: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "a8422Wc9QtEZY8pHgFDJ9qw", "LoadingScene");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var GameMath_1 = require("../extend/utils/GameMath");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var LoadingScene = function(_super) {
      __extends(LoadingScene, _super);
      function LoadingScene() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.progressBar = null;
        _this.progressLabel = null;
        return _this;
      }
      LoadingScene.prototype.start = function() {
        this.loadData();
      };
      LoadingScene.prototype.getProgress = function() {
        if (this.progressBar) return this.progressBar.progress;
        return 0;
      };
      LoadingScene.prototype.setProgress = function(progress) {
        this.progressBar && (this.progressBar.progress = GameMath_1.default.clamp(progress, 0, 1));
        this.progressLabel && (this.progressLabel.string = Math.floor(100 * progress).toString() + "%");
      };
      LoadingScene.prototype.loadData = function() {
        var _this = this;
        this.setProgress(0);
        cc.loader.loadResDir("data", function() {}, function() {
          _this.loadCommon();
        });
      };
      LoadingScene.prototype.loadCommon = function() {
        this.setProgress(0);
        cc.loader.loadResDir("common", this.onLoadCommonProgressChanged.bind(this), this.onLoadCommonComplete.bind(this));
      };
      LoadingScene.prototype.onLoadCommonProgressChanged = function(completedCount, totalCount, item) {
        var progress = Math.max(this.getProgress(), completedCount / totalCount * .5);
        this.setProgress(progress);
      };
      LoadingScene.prototype.onLoadCommonComplete = function(error, resource, urls) {
        this.loadMatch();
      };
      LoadingScene.prototype.loadMatch = function() {
        this.setProgress(0);
        cc.loader.loadResDir("match_scene", this.onLoadMatchProgressChanged.bind(this), this.onLoadMatchComplete.bind(this));
      };
      LoadingScene.prototype.onLoadMatchProgressChanged = function(completedCount, totalCount, item) {
        var progress = Math.max(this.getProgress(), completedCount / totalCount * .5 + .5);
        this.setProgress(progress);
      };
      LoadingScene.prototype.onLoadMatchComplete = function(error, resource, urls) {
        cc.director.loadScene("MatchScene");
      };
      __decorate([ property(cc.ProgressBar) ], LoadingScene.prototype, "progressBar", void 0);
      __decorate([ property(cc.Label) ], LoadingScene.prototype, "progressLabel", void 0);
      LoadingScene = __decorate([ ccclass ], LoadingScene);
      return LoadingScene;
    }(cc.Component);
    exports.default = LoadingScene;
    cc._RF.pop();
  }, {
    "../extend/utils/GameMath": "GameMath"
  } ],
  MarkerBase: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "27ac0PMsFJKuJGvAVaVJsdQ", "MarkerBase");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.MarkerType = void 0;
    var EntityID_1 = require("../../defines/EntityID");
    var EntityBase_1 = require("../EntityBase");
    var MarkerType;
    (function(MarkerType) {
      MarkerType[MarkerType["None"] = 0] = "None";
      MarkerType[MarkerType["Normal"] = 1] = "Normal";
    })(MarkerType = exports.MarkerType || (exports.MarkerType = {}));
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var MarkerBase = function(_super) {
      __extends(MarkerBase, _super);
      function MarkerBase() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this._markerType = MarkerType.None;
        return _this;
      }
      MarkerBase.prototype.getMarkerType = function() {
        return this._markerType;
      };
      MarkerBase.prototype.initMarker = function(grid, markerType, width, height) {
        void 0 === width && (width = 1);
        void 0 === height && (height = 1);
        _super.prototype.initEntity.call(this, grid, EntityID_1.EntityType.Marker, width, height);
        this._markerType = markerType;
      };
      MarkerBase = __decorate([ ccclass ], MarkerBase);
      return MarkerBase;
    }(EntityBase_1.default);
    exports.default = MarkerBase;
    cc._RF.pop();
  }, {
    "../../defines/EntityID": "EntityID",
    "../EntityBase": "EntityBase"
  } ],
  MarkerNormal: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "019eaBtOEZNCpDj/I4xJz7v", "MarkerNormal");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var MarkerBase_1 = require("./MarkerBase");
    var CollectionID_1 = require("../../defines/CollectionID");
    var EntityID_1 = require("../../defines/EntityID");
    var TMXConfigInfoKeys_1 = require("../../defines/TMXConfigInfoKeys");
    var IdentifierManager_1 = require("../../defines/IdentifierManager");
    var EntityGroupID_1 = require("../../defines/EntityGroupID");
    var EntityPrefabNodePool_1 = require("../EntityPrefabNodePool");
    var EntityBase_1 = require("../EntityBase");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var MarkerNormal = function(_super) {
      __extends(MarkerNormal, _super);
      function MarkerNormal() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this._boneCollector = null;
        _this._dropMachine = null;
        _this._wormholeEntrance = null;
        _this._wormholeExit = null;
        return _this;
      }
      MarkerNormal_1 = MarkerNormal;
      MarkerNormal.prototype.getCollectionID = function() {
        return CollectionID_1.CollectionID.MarkerNormal;
      };
      MarkerNormal.prototype.getEntityID = function() {
        return EntityID_1.EntityID.MarkNormal;
      };
      MarkerNormal.prototype.dealWithConfigMap = function(config) {
        _super.prototype.dealWithConfigMap.call(this, config);
        var showEntityString = config[TMXConfigInfoKeys_1.default.CFG_DROP_MACHINE_SHOW_KEY_TYPE];
        if (showEntityString) {
          var entityNames = showEntityString.split("|");
          var sprites = [];
          for (var _i = 0, entityNames_1 = entityNames; _i < entityNames_1.length; _i++) {
            var name = entityNames_1[_i];
            var entityID = IdentifierManager_1.default.getInstance().getEntityIDFromString(name);
            if (entityID != EntityID_1.EntityID.None) {
              var frameName = IdentifierManager_1.default.getInstance().getFrameNameFromEntityID(entityID);
              var node = new cc.Node();
              var sprite = node.addComponent(cc.Sprite);
              sprite.spriteFrame = EntityBase_1.default.getEntitySpriteFarme(frameName);
              sprites.push(node);
            }
          }
          for (var _a = 0, entityNames_2 = entityNames; _a < entityNames_2.length; _a++) {
            var name = entityNames_2[_a];
            var groupID = IdentifierManager_1.default.getInstance().getEntityGroupIDFromString(name);
            if (groupID != EntityGroupID_1.EntityGroupID.None) {
              var frameName = IdentifierManager_1.default.getInstance().getFrameNameFromEntityGroupID(groupID);
              var node = new cc.Node();
              var sprite = node.addComponent(cc.Sprite);
              sprite.spriteFrame = EntityBase_1.default.getEntitySpriteFarme(frameName);
              sprites.push(node);
            }
          }
          var dropMachineConfig = MarkerNormal_1.DropMachineDisplayConfig[sprites.length.toString()];
          if (dropMachineConfig) for (var index = 0; index < sprites.length; index++) {
            var sprite = sprites[index];
            var spriteInfo = dropMachineConfig[index];
            sprite.position = spriteInfo["Position"];
            sprite.scale = spriteInfo["Scale"];
            this._dropMachine.addChild(sprite, -index - 1);
          }
          this._dropMachine.active = true;
        }
        var wormholeEntrance = config[TMXConfigInfoKeys_1.default.CFG_WORM_HOLE_ENTRANCE_KEY_TYPE];
        wormholeEntrance && (this._wormholeEntrance.active = true);
        var wormholeExit = config[TMXConfigInfoKeys_1.default.CFG_WORM_HOLE_EXIT_KEY_TYPE];
        wormholeExit && (this._wormholeExit.active = true);
        var boneCollector = config[TMXConfigInfoKeys_1.default.CFG_MARK_BONE_COLLECTOR_KEY_TYPE];
        boneCollector && (this._boneCollector.active = true);
      };
      MarkerNormal.create = function(grid) {
        var className = "MarkerNormal";
        var prefabFileName = "match_scene/prefab/entity/marker/MarkerNormal";
        var pool = EntityPrefabNodePool_1.default.getInstance();
        var component = pool.getPrefabNodeWithFileNameAndClassName(prefabFileName, className);
        if (component) {
          component.init(grid);
          return component;
        }
        return null;
      };
      MarkerNormal.prototype.init = function(grid) {
        _super.prototype.initMarker.call(this, grid, MarkerBase_1.MarkerType.Normal);
        this._boneCollector = this._puppet.getChildByName("boneCollector");
        this._boneCollector.active = false;
        this._dropMachine = this._puppet.getChildByName("dropMachine");
        this._dropMachine.active = false;
        this._wormholeEntrance = this._puppet.getChildByName("wormholeEntrance");
        this._wormholeEntrance.active = false;
        this._wormholeExit = this._puppet.getChildByName("wormholeExit");
        this._wormholeExit.active = false;
      };
      MarkerNormal.prototype.start = function() {};
      MarkerNormal.prototype.onDestroy = function() {
        _super.prototype.onDestroy.call(this);
        this._boneCollector = null;
        this._dropMachine = null;
        this._wormholeEntrance = null;
        this._wormholeExit = null;
      };
      var MarkerNormal_1;
      MarkerNormal.DropMachineDisplayConfig = {
        1: [ {
          Position: cc.v2(0, 0),
          Scale: .5
        } ],
        2: [ {
          Position: cc.v2(-13, -2),
          Scale: .4
        }, {
          Position: cc.v2(13, -2),
          Scale: .4
        } ],
        3: [ {
          Position: cc.v2(0, -2),
          Scale: .4
        }, {
          Position: cc.v2(18, 0),
          Scale: .3
        }, {
          Position: cc.v2(-18, 0),
          Scale: .3
        } ]
      };
      MarkerNormal = MarkerNormal_1 = __decorate([ ccclass ], MarkerNormal);
      return MarkerNormal;
    }(MarkerBase_1.default);
    exports.default = MarkerNormal;
    cc._RF.pop();
  }, {
    "../../defines/CollectionID": "CollectionID",
    "../../defines/EntityGroupID": "EntityGroupID",
    "../../defines/EntityID": "EntityID",
    "../../defines/IdentifierManager": "IdentifierManager",
    "../../defines/TMXConfigInfoKeys": "TMXConfigInfoKeys",
    "../EntityBase": "EntityBase",
    "../EntityPrefabNodePool": "EntityPrefabNodePool",
    "./MarkerBase": "MarkerBase"
  } ],
  MatchScene: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "966dbqyP51Ch4+/u9o4NkVZ", "MatchScene");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var GameCurrencyType_1 = require("../../define/GameCurrencyType");
    var PowerID_1 = require("./defines/PowerID");
    var GameSceneBase_1 = require("./GameSceneBase");
    var GridStateFail_1 = require("./grid/state/concreteState/GridStateFail");
    var GridStateLaunchGears_1 = require("./grid/state/concreteState/GridStateLaunchGears");
    var GameStatistics_1 = require("./statistics/GameStatistics");
    var GameResultBasePanel_1 = require("./userinterface/GameResultPanel/GameResultBasePanel");
    var GearBar_1 = require("./userinterface/GearBar");
    var LevelSelectorPanel_1 = require("./userinterface/LevelSelectorPanel");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var MatchScene = function(_super) {
      __extends(MatchScene, _super);
      function MatchScene() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this._lastStarsCount = 0;
        return _this;
      }
      MatchScene.prototype.canGenerateBomb = function() {
        return true;
      };
      MatchScene.prototype.canGenerateTrainSupply = function() {
        return true;
      };
      MatchScene.prototype.canCountScore = function() {
        return true;
      };
      MatchScene.prototype.canGetBonusFromLeftStep = function() {
        return true;
      };
      MatchScene.prototype.initMatchScene = function(level) {
        _super.prototype.initGameScene.call(this, level);
        this.phrasePrewarData(null);
        this.updateLevelBar();
        this.updateStepBar();
        this.updateTargetBar();
        this.updateGearBar();
        this.updateScore();
        this.updateSupplyBar();
        this.showTargetBanner();
        var panel = LevelSelectorPanel_1.default.create();
        this.node.addChild(panel.node, 1e3);
        this.reportStepInit();
      };
      MatchScene.prototype.phrasePrewarData = function(data) {
        var parram = null;
        this.gearBar.setData(GearBar_1.GearBarData.createWithData(parram));
        this.setEndUIData(GameResultBasePanel_1.GameEndPanelData.createWithData(parram));
        this.setEventTargets(GameStatistics_1.EventCollectTargets.createWithData(parram));
        this.setHistoryHighscore(0);
      };
      MatchScene.prototype.gainPowerAmount = function(powerID, amount) {
        _super.prototype.gainPowerAmount.call(this, powerID, amount);
        if (powerID == PowerID_1.PowerID.UsedSwap) {
          var usedSwap = this.getPowerAmount(powerID);
          this.reportStepSwap(usedSwap);
        }
      };
      MatchScene.prototype.isFailed = function() {
        return _super.prototype.isFailed.call(this);
      };
      MatchScene.prototype.beforePlayerOperated = function() {
        _super.prototype.beforePlayerOperated.call(this);
        var currentStarsCount = this.getStarsCount();
        currentStarsCount > this._lastStarsCount && (this._lastStarsCount = currentStarsCount);
      };
      MatchScene.prototype.onRecevieGiftBox = function(data) {
        var items = data["items"];
        for (var key in items) {
          var itemID = Number(key);
          var amount = items[key];
          itemID != GameCurrencyType_1.GameCurrencyType.NoneType && amount > 0 && this.setPrewarGearAmount(itemID, amount);
        }
        this.setPowerAmount(PowerID_1.PowerID.LaunchGears, 1);
        this._grid.setCurrentState(GridStateLaunchGears_1.default.create());
      };
      MatchScene.prototype.onCancleGiftBox = function(data) {};
      MatchScene.prototype.updateUserInterface = function() {
        this.updateGearBar();
      };
      MatchScene.prototype.showCompleteBanner = function() {
        this.setCompleteWithLastStep(0 == this.getPowerAmount(PowerID_1.PowerID.AvailableSwap));
        _super.prototype.showCompleteBanner.call(this);
      };
      MatchScene.prototype.congratulation = function() {
        _super.prototype.congratulation.call(this);
        var completeReward = this.getCompleteReward();
        for (var key in completeReward) {
          var amount = completeReward[key];
          var itemID = Number(key);
          this.setCollectedSupplyAmount(itemID, this.getCollectedSupplyAmount(itemID) + amount);
        }
        this.updateSupplyBar();
        this.updateScore();
        this.hideAdBanner();
      };
      MatchScene.prototype.noMoreStep = function() {};
      MatchScene.prototype.onNoMoreStep = function(object) {
        var usedItemIDs = object["items"];
        if (usedItemIDs) {
          for (var key in usedItemIDs) {
            var amount = usedItemIDs[key];
            var id = Number(key);
            id != GameCurrencyType_1.GameCurrencyType.ExtraStep1 && id != GameCurrencyType_1.GameCurrencyType.ExtraStep2 && id != GameCurrencyType_1.GameCurrencyType.ExtraStep3 && id != GameCurrencyType_1.GameCurrencyType.ExtraStep5 || this.setPrewarGearAmount(id, amount);
          }
          this.setPowerAmount(PowerID_1.PowerID.LaunchGears, 1);
          this.updateUserInterface();
          this._grid.resumeGame();
        }
      };
      MatchScene.prototype.stalemate = function() {};
      MatchScene.prototype.showReplayPrepareUI = function() {};
      MatchScene.prototype.backToMainScene = function(prepareNext, prepareNextInMatchScene) {
        void 0 === prepareNextInMatchScene && (prepareNextInMatchScene = false);
      };
      MatchScene.prototype.nextGame = function() {
        this.reportStepNextGame();
        this.backToMainScene(true);
      };
      MatchScene.prototype.quitGame = function() {
        this.swallowTouchLayer.active = true;
        this.reportResult(GameSceneBase_1.MatchGameEndType.GiveUp, GameSceneBase_1.MatchGameEndRewardType.None, false, this.onQuitGameRespone, this);
        this.hideAdBanner();
      };
      MatchScene.prototype.onQuitGameRespone = function(object) {
        this.endGameWithReplay(false);
      };
      MatchScene.prototype.replayGame = function() {
        this.swallowTouchLayer.active = true;
        this.reportResult(GameSceneBase_1.MatchGameEndType.GiveUp, GameSceneBase_1.MatchGameEndRewardType.None, false, this.onReplayGameRespone, this);
        this.hideAdBanner();
      };
      MatchScene.prototype.onReplayGameRespone = function(object) {
        var replay = true;
        this.endGameWithReplay(replay);
      };
      MatchScene.prototype.gameOver = function() {
        this._grid.setCurrentState(GridStateFail_1.default.create());
      };
      MatchScene.prototype.showGameFail = function() {};
      MatchScene.prototype.stalemateGame = function() {
        this.swallowTouchLayer.active = true;
        this.endGameWithReplay(true);
      };
      MatchScene.prototype.cheatGameWithLevel = function(level) {
        this.initMatchScene(level);
      };
      MatchScene.prototype.onPauseTabbed = function(evt) {
        this.canPauseGame();
      };
      MatchScene.prototype.requestUseGear = function(itemID, amount, allbackFunc, callbackObj) {
        void 0 === allbackFunc && (allbackFunc = null);
        void 0 === callbackObj && (callbackObj = null);
        allbackFunc.call(callbackObj, null);
      };
      MatchScene.prototype.requestBuyMoreStep = function(currencyID, price, itemID, allbackFunc, callbackObj) {
        void 0 === allbackFunc && (allbackFunc = null);
        void 0 === callbackObj && (callbackObj = null);
      };
      MatchScene.prototype.reportResult = function(endType, rewardType, hasExtraReward, callbackFunc, callbackObj) {
        void 0 === callbackFunc && (callbackFunc = null);
        void 0 === callbackObj && (callbackObj = null);
      };
      MatchScene.prototype.start = function() {
        this.initMatchScene(1);
      };
      MatchScene = __decorate([ ccclass ], MatchScene);
      return MatchScene;
    }(GameSceneBase_1.default);
    exports.default = MatchScene;
    cc._RF.pop();
  }, {
    "../../define/GameCurrencyType": "GameCurrencyType",
    "./GameSceneBase": "GameSceneBase",
    "./defines/PowerID": "PowerID",
    "./grid/state/concreteState/GridStateFail": "GridStateFail",
    "./grid/state/concreteState/GridStateLaunchGears": "GridStateLaunchGears",
    "./statistics/GameStatistics": "GameStatistics",
    "./userinterface/GameResultPanel/GameResultBasePanel": "GameResultBasePanel",
    "./userinterface/GearBar": "GearBar",
    "./userinterface/LevelSelectorPanel": "LevelSelectorPanel"
  } ],
  MathUtils: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "985e2RbrxZKrL38LUKm4kP9", "MathUtils");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.MathUtils = void 0;
    var MathUtils = function() {
      function MathUtils() {}
      MathUtils.round = function(f) {
        var tmp = Math.pow(10, 3);
        var temf = Math.round(f * tmp) / tmp;
        return temf;
      };
      MathUtils.shuffle = function(arr) {
        var len = arr.length;
        for (var i = 0; i < len - 1; i++) {
          var idx = Math.floor(Math.random() * (len - i));
          var temp = arr[idx];
          arr[idx] = arr[len - i - 1];
          arr[len - i - 1] = temp;
        }
        return arr;
      };
      return MathUtils;
    }();
    exports.MathUtils = MathUtils;
    cc._RF.pop();
  }, {} ],
  NoMoreStepBasePanel: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "37a7ahYHadGkbWRml/m6kMx", "NoMoreStepBasePanel");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var CollectionID_1 = require("../../defines/CollectionID");
    var ItemInfoManager_1 = require("../../defines/ItemInfoManager");
    var GameSceneBase_1 = require("../../GameSceneBase");
    var GameStatistics_1 = require("../../statistics/GameStatistics");
    var TargetItem_1 = require("../TargetItem");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var NoMoreStepBasePanel = function(_super) {
      __extends(NoMoreStepBasePanel, _super);
      function NoMoreStepBasePanel() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.title = null;
        _this.targetFrame = null;
        _this.bottomFrame = null;
        _this.closeButton = null;
        _this._gameScene = null;
        _this._report = {};
        _this._unilimitedItems = {};
        return _this;
      }
      NoMoreStepBasePanel.prototype.onOpen = function(param) {
        this.initPanel(param);
      };
      NoMoreStepBasePanel.prototype.initPanel = function(param) {
        var canvas = cc.find("Canvas");
        canvas && (this._gameScene = canvas.getComponent(GameSceneBase_1.default));
        this._report = param["report"];
        this.closeButton.on("touchend", this.onCloseButtonTabbed, this);
        this.initLeftTarget();
        this.initLostUnlimitedItems();
      };
      NoMoreStepBasePanel.prototype.initLostUnlimitedItems = function() {
        var unlimitedItemIDs = ItemInfoManager_1.default.getInstance().getUnlimitedItemIDs();
        var usedGears = this._report["usedGear_GN"];
        for (var key in usedGears) {
          var itemID = Number(key);
          var amount = usedGears[key];
          -1 != unlimitedItemIDs.indexOf(itemID) && (this._unilimitedItems[itemID] = amount);
        }
      };
      NoMoreStepBasePanel.prototype.initLeftTarget = function() {
        if (this._report) {
          var config = this._report["config"];
          var levelType = config["LevelType"];
          switch (levelType) {
           case GameStatistics_1.GameType.Order:
           case GameStatistics_1.GameType.Popsicle:
            this.title.string = "\u4f60\u8fd8\u9700\u8981\u6536\u96c6\uff1a";
            break;

           case GameStatistics_1.GameType.Path:
            this.title.string = "\u4f60\u81f3\u5c11\u8fd8\u9700\u8981\u6536\u96c6\uff1a";
            break;

           case GameStatistics_1.GameType.Grass:
            this.title.string = "\u8fd8\u6709\u683c\u5b50\u6ca1\u94fa\u6ee1\u8349\u5730\uff1a";
          }
          var leftTargets = this._report["leftTarget_TN"];
          for (var key in leftTargets) {
            var collectionID = Number(key);
            var amount = leftTargets[key];
            if (collectionID != CollectionID_1.CollectionID.None) {
              var needAmount = amount;
              var showCollectionID = collectionID;
              if (collectionID == CollectionID_1.CollectionID.ItemPuppy) {
                showCollectionID = CollectionID_1.CollectionID.ItemPawChromatic;
                needAmount = this._gameScene.getPuppyLeftSteps();
              }
              var item = TargetItem_1.default.create(showCollectionID, false);
              item.setAmount(needAmount);
              this.targetFrame.addChild(item.node);
            }
          }
        }
      };
      NoMoreStepBasePanel.prototype.onAnimationDone = function() {};
      NoMoreStepBasePanel.prototype.onCloseButtonTabbed = function(event) {
        this.giveUp();
      };
      NoMoreStepBasePanel.prototype.getLevel = function() {
        return this._gameScene.getLevel();
      };
      NoMoreStepBasePanel.prototype.giveUp = function() {};
      NoMoreStepBasePanel.prototype.requestBuyMoreStep = function(currencyID, price, itemID, callbackFunc, callbackObj) {
        void 0 === callbackFunc && (callbackFunc = null);
        void 0 === callbackObj && (callbackObj = null);
        this._gameScene.requestBuyMoreStep(currencyID, price, itemID, callbackFunc, callbackObj);
      };
      __decorate([ property(cc.Label) ], NoMoreStepBasePanel.prototype, "title", void 0);
      __decorate([ property(cc.Node) ], NoMoreStepBasePanel.prototype, "targetFrame", void 0);
      __decorate([ property(cc.Node) ], NoMoreStepBasePanel.prototype, "bottomFrame", void 0);
      __decorate([ property(cc.Node) ], NoMoreStepBasePanel.prototype, "closeButton", void 0);
      NoMoreStepBasePanel = __decorate([ ccclass ], NoMoreStepBasePanel);
      return NoMoreStepBasePanel;
    }(cc.Component);
    exports.default = NoMoreStepBasePanel;
    cc._RF.pop();
  }, {
    "../../GameSceneBase": "GameSceneBase",
    "../../defines/CollectionID": "CollectionID",
    "../../defines/ItemInfoManager": "ItemInfoManager",
    "../../statistics/GameStatistics": "GameStatistics",
    "../TargetItem": "TargetItem"
  } ],
  OrbitTrack: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "179b2VQq8lEJJUyigbGw8Eh", "OrbitTrack");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var GameMath_1 = require("../utils/GameMath");
    var OrbitTrack = function(_super) {
      __extends(OrbitTrack, _super);
      function OrbitTrack() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this._startPos = null;
        _this._emitterDirection = null;
        _this._radius = 0;
        _this._targetPos = null;
        _this._rotateHead = false;
        _this._contactPos = null;
        _this._origin = null;
        _this._startAngle = 0;
        _this._endAngle = 0;
        _this._isClockWise = false;
        _this._arcAngle = 0;
        _this._arcLength = 0;
        _this._stringLength = 0;
        _this.originalTarget = null;
        _this.target = null;
        return _this;
      }
      OrbitTrack.createWithDuration = function(duration, startPos, targetPos, emitterDirection, radius, rotateHead) {
        var pRet = new OrbitTrack();
        pRet.initWithDuration(duration, startPos, targetPos, emitterDirection, radius, rotateHead);
        return pRet;
      };
      OrbitTrack.createWithSpeed = function(speed, startPos, targetPos, emitterDirection, radius, rotateHead) {
        var pRet = new OrbitTrack();
        pRet.initWithSpeed(speed, startPos, targetPos, emitterDirection, radius, rotateHead);
        return pRet;
      };
      OrbitTrack.prototype.startWithTarget = function(target) {
        cc.ActionInterval.prototype.startWithTarget.call(this, target);
        this.updateWithPercentage(0);
      };
      OrbitTrack.prototype.update = function(time) {
        this.updateWithPercentage(time);
      };
      OrbitTrack.prototype.initWithDuration = function(duration, startPos, targetPos, emitterDirection, radius, rotateHead) {
        this._startPos = startPos;
        this._targetPos = targetPos;
        this._emitterDirection = emitterDirection;
        this._radius = radius;
        this._rotateHead = rotateHead;
        this.initPath();
        return cc.ActionInterval.prototype.initWithDuration.call(this, duration);
      };
      OrbitTrack.prototype.initWithSpeed = function(speed, startPos, targetPos, emitterDirection, radius, rotateHead) {
        this._startPos = startPos;
        this._targetPos = targetPos;
        this._emitterDirection = emitterDirection;
        this._radius = radius;
        this._rotateHead = rotateHead;
        var duration = this.initPath(speed);
        return cc.ActionInterval.prototype.initWithDuration.call(this, duration);
      };
      OrbitTrack.prototype.initPath = function(speed) {
        void 0 === speed && (speed = 0);
        var angle = GameMath_1.default.getAngle(this._startPos, this._targetPos, this._emitterDirection, true);
        var rotateAngle = Math.PI / 2;
        var round = 0;
        var minAngle = .5;
        if (Math.abs(angle) < minAngle) {
          rotateAngle = -Math.PI / 2;
          round = 1;
        } else angle > minAngle && angle < 180 - minAngle ? rotateAngle = Math.PI / 2 : Math.abs(angle - 180) < minAngle ? rotateAngle = Math.PI / 2 : angle > 180 + minAngle && angle < 360 + minAngle && (rotateAngle = -Math.PI / 2);
        this._isClockWise = rotateAngle < 0;
        var normalize = this._emitterDirection.normalize();
        var offset = normalize.mul(this._radius);
        var rotateOffset = cc.v2(offset.x * Math.cos(rotateAngle) - offset.y * Math.sin(rotateAngle), offset.x * Math.sin(rotateAngle) + offset.y * Math.cos(rotateAngle));
        this._origin = this._startPos.add(rotateOffset);
        this._contactPos = GameMath_1.default.getContactPoint(this._origin, this._radius, this._targetPos, this._isClockWise);
        this._startAngle = GameMath_1.default.getAngle(this._origin, this._startPos, cc.v2(1, 0), false);
        this._endAngle = GameMath_1.default.getAngle(this._origin, this._contactPos, cc.v2(1, 0), false);
        this._isClockWise ? this._endAngle = this._endAngle + -360 * round : this._endAngle = this._endAngle + 360 * round;
        this._arcAngle = 0;
        this._isClockWise ? this._arcAngle = Math.floor(this._startAngle + 360 - this._endAngle) % 360 + 360 * round : this._arcAngle = Math.floor(this._endAngle + 360 - this._startAngle) % 360 + 360 * round;
        this._arcLength = 2 * Math.PI * this._radius * this._arcAngle / 360;
        var strightOffset = this._contactPos.sub(this._targetPos);
        this._stringLength = strightOffset.mag();
        if (speed > 0) return (this._arcLength + this._stringLength) / speed;
        return 0;
      };
      OrbitTrack.prototype.updateWithPercentage = function(percentage) {
        var totalLength = this._arcLength + this._stringLength;
        var contactPosPercentage = this._arcLength / totalLength;
        if (percentage > contactPosPercentage) {
          var strightPercentage = (percentage - contactPosPercentage) / (1 - contactPosPercentage);
          var offset = this._targetPos.sub(this._contactPos);
          var offsetLength = offset.mag();
          var offsetNormalize = offset.normalize();
          var newPos = offsetNormalize.mul(strightPercentage * offsetLength).add(this._contactPos);
          this.getTarget().setPosition(newPos);
          if (this._rotateHead) {
            var angle = GameMath_1.default.getAngle(this._contactPos, this._targetPos, cc.v2(0, 1), true);
            var puppet = this.getTarget().getChildByName("puppet");
            puppet && (puppet.angle = -angle);
          }
        } else {
          var angleDelta = this._arcAngle * percentage / contactPosPercentage;
          var offset = this._startPos.sub(this._origin);
          var rotateOffset = cc.Vec2.ZERO;
          var rotateRadin = angleDelta / 180 * Math.PI;
          this._isClockWise && (rotateRadin = -angleDelta / 180 * Math.PI);
          rotateOffset = cc.v2(offset.x * Math.cos(rotateRadin) - offset.y * Math.sin(rotateRadin), offset.x * Math.sin(rotateRadin) + offset.y * Math.cos(rotateRadin));
          var newPos = this._origin.add(rotateOffset);
          this.getTarget().setPosition(newPos);
          if (this._rotateHead) {
            var angle = GameMath_1.default.getAngle(this._origin, newPos, cc.v2(0, 1), true);
            var rotation = 0;
            rotation = this._isClockWise ? angle + 90 : angle - 90;
            var puppet = this.getTarget().getChildByName("puppet");
            puppet && (puppet.angle = -rotation);
          }
        }
      };
      return OrbitTrack;
    }(cc.ActionInterval);
    exports.default = OrbitTrack;
    cc._RF.pop();
  }, {
    "../utils/GameMath": "GameMath"
  } ],
  Pair: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "dbf474WEqVJOrsPAF+heohV", "Pair");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.Pair = void 0;
    var Pair = function() {
      function Pair(first, second) {
        this.first = first;
        this.second = second;
      }
      Pair.prototype.toString = function() {
        return "Pair" + this.first.toString() + this.second.toString();
      };
      return Pair;
    }();
    exports.Pair = Pair;
    cc._RF.pop();
  }, {} ],
  ParasiteBase: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "d7d2637+7hEDpvAuABRuwHt", "ParasiteBase");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.ParasiteType = void 0;
    var EntityID_1 = require("../../defines/EntityID");
    var EntityBase_1 = require("../EntityBase");
    var GridCommand_1 = require("../../commond/GridCommand");
    var ParasiteType;
    (function(ParasiteType) {
      ParasiteType[ParasiteType["None"] = 0] = "None";
      ParasiteType[ParasiteType["Shackle"] = 1] = "Shackle";
      ParasiteType[ParasiteType["IceCube"] = 2] = "IceCube";
      ParasiteType[ParasiteType["Honey"] = 3] = "Honey";
      ParasiteType[ParasiteType["GiftBox"] = 4] = "GiftBox";
    })(ParasiteType = exports.ParasiteType || (exports.ParasiteType = {}));
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ParasiteBase = function(_super) {
      __extends(ParasiteBase, _super);
      function ParasiteBase() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this._parasiteType = ParasiteType.None;
        return _this;
      }
      ParasiteBase.prototype.getParasiteType = function() {
        return this._parasiteType;
      };
      ParasiteBase.prototype.hostCanDrop = function() {
        return this._hostCanDrop();
      };
      ParasiteBase.prototype._hostCanDrop = function() {
        return false;
      };
      ParasiteBase.prototype.hostCanSwap = function() {
        return this._hostCanSwap();
      };
      ParasiteBase.prototype._hostCanSwap = function() {
        return false;
      };
      ParasiteBase.prototype.hostCanMatch = function() {
        return this._hostCanMatch();
      };
      ParasiteBase.prototype._hostCanMatch = function() {
        return false;
      };
      ParasiteBase.prototype.canExcuteCommand = function(command) {
        switch (command.type) {
         case GridCommand_1.GridCommandType.BombClean:
          return this.canCleanByBomb(command.cleanColor);

         case GridCommand_1.GridCommandType.NeighborClean:
          return this.canCleanByNeighbour(command.cleanColor);

         case GridCommand_1.GridCommandType.MatchClean:
          return this.canCleanByMatch();

         case GridCommand_1.GridCommandType.TerminateClean:
          return this.canCleanByTerminate(command.cleanColor);
        }
        return false;
      };
      ParasiteBase.prototype.excuteCommand = function(command) {
        if (!this.canExcuteCommand(command)) return;
        switch (command.type) {
         case GridCommand_1.GridCommandType.BombClean:
          this.onClean(EntityID_1.EntityCleanOption.create(EntityID_1.EntityCleanType.Bomb, command.cleanRoot, command.cleanColor, command.createBombType, command.hitNeighbour, command.hitFloor, command.layoutGrass));
          break;

         case GridCommand_1.GridCommandType.NeighborClean:
          this.onClean(EntityID_1.EntityCleanOption.create(EntityID_1.EntityCleanType.Neighbor, command.cleanRoot, command.cleanColor, command.createBombType, command.hitNeighbour, command.hitFloor, command.layoutGrass));
          break;

         case GridCommand_1.GridCommandType.MatchClean:
          this.onClean(EntityID_1.EntityCleanOption.create(EntityID_1.EntityCleanType.Match, command.cleanRoot, command.cleanColor, command.createBombType, command.hitNeighbour, command.hitFloor, command.layoutGrass));
          break;

         case GridCommand_1.GridCommandType.TerminateClean:
          this.onClean(EntityID_1.EntityCleanOption.create(EntityID_1.EntityCleanType.Terminate, command.cleanRoot, command.cleanColor, command.createBombType, command.hitNeighbour, command.hitFloor, command.layoutGrass));
        }
      };
      ParasiteBase.prototype.removeFromGrid = function() {
        this.getGrid().removeParasiteAtLogicalPos(this.getLogicalPos());
      };
      ParasiteBase.prototype.canCleanByBomb = function(cleanColor) {
        if (!this.getImmuneDamage()) return this._canCleanByBomb(cleanColor);
        return false;
      };
      ParasiteBase.prototype._canCleanByBomb = function(cleanColor) {
        return false;
      };
      ParasiteBase.prototype.canCleanByTerminate = function(cleanColor) {
        return this._canCleanByTerminate(cleanColor);
      };
      ParasiteBase.prototype._canCleanByTerminate = function(cleanColor) {
        return this._canCleanByBomb(cleanColor);
      };
      ParasiteBase.prototype.canCleanByMatch = function() {
        if (!this.getImmuneDamage()) return this._canCleanByMatch();
        return false;
      };
      ParasiteBase.prototype._canCleanByMatch = function() {
        return false;
      };
      ParasiteBase.prototype.canCleanByNeighbour = function(color) {
        if (!this.getImmuneDamage()) return this._canCleanByNeighbour(color);
        return false;
      };
      ParasiteBase.prototype._canCleanByNeighbour = function(color) {
        return false;
      };
      ParasiteBase.prototype.onClean = function(cleanOption) {
        this._onClean(cleanOption);
        this.setImmuneDamage(true);
      };
      ParasiteBase.prototype._onClean = function(cleanOption) {};
      ParasiteBase.prototype.initParasite = function(grid, parasiteType, width, height) {
        void 0 === width && (width = 1);
        void 0 === height && (height = 1);
        _super.prototype.initEntity.call(this, grid, EntityID_1.EntityType.Parasite, width, height);
        this._parasiteType = parasiteType;
      };
      ParasiteBase.prototype.onDestroy = function() {
        _super.prototype.onDestroy.call(this);
      };
      ParasiteBase = __decorate([ ccclass ], ParasiteBase);
      return ParasiteBase;
    }(EntityBase_1.default);
    exports.default = ParasiteBase;
    cc._RF.pop();
  }, {
    "../../commond/GridCommand": "GridCommand",
    "../../defines/EntityID": "EntityID",
    "../EntityBase": "EntityBase"
  } ],
  ParasiteFactory: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "cb09dKLxG1LKLJSKp/ZE/pg", "ParasiteFactory");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var EntityID_1 = require("../../defines/EntityID");
    var IdentifierManager_1 = require("../../defines/IdentifierManager");
    var ParasiteIceCube_1 = require("./ParasiteIceCube");
    var ParasiteHoney_1 = require("./ParasiteHoney");
    var ParasiteShackle_1 = require("./ParasiteShackle");
    var ParasiteGiftBox_1 = require("./ParasiteGiftBox");
    var ParasiteFactory = function() {
      function ParasiteFactory() {}
      ParasiteFactory.generateParasiteWithEntityID = function(grid, entityID) {
        var parasite = null;
        switch (entityID) {
         case EntityID_1.EntityID.ParasiteShackleHp1:
         case EntityID_1.EntityID.ParasiteShackleHp2:
         case EntityID_1.EntityID.ParasiteShackleHp3:
          var hp = entityID - EntityID_1.EntityID.ParasiteShackleHp1 + 1;
          parasite = ParasiteShackle_1.default.create(grid, hp);
          break;

         case EntityID_1.EntityID.ParasiteIceCubeHp1:
         case EntityID_1.EntityID.ParasiteIceCubeHp2:
         case EntityID_1.EntityID.ParasiteIceCubeHp3:
         case EntityID_1.EntityID.ParasiteIceCubeHp4:
         case EntityID_1.EntityID.ParasiteIceCubeHp5:
         case EntityID_1.EntityID.ParasiteIceCubeHp6:
          var hp = entityID - EntityID_1.EntityID.ParasiteIceCubeHp1 + 1;
          parasite = ParasiteIceCube_1.default.create(grid, hp);
          break;

         case EntityID_1.EntityID.ParasiteHoneyHp1:
         case EntityID_1.EntityID.ParasiteHoneyHp2:
          var hp = entityID - EntityID_1.EntityID.ParasiteHoneyHp1 + 1;
          parasite = ParasiteHoney_1.default.create(grid, hp);
          break;

         case EntityID_1.EntityID.ParasiteGiftBoxRed:
         case EntityID_1.EntityID.ParasiteGiftBoxGreen:
         case EntityID_1.EntityID.ParasiteGiftBoxBlue:
         case EntityID_1.EntityID.ParasiteGiftBoxYellow:
         case EntityID_1.EntityID.ParasiteGiftBoxOrange:
         case EntityID_1.EntityID.ParasiteGiftBoxPurple:
          var color = entityID - EntityID_1.EntityID.ParasiteGiftBoxRed + EntityID_1.EntityColor.Red;
          parasite = ParasiteGiftBox_1.default.create(grid, color);
        }
        return parasite;
      };
      ParasiteFactory.generateParasiteWithKindID = function(grid, kindID) {
        var entityID = IdentifierManager_1.default.getInstance().getEntityIDFromKindID(kindID);
        return this.generateParasiteWithEntityID(grid, entityID);
      };
      return ParasiteFactory;
    }();
    exports.default = ParasiteFactory;
    cc._RF.pop();
  }, {
    "../../defines/EntityID": "EntityID",
    "../../defines/IdentifierManager": "IdentifierManager",
    "./ParasiteGiftBox": "ParasiteGiftBox",
    "./ParasiteHoney": "ParasiteHoney",
    "./ParasiteIceCube": "ParasiteIceCube",
    "./ParasiteShackle": "ParasiteShackle"
  } ],
  ParasiteGiftBox: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "991e1dS6ltNnoVf5HUHHCa0", "ParasiteGiftBox");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var ParasiteBase_1 = require("./ParasiteBase");
    var EntityPrefabNodePool_1 = require("../EntityPrefabNodePool");
    var CollectionID_1 = require("../../defines/CollectionID");
    var EntityID_1 = require("../../defines/EntityID");
    var FlyerAnimation_1 = require("../flyer/FlyerAnimation");
    var IGame_1 = require("../../../../base/IGame");
    var IdentifierManager_1 = require("../../defines/IdentifierManager");
    var EntityEventChanged_1 = require("../../event/EntityEventChanged");
    var TMXConfigInfoKeys_1 = require("../../defines/TMXConfigInfoKeys");
    var EntityBase_1 = require("../EntityBase");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ParasiteGiftBox = function(_super) {
      __extends(ParasiteGiftBox, _super);
      function ParasiteGiftBox() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.partsNode = [];
        _this._healthPoint = 0;
        return _this;
      }
      ParasiteGiftBox_1 = ParasiteGiftBox;
      ParasiteGiftBox.create = function(grid, color, healthPoint) {
        void 0 === healthPoint && (healthPoint = 1);
        var className = "ParasiteGiftBox";
        var prefabFileName = "match_scene/prefab/entity/parasite/ParasiteGiftBox";
        var pool = EntityPrefabNodePool_1.default.getInstance();
        var component = pool.getPrefabNodeWithFileNameAndClassName(prefabFileName, className);
        if (component) {
          component.init(grid, color, healthPoint);
          return component;
        }
        return null;
      };
      ParasiteGiftBox.prototype.clone = function() {
        return ParasiteGiftBox_1.create(this.getGrid(), this.getHealthPoint());
      };
      ParasiteGiftBox.prototype.getButterflyPriority = function(color, layoutGrass) {
        if (color == this.getEntityColor()) return _super.prototype.getButterflyPriority.call(this, color, layoutGrass);
        return EntityBase_1.default.DEFAULT_MISSILE_PRIORITY;
      };
      ParasiteGiftBox.prototype.getCollectionID = function() {
        var result = CollectionID_1.CollectionID.None;
        switch (this.getEntityColor()) {
         case EntityID_1.EntityColor.Red:
          result = CollectionID_1.CollectionID.ParasiteGiftBoxRed;
          break;

         case EntityID_1.EntityColor.Green:
          result = CollectionID_1.CollectionID.ParasiteGiftBoxGreen;
          break;

         case EntityID_1.EntityColor.Blue:
          result = CollectionID_1.CollectionID.ParasiteGiftBoxBlue;
          break;

         case EntityID_1.EntityColor.Yellow:
          result = CollectionID_1.CollectionID.ParasiteGiftBoxYellow;
          break;

         case EntityID_1.EntityColor.Orange:
          result = CollectionID_1.CollectionID.ParasiteGiftBoxOrange;
          break;

         case EntityID_1.EntityColor.Purple:
          result = CollectionID_1.CollectionID.ParasiteGiftBoxPurple;
        }
        return result;
      };
      ParasiteGiftBox.prototype.getEntityID = function() {
        var result = EntityID_1.EntityID.None;
        switch (this.getEntityColor()) {
         case EntityID_1.EntityColor.Red:
          result = EntityID_1.EntityID.ParasiteGiftBoxRed;
          break;

         case EntityID_1.EntityColor.Green:
          result = EntityID_1.EntityID.ParasiteGiftBoxGreen;
          break;

         case EntityID_1.EntityColor.Blue:
          result = EntityID_1.EntityID.ParasiteGiftBoxBlue;
          break;

         case EntityID_1.EntityColor.Yellow:
          result = EntityID_1.EntityID.ParasiteGiftBoxYellow;
          break;

         case EntityID_1.EntityColor.Orange:
          result = EntityID_1.EntityID.ParasiteGiftBoxOrange;
          break;

         case EntityID_1.EntityColor.Purple:
          result = EntityID_1.EntityID.ParasiteGiftBoxPurple;
        }
        return result;
      };
      ParasiteGiftBox.prototype.getScore = function() {
        return 200;
      };
      ParasiteGiftBox.prototype.dealWithConfigMap = function(configMap) {
        _super.prototype.dealWithConfigMap.call(this, configMap);
        if (configMap[TMXConfigInfoKeys_1.default.CFG_GIFT_BOX_MAX]) {
          var healthPoint = configMap[TMXConfigInfoKeys_1.default.CFG_GIFT_BOX_MAX];
          this.setHealthPoint(healthPoint);
        }
      };
      ParasiteGiftBox.prototype._hostCanDrop = function() {
        return false;
      };
      ParasiteGiftBox.prototype._hostCanSwap = function() {
        return false;
      };
      ParasiteGiftBox.prototype._hostCanMatch = function() {
        return false;
      };
      ParasiteGiftBox.prototype._canCleanByBomb = function(cleanColor) {
        return cleanColor == this.getEntityColor();
      };
      ParasiteGiftBox.prototype._canCleanByNeighbour = function(cleanColor) {
        return cleanColor == this.getEntityColor();
      };
      ParasiteGiftBox.prototype._onClean = function(cleanOption) {
        if (cleanOption.cleanColor != this.getEntityColor()) return;
        var grid = this.getGrid();
        grid.gainScoreWithEntity(this);
        if (this.getHealthPoint() <= 1) {
          var pos = this.getLogicalPos();
          var size = this.getLogicalSize();
          for (var row = 0; row < size.height; row++) for (var column = 0; column < size.width; column++) {
            var checkPos = pos.add(cc.v2(column, row));
            var item = grid.getItemAtLogicalPos(checkPos);
            item && item.setImmuneDamage(true);
          }
          if (!this.isTargetCollection()) {
            var flyer = FlyerAnimation_1.default.createDieAnimation(this.getGrid(), this.getEntityID());
            this.getGrid().setFlyerAtLogicalPos(flyer, this.getLogicalPos());
            flyer.node.setPosition(this.getPixelPos(this.getLogicalPos()));
            IGame_1.default.playAudio(IdentifierManager_1.default.getInstance().getMatchAudioFilePath("giftbox"));
          }
          this.setVisible(false);
          var changedEvent = EntityEventChanged_1.default.create(this);
          this.node.dispatchEvent(changedEvent);
          this.onCollected();
          this.selfDestory();
        } else {
          var changedEvent = EntityEventChanged_1.default.create(this);
          this.node.dispatchEvent(changedEvent);
          this.selfHurt();
          IGame_1.default.playAudio(IdentifierManager_1.default.getInstance().getMatchAudioFilePath("eliminate_0"));
          this.setHealthPoint(this.getHealthPoint() - 1);
          var flyer = FlyerAnimation_1.default.createAnimationWithType(this.getGrid(), FlyerAnimation_1.FlyerAnimationType.CommonHurt);
          this.getGrid().setFlyerAtLogicalPos(flyer, this.getLogicalPos());
          flyer.node.setPosition(this.getPixelPos(this.getLogicalPos()));
          flyer.node.zIndex = this.getTopZOrder();
        }
      };
      ParasiteGiftBox.prototype.init = function(grid, color, healthPoint) {
        _super.prototype.initParasite.call(this, grid, ParasiteBase_1.ParasiteType.GiftBox, 2, 2);
        this.setEntityColor(color);
        this.setHealthPoint(healthPoint);
      };
      ParasiteGiftBox.prototype.getHealthPoint = function() {
        return this._healthPoint;
      };
      ParasiteGiftBox.prototype.setHealthPoint = function(val) {
        this._healthPoint = val;
        this.updatePuppet();
      };
      ParasiteGiftBox.prototype.updatePuppet = function() {
        _super.prototype.updatePuppet.call(this);
        for (var i = 0; i < 4; i++) this.partsNode[i].active = i < this._healthPoint - 1;
      };
      var ParasiteGiftBox_1;
      __decorate([ property([ cc.Node ]) ], ParasiteGiftBox.prototype, "partsNode", void 0);
      ParasiteGiftBox = ParasiteGiftBox_1 = __decorate([ ccclass ], ParasiteGiftBox);
      return ParasiteGiftBox;
    }(ParasiteBase_1.default);
    exports.default = ParasiteGiftBox;
    cc._RF.pop();
  }, {
    "../../../../base/IGame": "IGame",
    "../../defines/CollectionID": "CollectionID",
    "../../defines/EntityID": "EntityID",
    "../../defines/IdentifierManager": "IdentifierManager",
    "../../defines/TMXConfigInfoKeys": "TMXConfigInfoKeys",
    "../../event/EntityEventChanged": "EntityEventChanged",
    "../EntityBase": "EntityBase",
    "../EntityPrefabNodePool": "EntityPrefabNodePool",
    "../flyer/FlyerAnimation": "FlyerAnimation",
    "./ParasiteBase": "ParasiteBase"
  } ],
  ParasiteHoney: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "25586wiLvpFoJ4BxXy1fP3/", "ParasiteHoney");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var ParasiteBase_1 = require("./ParasiteBase");
    var CollectionID_1 = require("../../defines/CollectionID");
    var EntityID_1 = require("../../defines/EntityID");
    var PowerID_1 = require("../../defines/PowerID");
    var FlyerAnimation_1 = require("../flyer/FlyerAnimation");
    var IGame_1 = require("../../../../base/IGame");
    var IdentifierManager_1 = require("../../defines/IdentifierManager");
    var EntityEventChanged_1 = require("../../event/EntityEventChanged");
    var EntityPrefabNodePool_1 = require("../EntityPrefabNodePool");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ParasiteHoney = function(_super) {
      __extends(ParasiteHoney, _super);
      function ParasiteHoney() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this._healthPoint = 0;
        return _this;
      }
      ParasiteHoney_1 = ParasiteHoney;
      ParasiteHoney.create = function(grid, healthPoint) {
        var className = "ParasiteHoney";
        var prefabFileName = "match_scene/prefab/entity/parasite/ParasiteHoney";
        var pool = EntityPrefabNodePool_1.default.getInstance();
        var component = pool.getPrefabNodeWithFileNameAndClassName(prefabFileName, className);
        if (component) {
          component.init(grid, healthPoint);
          return component;
        }
        return null;
      };
      ParasiteHoney.prototype.clone = function() {
        return ParasiteHoney_1.create(this.getGrid(), this.getHealthPoint());
      };
      ParasiteHoney.prototype.getCollectionID = function() {
        return CollectionID_1.CollectionID.ParasiteHoney;
      };
      ParasiteHoney.prototype.getEntityID = function() {
        var result = EntityID_1.EntityID.None;
        switch (this.getHealthPoint()) {
         case 1:
          result = EntityID_1.EntityID.ParasiteHoneyHp1;
          break;

         case 2:
          result = EntityID_1.EntityID.ParasiteHoneyHp2;
        }
        return result;
      };
      ParasiteHoney.prototype.getPowerID = function() {
        return PowerID_1.PowerID.HoneyResist;
      };
      ParasiteHoney.prototype.getScore = function() {
        return 100;
      };
      ParasiteHoney.prototype.getHealthPoint = function() {
        return this._healthPoint;
      };
      ParasiteHoney.prototype.setHealthPoint = function(val) {
        this._healthPoint = val;
        this.updatePuppet();
      };
      ParasiteHoney.prototype.grow = function() {
        this.playAnimation("grow");
        IGame_1.default.playAudio(IdentifierManager_1.default.getInstance().getMatchAudioFilePath("honeycreate"));
      };
      ParasiteHoney.prototype._canCleanByBomb = function(cleanColor) {
        return true;
      };
      ParasiteHoney.prototype._canCleanByNeighbour = function(cleanColor) {
        return true;
      };
      ParasiteHoney.prototype._onClean = function(cleanOption) {
        var rate = 1;
        if (cleanOption.cleanType == EntityID_1.EntityCleanType.Terminate) {
          rate = this.getHealthPoint();
          this.setHealthPoint(1);
        }
        this.getGrid().gainScoreWithEntity(this, rate);
        if (this.getHealthPoint() <= 1) {
          this.setVisible(false);
          if (!this.isTargetCollection()) {
            var flyer = FlyerAnimation_1.default.createDieAnimation(this.getGrid(), this.getEntityID());
            this.getGrid().setFlyerAtLogicalPos(flyer, this.getLogicalPos());
            IGame_1.default.playAudio(IdentifierManager_1.default.getInstance().getMatchAudioFilePath("honey"));
          }
          var changedEvent = EntityEventChanged_1.default.create(this);
          this.node.dispatchEvent(changedEvent);
          this.onCollected();
          this.selfDestory(true);
        } else {
          this.setHealthPoint(this.getHealthPoint() - 1);
          this.selfHurt();
          IGame_1.default.playAudio(IdentifierManager_1.default.getInstance().getMatchAudioFilePath("eliminate_0"));
          this.getGrid().gainPower(this.getPowerID(), 1);
          var flyer = FlyerAnimation_1.default.createDieAnimation(this.getGrid(), this.getEntityID());
          this.getGrid().setFlyerAtLogicalPos(flyer, this.getLogicalPos());
          IGame_1.default.playAudio(IdentifierManager_1.default.getInstance().getMatchAudioFilePath("honey"));
          flyer.node.zIndex = this.getTopZOrder();
        }
      };
      ParasiteHoney.prototype.init = function(grid, healthPoint) {
        _super.prototype.initParasite.call(this, grid, ParasiteBase_1.ParasiteType.Honey);
        this.setHealthPoint(healthPoint);
      };
      var ParasiteHoney_1;
      ParasiteHoney = ParasiteHoney_1 = __decorate([ ccclass ], ParasiteHoney);
      return ParasiteHoney;
    }(ParasiteBase_1.default);
    exports.default = ParasiteHoney;
    cc._RF.pop();
  }, {
    "../../../../base/IGame": "IGame",
    "../../defines/CollectionID": "CollectionID",
    "../../defines/EntityID": "EntityID",
    "../../defines/IdentifierManager": "IdentifierManager",
    "../../defines/PowerID": "PowerID",
    "../../event/EntityEventChanged": "EntityEventChanged",
    "../EntityPrefabNodePool": "EntityPrefabNodePool",
    "../flyer/FlyerAnimation": "FlyerAnimation",
    "./ParasiteBase": "ParasiteBase"
  } ],
  ParasiteIceCube: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "896f1PHivVKyL2t2sA2Z4oc", "ParasiteIceCube");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var ParasiteBase_1 = require("./ParasiteBase");
    var EntityID_1 = require("../../defines/EntityID");
    var CollectionID_1 = require("../../defines/CollectionID");
    var FlyerAnimation_1 = require("../flyer/FlyerAnimation");
    var IGame_1 = require("../../../../base/IGame");
    var IdentifierManager_1 = require("../../defines/IdentifierManager");
    var EntityEventChanged_1 = require("../../event/EntityEventChanged");
    var EntityPrefabNodePool_1 = require("../EntityPrefabNodePool");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ParasiteIceCube = function(_super) {
      __extends(ParasiteIceCube, _super);
      function ParasiteIceCube() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this._healthPoint = 0;
        return _this;
      }
      ParasiteIceCube_1 = ParasiteIceCube;
      ParasiteIceCube.create = function(grid, healthPoint) {
        var className = "ParasiteIceCube";
        var prefabFileName = "match_scene/prefab/entity/parasite/ParasiteIceCube";
        var pool = EntityPrefabNodePool_1.default.getInstance();
        var component = pool.getPrefabNodeWithFileNameAndClassName(prefabFileName, className);
        if (component) {
          component.init(grid, healthPoint);
          return component;
        }
        return null;
      };
      ParasiteIceCube.prototype.clone = function() {
        return ParasiteIceCube_1.create(this.getGrid(), this.getHealthPoint());
      };
      ParasiteIceCube.prototype.getEntityID = function() {
        var result = EntityID_1.EntityID.None;
        switch (this.getHealthPoint()) {
         case 1:
          result = EntityID_1.EntityID.ParasiteIceCubeHp1;
          break;

         case 2:
          result = EntityID_1.EntityID.ParasiteIceCubeHp2;
          break;

         case 3:
          result = EntityID_1.EntityID.ParasiteIceCubeHp3;
          break;

         case 4:
          result = EntityID_1.EntityID.ParasiteIceCubeHp4;
          break;

         case 5:
          result = EntityID_1.EntityID.ParasiteIceCubeHp5;
          break;

         case 6:
          result = EntityID_1.EntityID.ParasiteIceCubeHp6;
        }
        return result;
      };
      ParasiteIceCube.prototype.getCollectionID = function() {
        return CollectionID_1.CollectionID.ParasiteIceCube;
      };
      ParasiteIceCube.prototype.getScore = function() {
        return 100;
      };
      ParasiteIceCube.prototype.getButterflyPriority = function(color, layoutGrass) {
        return 1;
      };
      ParasiteIceCube.prototype._hostCanDrop = function() {
        return false;
      };
      ParasiteIceCube.prototype._hostCanSwap = function() {
        return false;
      };
      ParasiteIceCube.prototype._hostCanMatch = function() {
        return false;
      };
      ParasiteIceCube.prototype._canCleanByBomb = function(cleanColor) {
        return true;
      };
      ParasiteIceCube.prototype._canCleanByNeighbour = function(cleanColor) {
        return true;
      };
      ParasiteIceCube.prototype._onClean = function(cleanOption) {
        var rate = 1;
        if (cleanOption.cleanType == EntityID_1.EntityCleanType.Terminate) {
          rate = this.getHealthPoint();
          this.setHealthPoint(1);
        }
        this.getGrid().gainScoreWithEntity(this, rate);
        if (this.getHealthPoint() <= 1) {
          this.setVisible(false);
          if (!this.isTargetCollection()) {
            var flyer = FlyerAnimation_1.default.createDieAnimation(this.getGrid(), this.getEntityID());
            this.getGrid().setFlyerAtLogicalPos(flyer, this.getLogicalPos());
            IGame_1.default.playAudio(IdentifierManager_1.default.getInstance().getMatchAudioFilePath("icecube"));
          }
          var changedEvent = EntityEventChanged_1.default.create(this);
          this.node.dispatchEvent(changedEvent);
          this.onCollected();
          this.selfDestory();
        } else {
          this.selfHurt();
          IGame_1.default.playAudio(IdentifierManager_1.default.getInstance().getMatchAudioFilePath("eliminate_0"));
          this.setHealthPoint(this.getHealthPoint() - 1);
          var flyer = FlyerAnimation_1.default.createAnimationWithType(this.getGrid(), FlyerAnimation_1.FlyerAnimationType.CommonHurt);
          this.getGrid().setFlyerAtLogicalPos(flyer, this.getLogicalPos());
          flyer.node.zIndex = this.getTopZOrder();
        }
      };
      ParasiteIceCube.prototype.init = function(grid, healthPoint) {
        _super.prototype.initParasite.call(this, grid, ParasiteBase_1.ParasiteType.IceCube);
        this.setHealthPoint(healthPoint);
      };
      ParasiteIceCube.prototype.getHealthPoint = function() {
        return this._healthPoint;
      };
      ParasiteIceCube.prototype.setHealthPoint = function(val) {
        this._healthPoint = val;
        this.updatePuppet();
      };
      var ParasiteIceCube_1;
      ParasiteIceCube = ParasiteIceCube_1 = __decorate([ ccclass ], ParasiteIceCube);
      return ParasiteIceCube;
    }(ParasiteBase_1.default);
    exports.default = ParasiteIceCube;
    cc._RF.pop();
  }, {
    "../../../../base/IGame": "IGame",
    "../../defines/CollectionID": "CollectionID",
    "../../defines/EntityID": "EntityID",
    "../../defines/IdentifierManager": "IdentifierManager",
    "../../event/EntityEventChanged": "EntityEventChanged",
    "../EntityPrefabNodePool": "EntityPrefabNodePool",
    "../flyer/FlyerAnimation": "FlyerAnimation",
    "./ParasiteBase": "ParasiteBase"
  } ],
  ParasiteShackle: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "fbd5eF+eXlP3aFSx+Wo0nrH", "ParasiteShackle");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var ParasiteBase_1 = require("./ParasiteBase");
    var CollectionID_1 = require("../../defines/CollectionID");
    var EntityID_1 = require("../../defines/EntityID");
    var EntityEventChanged_1 = require("../../event/EntityEventChanged");
    var FlyerAnimation_1 = require("../flyer/FlyerAnimation");
    var IGame_1 = require("../../../../base/IGame");
    var IdentifierManager_1 = require("../../defines/IdentifierManager");
    var EntityPrefabNodePool_1 = require("../EntityPrefabNodePool");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ParasiteShackle = function(_super) {
      __extends(ParasiteShackle, _super);
      function ParasiteShackle() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this._healthPoint = 0;
        return _this;
      }
      ParasiteShackle_1 = ParasiteShackle;
      ParasiteShackle.create = function(grid, healthPoint) {
        var className = "ParasiteShackle";
        var prefabFileName = "match_scene/prefab/entity/parasite/ParasiteShackle";
        var pool = EntityPrefabNodePool_1.default.getInstance();
        var component = pool.getPrefabNodeWithFileNameAndClassName(prefabFileName, className);
        if (component) {
          component.init(grid, healthPoint);
          return component;
        }
        return null;
      };
      ParasiteShackle.prototype.clone = function() {
        return ParasiteShackle_1.create(this.getGrid(), this.getHealthPoint());
      };
      ParasiteShackle.prototype.getCollectionID = function() {
        return CollectionID_1.CollectionID.ParasiteShackle;
      };
      ParasiteShackle.prototype.getEntityID = function() {
        var result = EntityID_1.EntityID.None;
        switch (this.getHealthPoint()) {
         case 1:
          result = EntityID_1.EntityID.ParasiteShackleHp1;
          break;

         case 2:
          result = EntityID_1.EntityID.ParasiteShackleHp2;
          break;

         case 3:
          result = EntityID_1.EntityID.ParasiteShackleHp3;
        }
        return result;
      };
      ParasiteShackle.prototype.getScore = function() {
        return 100;
      };
      ParasiteShackle.prototype._hostCanDrop = function() {
        return false;
      };
      ParasiteShackle.prototype._hostCanSwap = function() {
        return false;
      };
      ParasiteShackle.prototype._hostCanMatch = function() {
        return true;
      };
      ParasiteShackle.prototype._canCleanByBomb = function(cleanColor) {
        return true;
      };
      ParasiteShackle.prototype._canCleanByMatch = function() {
        return true;
      };
      ParasiteShackle.prototype._onClean = function(cleanOption) {
        var rate = 1;
        if (cleanOption.cleanType == EntityID_1.EntityCleanType.Terminate) {
          rate = this.getHealthPoint();
          this.setHealthPoint(1);
        }
        this.getGrid().gainScoreWithEntity(this, rate);
        if (this.getHealthPoint() <= 1) {
          if (!this.isTargetCollection()) {
            var flyer = FlyerAnimation_1.default.createDieAnimation(this.getGrid(), this.getEntityID());
            this.getGrid().setFlyerAtLogicalPos(flyer, this.getLogicalPos());
            IGame_1.default.playAudio(IdentifierManager_1.default.getInstance().getMatchAudioFilePath("chain"));
          }
          this.setVisible(false);
          var changedEvent = EntityEventChanged_1.default.create(this);
          this.node.dispatchEvent(changedEvent);
          this.onCollected();
          this.selfDestory();
        } else {
          var changedEvent = EntityEventChanged_1.default.create(this);
          this.node.dispatchEvent(changedEvent);
          this.selfHurt();
          IGame_1.default.playAudio(IdentifierManager_1.default.getInstance().getMatchAudioFilePath("eliminate_0"));
          this.setHealthPoint(this.getHealthPoint() - 1);
          var flyer = FlyerAnimation_1.default.createAnimationWithType(this.getGrid(), FlyerAnimation_1.FlyerAnimationType.CommonHurt);
          this.getGrid().setFlyerAtLogicalPos(flyer, this.getLogicalPos());
          flyer.node.zIndex = this.getTopZOrder();
        }
      };
      ParasiteShackle.prototype.init = function(grid, healthPoint) {
        _super.prototype.initParasite.call(this, grid, ParasiteBase_1.ParasiteType.Shackle);
        this.setHealthPoint(healthPoint);
      };
      ParasiteShackle.prototype.getHealthPoint = function() {
        return this._healthPoint;
      };
      ParasiteShackle.prototype.setHealthPoint = function(val) {
        this._healthPoint = val;
        this.updatePuppet();
      };
      var ParasiteShackle_1;
      ParasiteShackle = ParasiteShackle_1 = __decorate([ ccclass ], ParasiteShackle);
      return ParasiteShackle;
    }(ParasiteBase_1.default);
    exports.default = ParasiteShackle;
    cc._RF.pop();
  }, {
    "../../../../base/IGame": "IGame",
    "../../defines/CollectionID": "CollectionID",
    "../../defines/EntityID": "EntityID",
    "../../defines/IdentifierManager": "IdentifierManager",
    "../../event/EntityEventChanged": "EntityEventChanged",
    "../EntityPrefabNodePool": "EntityPrefabNodePool",
    "../flyer/FlyerAnimation": "FlyerAnimation",
    "./ParasiteBase": "ParasiteBase"
  } ],
  PopsicleBase: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "f40ebQ+O/JA3oakvqroFPrN", "PopsicleBase");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.PopsicleType = void 0;
    var EntityBase_1 = require("../EntityBase");
    var GridCommand_1 = require("../../commond/GridCommand");
    var GridBase_1 = require("../../grid/GridBase");
    var EntityID_1 = require("../../defines/EntityID");
    var CurveToAction_1 = require("../../../../extend/action/CurveToAction");
    var GameMath_1 = require("../../../../extend/utils/GameMath");
    var PopsicleType;
    (function(PopsicleType) {
      PopsicleType[PopsicleType["None"] = 0] = "None";
      PopsicleType[PopsicleType["Normal"] = 1] = "Normal";
      PopsicleType[PopsicleType["Line"] = 2] = "Line";
      PopsicleType[PopsicleType["Range"] = 3] = "Range";
    })(PopsicleType = exports.PopsicleType || (exports.PopsicleType = {}));
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var PopsicleBase = function(_super) {
      __extends(PopsicleBase, _super);
      function PopsicleBase() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this._popsicleType = PopsicleType.None;
        return _this;
      }
      PopsicleBase.prototype.getPopsicleType = function() {
        return this._popsicleType;
      };
      PopsicleBase.prototype._canBePopsicleClean = function() {
        var occupyArea = this.getOccupyArea();
        var grid = this.getGrid();
        for (var row = 0; row < occupyArea.height; row++) for (var column = 0; column < occupyArea.width; column++) {
          var pos = occupyArea.origin.add(cc.v2(column, row));
          var floor = grid.getFloorAtLogicalPos(pos);
          if (floor) return false;
        }
        return true;
      };
      PopsicleBase.prototype._onBePopsicleClean = function() {
        var _this = this;
        this.removeFromGridAndAddToEffect();
        this.node.zIndex = GridBase_1.default.ZORDER_EFFECT;
        this.shiftToEffectLayer();
        this.getGrid().addObstructs(this);
        var state = this.playAnimation("die");
        if (state) {
          var rotation = this._puppet.angle;
          rotation = rotation >= 0 ? -15 : rotation < 0 ? 15 : -15;
          var duration = state.duration;
          var action = cc.sequence(cc.rotateTo(.25 * duration, rotation).easing(cc.easeInOut(2)), cc.rotateTo(.25 * duration, .5 * -rotation).easing(cc.easeInOut(2)), cc.rotateTo(.25 * duration, .25 * rotation).easing(cc.easeInOut(2)), cc.rotateTo(.25 * duration, 0).easing(cc.easeInOut(2)), cc.callFunc(function() {
            _this.onDidClean();
          }));
          this.getPuppet().runAction(action);
        }
      };
      PopsicleBase.prototype.onDidClean = function() {
        var _this = this;
        if (this.getGrid().isTargetCollectionID(this.getCollectionID())) {
          var startPos = this.node.position;
          var targetPos = this.node.parent.convertToNodeSpaceAR(this.getGrid().getWorldPosForTarget(this.getCollectionID()));
          var distance = GameMath_1.default.getDistance(startPos, cc.v2(targetPos.x, targetPos.y));
          var speed = 1e3;
          var duration = distance / speed;
          var size = this.getLogicalSize();
          var move = cc.spawn(CurveToAction_1.default.create(duration, startPos, cc.v2(targetPos.x, targetPos.y)), cc.scaleTo(.5 * duration, .75 / Math.min(size.width, size.height), .75 / Math.max(size.width, size.height)));
          var callback = cc.callFunc(function() {
            _this.getGrid().updateTargetBarUIWithDelta(_this.getCollectionID(), -1);
            _this.destoryWithRecycle();
          });
          var action = cc.sequence(move, callback);
          this.runAction(action);
        } else this.selfDestory();
        this.getGrid().collectEntity(this);
        this.getGrid().removeObstructs(this);
      };
      PopsicleBase.prototype.canExcuteCommand = function(command) {
        switch (command.type) {
         case GridCommand_1.GridCommandType.PopsicleClean:
          return this._canBePopsicleClean();
        }
        return false;
      };
      PopsicleBase.prototype.excuteCommand = function(command) {
        if (!this.canExcuteCommand(command)) return;
        switch (command.type) {
         case GridCommand_1.GridCommandType.PopsicleClean:
          this._onBePopsicleClean();
        }
      };
      PopsicleBase.prototype.onCollected = function() {};
      PopsicleBase.prototype.initPopsicle = function(grid, width, height, popsicleType) {
        _super.prototype.initEntity.call(this, grid, EntityID_1.EntityType.Popsicle, width, height);
        this._popsicleType = popsicleType;
      };
      PopsicleBase = __decorate([ ccclass ], PopsicleBase);
      return PopsicleBase;
    }(EntityBase_1.default);
    exports.default = PopsicleBase;
    cc._RF.pop();
  }, {
    "../../../../extend/action/CurveToAction": "CurveToAction",
    "../../../../extend/utils/GameMath": "GameMath",
    "../../commond/GridCommand": "GridCommand",
    "../../defines/EntityID": "EntityID",
    "../../grid/GridBase": "GridBase",
    "../EntityBase": "EntityBase"
  } ],
  PopsicleFactory: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "c900dgP2ndKS6wmb56wMYxr", "PopsicleFactory");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var EntityID_1 = require("../../defines/EntityID");
    var IdentifierManager_1 = require("../../defines/IdentifierManager");
    var PopsicleNormal_1 = require("./PopsicleNormal");
    var PopsicleLine_1 = require("./PopsicleLine");
    var PopsicleRange_1 = require("./PopsicleRange");
    var PopsicleFactory = function() {
      function PopsicleFactory() {}
      PopsicleFactory.generatePopsicleWithEntityID = function(grid, width, height, entityID) {
        var popsicle = null;
        switch (entityID) {
         case EntityID_1.EntityID.PopsicleNormal:
          popsicle = PopsicleNormal_1.default.create(grid, width, height);
          break;

         case EntityID_1.EntityID.PopsicleLine:
          popsicle = PopsicleLine_1.default.create(grid, width, height);
          break;

         case EntityID_1.EntityID.PopsicleBoom:
          popsicle = PopsicleRange_1.default.create(grid, width, height);
        }
        return popsicle;
      };
      PopsicleFactory.generatePopsicleWithKindID = function(grid, width, height, kindID) {
        var entityID = IdentifierManager_1.default.getInstance().getEntityIDFromKindID(kindID);
        return this.generatePopsicleWithEntityID(grid, width, height, entityID);
      };
      return PopsicleFactory;
    }();
    exports.default = PopsicleFactory;
    cc._RF.pop();
  }, {
    "../../defines/EntityID": "EntityID",
    "../../defines/IdentifierManager": "IdentifierManager",
    "./PopsicleLine": "PopsicleLine",
    "./PopsicleNormal": "PopsicleNormal",
    "./PopsicleRange": "PopsicleRange"
  } ],
  PopsicleLine: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "7d1f1diCsxNDLusDybIFKmd", "PopsicleLine");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var PopsicleBase_1 = require("./PopsicleBase");
    var EntityID_1 = require("../../defines/EntityID");
    var CollectionID_1 = require("../../defines/CollectionID");
    var GameMath_1 = require("../../../../extend/utils/GameMath");
    var Pair_1 = require("../../../../base/Pair");
    var FlyerPopsicleLine_1 = require("../flyer/FlyerPopsicleLine");
    var IGame_1 = require("../../../../base/IGame");
    var IdentifierManager_1 = require("../../defines/IdentifierManager");
    var EntityPrefabNodePool_1 = require("../EntityPrefabNodePool");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var PopsicleLine = function(_super) {
      __extends(PopsicleLine, _super);
      function PopsicleLine() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      PopsicleLine_1 = PopsicleLine;
      PopsicleLine.getEntityInfoWithSize = function(size) {
        var key = "{" + size.width + ", " + size.height + "}";
        return this.SizeToEntityInfoMap[key];
      };
      PopsicleLine.prototype.getCollectionID = function() {
        return CollectionID_1.CollectionID.PopsicleLine;
      };
      PopsicleLine.prototype.getEntityID = function() {
        return EntityID_1.EntityID.PopsicleLine;
      };
      PopsicleLine.prototype.getScore = function() {
        var size = this.getLogicalSize();
        return 100 * size.width * size.height;
      };
      PopsicleLine.prototype.updatePopsicle = function() {
        _super.prototype.updatePuppet.call(this);
        var rotation = 0;
        var entityInfo = PopsicleLine_1.getEntityInfoWithSize(this.getLogicalSize());
        if (entityInfo) {
          var needRotate = entityInfo["NeedRotate"];
          needRotate && (rotation = GameMath_1.default.randomInt(0, 100) < 50 ? -90 : 90);
        }
        this._puppet.angle = -rotation;
      };
      PopsicleLine.prototype._onBePopsicleClean = function() {
        _super.prototype._onBePopsicleClean.call(this);
        this.getGrid().gainScoreWithEntity(this);
        var rayDirections = [];
        var size = this.getLogicalSize();
        if (2 == size.width) {
          rayDirections.push(new Pair_1.Pair(cc.v2(1, 0), true));
          rayDirections.push(new Pair_1.Pair(cc.v2(-1, 0), false));
        } else if (2 == size.height) {
          rayDirections.push(new Pair_1.Pair(cc.v2(0, 1), true));
          rayDirections.push(new Pair_1.Pair(cc.v2(0, -1), false));
        }
        var grid = this.getGrid();
        for (var _i = 0, rayDirections_1 = rayDirections; _i < rayDirections_1.length; _i++) {
          var ray = rayDirections_1[_i];
          var cannon = FlyerPopsicleLine_1.default.create(grid, this.getEntityColor(), false, this.getLogicalPos(), ray.first, ray.second);
          grid.setFlyerAtLogicalPos(cannon, this.getLogicalPos());
        }
        IGame_1.default.playAudio(IdentifierManager_1.default.getInstance().getMatchAudioFilePath("popsiclesline"));
      };
      PopsicleLine.prototype.init = function(grid, width, height) {
        _super.prototype.initPopsicle.call(this, grid, width, height, PopsicleBase_1.PopsicleType.Line);
        this.updatePopsicle();
      };
      PopsicleLine.create = function(grid, width, height) {
        var className = "PopsicleLine";
        var prefabFileName = "match_scene/prefab/entity/popsicle/PopsicleLine";
        var pool = EntityPrefabNodePool_1.default.getInstance();
        var component = pool.getPrefabNodeWithFileNameAndClassName(prefabFileName, className);
        if (component) {
          component.init(grid, width, height);
          return component;
        }
        return null;
      };
      PopsicleLine.prototype.clone = function() {
        var item = PopsicleLine_1.create(this.getGrid(), this.getLogicalSize().width, this.getLogicalSize().height);
        return item;
      };
      PopsicleLine.prototype.start = function() {};
      var PopsicleLine_1;
      PopsicleLine.SizeToEntityInfoMap = {
        "{1, 2}": {
          EntityID: EntityID_1.EntityID.PopsicleLine,
          NeedRotate: false
        },
        "{2, 1}": {
          EntityID: EntityID_1.EntityID.PopsicleLine,
          NeedRotate: true
        }
      };
      PopsicleLine = PopsicleLine_1 = __decorate([ ccclass ], PopsicleLine);
      return PopsicleLine;
    }(PopsicleBase_1.default);
    exports.default = PopsicleLine;
    cc._RF.pop();
  }, {
    "../../../../base/IGame": "IGame",
    "../../../../base/Pair": "Pair",
    "../../../../extend/utils/GameMath": "GameMath",
    "../../defines/CollectionID": "CollectionID",
    "../../defines/EntityID": "EntityID",
    "../../defines/IdentifierManager": "IdentifierManager",
    "../EntityPrefabNodePool": "EntityPrefabNodePool",
    "../flyer/FlyerPopsicleLine": "FlyerPopsicleLine",
    "./PopsicleBase": "PopsicleBase"
  } ],
  PopsicleNormal: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "90137rYOp9EZZFTw62YsTN8", "PopsicleNormal");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var IGame_1 = require("../../../../base/IGame");
    var GameMath_1 = require("../../../../extend/utils/GameMath");
    var CollectionID_1 = require("../../defines/CollectionID");
    var EntityID_1 = require("../../defines/EntityID");
    var IdentifierManager_1 = require("../../defines/IdentifierManager");
    var EntityPrefabNodePool_1 = require("../EntityPrefabNodePool");
    var PopsicleBase_1 = require("./PopsicleBase");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var PopsicleNormal = function(_super) {
      __extends(PopsicleNormal, _super);
      function PopsicleNormal() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      PopsicleNormal_1 = PopsicleNormal;
      PopsicleNormal.getEntityInfoWithSize = function(size) {
        var key = "{" + size.width + ", " + size.height + "}";
        return this.SizeToEntityInfoMap[key];
      };
      PopsicleNormal.prototype.getCollectionID = function() {
        return CollectionID_1.CollectionID.PopsicleNormal;
      };
      PopsicleNormal.prototype.getEntityID = function() {
        var entityInfo = PopsicleNormal_1.getEntityInfoWithSize(this.getLogicalSize());
        if (entityInfo) return entityInfo["EntityID"];
        return EntityID_1.EntityID.None;
      };
      PopsicleNormal.prototype.getScore = function() {
        var size = this.getLogicalSize();
        return 50 * size.width * size.height;
      };
      PopsicleNormal.prototype.updatePopsicle = function() {
        _super.prototype.updatePuppet.call(this);
        var rotation = 0;
        var entityInfo = PopsicleNormal_1.getEntityInfoWithSize(this.getLogicalSize());
        if (entityInfo) {
          var needRotate = entityInfo["NeedRotate"];
          needRotate && (rotation = GameMath_1.default.randomInt(0, 100) < 50 ? -90 : 90);
        }
        this._puppet.angle = -rotation;
      };
      PopsicleNormal.prototype._onBePopsicleClean = function() {
        _super.prototype._onBePopsicleClean.call(this);
        this.getGrid().gainScoreWithEntity(this);
        IGame_1.default.playAudio(IdentifierManager_1.default.getInstance().getMatchAudioFilePath("popsicles"));
      };
      PopsicleNormal.prototype.init = function(grid, width, height) {
        _super.prototype.initPopsicle.call(this, grid, width, height, PopsicleBase_1.PopsicleType.Normal);
        this.updatePopsicle();
      };
      PopsicleNormal.create = function(grid, width, height) {
        var className = "PopsicleNormal";
        var prefabFileName = "match_scene/prefab/entity/popsicle/PopsicleNormal";
        var pool = EntityPrefabNodePool_1.default.getInstance();
        var component = pool.getPrefabNodeWithFileNameAndClassName(prefabFileName, className);
        if (component) {
          component.init(grid, width, height);
          return component;
        }
        return null;
      };
      PopsicleNormal.prototype.clone = function() {
        var item = PopsicleNormal_1.create(this.getGrid(), this.getLogicalSize().width, this.getLogicalSize().height);
        return item;
      };
      PopsicleNormal.prototype.start = function() {};
      var PopsicleNormal_1;
      PopsicleNormal.SizeToEntityInfoMap = {
        "{1, 1}": {
          EntityID: EntityID_1.EntityID.PopsicleNormal_1x1,
          NeedRotate: false
        },
        "{1, 2}": {
          EntityID: EntityID_1.EntityID.PopsicleNormal_1x2,
          NeedRotate: false
        },
        "{2, 1}": {
          EntityID: EntityID_1.EntityID.PopsicleNormal_1x2,
          NeedRotate: true
        },
        "{2, 2}": {
          EntityID: EntityID_1.EntityID.PopsicleNormal_2x2,
          NeedRotate: false
        },
        "{2, 3}": {
          EntityID: EntityID_1.EntityID.PopsicleNormal_2x3,
          NeedRotate: false
        },
        "{3, 2}": {
          EntityID: EntityID_1.EntityID.PopsicleNormal_2x3,
          NeedRotate: true
        },
        "{3, 3}": {
          EntityID: EntityID_1.EntityID.PopsicleNormal_3x3,
          NeedRotate: false
        },
        "{3, 4}": {
          EntityID: EntityID_1.EntityID.PopsicleNormal_3x4,
          NeedRotate: false
        },
        "{4, 3}": {
          EntityID: EntityID_1.EntityID.PopsicleNormal_3x4,
          NeedRotate: true
        }
      };
      PopsicleNormal = PopsicleNormal_1 = __decorate([ ccclass ], PopsicleNormal);
      return PopsicleNormal;
    }(PopsicleBase_1.default);
    exports.default = PopsicleNormal;
    cc._RF.pop();
  }, {
    "../../../../base/IGame": "IGame",
    "../../../../extend/utils/GameMath": "GameMath",
    "../../defines/CollectionID": "CollectionID",
    "../../defines/EntityID": "EntityID",
    "../../defines/IdentifierManager": "IdentifierManager",
    "../EntityPrefabNodePool": "EntityPrefabNodePool",
    "./PopsicleBase": "PopsicleBase"
  } ],
  PopsicleRange: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "5dc7ast4hxAGb7kkT9erbse", "PopsicleRange");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var PopsicleBase_1 = require("./PopsicleBase");
    var EntityID_1 = require("../../defines/EntityID");
    var CollectionID_1 = require("../../defines/CollectionID");
    var GameMath_1 = require("../../../../extend/utils/GameMath");
    var FlyerPopsicleBomb_1 = require("../flyer/FlyerPopsicleBomb");
    var IGame_1 = require("../../../../base/IGame");
    var IdentifierManager_1 = require("../../defines/IdentifierManager");
    var EntityPrefabNodePool_1 = require("../EntityPrefabNodePool");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var PopsicleRange = function(_super) {
      __extends(PopsicleRange, _super);
      function PopsicleRange() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      PopsicleRange_1 = PopsicleRange;
      PopsicleRange.getEntityInfoWithSize = function(size) {
        var key = "{" + size.width + ", " + size.height + "}";
        return this.SizeToEntityInfoMap[key];
      };
      PopsicleRange.prototype.getCollectionID = function() {
        return CollectionID_1.CollectionID.PopsicleBoom;
      };
      PopsicleRange.prototype.getEntityID = function() {
        var entityInfo = PopsicleRange_1.getEntityInfoWithSize(this.getLogicalSize());
        if (entityInfo) return entityInfo["EntityID"];
        return EntityID_1.EntityID.None;
      };
      PopsicleRange.prototype.getScore = function() {
        var size = this.getLogicalSize();
        return 100 * size.width * size.height;
      };
      PopsicleRange.prototype.updatePopsicle = function() {
        _super.prototype.updatePuppet.call(this);
        var rotation = 0;
        var entityInfo = PopsicleRange_1.getEntityInfoWithSize(this.getLogicalSize());
        if (entityInfo) {
          var needRotate = entityInfo["NeedRotate"];
          needRotate && (rotation = GameMath_1.default.randomInt(0, 100) < 50 ? -90 : 90);
        }
        this._puppet.angle = -rotation;
      };
      PopsicleRange.prototype._onBePopsicleClean = function() {
        _super.prototype._onBePopsicleClean.call(this);
        this.getGrid().gainScoreWithEntity(this);
        var entityInfo = PopsicleRange_1.getEntityInfoWithSize(this.getLogicalSize());
        var bombPositions = entityInfo["ClearPosition"];
        var bomb = FlyerPopsicleBomb_1.default.create(this.getGrid(), this.getEntityColor(), this.getLogicalPos(), false, bombPositions);
        this.getGrid().setFlyerAtLogicalPos(bomb, this.getLogicalPos());
        bomb.node.position = this.node.position;
        this.getLogicalSize().equals(cc.size(1, 1)) && (bomb.node.scale = .666);
        IGame_1.default.playAudio(IdentifierManager_1.default.getInstance().getMatchAudioFilePath("popsiclesboom"));
      };
      PopsicleRange.prototype.init = function(grid, width, height) {
        _super.prototype.initPopsicle.call(this, grid, width, height, PopsicleBase_1.PopsicleType.Range);
        this.updatePopsicle();
      };
      PopsicleRange.create = function(grid, width, height) {
        var className = "PopsicleRange";
        var prefabFileName = "match_scene/prefab/entity/popsicle/PopsicleRange";
        var pool = EntityPrefabNodePool_1.default.getInstance();
        var component = pool.getPrefabNodeWithFileNameAndClassName(prefabFileName, className);
        if (component) {
          component.init(grid, width, height);
          return component;
        }
        return null;
      };
      PopsicleRange.prototype.clone = function() {
        var item = PopsicleRange_1.create(this.getGrid(), this.getLogicalSize().width, this.getLogicalSize().height);
        return item;
      };
      PopsicleRange.prototype.start = function() {};
      var PopsicleRange_1;
      PopsicleRange.SizeToEntityInfoMap = {
        "{1, 1}": {
          EntityID: EntityID_1.EntityID.PopsicleBoom_1x1,
          NeedRotate: false,
          ClearPosition: [ cc.v2(-1, -1), cc.v2(0, -1), cc.v2(1, -1), cc.v2(-1, 0), cc.v2(0, 0), cc.v2(1, 0), cc.v2(-1, 1), cc.v2(0, 1), cc.v2(1, 1) ]
        },
        "{2, 2}": {
          EntityID: EntityID_1.EntityID.PopsicleBoom_2x2,
          NeedRotate: false,
          ClearPosition: [ cc.v2(0, 0), cc.v2(1, 0), cc.v2(0, 1), cc.v2(1, 1), cc.v2(-1, -1), cc.v2(-1, 0), cc.v2(-1, 1), cc.v2(-1, 2), cc.v2(0, 0), cc.v2(1, 2), cc.v2(0, -1), cc.v2(1, -1), cc.v2(2, 2), cc.v2(2, 1), cc.v2(2, 0), cc.v2(2, -1) ]
        }
      };
      PopsicleRange = PopsicleRange_1 = __decorate([ ccclass ], PopsicleRange);
      return PopsicleRange;
    }(PopsicleBase_1.default);
    exports.default = PopsicleRange;
    cc._RF.pop();
  }, {
    "../../../../base/IGame": "IGame",
    "../../../../extend/utils/GameMath": "GameMath",
    "../../defines/CollectionID": "CollectionID",
    "../../defines/EntityID": "EntityID",
    "../../defines/IdentifierManager": "IdentifierManager",
    "../EntityPrefabNodePool": "EntityPrefabNodePool",
    "../flyer/FlyerPopsicleBomb": "FlyerPopsicleBomb",
    "./PopsicleBase": "PopsicleBase"
  } ],
  PowerID: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "0d8c23hE59N07uQOIdXu4VC", "PowerID");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.PowerID = void 0;
    var PowerID;
    (function(PowerID) {
      PowerID[PowerID["None"] = 0] = "None";
      PowerID[PowerID["PuppyVitality"] = 10001] = "PuppyVitality";
      PowerID[PowerID["HoneyResist"] = 10002] = "HoneyResist";
      PowerID[PowerID["DyeingItem"] = 10101] = "DyeingItem";
      PowerID[PowerID["SpreadHoney"] = 10102] = "SpreadHoney";
      PowerID[PowerID["ActivateBomb"] = 10103] = "ActivateBomb";
      PowerID[PowerID["ConveyerMove"] = 10104] = "ConveyerMove";
      PowerID[PowerID["AvailableSwap"] = 10201] = "AvailableSwap";
      PowerID[PowerID["UsedSwap"] = 10202] = "UsedSwap";
      PowerID[PowerID["PuppyMovedStep"] = 10203] = "PuppyMovedStep";
      PowerID[PowerID["MatchCombo"] = 10301] = "MatchCombo";
      PowerID[PowerID["LaunchGears"] = 10302] = "LaunchGears";
      PowerID[PowerID["LaunchResidentGears"] = 10303] = "LaunchResidentGears";
    })(PowerID = exports.PowerID || (exports.PowerID = {}));
    cc._RF.pop();
  }, {} ],
  PowerupItem: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "677b6b9PblJgJ7IJtoNSR1+", "PowerupItem");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var GameCurrencyType_1 = require("../../../define/GameCurrencyType");
    var IdentifierManager_1 = require("../defines/IdentifierManager");
    var UISpriteExt_1 = require("../../../component/UISpriteExt");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var PowerupItem = function(_super) {
      __extends(PowerupItem, _super);
      function PowerupItem() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.icon = null;
        _this.frame = null;
        _this.unlimitedIcon = null;
        _this._itemID = GameCurrencyType_1.GameCurrencyType.NoneType;
        return _this;
      }
      PowerupItem_1 = PowerupItem;
      PowerupItem.create = function(itemID) {
        var res = cc.loader.getRes("match_scene/prefab/userInterface/PowerupItem", cc.Prefab);
        if (res) {
          var node = cc.instantiate(res);
          if (node) {
            var component = node.getComponent(PowerupItem_1);
            if (component) {
              component.init(itemID);
              return component;
            }
          }
        }
        return null;
      };
      PowerupItem.prototype.init = function(itemID) {
        this.setItemID(itemID);
      };
      PowerupItem.prototype.getItemID = function() {
        return this._itemID;
      };
      PowerupItem.prototype.setItemID = function(itemID) {
        this._itemID = itemID;
        var itemInfo = IdentifierManager_1.default.getInstance().getItemInfoFromItemID(this._itemID);
        this.icon.src = itemInfo.frameName;
        this.unlimitedIcon.active = itemInfo.isUnlimited;
        itemInfo.isUnlimited ? this.frame.src = "texture/start_game/unrelease/start_game_btn_yuan2" : this.frame.src = "texture/start_game/unrelease/start_game_btn_yuan";
      };
      PowerupItem.prototype.onLoad = function() {};
      PowerupItem.prototype.start = function() {};
      PowerupItem.prototype.onDestroy = function() {};
      var PowerupItem_1;
      __decorate([ property(UISpriteExt_1.default) ], PowerupItem.prototype, "icon", void 0);
      __decorate([ property(UISpriteExt_1.default) ], PowerupItem.prototype, "frame", void 0);
      __decorate([ property(cc.Node) ], PowerupItem.prototype, "unlimitedIcon", void 0);
      PowerupItem = PowerupItem_1 = __decorate([ ccclass ], PowerupItem);
      return PowerupItem;
    }(cc.Component);
    exports.default = PowerupItem;
    cc._RF.pop();
  }, {
    "../../../component/UISpriteExt": "UISpriteExt",
    "../../../define/GameCurrencyType": "GameCurrencyType",
    "../defines/IdentifierManager": "IdentifierManager"
  } ],
  RectangleClipper: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "82d386tqS9F9blT9sDLKyh8", "RectangleClipper");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var RectangleClipper = function(_super) {
      __extends(RectangleClipper, _super);
      function RectangleClipper() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this._clipAreas = [];
        return _this;
      }
      RectangleClipper.prototype.setCropRectangles = function(arr) {
        this._clipAreas = arr;
        this._updateGraphics();
      };
      RectangleClipper.prototype._updateGraphics = function() {
        var graphics = this._graphics;
        if (graphics) {
          graphics.clear(false);
          for (var i = 0; i < this._clipAreas.length; i++) {
            var tmpRect = this._clipAreas[i];
            graphics.rect(tmpRect.x, tmpRect.y, tmpRect.width, tmpRect.height);
          }
          cc.game.renderType === cc.game.RENDER_TYPE_CANVAS ? graphics.stroke() : graphics.fill();
        }
      };
      RectangleClipper = __decorate([ ccclass ], RectangleClipper);
      return RectangleClipper;
    }(cc.Mask);
    exports.default = RectangleClipper;
    cc._RF.pop();
  }, {} ],
  RugBase: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "c98ac+Pb0JD3ZADU8hS9tSM", "RugBase");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.RugBase = exports.RugType = void 0;
    var EntityBase_1 = require("../EntityBase");
    var GridCommand_1 = require("../../commond/GridCommand");
    var EntityID_1 = require("../../defines/EntityID");
    var RugType;
    (function(RugType) {
      RugType[RugType["Jam"] = 0] = "Jam";
    })(RugType = exports.RugType || (exports.RugType = {}));
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var RugBase = function(_super) {
      __extends(RugBase, _super);
      function RugBase() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this._type = null;
        return _this;
      }
      RugBase.prototype.removeFromGrid = function() {
        this.getGrid().removeRugAtLogicalPos(this.getLogicalPos());
      };
      RugBase.prototype.getType = function() {
        return this._type;
      };
      RugBase.prototype.canExcuteCommand = function(command) {
        switch (command.type) {
         case GridCommand_1.GridCommandType.BombClean:
          return this.canCleanByBomb(command.cleanColor);

         case GridCommand_1.GridCommandType.FloorClean:
          return this.canBeFloorClean();

         case GridCommand_1.GridCommandType.TerminateClean:
          return this.canCleanByTerminate(command.cleanColor);
        }
        return false;
      };
      RugBase.prototype.excuteCommand = function(command) {
        if (!this.canExcuteCommand(command)) return;
        switch (command.type) {
         case GridCommand_1.GridCommandType.BombClean:
          this.onClean(new EntityID_1.EntityCleanOption(EntityID_1.EntityCleanType.Bomb, command.cleanRoot, command.cleanColor, command.createBombType, command.hitNeighbour, command.hitFloor, command.layoutGrass));
          break;

         case GridCommand_1.GridCommandType.FloorClean:
          this.onClean(new EntityID_1.EntityCleanOption(EntityID_1.EntityCleanType.Floor, command.cleanRoot, command.cleanColor, command.createBombType, command.hitNeighbour, command.hitFloor, command.layoutGrass));
          break;

         case GridCommand_1.GridCommandType.TerminateClean:
          this.onClean(new EntityID_1.EntityCleanOption(EntityID_1.EntityCleanType.Terminate, command.cleanRoot, command.cleanColor, command.createBombType, command.hitNeighbour, command.hitFloor, command.layoutGrass));
        }
      };
      RugBase.prototype.canCleanByTerminate = function(cleanColor) {
        return this._canCleanByTerminate(cleanColor);
      };
      RugBase.prototype.canCleanByBomb = function(cleanColor) {
        if (!this.getImmuneDamage()) return this._canCleanByBomb(cleanColor);
        return false;
      };
      RugBase.prototype.canBeFloorClean = function() {
        if (!this.getImmuneDamage()) return this._canBeFloorClean();
        return;
      };
      RugBase.prototype.onClean = function(cleanOption) {
        this._onClean(cleanOption);
        this.setImmuneDamage(true);
      };
      RugBase.prototype._canCleanByTerminate = function(cleanColor) {
        return false;
      };
      RugBase.prototype._canCleanByBomb = function(cleanColor) {
        return false;
      };
      RugBase.prototype._canBeFloorClean = function() {
        return false;
      };
      RugBase.prototype._onClean = function(cleanOption) {};
      RugBase.prototype.initRug = function(grid, type) {
        _super.prototype.initEntity.call(this, grid, EntityID_1.EntityType.Rug, 1, 1);
        this._type = type;
      };
      RugBase = __decorate([ ccclass ], RugBase);
      return RugBase;
    }(EntityBase_1.default);
    exports.RugBase = RugBase;
    cc._RF.pop();
  }, {
    "../../commond/GridCommand": "GridCommand",
    "../../defines/EntityID": "EntityID",
    "../EntityBase": "EntityBase"
  } ],
  RugFactory: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "428d95GSQVFlIG4dZfXeM2a", "RugFactory");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var EntityID_1 = require("../../defines/EntityID");
    var IdentifierManager_1 = require("../../defines/IdentifierManager");
    var RugJam_1 = require("./RugJam");
    var RugFactory = function() {
      function RugFactory() {}
      RugFactory.generatePolishWithEntityID = function(grid, entityID) {
        var rug = null;
        switch (entityID) {
         case EntityID_1.EntityID.RugJam:
          rug = RugJam_1.default.create(grid);
        }
        return rug;
      };
      RugFactory.generatePolishWithKindID = function(grid, kindID) {
        var entityID = IdentifierManager_1.default.getInstance().getEntityIDFromKindID(kindID);
        return this.generatePolishWithEntityID(grid, entityID);
      };
      return RugFactory;
    }();
    exports.default = RugFactory;
    cc._RF.pop();
  }, {
    "../../defines/EntityID": "EntityID",
    "../../defines/IdentifierManager": "IdentifierManager",
    "./RugJam": "RugJam"
  } ],
  RugJam: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "9bfb3FWoQNAjaGHOCRK49gS", "RugJam");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var RugBase_1 = require("./RugBase");
    var CollectionID_1 = require("../../defines/CollectionID");
    var EntityID_1 = require("../../defines/EntityID");
    var FlyerAnimation_1 = require("../flyer/FlyerAnimation");
    var IGame_1 = require("../../../../base/IGame");
    var IdentifierManager_1 = require("../../defines/IdentifierManager");
    var EntityPrefabNodePool_1 = require("../EntityPrefabNodePool");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var RugJam = function(_super) {
      __extends(RugJam, _super);
      function RugJam() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      RugJam_1 = RugJam;
      RugJam.create = function(grid) {
        var className = "RugJam";
        var prefabFileName = "match_scene/prefab/entity/rug/RugJam";
        var pool = EntityPrefabNodePool_1.default.getInstance();
        var component = pool.getPrefabNodeWithFileNameAndClassName(prefabFileName, className);
        if (component) {
          component.init(grid);
          return component;
        }
        return null;
      };
      RugJam.prototype.clone = function() {
        var item = RugJam_1.create(this.getGrid());
        return item;
      };
      RugJam.prototype.getCollectionID = function() {
        return CollectionID_1.CollectionID.RugJam;
      };
      RugJam.prototype.getEntityID = function() {
        return EntityID_1.EntityID.RugJam;
      };
      RugJam.prototype.getScore = function() {
        return 100;
      };
      RugJam.prototype.getButterflyPriority = function(color, layoutGrass) {
        if (this.getGrid().isTargetCollectionID(CollectionID_1.CollectionID.RugJam)) return 1;
        return _super.prototype.getButterflyPriority.call(this, color, layoutGrass);
      };
      RugJam.prototype._canCleanByTerminate = function(cleanColor) {
        return true;
      };
      RugJam.prototype._canCleanByBomb = function(cleanColor) {
        return true;
      };
      RugJam.prototype._canBeFloorClean = function() {
        return true;
      };
      RugJam.prototype._onClean = function(cleanOption) {
        this.getGrid().gainScoreWithEntity(this);
        if (!this.isTargetCollection()) {
          var flyer = FlyerAnimation_1.default.createDieAnimation(this.getGrid(), this.getEntityID());
          this.getGrid().setFlyerAtLogicalPos(flyer, this.getLogicalPos());
          IGame_1.default.playAudio(IdentifierManager_1.default.getInstance().getMatchAudioFilePath("jam"));
        }
        this.setVisible(false);
        this.onCollected();
        this.selfDestory(true);
      };
      RugJam.prototype.grow = function() {
        this.playAnimation("grow");
      };
      RugJam.prototype.init = function(grid) {
        _super.prototype.initRug.call(this, grid, RugBase_1.RugType.Jam);
      };
      var RugJam_1;
      RugJam = RugJam_1 = __decorate([ ccclass ], RugJam);
      return RugJam;
    }(RugBase_1.RugBase);
    exports.default = RugJam;
    cc._RF.pop();
  }, {
    "../../../../base/IGame": "IGame",
    "../../defines/CollectionID": "CollectionID",
    "../../defines/EntityID": "EntityID",
    "../../defines/IdentifierManager": "IdentifierManager",
    "../EntityPrefabNodePool": "EntityPrefabNodePool",
    "../flyer/FlyerAnimation": "FlyerAnimation",
    "./RugBase": "RugBase"
  } ],
  ScoreBar: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "2556aN17LhENoC3iiVSOFb4", "ScoreBar");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var GameSceneBase_1 = require("../GameSceneBase");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ScoreBar = function(_super) {
      __extends(ScoreBar, _super);
      function ScoreBar() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.progressBar = null;
        _this.pointer = null;
        _this.pointerHead = null;
        _this.scoreLabel = null;
        _this.stars = [];
        _this._currentScore = 0;
        _this._score = 0;
        _this._completeScore = 0;
        _this._gameScene = null;
        _this._starScores = [ 35600, 49100, 60600, 66350 ];
        _this._starProgress = [ .444444444444444, .650793650793651, .873015873015873, 1 ];
        _this._rotateStart = 103;
        _this._rotateEnd = -10;
        _this._lastStarCount = 0;
        _this._lockScore = false;
        return _this;
      }
      ScoreBar.prototype.getIsLockScore = function() {
        return this._lockScore;
      };
      ScoreBar.prototype.setIsLockScore = function(islock) {
        this._lockScore = islock;
      };
      ScoreBar.prototype.getScore = function() {
        return this._score;
      };
      ScoreBar.prototype.setScore = function(score) {
        this._score = Math.min(this._gameScene.getTotalScore(), score);
      };
      ScoreBar.prototype.setCurrentScore = function(score) {
        score > this._score && (score = this._score);
        this._currentScore = score;
        this.scoreLabel.string = this._currentScore.toString();
        var startScore = 0;
        var startProgress = 0;
        var targetScore = 0;
        var targetProgress = 0;
        for (var _i = 0, _a = this.stars; _i < _a.length; _i++) {
          var start = _a[_i];
          this.setStarState(start, true);
        }
        for (var index = 0; index < this._starScores.length; index++) {
          if (this._currentScore <= this._starScores[index]) {
            targetScore = this._starScores[index];
            targetProgress = this._starProgress[index];
            index < this.stars.length && (this._currentScore >= targetScore ? this.setStarState(this.stars[index], false) : this.setStarState(this.stars[index], true));
            break;
          }
          index < this.stars.length && this.setStarState(this.stars[index], false);
          startScore = this._starScores[index];
          startProgress = this._starProgress[index];
        }
        if (0 == targetScore) {
          targetScore = this._starScores[this._starScores.length - 1];
          targetProgress = this._starProgress[this._starProgress.length - 1];
          startScore = this._starScores[this._starScores.length - 2];
          startProgress = this._starProgress[this._starProgress.length - 2];
        }
        var progress = (this._currentScore - startScore) / (targetScore - startScore);
        progress = Math.min((targetProgress - startProgress) * progress + startProgress, 1);
        this.progressBar.progress = progress;
        this.pointer.angle = -((this._rotateEnd - this._rotateStart) * progress + this._rotateStart);
      };
      ScoreBar.prototype.setStarState = function(star, isGray) {
        star.spriteFrame = isGray ? cc.loader.getRes("match_scene/texture/userInterface/match_star_slot", cc.SpriteFrame) : cc.loader.getRes("match_scene/texture/userInterface/match_star_small", cc.SpriteFrame);
      };
      ScoreBar.prototype.getCompleteScore = function() {
        return this._completeScore;
      };
      ScoreBar.prototype.setCompleteScore = function(score) {
        this._completeScore = score;
      };
      ScoreBar.prototype.updateScore = function() {
        if (this._gameScene) {
          var starScores = this._gameScene.getStarScores();
          this._starScores.length = 0;
          for (var _i = 0, starScores_1 = starScores; _i < starScores_1.length; _i++) {
            var score_1 = starScores_1[_i];
            this._starScores.push(score_1);
          }
          while (this._starScores.length < 4) {
            var rFirstScore = this._starScores[this._starScores.length - 1];
            var rSecondScore = this._starScores[this._starScores.length - 2];
            var delta = .5 * (rFirstScore - rSecondScore);
            this._starScores.push(delta + rFirstScore);
          }
          var score = this._gameScene.getTotalScore();
          this.setScore(score);
          this.setCurrentScore(score);
          var completeScore = this._gameScene.getCompleteScore();
          this.setCompleteScore(completeScore);
        }
      };
      ScoreBar.prototype.gainScore = function(delta) {
        this._lockScore || this.setScore(this.getScore() + delta);
      };
      ScoreBar.prototype.getWorldPos = function() {
        return this.pointerHead.parent.convertToWorldSpaceAR(this.pointerHead.getPosition());
      };
      ScoreBar.prototype.getWorldPosForStar = function(index) {
        if (index < this.stars.length) {
          var star = this.stars[index];
          return star.node.parent.convertToWorldSpaceAR(star.node.getPosition());
        }
        return this.node.parent.convertToWorldSpaceAR(this.node.getPosition());
      };
      ScoreBar.prototype.onLoad = function() {
        var canvas = cc.find("Canvas");
        canvas && (this._gameScene = canvas.getComponent(GameSceneBase_1.default));
      };
      ScoreBar.prototype.start = function() {};
      ScoreBar.prototype.update = function(dt) {
        var delta = this._score - this._currentScore;
        if (delta > 0) {
          delta = Math.max(Math.floor(delta / 5), 1);
          this.setCurrentScore(Math.min(this._currentScore + delta, this._score));
        }
      };
      __decorate([ property(cc.ProgressBar) ], ScoreBar.prototype, "progressBar", void 0);
      __decorate([ property(cc.Node) ], ScoreBar.prototype, "pointer", void 0);
      __decorate([ property(cc.Node) ], ScoreBar.prototype, "pointerHead", void 0);
      __decorate([ property(cc.Label) ], ScoreBar.prototype, "scoreLabel", void 0);
      __decorate([ property([ cc.Sprite ]) ], ScoreBar.prototype, "stars", void 0);
      ScoreBar = __decorate([ ccclass ], ScoreBar);
      return ScoreBar;
    }(cc.Component);
    exports.default = ScoreBar;
    cc._RF.pop();
  }, {
    "../GameSceneBase": "GameSceneBase"
  } ],
  ShinningStar: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "0be45upoYhPxpFwju4d3plG", "ShinningStar");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ShinningStar = function(_super) {
      __extends(ShinningStar, _super);
      function ShinningStar() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      ShinningStar_1 = ShinningStar;
      ShinningStar.create = function() {
        var res = cc.loader.getRes("match_scene/prefab/userInterface/ShinningStar", cc.Prefab);
        if (res) {
          var node = cc.instantiate(res);
          if (node) {
            var component = node.getComponent(ShinningStar_1);
            if (component) return component;
          }
        }
        return null;
      };
      ShinningStar.prototype.appear = function() {
        var anim = this.getComponent(cc.Animation);
        if (anim) return anim.play("appear");
        return null;
      };
      ShinningStar.prototype.fly = function() {
        var anim = this.getComponent(cc.Animation);
        if (anim) return anim.play("fly");
        return null;
      };
      ShinningStar.prototype.start = function() {};
      var ShinningStar_1;
      ShinningStar = ShinningStar_1 = __decorate([ ccclass ], ShinningStar);
      return ShinningStar;
    }(cc.Component);
    exports.default = ShinningStar;
    cc._RF.pop();
  }, {} ],
  StarAndScoreFrame: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "f4e7bPLDAlOXZLq7xW81VRC", "StarAndScoreFrame");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.StarAndScoreFrameData = void 0;
    var StarAndScoreFrameData = function() {
      function StarAndScoreFrameData() {
        this.starCount = 0;
        this.score = 0;
        this.highscore = 0;
      }
      StarAndScoreFrameData.create = function(starCount, score, highscore) {
        var result = new StarAndScoreFrameData();
        result.starCount = starCount;
        result.score = score;
        result.highscore = highscore;
        return result;
      };
      return StarAndScoreFrameData;
    }();
    exports.StarAndScoreFrameData = StarAndScoreFrameData;
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var StarAndScoreFrame = function(_super) {
      __extends(StarAndScoreFrame, _super);
      function StarAndScoreFrame() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this._starCount = 0;
        _this._score = 0;
        _this._highscore = 0;
        _this.starsNode = [];
        _this.scoreLabel = null;
        _this.highscoreLabel = null;
        return _this;
      }
      StarAndScoreFrame.prototype.getStarCount = function() {
        return this._starCount;
      };
      StarAndScoreFrame.prototype.setStarCount = function(count) {
        this._starCount = count;
        for (var index = 0; index < this.starsNode.length; index++) {
          var node = this.starsNode[index];
          node.active = index < this._starCount;
        }
      };
      StarAndScoreFrame.prototype.getScore = function() {
        return this._score;
      };
      StarAndScoreFrame.prototype.setScore = function(score) {
        this._score = score;
        this.scoreLabel.string = this._score.toString();
      };
      StarAndScoreFrame.prototype.getHighscore = function() {
        return this._highscore;
      };
      StarAndScoreFrame.prototype.setHighscore = function(highscore) {
        this._highscore = highscore;
        this.highscoreLabel.string = this._highscore.toString();
      };
      StarAndScoreFrame.prototype.setData = function(data) {
        this.setStarCount(data.starCount);
        this.setScore(data.score);
        this.setHighscore(data.highscore);
      };
      StarAndScoreFrame.prototype.appear = function() {
        var _this = this;
        var anim = this.getComponent(cc.Animation);
        if (anim) {
          var state = anim.play("appear");
          if (state) {
            var delay = cc.delayTime(state.duration);
            var callback = cc.callFunc(function() {
              _this.shine();
            });
            this.node.runAction(cc.sequence(delay, callback));
          }
        }
      };
      StarAndScoreFrame.prototype.shine = function() {
        var anim = this.getComponent(cc.Animation);
        anim && anim.play("shine");
      };
      StarAndScoreFrame.prototype.start = function() {};
      __decorate([ property([ cc.Node ]) ], StarAndScoreFrame.prototype, "starsNode", void 0);
      __decorate([ property(cc.Label) ], StarAndScoreFrame.prototype, "scoreLabel", void 0);
      __decorate([ property(cc.Label) ], StarAndScoreFrame.prototype, "highscoreLabel", void 0);
      StarAndScoreFrame = __decorate([ ccclass ], StarAndScoreFrame);
      return StarAndScoreFrame;
    }(cc.Component);
    exports.default = StarAndScoreFrame;
    cc._RF.pop();
  }, {} ],
  StateBase: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "9ed9eMaM/NFiaLBvO1T81HT", "StateBase");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    cc._RF.pop();
  }, {} ],
  StateMachineBase: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "61efc+MPOFAba7xPqktoa3y", "StateMachineBase");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var StateMachineBase = function() {
      function StateMachineBase(owner) {
        this._owner = null;
        this._currentState = null;
        this._globalState = null;
        this._owner = owner;
      }
      StateMachineBase.prototype.setCurrentState = function(state) {
        if (this._currentState === state) return;
        this._currentState && this._currentState.exit(this._owner);
        this._currentState = state;
        this._currentState && this._currentState.enter(this._owner);
      };
      StateMachineBase.prototype.getCurrentState = function() {
        return this._currentState;
      };
      StateMachineBase.prototype.setGlobalState = function(state) {
        if (this._globalState === state) return;
        this._globalState && this._globalState.exit(this._owner);
        this._globalState = state;
        this._globalState && this._globalState.enter(this._owner);
      };
      StateMachineBase.prototype.getGlobalState = function() {
        return this._globalState;
      };
      StateMachineBase.prototype.update = function(delta) {
        this._currentState && this._currentState.update(this._owner, delta);
        this._globalState && this._globalState.update(this._owner, delta);
      };
      return StateMachineBase;
    }();
    exports.default = StateMachineBase;
    cc._RF.pop();
  }, {} ],
  StepBar: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "4f2b4DLb1RESaYZOVpmg6N8", "StepBar");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var GameSceneBase_1 = require("../GameSceneBase");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var StepBar = function(_super) {
      __extends(StepBar, _super);
      function StepBar() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.label = null;
        _this._gameScene = null;
        _this._amount = 0;
        return _this;
      }
      StepBar.prototype.getAmount = function() {
        return this._amount;
      };
      StepBar.prototype.setAmount = function(amount) {
        var oldAmount = this._amount;
        this._amount = amount;
        if (oldAmount < this._amount) {
          this.label.node.stopActionByTag(1001);
          this.label.node.scale = 1;
          var amountAction = cc.sequence(cc.scaleTo(.1, 1.33).easing(cc.easeIn(2)), cc.scaleTo(.3, 1).easing(cc.easeOut(2)));
          amountAction.setTag(1001);
          this.label.node.runAction(amountAction);
        } else this.label.node.scale = 1;
        this.label.string = this._amount.toString();
        if (this._amount <= 5) {
          var alertAction = this.label.node.getActionByTag(1);
          if (!alertAction) {
            var alertAction_1 = cc.sequence(cc.scaleTo(.25, .9).easing(cc.easeOut(2)), cc.scaleTo(.25, .95).easing(cc.easeIn(2)), cc.scaleTo(.25, 1).easing(cc.easeOut(2)), cc.scaleTo(.25, .95).easing(cc.easeIn(2))).repeatForever();
            alertAction_1.setTag(1);
            this.label.node.runAction(alertAction_1);
            this.label.node.color = cc.color(255, 130, 98, 255);
          }
        } else {
          this.label.node.stopActionByTag(1);
          this.label.node.setScale(1);
          this.label.node.color = cc.Color.WHITE;
        }
      };
      StepBar.prototype.getWorldPos = function() {
        return this.label.node.parent.convertToWorldSpaceAR(this.label.node.getPosition());
      };
      StepBar.prototype.onLoad = function() {
        var canvas = cc.find("Canvas");
        canvas && (this._gameScene = canvas.getComponent(GameSceneBase_1.default));
      };
      StepBar.prototype.start = function() {};
      StepBar.prototype.onDestroy = function() {
        this.label = null;
        this._gameScene = null;
      };
      __decorate([ property(cc.Label) ], StepBar.prototype, "label", void 0);
      StepBar = __decorate([ ccclass ], StepBar);
      return StepBar;
    }(cc.Component);
    exports.default = StepBar;
    cc._RF.pop();
  }, {
    "../GameSceneBase": "GameSceneBase"
  } ],
  StringUtil: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "fdfcb1/QbZEZYkUrIWhDug3", "StringUtil");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.StringUtil = void 0;
    var StringUtil = function() {
      function StringUtil() {}
      StringUtil.trimSpace = function(str) {
        return str.replace(/^\s*(.*?)[\s\n]*$/g, "$1");
      };
      StringUtil.adjustFontByLength = function(str, maxLength) {
        var temp_str;
        if (this.getStringLength(str) <= maxLength) return str;
        for (var i = str.length - 2; i > 1; i--) if (this.getStringLength(str.substring(0, i)) <= maxLength - 1) return str.substring(0, i) + "...";
      };
      StringUtil.sliceStringByLength = function(str, maxLength) {
        var strArr = str.split("");
        var length = 0;
        var temp = "";
        for (var i = 0; i < str.length; i++) {
          var s = strArr[i];
          temp += s;
          this.isChinese(s) ? length += 2 : length += 1;
          if (length >= maxLength) break;
        }
        return temp;
      };
      StringUtil.getStringLength = function(str) {
        var strArr = str.split("");
        var length = 0;
        for (var i = 0; i < strArr.length; i++) {
          var s = strArr[i];
          this.isChinese(s) ? length += 2 : this.isMW(s) ? length += 2 : length += 1;
        }
        return length;
      };
      StringUtil.getStringLength_CH = function(str) {
        var strArr = str.split("");
        var length = 0;
        for (var i = 0; i < strArr.length; i++) {
          var s = strArr[i];
          this.isChinese(s) ? length += 2 : length += 1;
        }
        return length;
      };
      StringUtil.isChinese = function(str) {
        var reg = /^[\u4E00-\u9FA5]+$/;
        if (reg.test(str)) return true;
        return false;
      };
      StringUtil.getClassName = function(cls) {
        var tmp = cls.toString();
        var re = /function\s*(\w*)/gi;
        var matches = re.exec(tmp);
        return matches[1];
      };
      StringUtil.isMW = function(str) {
        var reg = /^[MW]+$/;
        if (reg.test(str)) return true;
        return false;
      };
      StringUtil.replaceByPos = function(str, pos, rep) {
        if (pos > str.length) return str;
        var retStr = str.substr(0, pos - 1) + rep + str.substring(pos, str.length);
        return retStr;
      };
      StringUtil.format = function(str) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) args[_i - 1] = arguments[_i];
        var result = str;
        if (args.length < 1) return result;
        for (var key in args) {
          var value = args[key];
          void 0 != value && (result = result.replace("{" + key + "}", value));
        }
        return result;
      };
      StringUtil.contain = function(srcStr, subStr) {
        var index = srcStr.indexOf(subStr);
        return index >= 0;
      };
      StringUtil.fill = function(str, length, char) {
        void 0 === char && (char = "0");
        while (str.length < length) str = char + str;
        return str;
      };
      StringUtil.saleParseJson = function(str) {
        try {
          var tmpObj = JSON.parse(str);
          if ("object" == typeof tmpObj) return tmpObj;
        } catch (e) {}
        return null;
      };
      return StringUtil;
    }();
    exports.StringUtil = StringUtil;
    cc._RF.pop();
  }, {} ],
  TMXConfigInfoKeys: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "4cd1ehZDOJIWIhf9QnBbpYL", "TMXConfigInfoKeys");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var TMXConfigInfoKeys = function() {
      function TMXConfigInfoKeys() {}
      TMXConfigInfoKeys.CELLS_LAYER_KEY = "Cells";
      TMXConfigInfoKeys.CONVEYERS_LAYER_KEY = "Conveyers";
      TMXConfigInfoKeys.POPSICLES_LAYER_KEY = "Popsicles";
      TMXConfigInfoKeys.FLOORS_LAYER_KEY = "Floors";
      TMXConfigInfoKeys.JAM_LAYER_KEY = "Jam";
      TMXConfigInfoKeys.ITEMS_LAYER_KEY = "Items";
      TMXConfigInfoKeys.PARASITES_LAYER_KEY = "Parasites";
      TMXConfigInfoKeys.MARKS_LAYER_KEY = "Marks";
      TMXConfigInfoKeys.CFG_DROP_KEY_IS_TOP = "isTop";
      TMXConfigInfoKeys.CFG_DROP_KEY_TYPE = "dropType";
      TMXConfigInfoKeys.CFG_DROP_VALUE_TYPE_DEFAULT = "default";
      TMXConfigInfoKeys.CFG_DROP_VALUE_TYPE_NOT = "not";
      TMXConfigInfoKeys.CFG_DROP_VALUE_TYPE_PROB = "prob";
      TMXConfigInfoKeys.CFG_DROP_VALUE_TYPE_LIST = "list";
      TMXConfigInfoKeys.CFG_DROP_KEY_BOX = "dropBox";
      TMXConfigInfoKeys.CFG_DROP_KEY_PROB = "dropProb";
      TMXConfigInfoKeys.CFG_DROP_KEY_NUM = "dropNum";
      TMXConfigInfoKeys.CFG_POSTAL_VEC = "postal";
      TMXConfigInfoKeys.CFG_NEXT_MAP_ID = "nextMap";
      TMXConfigInfoKeys.CFG_POPSICLE_KEY_TYPE = "type";
      TMXConfigInfoKeys.CFG_POPSICLE_VALUE_NORMAL = "popsicle";
      TMXConfigInfoKeys.CFG_POPSICLE_VALUE_LINE = "popsiclesLine";
      TMXConfigInfoKeys.CFG_POPSICLE_VALUE_BOOM = "popsiclesBoom";
      TMXConfigInfoKeys.CFG_MATIC_CRYSTAL_ATK_POINT = "atkPoint";
      TMXConfigInfoKeys.CFG_MATIC_CRYSTAL_OUTPUT = "output";
      TMXConfigInfoKeys.CFG_MATIC_CRYSTAL_NUM = "num";
      TMXConfigInfoKeys.CFG_MATIC_CRYSTAL_MAX = "max";
      TMXConfigInfoKeys.CFG_MATIC_CRYSTAL_STATUS = "status";
      TMXConfigInfoKeys.CFG_FIREWORM_BOTTLE_MAX = "max";
      TMXConfigInfoKeys.CFG_WATERMELON_MAX = "max";
      TMXConfigInfoKeys.CFG_CONVEYER_POSTAL_KEY_TYPE = "conveyer";
      TMXConfigInfoKeys.CFG_CONVEYER_POSTAL_VALUE_KEY = "postal";
      TMXConfigInfoKeys.CFG_WORMHOLE_KEY_TYPE = "wormholeType";
      TMXConfigInfoKeys.CFG_WORMHOLE_VALUE_NONE = "none";
      TMXConfigInfoKeys.CFG_WORMHOLE_VALUE_ENTRANCE = "entrance";
      TMXConfigInfoKeys.CFG_WORMHOLE_VALUE_EXIT = "exit";
      TMXConfigInfoKeys.CFG_WORMHOLE_POSTAL_KEY_TYPE = "postal";
      TMXConfigInfoKeys.CFG_WORM_HOLE_ENTRANCE_KEY_TYPE = "wormHoleEntrance";
      TMXConfigInfoKeys.CFG_WORM_HOLE_ENTRANCE_VALUE_DEFAULT = "default";
      TMXConfigInfoKeys.CFG_WORM_HOLE_EXIT_KEY_TYPE = "wormHoleExit";
      TMXConfigInfoKeys.CFG_WORM_HOLE_EXIT_VALUE_DEFAULT = "default";
      TMXConfigInfoKeys.CFG_MOVABLE_PLATE_PATH_KEY_TYPE = "path";
      TMXConfigInfoKeys.CFG_MOVABLE_PLATE_PATH_MOVE_TYPE = "move";
      TMXConfigInfoKeys.CFG_MOVABLE_PLATE_PATH_STEP_TYPE = "step";
      TMXConfigInfoKeys.CFG_MOVABLE_PLATE_PATH_FIRST_MOVE_TYPE = "firstMove";
      TMXConfigInfoKeys.CFG_MOVABLE_PLATE_PATH_FIRST_STEP_TYPE = "firstStep";
      TMXConfigInfoKeys.CFG_MARK_BONE_COLLECTOR_KEY_TYPE = "boneCollectorType";
      TMXConfigInfoKeys.CFG_MARK_BONE_COLLECTOR_VALUE_DEFAULT = "default";
      TMXConfigInfoKeys.CFG_DROP_MACHINE_KEY_TYPE = "dropMachine";
      TMXConfigInfoKeys.CFG_DROP_MACHINE_VALUE_DEFAULT = "default";
      TMXConfigInfoKeys.CFG_DROP_MACHINE_SHOW_KEY_TYPE = "show";
      TMXConfigInfoKeys.CFG_HONEY_COMB_OUTPUT = "output";
      TMXConfigInfoKeys.CFG_MOWER_CHARGE_TARGET = "collection";
      TMXConfigInfoKeys.CFG_MOWER_CHARGE_COUNT = "num";
      TMXConfigInfoKeys.CFG_MOWER_CHARGE_PRIORITY = "priority";
      TMXConfigInfoKeys.CFG_FIREWORK_ATTACKED_PRIORITY = "atkPointF";
      TMXConfigInfoKeys.CFG_MISSILE_ATTACKED_PRIORITY = "atkPointR";
      TMXConfigInfoKeys.CFG_GIFT_BOX_MAX = "max";
      return TMXConfigInfoKeys;
    }();
    exports.default = TMXConfigInfoKeys;
    cc._RF.pop();
  }, {} ],
  TMXJsonPhraser: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "c7db8aQmw9Ai7gbJBaDfFbi", "TMXJsonPhraser");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.TMXJsonObjectInfo = void 0;
    var CFGTripleMapTileset_1 = require("../../config/CFGTripleMapTileset");
    var GameMath_1 = require("./GameMath");
    var TMXJsonObjectInfo = function() {
      function TMXJsonObjectInfo() {
        this.gid = 0;
        this.id = 0;
        this.nane = "";
        this.type = "";
        this.rect = null;
        this.properties = {};
        this.path = [];
      }
      return TMXJsonObjectInfo;
    }();
    exports.TMXJsonObjectInfo = TMXJsonObjectInfo;
    var TMXJsonPhraser = function() {
      function TMXJsonPhraser(jsonObject) {
        this._mapSize = null;
        this._tileSize = null;
        this._tileLayers = {};
        this._objectLayers = {};
        this._tileProperties = {};
        this.initMapInfo(jsonObject);
        this.initLayers(jsonObject);
        this.initTileProperties(jsonObject);
      }
      TMXJsonPhraser.create = function(data) {
        return new TMXJsonPhraser(data);
      };
      TMXJsonPhraser.prototype.getMapSize = function() {
        return this._mapSize;
      };
      TMXJsonPhraser.prototype.getTileSize = function() {
        return this._tileSize;
      };
      TMXJsonPhraser.prototype.getTileLayerWithName = function(name) {
        if (this._tileLayers[name]) return this._tileLayers[name];
        return null;
      };
      TMXJsonPhraser.prototype.getObjectLayerWithName = function(name) {
        if (this._objectLayers[name]) return this._objectLayers[name];
        return null;
      };
      TMXJsonPhraser.prototype.getObjectInfos = function(name, pos) {
        var result = [];
        var layer = this.getObjectLayerWithName(name);
        if (layer) {
          var cellRect = cc.rect(pos.x * this._tileSize.width + 1, pos.y * this._tileSize.height + 1, this._tileSize.width - 2, this._tileSize.height - 2);
          for (var _i = 0, layer_1 = layer; _i < layer_1.length; _i++) {
            var objectInfo = layer_1[_i];
            GameMath_1.default.rectIntersectsRect(objectInfo.rect, cellRect) && result.push(objectInfo);
          }
        }
        return result;
      };
      TMXJsonPhraser.prototype.getPropertieFromGID = function(gid) {
        if (this._tileProperties[gid]) return this._tileProperties[gid];
        return null;
      };
      TMXJsonPhraser.prototype.initMapInfo = function(jsonObj) {
        if (!jsonObj.hasOwnProperty("width") || !jsonObj.hasOwnProperty("height") || !jsonObj.hasOwnProperty("tilewidth") || !jsonObj.hasOwnProperty("tilewidth")) {
          cc.error("initMapInfo error");
          return;
        }
        this._mapSize = cc.size(jsonObj["width"], jsonObj["height"]);
        this._tileSize = cc.size(jsonObj["tilewidth"], jsonObj["tilewidth"]);
      };
      TMXJsonPhraser.prototype.initLayers = function(jsonObj) {
        this._tileLayers = {};
        if (!jsonObj.hasOwnProperty("layers")) {
          cc.error("No Layers");
          return;
        }
        var layers = jsonObj["layers"];
        for (var key in layers) {
          var layer = layers[key];
          var type = layer["type"];
          if ("tilelayer" == type) {
            var data = [];
            var values = layer["data"];
            for (var _i = 0, values_1 = values; _i < values_1.length; _i++) {
              var val = values_1[_i];
              data.push(val);
            }
            var name = layer["name"];
            this._tileLayers[name] = data;
          } else if ("objectgroup" == type) {
            var data = [];
            var values = layer["objects"];
            for (var key_1 in values) {
              var obj = values[key_1];
              var info = new TMXJsonObjectInfo();
              info.id = obj["id"];
              info.nane = obj["name"];
              info.type = obj["type"];
              info.rect = cc.rect(obj["x"], obj["y"], obj["width"], obj["height"]);
              info.gid = 0;
              if (obj.hasOwnProperty("gid")) {
                info.gid = obj["gid"];
                info.rect.y = info.rect.y - info.rect.height;
              }
              if (obj.hasOwnProperty("properties") && obj.hasOwnProperty("propertytypes")) {
                var properties = obj["properties"];
                for (var key_2 in properties) {
                  var value = properties[key_2];
                  info.properties[key_2] = value;
                }
              }
              if (obj.hasOwnProperty("polyline")) {
                var origin = info.rect.origin;
                var tileSize = this._tileSize;
                var offsets = obj["polyline"];
                for (var key_3 in offsets) {
                  var offset = offsets[key_3];
                  info.path.push(origin.add(cc.v2(offset["x"], offset["y"])));
                }
              }
              data.push(info);
            }
            var name = layer["name"];
            this._objectLayers[name] = data;
          }
        }
      };
      TMXJsonPhraser.prototype.initTileProperties = function(genericValue) {
        this._tileProperties = {};
        var tileSets = genericValue["tilesets"];
        for (var _i = 0, tileSets_1 = tileSets; _i < tileSets_1.length; _i++) {
          var objItem = tileSets_1[_i];
          var firstGID = objItem["firstgid"];
          if (objItem.hasOwnProperty("source")) {
            var source = objItem["source"];
            var lastSlashIndex = source.lastIndexOf("/");
            var lastDotIndex = source.lastIndexOf(".");
            var tilesetName = source;
            tilesetName = source.substr(lastSlashIndex + 1, lastDotIndex - lastSlashIndex - 1);
            var jsonObj = this.getTilesetJsonString(tilesetName);
            var tileProperties = this.getTileProperties(jsonObj, firstGID);
            for (var key in tileProperties) this._tileProperties[key] = tileProperties[key];
          } else {
            var tileCount = objItem["tilecount"];
            if (!objItem.hasOwnProperty("tileproperties")) continue;
            var tileproperties = objItem["tileproperties"];
            for (var gidIndex = 0; gidIndex < tileCount; gidIndex++) {
              var key = gidIndex.toString();
              if (tileproperties.hasOwnProperty(key)) {
                var values = tileproperties[key];
                this._tileProperties[firstGID + gidIndex] = values;
              }
            }
          }
        }
      };
      TMXJsonPhraser.prototype.getTilesetJsonString = function(key) {
        var result = "";
        var tileset = new CFGTripleMapTileset_1.CFGTripleMapTileset();
        var tilesetInfo = tileset.getTilesetByName(key);
        tilesetInfo && (result = JSON.parse(tilesetInfo.Properties));
        return result;
      };
      TMXJsonPhraser.prototype.getTileProperties = function(genericValue, beginGid) {
        var tileProperties = {};
        if (genericValue.hasOwnProperty("tileproperties")) {
          var tileCount = 0;
          genericValue.hasOwnProperty("tilecount") && (tileCount = genericValue["tilecount"]);
          var tileproperties = genericValue["tileproperties"];
          for (var gidIndex = 0; gidIndex < tileCount; gidIndex++) {
            var keyStr = gidIndex.toString();
            var key = keyStr;
            if (tileproperties.hasOwnProperty(key)) {
              var values = tileproperties[key];
              tileProperties[beginGid + gidIndex] = values;
            }
          }
        }
        return tileProperties;
      };
      return TMXJsonPhraser;
    }();
    exports.default = TMXJsonPhraser;
    cc._RF.pop();
  }, {
    "../../config/CFGTripleMapTileset": "CFGTripleMapTileset",
    "./GameMath": "GameMath"
  } ],
  TargetBanner: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "18611AsG21HdLrEpbca9/Oh", "TargetBanner");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var CurveToAction_1 = require("../../../extend/action/CurveToAction");
    var GameSceneBase_1 = require("../GameSceneBase");
    var TargetItem_1 = require("./TargetItem");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var TargetBanner = function(_super) {
      __extends(TargetBanner, _super);
      function TargetBanner() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.maskView = null;
        _this.title = null;
        _this.targetFrame = null;
        _this._displayDuraion = 0;
        _this._gameScene = null;
        _this._targetItems = [];
        return _this;
      }
      TargetBanner_1 = TargetBanner;
      TargetBanner.create = function(level, targets) {
        var res = cc.loader.getRes("match_scene/prefab/userInterface/TargetBanner", cc.Prefab);
        if (res) {
          var node = cc.instantiate(res);
          if (node) {
            var component = node.getComponent(TargetBanner_1);
            component && component.init(level, targets);
            return component;
          }
        }
      };
      TargetBanner.prototype.init = function(level, targets) {
        this.title.string = "\u7b2c" + level.toString() + "\u5173";
        for (var key in targets) {
          var targetAmount = targets[key];
          var collectionID = Number(key);
          if (collectionID) {
            var needAmount = targetAmount;
            var item = TargetItem_1.default.create(collectionID);
            item.setAmount(needAmount, false);
            this.targetFrame.addChild(item.node);
            this._targetItems.push(item);
          }
        }
        var canvas = cc.find("Canvas");
        canvas && (this._gameScene = canvas.getComponent(GameSceneBase_1.default));
      };
      TargetBanner.prototype.start = function() {
        var anim = this.node.getComponent(cc.Animation);
        anim.play("appear");
      };
      TargetBanner.prototype.didAppear = function() {
        this._displayDuraion = 1.5;
        this._gameScene.createGrid();
        this.maskView.on("touchstart", this.onTouchStart, this);
      };
      TargetBanner.prototype.update = function(dt) {
        dt *= cc.director.getScheduler().getTimeScale();
        if (this._displayDuraion > 0) {
          this._displayDuraion -= dt;
          this._displayDuraion <= 0 && this.onDisappear();
        }
      };
      TargetBanner.prototype.onDestroy = function() {
        this.maskView = null;
        this.title = null;
        this.targetFrame = null;
        this._gameScene = null;
        this._targetItems = null;
      };
      TargetBanner.prototype.didDisappear = function() {
        this._gameScene.runGame();
        this.node.destroy();
      };
      TargetBanner.prototype.onTouchStart = function(evt) {
        if (this._displayDuraion > 0) {
          this._displayDuraion = 0;
          this.onDisappear();
        }
      };
      TargetBanner.prototype.onDisappear = function() {
        var _this = this;
        var _loop_1 = function(key) {
          var tItem = this_1._targetItems[key];
          if (this_1._gameScene) {
            var cItemNode = cc.instantiate(tItem.node);
            var cItem_1 = cItemNode.getComponent("TargetItem");
            cItem_1.node.parent = this_1._gameScene.node;
            cItem_1.node.zIndex = this_1.node.zIndex + 1;
            var startWorldPos = tItem.node.parent.convertToWorldSpaceAR(tItem.node.position);
            var startPos = cItem_1.node.parent.convertToNodeSpaceAR(startWorldPos);
            cItem_1.node.position = startPos;
            tItem.hideIco();
            cItem_1.hideFrame(false);
            var barItem_1 = this_1._gameScene.targetBar.getItemWithCollectionID(tItem.getCollectionID());
            barItem_1.hideIco();
            var endWorldPos = this_1._gameScene.getWorldPosForTarget(tItem.getCollectionID());
            var endPos = cItem_1.node.parent.convertToNodeSpaceAR(endWorldPos);
            var seqAction = cc.sequence(cc.spawn(cc.scaleTo(.3, 1.2, .8), cc.moveBy(.3, cc.v2(0, -30))), cc.spawn(cc.scaleTo(.2, 1, 1), CurveToAction_1.default.createNotRandom(.8, cc.v2(startPos.x, startPos.y - 30), endPos)), cc.sequence(cc.delayTime(0), cc.callFunc(function() {
              barItem_1.showIco();
              var anim = barItem_1.node.getComponent(cc.Animation);
              anim.play("bling");
              cItem_1.node.active = false;
              cItem_1.node.destroy();
            })));
            cItem_1.node.runAction(seqAction);
          }
          this_1.node.runAction(cc.sequence(cc.delayTime(.2), cc.callFunc(function() {
            var anim = _this.node.getComponent(cc.Animation);
            anim.play("disappear");
          })));
        };
        var this_1 = this;
        for (var key in this._targetItems) _loop_1(key);
      };
      var TargetBanner_1;
      __decorate([ property(cc.Node) ], TargetBanner.prototype, "maskView", void 0);
      __decorate([ property(cc.Label) ], TargetBanner.prototype, "title", void 0);
      __decorate([ property(cc.Node) ], TargetBanner.prototype, "targetFrame", void 0);
      TargetBanner = TargetBanner_1 = __decorate([ ccclass ], TargetBanner);
      return TargetBanner;
    }(cc.Component);
    exports.default = TargetBanner;
    cc._RF.pop();
  }, {
    "../../../extend/action/CurveToAction": "CurveToAction",
    "../GameSceneBase": "GameSceneBase",
    "./TargetItem": "TargetItem"
  } ],
  TargetBar: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "65ffdBK1NNNbolpzsnARDwo", "TargetBar");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var TargetItem_1 = require("./TargetItem");
    var GameSceneBase_1 = require("../GameSceneBase");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var TargetBar = function(_super) {
      __extends(TargetBar, _super);
      function TargetBar() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this._gameScene = null;
        _this._targetItems = [];
        return _this;
      }
      TargetBar.prototype.hideAll = function() {
        for (var _i = 0, _a = this._targetItems; _i < _a.length; _i++) {
          var item = _a[_i];
          item.hideIco();
        }
      };
      TargetBar.prototype.setTargetData = function(data) {
        for (var key in data) {
          var needAmount = data[key];
          var collectionID = Number(key);
          if (collectionID) {
            var item = this.getItemWithCollectionID(collectionID);
            item && item.setAmount(needAmount);
          }
        }
      };
      TargetBar.prototype.clearTargets = function() {
        for (var _i = 0, _a = this._targetItems; _i < _a.length; _i++) {
          var item = _a[_i];
          item.node.destroy();
        }
        this._targetItems.length = 0;
      };
      TargetBar.prototype.getTargetIconWorldPos = function(collectionID) {
        return cc.Vec2.ZERO;
      };
      TargetBar.prototype.getItemWithCollectionID = function(collectionID) {
        var result = null;
        for (var _i = 0, _a = this._targetItems; _i < _a.length; _i++) {
          var item = _a[_i];
          if (item.getCollectionID() == collectionID) {
            result = item;
            break;
          }
        }
        if (null == result) {
          result = TargetItem_1.default.create(collectionID);
          if (result) {
            this.node.addChild(result.node);
            this._targetItems.push(result);
          }
        }
        return result;
      };
      TargetBar.prototype.getWorldPosWithCollectionID = function(collectionID) {
        var item = this.getItemWithCollectionID(collectionID);
        if (item) return item.node.parent.convertToWorldSpaceAR(item.node.position);
        return cc.Vec2.ZERO;
      };
      TargetBar.prototype.onLoad = function() {
        var canvas = cc.find("Canvas");
        canvas && (this._gameScene = canvas.getComponent(GameSceneBase_1.default));
      };
      TargetBar.prototype.start = function() {};
      TargetBar.prototype.onDestroy = function() {
        this._gameScene = null;
        this._targetItems = null;
      };
      TargetBar = __decorate([ ccclass ], TargetBar);
      return TargetBar;
    }(cc.Component);
    exports.default = TargetBar;
    cc._RF.pop();
  }, {
    "../GameSceneBase": "GameSceneBase",
    "./TargetItem": "TargetItem"
  } ],
  TargetItem: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "c63075vdItHaZfkhTQ0hRBx", "TargetItem");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var CollectionID_1 = require("../defines/CollectionID");
    var IdentifierManager_1 = require("../defines/IdentifierManager");
    var UISpriteExt_1 = require("../../../component/UISpriteExt");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var TargetItem = function(_super) {
      __extends(TargetItem, _super);
      function TargetItem() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.frame = null;
        _this.icon = null;
        _this.amountLabel = null;
        _this.checkMark = null;
        _this._collectionID = CollectionID_1.CollectionID.None;
        _this._amount = 0;
        return _this;
      }
      TargetItem_1 = TargetItem;
      TargetItem.prototype.getCollectionID = function() {
        return this._collectionID;
      };
      TargetItem.prototype.setCollectionID = function(collectionID) {
        this._collectionID = collectionID;
        var spriteFrameName = IdentifierManager_1.default.getInstance().getFrameNameFromCollectionID(this._collectionID);
        var component = this.icon.getComponent(UISpriteExt_1.default);
        component && (component.src = spriteFrameName);
      };
      TargetItem.prototype.getAmount = function() {
        return this._amount;
      };
      TargetItem.prototype.setAmount = function(amount, animated) {
        void 0 === animated && (animated = true);
        var oldAmount = this._amount;
        this._amount = amount;
        this.amountLabel.string = this._amount.toString();
        if (animated && oldAmount != this._amount) {
          var anim = this.getComponent(cc.Animation);
          if (anim) {
            anim.stop();
            anim.play("bling");
          } else {
            this.amountLabel.node.stopActionByTag(1001);
            this.amountLabel.node.scale = 1;
            var amountAction = cc.sequence(cc.scaleTo(.1, 1.33).easing(cc.easeIn(2)), cc.scaleTo(.3, 1).easing(cc.easeOut(2)));
            amountAction.setTag(1001);
            this.amountLabel.node.runAction(amountAction);
            this.icon.node.stopActionByTag(1001);
            this.icon.node.scale = 1;
            var iconAction = cc.sequence(cc.scaleTo(.1, 1.33).easing(cc.easeIn(2)), cc.scaleTo(.3, 1).easing(cc.easeOut(2)));
            iconAction.setTag(1001);
            this.icon.node.runAction(iconAction);
          }
        } else {
          this.amountLabel.node.scale = 1;
          this.icon.node.scale = 1;
        }
        this.checkMark.active = amount <= 0;
        this.amountLabel.node.active = amount > 0;
      };
      TargetItem.prototype.showIco = function() {
        this.icon.node.opacity = 255;
        this.checkMark.opacity = 255;
        this.amountLabel.node.opacity = 255;
      };
      TargetItem.prototype.hideIco = function() {
        this.icon.node.opacity = 0;
        this.checkMark.opacity = 0;
        this.amountLabel.node.opacity = 0;
      };
      TargetItem.prototype.showFrame = function(isAni) {
        void 0 === isAni && (isAni = true);
        if (isAni) {
          this.frame.node.opacity = 255;
          this.frame.node.runAction(cc.scaleTo(.2, 1));
          this.checkMark.runAction(cc.sequence(cc.delayTime(.2), cc.fadeTo(.1, 255), null));
          this.amountLabel.node.runAction(cc.sequence(cc.delayTime(.2), cc.fadeTo(.1, 255), null));
        } else {
          this.frame.node.setScale(1);
          this.frame.node.opacity = 255;
          this.checkMark.opacity = 255;
          this.amountLabel.node.opacity = 255;
        }
      };
      TargetItem.prototype.hideFrame = function(isAni) {
        void 0 === isAni && (isAni = true);
        if (isAni) {
          var seqAction = cc.sequence(cc.scaleTo(.2, .5), cc.fadeTo(.1, 0), null);
          this.frame.node.runAction(seqAction);
          this.checkMark.runAction(cc.fadeTo(.1, 0));
          this.amountLabel.node.runAction(cc.fadeTo(.1, 0));
        } else {
          this.frame.node.opacity = 0;
          this.checkMark.opacity = 0;
          this.amountLabel.node.opacity = 0;
        }
      };
      TargetItem.create = function(collectionID, showFarme) {
        void 0 === showFarme && (showFarme = true);
        var res = cc.loader.getRes("match_scene/prefab/userInterface/TargetItem", cc.Prefab);
        if (res) {
          var node = cc.instantiate(res);
          if (node) {
            var component = node.getComponent(TargetItem_1);
            if (component) {
              component.init(collectionID, showFarme);
              return component;
            }
          }
        }
        return null;
      };
      TargetItem.prototype.init = function(collectionID, showFarme) {
        this.frame.node.active = showFarme;
        this.setCollectionID(collectionID);
        this.setAmount(0);
      };
      TargetItem.prototype.onLoad = function() {};
      TargetItem.prototype.start = function() {};
      TargetItem.prototype.onDestroy = function() {
        this.frame = null;
        this.icon = null;
        this.amountLabel = null;
        this.checkMark = null;
      };
      var TargetItem_1;
      __decorate([ property(cc.Sprite) ], TargetItem.prototype, "frame", void 0);
      __decorate([ property(cc.Sprite) ], TargetItem.prototype, "icon", void 0);
      __decorate([ property(cc.Label) ], TargetItem.prototype, "amountLabel", void 0);
      __decorate([ property(cc.Node) ], TargetItem.prototype, "checkMark", void 0);
      TargetItem = TargetItem_1 = __decorate([ ccclass ], TargetItem);
      return TargetItem;
    }(cc.Component);
    exports.default = TargetItem;
    cc._RF.pop();
  }, {
    "../../../component/UISpriteExt": "UISpriteExt",
    "../defines/CollectionID": "CollectionID",
    "../defines/IdentifierManager": "IdentifierManager"
  } ],
  UIButtonExt: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "069c1FU/nxJ6YeuYJ8bTF9J", "UIButtonExt");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var IGame_1 = require("../base/IGame");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var UIButtonExt = function(_super) {
      __extends(UIButtonExt, _super);
      function UIButtonExt() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.btnText = null;
        _this.pressedScale = 1.1;
        _this.transDuration = .1;
        _this.touchSound = true;
        _this.initScale = -1;
        _this.isStopBubbleEvent = false;
        _this.limitTouchTime = 1e3;
        _this.touchEnable = true;
        _this._fontColor = null;
        _this._outLineColor = null;
        _this._touchendCallBackFun = null;
        _this._touchTarget = null;
        _this._lastTouchedTime = 0;
        return _this;
      }
      UIButtonExt.prototype.start = function() {};
      UIButtonExt.prototype.onLoad = function() {
        -1 == this.initScale && (this.initScale = this.node.scale);
        this.setTouchEnable(this.touchEnable);
      };
      UIButtonExt.prototype.onTouchDown = function(event) {
        if (!this.touchEnable || !this.enabledInHierarchy) return;
        var scaleDownAction = cc.scaleTo(this.transDuration, this.pressedScale);
        scaleDownAction.setTag(1001);
        this.node.stopActionByTag(1001);
        this.node.runAction(scaleDownAction);
        this.isStopBubbleEvent && event.stopPropagation();
      };
      UIButtonExt.prototype.onTouchUp = function(event) {
        if (!this.touchEnable || !this.enabledInHierarchy) return;
        if (this._touchendCallBackFun && this._touchTarget) {
          var canTouch = false;
          var curTouchTime = new Date().getTime();
          if (0 == this._lastTouchedTime) {
            canTouch = true;
            this._lastTouchedTime = curTouchTime;
          } else if (Math.abs(this._lastTouchedTime - curTouchTime) > this.limitTouchTime) {
            canTouch = true;
            this._lastTouchedTime = curTouchTime;
          }
          canTouch && this._touchendCallBackFun.call(this._touchTarget, event);
        }
        var scaleUpAction = cc.scaleTo(this.transDuration, this.initScale);
        scaleUpAction.setTag(1002);
        this.node.stopActionByTag(1002);
        this.node.runAction(scaleUpAction);
        this.touchSound && IGame_1.default.playAudio("audio/common/common_button");
      };
      UIButtonExt.prototype.onTouchCancel = function(event) {
        if (!this.touchEnable || !this.enabledInHierarchy) return;
        var scaleUpAction = cc.scaleTo(this.transDuration, this.initScale);
        scaleUpAction.setTag(1002);
        this.node.stopActionByTag(1002);
        this.node.runAction(scaleUpAction);
      };
      UIButtonExt.prototype.setBtnGray = function(isGray) {
        if (isGray) {
          var btnSprite = this.node.getComponent(cc.Sprite);
          btnSprite && btnSprite.setState(1);
          if (this.btnText) {
            null == this._fontColor && (this._fontColor = this.btnText.node.color);
            this.btnText.node.color = cc.Color.WHITE;
            var outLine = this.btnText.getComponent(cc.LabelOutline);
            if (outLine) {
              null == this._outLineColor && (this._outLineColor = outLine.color);
              outLine.color = outLine.color.fromHEX("#333333");
            }
          }
        } else {
          var btnSprite = this.node.getComponent(cc.Sprite);
          btnSprite && btnSprite.setState(0);
          if (this.btnText) {
            this._fontColor && (this.btnText.node.color = this._fontColor);
            if (this._outLineColor) {
              var outLine = this.btnText.getComponent(cc.LabelOutline);
              outLine && (outLine.color = this._outLineColor);
            }
          }
        }
      };
      UIButtonExt.prototype.setTouchEnable = function(enable) {
        this.touchEnable = enable;
        if (this.touchEnable) {
          this.node.on("touchstart", this.onTouchDown, this);
          this.node.on("touchend", this.onTouchUp, this);
          this.node.on("touchcancel", this.onTouchCancel, this);
        } else this.node.targetOff(this);
      };
      UIButtonExt.prototype.setTouchCallback = function(fun, target) {
        this._touchendCallBackFun = fun;
        this._touchTarget = target;
      };
      UIButtonExt.prototype.removeTouchCallBack = function() {
        this._touchendCallBackFun = null;
        this._touchTarget = null;
      };
      UIButtonExt.prototype.clearTouchLimitTime = function() {
        this._lastTouchedTime = 0;
      };
      UIButtonExt.prototype.onDestroy = function() {
        this.node.off("touchstart", this.onTouchDown, this);
        this.node.off("touchend", this.onTouchUp, this);
        this.node.off("touchcancel", this.onTouchCancel, this);
        this.removeTouchCallBack();
      };
      __decorate([ property(cc.Label) ], UIButtonExt.prototype, "btnText", void 0);
      __decorate([ property ], UIButtonExt.prototype, "pressedScale", void 0);
      __decorate([ property ], UIButtonExt.prototype, "transDuration", void 0);
      __decorate([ property ], UIButtonExt.prototype, "touchSound", void 0);
      __decorate([ property ], UIButtonExt.prototype, "initScale", void 0);
      __decorate([ property ], UIButtonExt.prototype, "isStopBubbleEvent", void 0);
      __decorate([ property ], UIButtonExt.prototype, "limitTouchTime", void 0);
      UIButtonExt = __decorate([ ccclass ], UIButtonExt);
      return UIButtonExt;
    }(cc.Component);
    exports.default = UIButtonExt;
    cc._RF.pop();
  }, {
    "../base/IGame": "IGame"
  } ],
  UINodeIdentifier: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "27f1ez202tMP7oxJ80RscXS", "UINodeIdentifier");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var IdentifyNodeManager_1 = require("../extend/identify/nodeIdentify/IdentifyNodeManager");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var UINodeIdentifier = function(_super) {
      __extends(UINodeIdentifier, _super);
      function UINodeIdentifier() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.identifier = "";
        _this._identifier = "";
        return _this;
      }
      UINodeIdentifier.prototype.onLoad = function() {
        "" == this._identifier && this.setIdentifier(this.identifier);
      };
      UINodeIdentifier.prototype.onDestroy = function() {
        this.setIdentifier("");
      };
      UINodeIdentifier.prototype.setIdentifier = function(identifier) {
        IdentifyNodeManager_1.default.getInstance().logout(this._identifier);
        this._identifier = identifier;
        IdentifyNodeManager_1.default.getInstance().regist(this._identifier, this.node);
      };
      UINodeIdentifier.prototype.getIdentifier = function() {
        return this._identifier;
      };
      __decorate([ property ], UINodeIdentifier.prototype, "identifier", void 0);
      UINodeIdentifier = __decorate([ ccclass ], UINodeIdentifier);
      return UINodeIdentifier;
    }(cc.Component);
    exports.default = UINodeIdentifier;
    cc._RF.pop();
  }, {
    "../extend/identify/nodeIdentify/IdentifyNodeManager": "IdentifyNodeManager"
  } ],
  UISceneBase: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "54e8aa70RNE6qCFZ3+HHMOq", "UISceneBase");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var UISceneBase = function(_super) {
      __extends(UISceneBase, _super);
      function UISceneBase() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      UISceneBase.prototype.getWorldAreas = function(type, data) {
        return [];
      };
      UISceneBase = __decorate([ ccclass ], UISceneBase);
      return UISceneBase;
    }(cc.Component);
    exports.default = UISceneBase;
    cc._RF.pop();
  }, {} ],
  UISpriteExt: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "f41c7fUzppLL5BL0ZHlFDVT", "UISpriteExt");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var UISpriteExt = function(_super) {
      __extends(UISpriteExt, _super);
      function UISpriteExt() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this._imageUrl = null;
        _this._curLoadCount = 0;
        _this._spriteSize = null;
        return _this;
      }
      UISpriteExt.prototype.setSpriteSize = function(size) {
        this._spriteSize = size;
      };
      Object.defineProperty(UISpriteExt.prototype, "src", {
        get: function() {
          return this._imageUrl;
        },
        set: function(path) {
          var _this = this;
          var spriteCp = this.getComponent(cc.Sprite);
          spriteCp || (spriteCp = this.addComponent(cc.Sprite));
          this._imageUrl != path && (this.node.active = false);
          this._imageUrl = path;
          this._curLoadCount += 1;
          cc.loader.loadRes(path, cc.SpriteFrame, function(err, spriteFrame) {
            if (err) _this._curLoadCount <= 3 && (_this.src = _this._imageUrl); else {
              if (!_this.isValid) return;
              if (spriteFrame && -1 == _this._imageUrl.indexOf(spriteFrame.name)) return;
              spriteCp.spriteFrame = spriteFrame;
              _this.node.active = true;
              _this._spriteSize && _this.node.setContentSize(_this._spriteSize);
            }
          });
        },
        enumerable: false,
        configurable: true
      });
      UISpriteExt = __decorate([ ccclass ], UISpriteExt);
      return UISpriteExt;
    }(cc.Component);
    exports.default = UISpriteExt;
    cc._RF.pop();
  }, {} ],
  "use_v2.1-2.2.1_cc.Toggle_event": [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "93ae8ftfbtL+6CDmvxv84R6", "use_v2.1-2.2.1_cc.Toggle_event");
    "use strict";
    cc.Toggle && (cc.Toggle._triggerEventInScript_isChecked = true);
    cc._RF.pop();
  }, {} ]
}, {}, [ "use_v2.1-2.2.1_cc.Toggle_event", "IGame", "Pair", "RectangleClipper", "UIButtonExt", "UINodeIdentifier", "UISceneBase", "UISpriteExt", "CFGTripleLevel", "CFGTripleLevelGrass", "CFGTripleLevelOrder", "CFGTripleLevelPath", "CFGTripleLevelPopsicles", "CFGTripleMap", "CFGTripleMapTileset", "EMatchType", "EViewZIndex", "GameConfig", "GameCurrencyType", "GearID", "CurveToAction", "OrbitTrack", "AudioManager", "BehaviourDefines", "IdentifyNodeManager", "GameMath", "MathUtils", "StringUtil", "TMXJsonPhraser", "LoadingScene", "GameSceneBase", "MatchScene", "GridCommand", "GridCommandPair", "Heap", "CollectionGroupID", "CollectionID", "EntityGroupID", "EntityID", "IdentifierManager", "ItemInfo", "ItemInfoManager", "KindID", "PowerID", "TMXConfigInfoKeys", "EntityBase", "EntityPrefabNodePool", "CellBase", "CellConveyer", "CellFactory", "CellMovablePlate", "CellNormal", "FenceBase", "FenceFactory", "FencePos", "FenceVine", "FloorBase", "FloorChanger", "FloorDoubler", "FloorFactory", "FloorGrass", "FloorIce", "FloorRoad", "FlyerAnimation", "FlyerBase", "FlyerBomb", "FlyerBullet", "FlyerCannon", "FlyerChargeEntity", "FlyerCollectedEntity", "FlyerCollectedSupply", "FlyerComboWord", "FlyerFireworksMissile", "FlyerHammer", "FlyerLaser", "FlyerMissile", "FlyerMoreStep", "FlyerMower", "FlyerNuclear", "FlyerPopsicleBomb", "FlyerPopsicleLine", "FlyerScore", "FlyerScoreLabel", "FrameBase", "FrameNormal", "ItemBase", "ItemFactory", "ItemDogPaw", "ItemNormal", "ItemBombBase", "ItemBombButterfly", "ItemBombColumn", "ItemBombCross", "ItemBombRainbow", "ItemBombRange", "ItemBombRow", "ItemBalloon", "ItemBlock", "ItemBone", "ItemChestnut", "ItemDogHouse", "ItemDoughnut", "ItemFireWormBottle", "ItemFireworks", "ItemFruitCake", "ItemHoneyComb", "ItemJamBottle", "ItemMagicCrystal", "ItemMower", "ItemPuppy", "ItemStatue", "ItemWatermelon", "ItemStateChangeColor", "ItemStateDrop", "ItemStateGenerate", "ItemStateReplace", "ItemStateShuffle", "ItemStateSwap", "MarkerBase", "MarkerNormal", "ParasiteBase", "ParasiteFactory", "ParasiteGiftBox", "ParasiteHoney", "ParasiteIceCube", "ParasiteShackle", "PopsicleBase", "PopsicleFactory", "PopsicleLine", "PopsicleNormal", "PopsicleRange", "RugBase", "RugFactory", "RugJam", "EntityStateBase", "EntityStateMachine", "EntityStateWait", "EntityEventBase", "EntityEventChanged", "StateBase", "StateMachineBase", "GridBase", "AvailableSwapInfo", "GridStateBase", "GridStateMachine", "GridStateAppear", "GridStateAutoActivateBomb", "GridStateBousTime", "GridStateChanger", "GridStateCollection", "GridStateComboWord", "GridStateComplete", "GridStateCompleteBanner", "GridStateCongratulation", "GridStateConveyer", "GridStateCreate", "GridStateCrossBomb", "GridStateDisappear", "GridStateDrop", "GridStateFail", "GridStateFailSummary", "GridStateForceClean", "GridStateForceSwap", "GridStateHoney", "GridStateLaunchGears", "GridStateLaunchResidentGear", "GridStateMagicCrystal", "GridStateMatch", "GridStateNoMoreStep", "GridStateNull", "GridStatePrepare", "GridStateShuffle", "GridStateStalemate", "GridStateSwapNeighbour", "GameStatistics", "GameTargetBase", "GameTargetSingle", "CollectedTrainSupplyBar", "CollectedTrainSupplyItem", "CompleteBanner", "GameNoMoreStepPanel", "GameCongratulationPanel", "GameEndItem", "GameOverPanel", "GameResultBasePanel", "StarAndScoreFrame", "GameStalematePanel", "GearBar", "GearItem", "LevelSelectorPanel", "NoMoreStepBasePanel", "PowerupItem", "ScoreBar", "ShinningStar", "StepBar", "TargetBanner", "TargetBar", "TargetItem" ]);